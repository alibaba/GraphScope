<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>graphscope blog</description>
    <link>https://graphscope.io/blog/</link>
    <atom:link href="https://graphscope.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 31 May 2021 15:01:12 +0800</pubDate>
    <lastBuildDate>Mon, 31 May 2021 15:01:12 +0800</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    <item>
<title>Categories, Languages, and Systems of Graph Computing</title>
<description><p><img src="/blog/assets/images/2023-05-25-graph-computing.png" alt="graph-computing" /> In this post, we will introduce the categories, languages, and systems of graph computing.</p> <h3 id="what-is-graph-computing">What is Graph Computing</h3> <p>In real life, many types of data can be modeled as a graph, which is an abstract structure. This efficient and compact data format can represent rich information such as topology, attributes, and timing. The goal of graph computing is to mine valuable knowledge or patterns from the graph structure, such as frequent patterns and causal relationships. With the advent of the information age, there is an explosive growth in data volume, which has created a demand for efficient processing of large-scale graph data. Graph computing has become a hot topic in both industry and academia, leading to the development of various graph computing systems and optimization research.</p> <p>Due to complex business scenarios, there are various types of graph computing. Currently, there are three main categories of graph computing: graph interactive queries, graph analysis, and graph learning.</p> <h3 id="graph-interactive-queries">Graph Interactive Queries</h3> <p>The graph data is typically vast, and graph interactive queries often focus on a relatively limited number of vertices and edges that satisfy specific criteria. These vertices and edges create specific paths or subgraph patterns, as illustrated in the image below. For example, finding the optimal route from one location to another or logistics path information are typical path query scenarios. Subgraph patterns are another form of graph query where a particular pattern is represented with a subgraph, and matching queries are performed on this subgraph within the entire graph.</p> <p><img src="/blog/assets/images/2023-05-25-graph-interactive-queries.png" alt="graph-interactive-queries" /></p> <center> Figure 1: Subgraph query (left) and path query (right) </center> <p><br /></p> <p>The essence of a path query is graph traversal, which generally involves the following steps: first, set specific vertices in the graph to be queried; then, each vertex to be queried finds the target vertex set via its connected edges that meet the criteria, checks whether the target vertices meet the query result, and if so, adds the target to the result set; otherwise, sets the target vertex as a new vertex to be queried. This process is repeated until there are no more vertices to be queried. In summary, during the entire graph query process, the graph is traversed step by step according to the user-specified criteria, and the desired results are obtained in the end.</p> <p>Another type of graph query is the subgraph query, which is based on the theoretical foundation of subgraph isomorphism. Users provide the subgraph to be queried (vertices, edges, and the criteria they need to satisfy), and then search for all results that meet the criteria on the data graph. Each result is a subgraph in the data graph that is isomorphic to the query graph, and the vertices and edges mapped by the subgraph satisfy the corresponding criteria on the query graph. In summary, the aim is to search for a specific structure that the user cares about in the large graph.</p> <p>The two most common languages for graph queries are <a href="https://tinkerpop.apache.org/docs/current/reference/">Gremlin</a> and <a href="https://dl.acm.org/doi/abs/10.1145/3183713.3190657">Cypher</a>. Gremlin is based on Groovy, but there are many language variations available for developers to write queries using native programming languages such as Java and Python. It incorporates both imperative and declarative semantics, making it easy to express graph traversal logic. As a result, it has been adopted by numerous graph database systems, including JanusGraph, InfiniteGraph, Cosmos DB, DataStax Enterprise (5.0+), and Amazon Neptune. On the other hand, Cypher is a graph query language that employs pattern matching based on description. Due to its similarity to SQL, it has the advantage of simple syntax and high flexibility. This feature has led to its adoption by systems such as neo4j, RedisGraph, and AgensGraph.</p> <p>For instance, if we consider a graph with nodes representing people and locations, the query statements for finding people who live with Mike in both Gremlin and Cypher are shown below.</p> <p>Gremlin:</p> <div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">g</span><span class="o">.</span><span class="na">V</span><span class="o">().</span><span class="na">has</span><span class="o">(</span><span class="s1">'name'</span><span class="o">,</span> <span class="s1">'mike'</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s1">'a'</span><span class="o">)</span> <span class="o">.</span><span class="na">out</span><span class="o">(</span><span class="s1">'lives'</span><span class="o">).</span><span class="na">in</span><span class="o">(</span><span class="s1">'lives'</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">neq</span><span class="o">(</span><span class="s1">'a'</span><span class="o">))</span> <span class="o">.</span><span class="na">values</span><span class="o">(</span><span class="s1">'name'</span><span class="o">)</span> </code></pre></div></div> <p>Cypher:</p> <div class="language-cypher highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">MATCH</span><span class="w"> </span><span class="ss">(</span><span class="py">src:</span><span class="n">person</span><span class="ss">{</span><span class="py">name:</span><span class="s2">"mike"</span><span class="ss">})</span><span class="o">-</span><span class="ss">[</span><span class="nc">:lives</span><span class="ss">]</span><span class="o">-&gt;</span><span class="ss">()</span><span class="o">&lt;-</span><span class="ss">[</span><span class="nc">:lives</span><span class="ss">]</span><span class="o">-</span><span class="ss">(</span><span class="py">dst:</span><span class="n">person</span><span class="ss">)</span> <span class="k">RETURN</span> <span class="n">dst.name</span> </code></pre></div></div> <p>When it comes to processing data, graph querying has distinct computational features. Its characteristics of massive data and poor locality require the system to optimize various aspects such as distributed task partitioning, load balancing, and communication scheduling. The high computational complexity and low latency requirements of users make the system’s concurrency particularly crucial. The presence of super nodes, causing memory inflation, and limited memory in interactive environments pose significant challenges to memory management in the system.</p> <h3 id="graph-analysis">Graph Analysis</h3> <p>Graph querying involves accessing a limited number of vertices or edges that satisfy specific conditions and returning results in real-time. For example, walking two steps from a particular vertex based on specific conditions and returning the paths that meet the criteria. In contrast, graph analysis involves more complex calculations, focusing on analyzing and mining the overall characteristics of the entire graph or the associated information between entities. This includes clustering all vertices in the graph according to certain rules.</p> <p>Graph theory is a traditional branch of mathematics that has been studied for hundreds of years, resulting in numerous algorithms related to graph analysis. These range from classical algorithms like shortest path and connected component to practical problems in artificial intelligence such as community discovery, collaborative filtering, and pattern mining. As a result, graph analysis has been applied in an increasing number of scenarios, and large-scale graph analysis has become a research hotspot. According to GraphX, common categories of graph analysis algorithms include:</p> <ul> <li>Simple graph analysis algorithms <ul> <li>PageRank</li> <li>Shortest path</li> <li>Graph coloring</li> <li>Connected component</li> </ul> </li> <li>Community discovery algorithms <ul> <li>Triangle counting</li> <li>K-core decomposition</li> <li>K-Truss</li> </ul> </li> <li>Pattern matching algorithms <ul> <li>Graph simulation</li> <li>(Sub)graph isomorphism</li> <li>Keyword search</li> </ul> </li> <li>Collaborative filtering algorithms <ul> <li>Alternating least squares (ALS)</li> <li>Stochastic gradient descent (SGD)</li> <li>Tensor Factorization</li> </ul> </li> <li>Structural prediction algorithms <ul> <li>Loopy belief propagation</li> <li>Max-product linear programs</li> <li>Gibbs sampling</li> </ul> </li> </ul> <p>In 2010, Google publicly released the <a href="https://dl.acm.org/doi/abs/10.1145/1807167.1807184">Pregel</a> system, marking the first distributed system specifically designed for analyzing large-scale graph data. The system was based on a vertex-centric programming model and sparked a series of subsequent academic research and open-source systems. The programming model used a local, vertex-oriented computing approach, encouraging users to “think like a vertex”. This model has natural scalability and parallelism, making it widely used. Systems that follow this model optimize it from various aspects such as programming interfaces, task partitioning, and execution mechanisms, such as the classic programming model GAS of <a href="https://www.usenix.org/conference/osdi12/technical-sessions/presentation/gonzalez">PowerGraph</a>.</p> <p>Another type of system adopts more advanced programming models, such as <a href="https://dl.acm.org/doi/abs/10.14778/2732232.2732238">Giraph++</a>, which first proposed using subgraphs as the basic unit of computation, achieving higher execution efficiency. The PIE model proposed by <a href="https://dl.acm.org/doi/abs/10.14778/3137765.3137801">GRAPE</a> can automatically parallelize single-machine graph algorithms, greatly reducing the programming difficulty for users while achieving high performance.</p> <p>Designing graph analysis systems is a challenging process due to the complexity of graph data. Considerations such as how to effectively utilize underlying hardware resources, how to partition and maintain distributed consistency, how to implement more efficient execution modes and task scheduling strategies, how to develop advanced computing and programming models, and how to create better system fault tolerance mechanisms must all be taken into account.</p> <h3 id="graph-learning">Graph Learning</h3> <p>Graph learning, also known as graph-based machine learning, aims to integrate the structural information of graphs into machine learning models. With the widespread application of artificial intelligence technologies, represented by deep learning, and the stronger expressive power of graph structures, graph learning has become a hot topic and has led to breakthrough progress in causality and interpretability. Graph learning has been applied in various fields, such as search and recommendation, advertising, financial risk control, intelligent transportation, medical care, and cities. However, graph learning also faces new technical challenges, such as large-scale data, heterogeneity of vertices and edges, multimodal attribute features, and dynamic changes in structure or attributes over time.</p> <p>The traditional approach to graph learning is graph embedding. Graph embedding represents each vertex in the graph as a low-dimensional vector, retaining as much structural and content information of the graph as possible. This representation vector can be used as a feature for subsequent learning tasks such as link prediction and vertex classification. The figure below shows a classic example, where the left side is the original graph structure, and the right side is a mapping scheme obtained by representation learning. The mapping scheme transforms each vertex in graph A into a point in a two-dimensional coordinate system, that is, a two-dimensional vector. In the coordinate space obtained by the mapping, the closely connected vertices in the original graph (i.e., vertices of the same color) remain close to each other.</p> <p><img src="/blog/assets/images/2023-05-25-graph-embedding.png" alt="graph-embedding" /></p> <center> Figure 2: Graph embedding (https://dl.acm.org/doi/abs/10.1145/2623330.2623732) </center> <p><br /></p> <p>Significant amount of research has been devoted to graph embedding, leading to various solutions for different types of data, such as isomorphic graphs, heterogeneous graphs, attribute graphs, and dynamic graphs. Classic algorithms such as <a href="https://dl.acm.org/doi/abs/10.1145/2623330.2623732">DeepWalk</a>, <a href="https://dl.acm.org/doi/abs/10.1145/2736277.2741093">LINE</a>, and <a href="https://dl.acm.org/doi/abs/10.1145/2939672.2939754">Node2Vec</a> propose different approaches to generate data based on random walks, followed by parameter optimization through training to generate a probabilistic model.</p> <p>Another crucial type of graph learning is graph neural networks (GNNs). Traditional neural networks are limited to solving problems in Euclidean space, where data is complete, neat, and regular. For example, in a photo, each pixel is fixedly adjacent to eight vertices, enabling each vertex to correspond to a vector of the same length containing its own information and neighbor information. However, GNN extends classic neural network models like Recurrent Neural Networks (RNNs) and Convolutional Neural Networks (CNNs) to graphs, allowing it to solve problems in non-Euclidean space. This is because the graph structure is irregular, where the number of neighbors of each vertex is different, leading to local dimensions of variable length. Unlike graph embedding, where the focus is on learning the embedding of each vertex, the primary purpose of GNN is to learn the aggregation function, allowing all vertices to calculate their embedding using the same function based on local information. Even if the graph structure changes or a new graph is encountered, meaningful results can still be calculated using the original function. Several classic algorithms for GNN exist, and readers can refer to <a href="https://www.sciencedirect.com/science/article/pii/S2666651021000012">relevant literature</a> to learn more.</p> <p>In summary, both graph embedding and GNNs are essential types of graph learning that play different roles in integrating the structural information of graphs into machine learning models. They have made significant contributions to causality, interpretability, and have been applied in various fields. However, as graph datasets become more complex and diverse, it is crucial to continue developing new techniques and algorithms to address these challenges.</p> <h3 id="conclusion">Conclusion</h3> <p>Due to the strong dependency, poor locality, irregular distribution, and diverse structures of graph data, traditional parallel systems for big data are difficult to apply. In addition, different types of computational features and paradigms also bring diversified requirements for the design of graph computing systems.</p> <p>An ideal graph computing system should be versatile, high-performance, and easy to use. In terms of versatility, we hope that it supports multiple types of computations such as graph interactive queries, graph analysis, and graph learning, and compatible with language standards and the industry ecology. In terms of performance, it should support low-latency interactive queries, have high-performance graph analysis capabilities, provide large-scale graph storage, and achieve high scalability. In terms of ease of use, it should provide a unified programming model, highly abstracted, simple and flexible language, and implement simple system deployment, easy cluster management, and provide a visual interface.</p> <p>To meet the various challenges faced by graph computing systems, meet the needs of real-world application scenarios, and provide one-stop efficient solutions, is the original intention of the GraphScope design. The GraphScope system proposes multiple innovative technologies and is continuously iterating rapidly. It has proved to achieve significant new business value in multiple key internet fields such as risk control, e-commerce recommendation, advertising, network security, knowledge graph, and is committed to empowering more important application scenarios.</p> </description>
<pubDate>Thu, 25 May 2023 03:10:42 +0000</pubDate>
<link>https://graphscope.io/blog/tech/2023/05/25/Categories-Languages-and-Systems-of-Graph-Computing.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/tech/2023/05/25/Categories-Languages-and-Systems-of-Graph-Computing.html</guid>
<category>Tech</category>
</item>
    <item>
<title>Graphs and Graph Applications</title>
<description><p><img src="/blog/assets/images/graph-concept.jpg" alt="graph-concept" /> In this post, we will introduce basic concepts of graphs, and some typical applications of graph algorithms.</p> <h3 id="what-is-graph">What is Graph</h3> <p>All things in the universe, from stars and planets as large as they are, to atoms and molecules as small as they are, exist in connections with each other. Graph is the most natural and suitable data structure for describing the relationships between these individual entities. A graph consists of a series of vertices (i.e., individuals) and edges (i.e., relationships between individuals), and both vertices and edges can be accompanied by some description of their own features.</p> <p><img src="/blog/assets/images/what-is-graph.jpg" alt="what-is-graph.jpg" /></p> <center> Figure 1: Graph definition</center> <p><br /></p> <p>The graph data commonly seen in our daily life includes social networks, transportation networks, and biological structure. For example, in social networks, each user can be regarded as a vertex in the graph, and the interactive relationship between users can be regarded as an edge. For instance, WeChat’s social network can be seen as a graph composed of vertices (individuals, official accounts) and edges (follow, like). For a city’s transportation network, we can regard each subway station as a vertex and the lines connecting various subway stations as edges. In the biological structure, each protein can be regarded as a vertex, and the interaction between proteins can be regarded as edges.</p> <p><img src="/blog/assets/images/social-networks.png" alt="social-networks.png" /></p> <center> Figure 2: Social networks (https://medium.com/analytics-vidhya/social-network-analytics-f082f4e21b16)</center> <p><br /></p> <p><img src="/blog/assets/images/transportation-networks.jpeg" alt="transportation-networks.jpeg" /></p> <center> Figure 3: Transportation networks（https://studentwork.prattsi.org</center> <p><br /></p> <p><img src="/blog/assets/images/biological-structure.png" alt="biological-structure.png" /></p> <center> Figure 4: Biological structure (https://www.biorxiv.org/content/10.1101/2020.08.11.246041v1.full</center> <p><br /></p> <h3 id="algorithms-and-applications-of-graph-computation">Algorithms and Applications of Graph Computation</h3> <p>Broadly speaking, all analytical calculations based on graph data belong to graph computation, making its application areas very extensive. Considering that graph data can describe the relationships between individual entities, graph computation is particularly suitable for analyzing and computing big data related to correlation relationships. The core of graph computation lies in graph algorithms. In the following, we will classify and introduce some commonly used graph algorithms through a few simple examples.</p> <h4 id="graph-analysis-algorithms">Graph Analysis Algorithms</h4> <p>Graph analysis algorithms analyze and mine the overall characteristics of the whole graph or the local characteristics of partial graph structures by iteratively traversing vertices or edges in graph data. Let’s take path planning as an example to illustrate graph analysis algorithms. Suppose you ordered takeout from a restaurant located at address B while you are at home at address A. How does the delivery man find the optimal delivery route from B to A and deliver the takeout to you as quickly as possible? If we regard every address in the city as a vertex, the road connecting two addresses as an edge, and the length of the road as the feature of the edge, we can transform this problem into finding the shortest path from B to A. To solve this problem, we can use the classic Dijkstra algorithm.</p> <p><img src="/blog/assets/images/sssp.jpg" alt="sssp.jpg" /></p> <center> Figure 5: The shortest path algorithm</center> <p><br /></p> <p>In addition to the shortest path algorithm, commonly used graph analysis algorithms also include PageRank (analyzing the importance of vertices in the graph), Breadth-First Search (BFS) (traversing vertices in the graph according to certain rules), and Connected Components (calculating sets of vertices connected to each other in the graph). As shown in the above examples, graph analysis algorithms are based on graph theory and use relationships between vertices to infer the overall or local structural characteristics of complex graph data. We can use these algorithms to discover hidden information and solve practical business problems. For example, search engines can use the PageRank algorithm to rank the weight of web pages and show the most important web pages to users first.</p> <h4 id="community-detection-algorithms">Community Detection Algorithms</h4> <p>“Community” phenomena often exist in graph data, with each community consisting of a group of vertices. For a community, the relationships (edges) between internal vertices are far more than those between external vertices of the community. Community detection algorithms help to discover group behaviors or preferences within communities, find nested relationships, and are often applied to the visualization of graph data.</p> <p>Let’s take the analysis of protein function as an example to introduce community detection algorithms. We can regard each protein as a vertex in the graph, and the interaction between proteins as edges, thus forming a protein interaction graph as shown in the figure below. In biology, proteins need to work closely together to complete a specific physiological function. Through community analysis algorithms, we can obtain several communities (proteins in different communities have different colors), and each community of proteins can be considered to cooperate with each other to complete a specific function.</p> <p><img src="/blog/assets/images/protein-function.png" alt="protein-function.png" /></p> <center> Figure 6: Community detection algorithm for protein function analysis (https://www.visual-computing.org/2016/01/18/group-structures-graphs/diss_cv01/)</center> <p><br /></p> <h4 id="pattern-matching-algorithms">Pattern Matching Algorithms</h4> <p>Another field in which graph computing can demonstrate its capabilities is pattern matching algorithms. Graph pattern matching aims to find a series of subgraph structures that meet the given pattern, which has been widely used in various business scenarios. Taking financial transactions as an example, the flow of funds between accounts makes graph data a suitable data structure for representing financial transaction data. In the financial industry, one important type of anomalous transaction that needs to be detected is credit card cash-out, where the funds from a credit card flow through one or more intermediate transactions before returning to the account holder’s account. As shown in the figure below, if we represent the transaction relationship between accounts as a graph structure, this problem can be transformed into finding the “cycle” (starting from a vertex and following the edges can return to this vertex) in the graph.</p> <p><img src="/blog/assets/images/fraud-detection.jpg" alt="fraud-detection.jpg" /></p> <center> Figure 7: Fraud detection using pattern matching algorithms</center> <p><br /></p> <p>According to the different structural patterns of the queries, pattern matching algorithms can be divided into the following categories: vertex queries (such as reachability queries, neighbor node queries, etc.), path queries (such as a path satisfying specific conditions), and subgraph structure queries (such as subgraph isomorphism). Pattern matching algorithms are widely used, apart from the financial transaction field, they also play an important role in anomaly event detection in social media and hacker activity detection in computer networks.</p> <h4 id="recommendation-algorithms">Recommendation Algorithms</h4> <p>There is significant commercial value in using social networks to recommend products that users are most interested in. Currently, collaborative filtering algorithms are the most widely used algorithm in recommendation systems, and graph computing can also enhance collaborative filtering algorithms. For example, if two users are friends and live in the same location, and one user visits a restaurant and likes it, the recommendation algorithm will assume that the other user is also likely to be interested in this restaurant and push the information of the restaurant to her. By constructing a graph structure as shown in the figure below, we can naturally solve these problems on the graph.</p> <p><img src="/blog/assets/images/rec-alog.jpg" alt="rec-algo.jpg" /></p> <center> Figure 8: Recommendation algorithms based on graphs</center> <p><br /></p> <h4 id="structure-prediction-algorithms">Structure Prediction Algorithms</h4> <p>Due to the existence of noise in graph data, there are often partial errors in the vertices and edges of the graph, which requires the use of graph structure prediction algorithms to correct the graph data. As shown in the figure below, in a social network, users A and B have many mutual friends, but there is no edge between A and B. Graph structure prediction algorithms often assume that two people with many mutual friends are likely to be friends, so they believe that there should be an edge between A and B.</p> <p><img src="/blog/assets/images/link-prediction.jpg" alt="link-prediction.jpg" /></p> <center> Figure 9: Link prediction based on graphs</center> <p><br /></p> <p>Traditional graph structure prediction algorithms usually use static indicators such as the number of mutual friends, Katz centrality, and Adamic-Adar to correct the graph structure. In recent years, with the rapid development of deep learning technology, graph neural networks have become another popular class of graph structure prediction algorithms. Graph neural networks use neural networks to automatically mine features that are closely related to graph structure prediction, which greatly reduces the degree of human involvement and achieves better results compared to traditional methods.</p> <h3 id="summary">Summary</h3> <p>The core of graph computing is how to model data as a graph structure and how to transform the solution of a problem into a computational problem on the graph structure. When the problem involves relational analysis, graph computing can often naturally represent the solution process as a series of operations and computations on the graph structure. However, the problems that graph computing needs to solve are diverse, and it is difficult to use one set of computation models to solve all problems. We will introduce in detail the classification of graph computing, as well as the characteristics and key technologies of each type of graph computing in later articles.</p> </description>
<pubDate>Mon, 22 May 2023 03:10:42 +0000</pubDate>
<link>https://graphscope.io/blog/tech/2023/05/22/Graphs-and-Graph-Applications.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/tech/2023/05/22/Graphs-and-Graph-Applications.html</guid>
<category>Tech</category>
</item>
    <item>
<title>Release Notes: v0.17.0</title>
<description><p><img src="/blog/assets/images/release_note_t.png" alt="release-note" /> We are glad to announce a number of new features and improvements to GraphScope, alongside the GraphScope 0.17 release. The updates include new releases for Spark-GraphX support, backend engine enhancement, and frontend APIs. Currently, <code class="language-plaintext highlighter-rouge">GraphX Pregel</code> algorithms can be seamlessly executed on GraphScope. A lot of new features have also been officially brought into the interactive engine (GIE), including the syntactic sugar of path expansion and expression, the Gremlin steps of <code class="language-plaintext highlighter-rouge">id()</code>, <code class="language-plaintext highlighter-rouge">label()</code>, <code class="language-plaintext highlighter-rouge">coin()</code> and <code class="language-plaintext highlighter-rouge">otherV()</code>, and the profiling and benchmarking tools for LDBC BI queries.</p> <p>We highlight the following improvements included in this release:</p> <ol> <li>Spark-GraphX support for GAE: <ul> <li>Support to convert GraphX graph to GraphScope Fragment;</li> <li>Support to wrap GraphScope Fragment as GraphX Graph;</li> <li>Support to run GraphX Pregel algorithms on GAE.</li> </ul> </li> <li>New language features and enhancement for GIE: <ul> <li>The syntactic sugar of path expansion. Now user can write <code class="language-plaintext highlighter-rouge">out[in|both]('x..y', 'KNOWS')</code> to support path expansion of at least <code class="language-plaintext highlighter-rouge">x</code> (included) times and at most <code class="language-plaintext highlighter-rouge">y</code> (excluded) times from a certain node. Meanwhile, <code class="language-plaintext highlighter-rouge">with()</code> step can be followed to configure the path expansion.</li> <li>The syntactic sugar of expression, introduced by <code class="language-plaintext highlighter-rouge">expr()</code>, can be used along with the <code class="language-plaintext highlighter-rouge">where()</code>-step to enable filtering expression. For example, <code class="language-plaintext highlighter-rouge">.where(expr("@.name == \"John\""))</code> helps filter out the current entry that has the name of “John”. We have updated the <a href="https://graphscope.io/docs/interactive_engine.html">README doc</a> for some instructions.</li> <li>Provide LDBC benchmarking for BI queries.</li> </ul> </li> <li>Enhancement and dependency refinement of Groot to reduce the size of fat-jar.</li> </ol> <p>For more detailed improvements that have been made in this release, please refer to the complete <a href="https://github.com/alibaba/GraphScope/releases/tag/v0.17.0">changelog</a>.</p> </description>
<pubDate>Mon, 26 Sep 2022 03:33:20 +0000</pubDate>
<link>https://graphscope.io/blog/releasenotes/2022/09/26/release-notes-0.17.0.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2022/09/26/release-notes-0.17.0.html</guid>
<category>ReleaseNotes</category>
</item>
    <item>
<title>Release Notes: v0.16.0</title>
<description><p><img src="/blog/assets/images/release_note_t.png" alt="release-note" /> We are bringing a number of improvements to GraphScope, alongside the GraphScope 0.16.0 release. This release introduces many new features on backend engines and system stability. We completely remove a legacy Graph Interactive Engine (GIE), while officially replacing it with the latest version based on an intermediate representation (IR) layer. The Graph Learning Engine (GLE) now supports real-time sampling on dynamic graphs. In addition, the Jave SDK of Graph Analytics Engine (GAE) can work on MacOS. Meanwhile, we start to release a nightly version every day, and you can try it with <code class="language-plaintext highlighter-rouge">pip3 install graphscope --pre</code>.</p> <p>We highlight the following improvements included in this release:</p> <ol> <li>Enhancements of the GIE GAIA-IR engine: <ul> <li>Completely replacing the legacy GIE engine with the latest version based on IR layer;</li> <li>Optimizing the logic of lazily fetching properties from the graph store, and implementing a new CSR-based storage for experiment purpose;</li> <li>New language features including more grouping functions, more options for group/dedup/orderby keys, etc.</li> </ul> </li> <li>Dynamic-Graph-Service (DGS) in GLE: <ul> <li>DGS is an online inference service, and it supports real-time graph sampling for GNN algorithms on dynamic graphs with streaming graph updates;</li> <li>It provides a performance guarantee of sampling P99 latency in 20ms on large-scale dynamic graphs.</li> </ul> </li> <li>Other enhancements: <ul> <li>Enabling Jave SDK of Graph Analytics Engine (GAE) on MacOS;</li> <li>A series of enhancements on the persistent graph storage <code class="language-plaintext highlighter-rouge">Groot</code>.</li> </ul> </li> </ol> <p>For more detailed improvements that have been made in this release, please refer to the complete <a href="https://github.com/alibaba/GraphScope/releases/tag/v0.16.0">changelog</a>.</p> </description>
<pubDate>Tue, 09 Aug 2022 03:33:20 +0000</pubDate>
<link>https://graphscope.io/blog/releasenotes/2022/08/09/release-notes-0.16.0.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2022/08/09/release-notes-0.16.0.html</guid>
<category>ReleaseNotes</category>
</item>
    <item>
<title>Release Notes: v0.14.0</title>
<description><p><img src="/blog/assets/images/release_note_t.png" alt="release-note" /> We are delighted to present the release of GraphScope 0.14.0. This release is composed of many updates on backend engines and system stability. The new Graph Interactive Engine (GIE), <code class="language-plaintext highlighter-rouge">GAIA-IR</code>, has supported more types of operators and graph schemas for diverse graph queries. Meanwhile, the persistent storage of GraphScope, <code class="language-plaintext highlighter-rouge">Groot</code>, is further enhanced with a series of new functions. In addition, we continuously work on improving the performance of GraphScope, and developer usability.</p> <p>We highlight the following improvements included in this release:</p> <ol> <li>New supported operators in GAIA-IR: <ul> <li>Support the <code class="language-plaintext highlighter-rouge">valueMap</code>operator in Gremlin;</li> <li>Enable the <code class="language-plaintext highlighter-rouge">String</code> type as vertex ID type in graph schemas;</li> <li>Support to directly access a vertex via primary key.</li> </ul> </li> <li>More functions on persistent storage of GraphScope: <ul> <li>Support to load dataset from Aliyun OSS;</li> <li>Enable local GC for the <code class="language-plaintext highlighter-rouge">Groot</code> storage.</li> </ul> </li> <li>Bug fixes and other enhancements: <ul> <li>Upgrade the NetworkX version from 2.6 to 2.8;</li> <li>A new algorithm named <a href="[https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.centrality.voterank.html?highlight=voterank#networkx.algorithms.centrality.voterank](https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.centrality.voterank.html?highlight=voterank#networkx.algorithms.centrality.voterank)">VoteRank</a> has been supported in the graph analytics engine;</li> <li>Fix some bugs when installing dependencies for GraphScope.</li> </ul> </li> </ol> <p>For more detailed improvements that have been made in this release, please refer to the complete <a href="https://github.com/alibaba/GraphScope/releases/tag/v0.14.0">changelog</a>.</p> </description>
<pubDate>Thu, 09 Jun 2022 03:33:20 +0000</pubDate>
<link>https://graphscope.io/blog/releasenotes/2022/06/09/release-notes-0.14.0.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2022/06/09/release-notes-0.14.0.html</guid>
<category>ReleaseNotes</category>
</item>
<item>
    <item>
<title>Release Notes: v0.13.0</title>
<description><p><img src="/blog/assets/images/release_note_t.png" alt="release-note" /> We are delighted to announce the release of GraphScope v0.13.0. This release is focused on providing a JupyterLab extension for GraphScope to make your graph computation workflows better. In addition, we continuously work on improving performance of GraphScope, and developer usability.</p> <p>We highlight the following improvements included in this release:</p> <ol> <li>Introducing a JupyterLab extension for GraphScope. Currently, it supports the following functions: <ul> <li>Providing a graphical user interface for monitoring status of some variables (e.g., <code class="language-plaintext highlighter-rouge">session</code> and <code class="language-plaintext highlighter-rouge">graph</code>) in your GraphScope program;</li> <li>Supporting to define data schema and load graph data in an interactive way;</li> <li>The extension has been integrated into our <a href="https://try.graphscope.app/">GraphScope Playground</a>.</li> </ul> </li> <li>Performance improvement: <ul> <li>Adding data caching mechanism in the <code class="language-plaintext highlighter-rouge">NetworkX</code> module to improve the performance;</li> <li>Optimizing the performance of converting <code class="language-plaintext highlighter-rouge">arrow_fragment</code> to <code class="language-plaintext highlighter-rouge">dynamic_fragment</code> with multi-thread.</li> </ul> </li> <li>Bug fixes and other enhancements: <ul> <li>Fixing compilation failure in <code class="language-plaintext highlighter-rouge">cdlp</code> with <code class="language-plaintext highlighter-rouge">arrow_flatten_fragment</code>;</li> <li>Supporting primary key index in <code class="language-plaintext highlighter-rouge">Groot</code>;</li> <li>Adding <a href="https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.cluster.average_clustering.html">average clustering</a> as built-in applications.</li> </ul> </li> </ol> <p>For more detailed improvements that have been made in this release, please refer to the complete <a href="https://github.com/alibaba/GraphScope/releases/tag/v0.13.0">changelog</a>.</p> </description>
<pubDate>Sat, 07 May 2022 03:33:20 +0000</pubDate>
<link>https://graphscope.io/blog/releasenotes/2022/05/07/release-notes-0.13.0.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2022/05/07/release-notes-0.13.0.html</guid>
<category>ReleaseNotes</category>
    </item>	  
    <item>
<title>Release Notes: v0.12.0</title>
<description><p><img src="/blog/assets/images/release_note_t.png" alt="release-note" /> The GraphScope v0.12.0 release is a major update on many aspects of the project including backend engines, APIs, and system stability. It introduces an intermediate representation (IR) layer into the graph interactive engine (GIE) named GAIA, to decouple query languages from query execution engines. Meanwhile, this release supports Giraph APIs to allow Giraph apps directly running on the Graph Analytics Engine (GAE) of GraphScope.</p> <p>We highlight the following improvements included in this release:</p> <ol> <li>Introduce an IR layer into GAIA: <ul> <li>A completely redesigned IR layer to decouple the query language dependency, and further for query optimizations.</li> <li>Define the supported Gremlin’s grammar via Antlr.</li> <li>Support <code class="language-plaintext highlighter-rouge">match()</code>-step in Gremlin, for graph pattern matching.</li> </ul> </li> <li>Add Giraph APIs to GAE: <ul> <li>Support to load graphs with Giraph formats.</li> <li>Support Giraph APIs on GraphScope, and all apps implemented on top of the original Giraph APIs can run on GraphScope without modifications.</li> <li>Users now can add jars with <code class="language-plaintext highlighter-rouge">sess.add_lib()</code> method.</li> </ul> </li> <li>Bug fixes and other enhancements: <ul> <li>Correct the lifecycle management of loaded graphs within a session.</li> <li>Make the logs of Graph Learning Engine (GLE) more user-friendly.</li> <li>Fix readwrite failed on <code class="language-plaintext highlighter-rouge">graphscope.nx</code>.</li> <li>Support to connect to an existing ETCD cluster in GraphScope.</li> <li>Support to launch GraphScope on K8s from an inner-pod environment.</li> </ul> </li> </ol> <p>For more detailed improvements that have been made in this release, please refer to the complete <a href="https://github.com/alibaba/GraphScope/releases/tag/v0.12.0">changelog</a>.</p> </description>
<pubDate>Sat, 02 Apr 2022 03:33:20 +0000</pubDate>
<link>https://graphscope.io/blog/releasenotes/2022/04/02/release-notes-0.12.0.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2022/04/02/release-notes-0.12.0.html</guid>
<category>ReleaseNotes</category>
</item>
    <item>
<title>Release Notes: v0.11.0</title>
<description><p><img src="/blog/assets/images/release_note_t.png" alt="release-note" /> We are glad to announce a number of new features and improvements to GraphScope, alongside the GraphScope v0.11.0 release. This major release introduces mutable graphs into GraphScope, and adds GPU supports for graph analytics engine (GAE). It also focuses on user-friendly improvements, code quality, and a series of bug fixes.</p> <p>We highlight the following improvements included in this release:</p> <ol> <li>Supporting mutable graphs: <ul> <li>Providing a set of interfaces (e.g., <code class="language-plaintext highlighter-rouge">add_vertex</code>, <code class="language-plaintext highlighter-rouge">add_edge</code> and <code class="language-plaintext highlighter-rouge">update_vertex</code>) to modify the topology of an existing graph;</li> <li>Adopting existing apps to mutable graphs.</li> </ul> </li> <li>Accelerating graph analytics apps with GPUs: <ul> <li>Adding new <code class="language-plaintext highlighter-rouge">fragment</code>, <code class="language-plaintext highlighter-rouge">worker</code>, <code class="language-plaintext highlighter-rouge">message_manager</code> and <code class="language-plaintext highlighter-rouge">apps</code> to utilize GPUs to process graph analytics tasks faster;</li> <li>On top of these new infrastructures, 6 example algorithms (BFS, WCC, SSSP, PageRank, CDLP and LCC) are implemented;</li> <li>Our GPU-based graph algorithms are about 2x faster compared with state-of-the-art GPU-based graph processing systems. See detals in <a href="https://github.com/alibaba/libgrape-lite/blob/master/Performance.md#performance-on-gpus">performance report</a>.</li> </ul> </li> <li>Optimizations and enhancements: <ul> <li>Stream grpc request (response) to support loading graph (fetching result) from (to) numpy/pandas more than 2GB;</li> <li>Accelerating manipulation of graph topology by replacing folly::dynamicwith <code class="language-plaintext highlighter-rouge">rapidjson::value</code>.</li> </ul> </li> </ol> <p>For more detailed improvements that have been made in this release, please refer to the complete <a href="https://github.com/alibaba/GraphScope/releases/tag/v0.11.0">changelog</a>.</p> </description>
<pubDate>Sun, 06 Mar 2022 03:33:20 +0000</pubDate>
<link>https://graphscope.io/blog/releasenotes/2022/03/06/release-notes-0.11.0.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2022/03/06/release-notes.html</guid>
<category>ReleaseNotes</category>
</item>

    <item>
        <title>Release Notes: v0.10.0</title>
        <description>&lt;p&gt;&lt;img src=&quot;/blog/assets/images/release_note_t.png&quot; alt=&quot;release-note&quot; /&gt;
We are glad to announce the availability of GraphScope v0.10. This release supports users to run GraphScope on MacOS powered by Apple’s new M1 chip. In addition, it allows to serialize/deserialize graph data to/from the disk under the standalone mode.&lt;/p&gt;

&lt;p&gt;We highlight the following improvements included in this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add Apple’s M1 chip support.&lt;/li&gt;
  &lt;li&gt;Improve the implementation and documentation of context selectors.&lt;/li&gt;
  &lt;li&gt;Support serialization/deserialization of graph data on the standalone mode.&lt;/li&gt;
  &lt;li&gt;Refactor &lt;a href=&quot;https://github.com/alibaba/GraphScope/tree/main/analytical_engine/java&quot;&gt;Java SDK&lt;/a&gt; in Graph Analytics Engine.&lt;/li&gt;
  &lt;li&gt;Fix a bug when loading graph data from HDFS.&lt;/li&gt;
  &lt;li&gt;Fix got empty result in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all_simple_path&lt;/code&gt;algorithm with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_workers=1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more detailed improvements that have been made in this release, please refer to the complete &lt;a href=&quot;https://github.com/alibaba/GraphScope/releases/tag/v0.10.0&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Jan 2022 03:33:20 +0000</pubDate>
        <link>https://graphscope.io/blog/releasenotes/2022/01/05/release-notes-0.10.0.html</link>
        <guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2022/01/05/release-notes-0.10.0.html</guid>
        
        
        <category>ReleaseNotes</category>
        
      </item>

  <item>
<title>Release Notes: v0.9.0</title>
<description><p><img src="/blog/assets/images/release_note_t.png" alt="release-note" /> We are glad to announce the availability of GraphScope v0.9. In this release, we revisit the Dev-infra to improve productivity. Now, you can enjoy GraphScope with standalone mode in both our <a href="https://try.graphscope.app/">PlayGround</a> and <a href="https://colab.research.google.com/github/alibaba/GraphScope">Google Colab</a>. We also continuously make GraphScope more user-friendly and update the <a href="https://graphscope.io/docs/installation.html">documents</a> and <a href="https://github.com/alibaba/GraphScope/tree/main/tutorials">tutorials</a> based on the latest version. Further, we have preliminary supported Java in Graph Analytics Engine (GAE), and users can succinctly develop graph analytics applications with Java (see <a href="https://graphscope.io/docs/analytics_engine.html#writing-your-own-algorithms-in-java.">this document</a> for more details).</p> <p>On the performance side, we have done a lot of work to improve the performance of the distributed GAIA engine, which is used to execute graph interactive queries in GraphScope. The improvements include but are not limited to 1) simplifying the communication protocol that reduces many useless tags in correlated subtask; 2) making early-stop mechanism more effective due to 1); 3) resolving a lot of bugs due to 1); 4) refining the engine apis. As a distributed cyclic data-parallel engine, GAIA engine is in de-facto generic to handle any data-intensive task. Now users can assess to more <a href="https://github.com/alibaba/GraphScope/tree/main/research/engine/pegasus/pegasus/src/api">GAIA APIs</a> (will be well documented) to play with the engine.</p> <p>We highlight the following improvements included in this release:</p> <ol> <li>New features: <ul> <li>Support GLE (Graph Learning Engine) on MacOS;</li> <li>GIE (Graph Interactive Engine) Runtime refactoring based on the new GAIA engine;</li> <li>Reimplement persistent storage engine with zero-copy read;</li> <li>Add several popular <a href="https://github.com/alibaba/GraphScope/tree/main/python/graphscope/dataset">datasets</a> and ship datasets by adding an extra container in Kubernetes mode;</li> <li>Support NetworkX generator, read, write, drawing, convert with more generators and test cases;</li> <li>Add common labels following Kubernetes best practice to GraphScope cluster;</li> <li>Add transformation ability for directed/undirected graphs;</li> <li>Java SDK in GAE, and examples to write and run algorithms written in Java.</li> </ul> </li> <li>Bug Fixes: <ul> <li>Fix a crash if duplicate property names were encountered when extracting subgraphs;</li> <li>Fix the MPI library not found problem on macOS;</li> <li>Fix context processing on graphs generated by <code class="language-plaintext highlighter-rouge">add_column</code>;</li> <li>Fix many bugs related to subtasks while querying Gremlin;</li> <li>Fix a failure when exposing Gremlin service deployed with Helm Charts.</li> </ul> </li> </ol> <p>For more detailed improvements that have been made in this release, please refer to the complete <a href="https://github.com/alibaba/GraphScope/releases/tag/v0.9.0">changelog</a>.</p> </description>
<pubDate>Wed, 08 Dec 2021 03:33:20 +0000</pubDate>
<link>https://graphscope.io/blog/releasenotes/2021/12/08/release-notes-0.9.0.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2021/12/08/release-notes-0.9.0.html</guid>
<category>ReleaseNotes</category>
</item>

    <item>
<title>Release Notes: v0.8.0</title>
<description><p><img src="/blog/assets/images/release_note_t.png" alt="release-note" /> We are glad to announce the availability of GraphScope v0.8. This release is a major update on many aspects of the project including deployment, system speed and APIs. For quickly getting started, this release supports to use GraphScope on standalone mode without Kubernetes. To improve the efficiency of operators and applications in NetworkX module, an immutable graph is applied by default, while it is converted to a dynamic graph only if modification operators for graphs are triggered. In addition, a notebook is integrated into the helm charts.</p> <p>We highlight the following improvements included in this release:</p> <ol> <li>Standalone mode support for GraphScope: <ul> <li>Users now can do <code class="language-plaintext highlighter-rouge">pip install graphscope</code> to deploy GraphScope together with runtime dependencies;</li> <li>Users now switch to <code class="language-plaintext highlighter-rouge">pip install graphscope_client</code> to install python client of GraphScope;</li> <li>MacOS support is added, and it is compatible with Apple clang 13.0.0.</li> </ul> </li> <li>Enhancement on <code class="language-plaintext highlighter-rouge">graphscope.nx</code> module: <ul> <li>Support NetworkX operators over immutable graphs;</li> <li>Support holding an immutable graph in <code class="language-plaintext highlighter-rouge">nx.Graph</code> and <code class="language-plaintext highlighter-rouge">copy-on-write</code> to a dynamic graph.</li> </ul> </li> <li>Enhancement of deployment, performance and APIs: <ul> <li>Integrate a jupyter-lab notebook container into the helm charts.</li> </ul> </li> </ol> <p>For more detailed improvements that have been made in this release, please refer to the complete <a href="https://github.com/alibaba/GraphScope/releases/tag/v0.8.0">changelog</a>.</p> </description>
<pubDate>Sat, 06 Nov 2021 03:33:20 +0000</pubDate>
<link>https://graphscope.io/blog/releasenotes/2021/11/06/release-notes-0.8.0.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2021/11/06/release-notes-0.8.0.html</guid>
<category>ReleaseNotes</category>
</item>

    <item>
<title>Release Notes: v0.7.0</title>
<description><p><img src="/blog/assets/images/release_note_t.png" alt="release-note" /> We are glad to announce the availability of GraphScope v0.7. This release includes major updates for the persistent graph store in GraphScope, providing APIs for real-time graph updates (inserts and deletes of individual vertices and edges). It also focuses on user-friendly improvements, security issues, code quality, and a series of bug fixes.</p> <p>We highlight the following improvements included in this release:</p> <ol> <li>Apart from bulk loading, this release introduces a set of APIs for real-time graph updates. Currently, these APIs have supported the following functions: <ul> <li>Insert/delete one or multiple vertices/edges;</li> <li>Update properties of a specific vertex/edge.</li> </ul> <p>More details can refer to <a href="https://github.com/alibaba/GraphScope/blob/main/docs/persistent_graph_store.rst#realtime-write">this</a>.</p> </li> <li>User-friendly improvement <ul> <li>Revise error handling in GraphScope and improve all error messages reported to users;</li> <li>Add a <a href="https://github.com/alibaba/GraphScope/blob/main/docs/persistent_graph_store.rst">document</a> to describe persistent graph store in GraphScope;</li> <li>The logs in the <code class="language-plaintext highlighter-rouge">err</code> channel are always fetched to the client for debugging;</li> <li>The <a href="https://github.com/alibaba/GraphScope/releases/download/v0.7.0/graphscope_store_data_load.tar.gz">bulk-loading tool</a> of the persistent graph store is released to help load graphs into the store;</li> <li>Revise some descriptions for APIs in documents.</li> </ul> </li> <li>Optimizations and enhancements <ul> <li>Using <a href="https://github.com/etcd-io/zetcd">zetcd</a> to replace zookeeper in the graph interactive engine;</li> <li>Update third-party dependencies to address some security issues;</li> <li>More test coverages for GAIA and client;</li> <li>Integrate GIE GraphManager into Coordinator;</li> <li>During <code class="language-plaintext highlighter-rouge">sess.gremlin</code>, the pod will not be created dynamically for reducing the response time.</li> </ul> </li> <li>Some Breaking API Changes: <ul> <li>Remove GIE GraphManager role;</li> <li>Remove zookeeper and replace with zetcd;</li> <li><code class="language-plaintext highlighter-rouge">k8s_gie_graph_manager_image</code>, <code class="language-plaintext highlighter-rouge">k8s_gie_graph_manager_cpu</code>, <code class="language-plaintext highlighter-rouge">k8s_gie_graph_manager_mem</code> Deprecated;</li> <li><code class="language-plaintext highlighter-rouge">k8s_zookeeper_image</code>, <code class="language-plaintext highlighter-rouge">k8s_zookeeper_cpu</code>, <code class="language-plaintext highlighter-rouge">k8s_zookeeper_mem</code> Deprecated;</li> <li><code class="language-plaintext highlighter-rouge">k8s_gie_gremlin_server_cpu</code>, <code class="language-plaintext highlighter-rouge">k8s_gie_gremlin_server_mem</code> Deprecated.</li> </ul> </li> </ol> <p>For more detailed improvements that have been made in this release, please refer to the complete <a href="https://github.com/alibaba/GraphScope/releases/tag/v0.7.0">changelog</a>.</p> </description>
<pubDate>Wed, 08 Sep 2021 03:33:20 +0000</pubDate>
<link>https://graphscope.io/blog/releasenotes/2021/09/08/release-notes-0.7.0.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2021/09/08/release-notes-0.7.0.html</guid>
<category>ReleaseNotes</category>
</item>

    <item>
<title>Release Notes: v0.6.0</title>
<description><p><img src="/blog/assets/images/release_note_t.png" alt="release-note" /> We are glad to announce the release of GraphScope 0.6. This major release integrates a new graph interactive engine GAIA, which supports efficient parallel execution and bounded-memory execution for Gremlin queries. More technical details of GAIA can refer to our published <a href="https://graphscope.io/blog/tech/2021/08/05/GAIA-Deep-Dive-Bounded-Memory-Execution-and-Early-Stop-Optimization-for-Efficient-Graph-Traversal-at-Scale.html">tech blog</a>. Note that currently the integration of GAIA with GraphScope is experimental, and is not recommended for production use yet! In addition, this release improves the experience of local deployment on MacOS, Ubuntu and CentOS, and adds more graph analytics algorithms.</p> <p>We highlight the following improvements included in this release:</p> <ol> <li>[Experimental] Integrate GAIA, a graph interactive query engine, into GraphScope. Currently, it has supported the following features/functions: <ul> <li>Dynamic memory management for arbitrary graph traversal with ensuring bounded use of memory;</li> <li>Automatic and adaptive strategy for optimizing Gremlin traversal, such as hybrid DFS/BFS traversal to balance parallelism and memory usage;</li> <li>Early-stop optimization for Gremlin (limit, nested conditional, etc.) to minimize wasted computation;</li> <li>Improvement of performance and scalability (a new LDBC Social Network Benchmark will be released around year end);</li> <li>Support both Vineyard and the new persistent graph store.</li> </ul> </li> <li> <p>Lazy evaluation support for graph interactive engine and graph learning engine.</p> </li> <li> <p>A <a href="https://github.com/alibaba/GraphScope/blob/main/scripts/deploy_local.sh">script</a> supporting local deployment on MacOS, Ubuntu and CentOS.</p> </li> <li>Add more graph analytics algorithms as built-in applications. <ul> <li><a href="https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.boundary.node_boundary.html#networkx.algorithms.boundary.node_boundary">node_boundary</a> and <a href="https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.boundary.edge_boundary.html#networkx.algorithms.boundary.edge_boundary">edge_boundary</a> applications;</li> <li><a href="https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.link_analysis.pagerank_alg.pagerank.html#networkx.algorithms.link_analysis.pagerank_alg.pagerank">pagerank</a> in NetworkX version;</li> <li><a href="https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.simple_paths.is_simple_path.html#networkx.algorithms.simple_paths.is_simple_path">is_simple_path</a> application.</li> </ul> </li> </ol> <p>For more detailed improvements that have been made in this release, please refer to the complete <a href="https://github.com/alibaba/GraphScope/releases/tag/v0.6.0">changelog</a>.</p> </description>
<pubDate>Sun, 08 Aug 2021 03:33:20 +0000</pubDate>
<link>https://graphscope.io/blog/releasenotes/2021/08/08/release-notes-0.6.0.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2021/08/08/release-notes-0.6.0.html</guid>
<category>ReleaseNotes</category>
</item>

    <item>
<title>GAIA Deep Dive: Bounded-Memory Execution and Early-Stop Optimization for Efficient Graph Traversal at Scale</title>
<description><p><img src="/blog/assets/images/gaia.png" alt="knife" /> <a href="https://graphscope.io/blog/tech/2021/04/29/Introducing-gaia-a-scalable-engine-for-gremlin-the-sql-for-graphs.html">Last time</a>, we presented an overview of the GAIA engine for scaling Gremlin for large distributed graphs. In contrast to other, existing batch-oriented big graph processing systems, such as <a href="https://research.google/pubs/pub37252">Google Pregel</a>, <a href="https://giraph.apache.org/">Apache Giraph</a>, <a href="https://github.com/jegonzal/PowerGraph">GraphLab PowerGraph</a>, and <a href="https://spark.apache.org/graphx/">Apache Spark GraphX</a>, GAIA focuses on low-latency graph traversal at scale. Achieving this goal requires a different distributed infrastructure. Today, we continue to explain why with highlighting two unique and key features of GAIA.</p> <h3 id="bounded-memory-execution">Bounded-Memory Execution</h3> <p>Graph traversal can produce paths of arbitrary length, leading to memory usage growing exponentially with the number of hops. Although it is very common for Gremlin queries to terminate with a top-k constraint and/or aggregate operation, such an explosion of <em>intermediate</em> results can often lead to memory crisis, especially in an interactive environment with limited memory configuration.</p> <p>On the other hand, the traversal strategies can greatly impact the memory usage. There are two typical traversal strategies, namely (breadth-first-search) BFS-like traversal and (depth-like-search) DFS-like traversal. BFS-like traversal can better utilize parallelism, while it may produce data all at once that drives high the memory usage. On the contrary, DFS-like traversal tends to consume much less memory, while it may suffer from low parallelism.</p> <p>To ensure <em>bounded-memory execution</em> without sacrificing performance (parallelism), GAIA employs <em>dynamic scheduling</em> for executing each Gremlin operator. GAIA packs a segment of consecutive data entries in an input stream into a single batch, and such a batch constitutes the finest data granularity for communication and computation. A <em>task</em> can be logically viewed as the combination of an operator and a batch of data entries to be computed. GAIA dynamically creates such tasks corresponding to each operator when there is one or more batches available from all its inputs, and maintains all the tasks in a same scheduling queue to share resources.</p> <p>Furthermore, GAIA can schedule tasks with priorities according to the occurrence order of its corresponding operators in a Gremlin query. Specifically, it can schedule the operators that appear first with higher priority for a BFS-like traversal, and prioritize those that appear last to follow a DFS-like traversal. To balance the memory usage with the performance (parallelism), GAIA by default adopts a hybrid traversal strategy, that is, it uses BFS-prioritized scheduling as it has better opportunities for parallelization, and automatically switches to DFS-prioritized in case that the current operator arrives at the memory bound.</p> <p>To validate the hypothesis, we use the following cycle-detection query as an example to compare GAIA with the current <a href="https://github.com/alibaba/GraphScope/tree/main/interactive_engine">MaxGraph release</a> in GraphScope without memory control.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g.V([vertices]).as('a').repeat(out().simplePath()) .times(k-1) .out().where(as('a')) .path().limit(n) </code></pre></div></div> <p>The above cycle-detection query starts from <code class="language-plaintext highlighter-rouge">m</code> (default 10) vertices in V, it traverses from V via at most <code class="language-plaintext highlighter-rouge">k</code> (default 3) hops, and returns at most <code class="language-plaintext highlighter-rouge">n</code> cycles found along the traversal.</p> <p>We generate large LDBC data sets with scale factor 30. The generated LDBC data sets which have 89 million vertices and 541 million edges would be used for the following experiments. In this experiment, we set memory upper bound of GAIA to 256MB, and compare with MaxGraph. For this query, We vary the number of start vertices, set <code class="language-plaintext highlighter-rouge">k</code> to 3 and set result limit to infinity. We report both the query latency and max memory consumption in the following.</p> <p><img src="/blog/assets/images/memory-bound.jpg" alt="memory-bound.jpg" height="50%" width="50%" /></p> <p>As the figure shows, GAIA achieves much lower memory usage (up to 9× memory saving) comparing to MaxGraph as well as comparable performance. We can see the actual memory usage of all cases in GAIA is very close to the bounded value 256MB. This expriment shows that GAIA ensure <em>bounded-memory execution</em> without sacrificing performance (parallelism) thanks to powerful dynamic scheduling.</p> <h3 id="early-stop-optimization">Early-Stop Optimization</h3> <p>Traversing all candidate paths fully is often unnecessary, especially for interactive queries with dynamic conditions running on diverse input graphs. For example, in the above query, only the first <code class="language-plaintext highlighter-rouge">k</code> results are needed. This leads to an interesting tradeoff between parallel traversal and wasted computation, as further illustrated in the following figure.</p> <p><img src="/blog/assets/images/early_stop_case.jpg" alt="early_stop_case.png" height="50%" width="50%" /></p> <p>The figure shows an example run of the query with <code class="language-plaintext highlighter-rouge">k=1</code>. The circle denotes the traversal specified by the <code class="language-plaintext highlighter-rouge">repeat</code>-loop. Assume we have enough computation resource (CPU cores), the paths can be explored in a fully parallel fashion. However, once a <code class="language-plaintext highlighter-rouge">4</code>-hop path is found, all the remaining parallel traversal will be no longer required.</p> <p>For real-world queries on large graph data, such wasted computation can be hidden deeply in nested traversals (e.g., a predicate that can be evaluated early from partial inputs) and significantly impact query performance. While avoiding such wastage is straightforward in a sequential implementation, it is challenging to do so for a fully-parallel execution.</p> <p>To minimize such wastage, GAIA tracks data dependencies dynamically at runtime. When enough results are collected, the system automatically creates a <em>cancellation token</em> that is sent backward along input streams to its upstream operators within the same execution context. The token serves as a signal for receiving operators to clear any unsent output data and immediately cancel any on-going computation for the particular output stream. Such cancellation notification is implemented at a system level by GAIA. Below, we continue to use the cycle-detection query as a running example to demonstrate that such early-stop optimization can significantly improve query performance.</p> <p>In this experiment, we vary the number of result limit and report the latency of GAIA and MaxGraph.</p> <p><img src="/blog/assets/images/early-stop.jpg" alt="early-stop.jpg" height="50%" width="50%" /></p> <p>The figure shows that GAIA outpeforms MaxGraph in all cases thanks to the ablility of cancelling wasted computation. GAIA achieves 4.5× better performance in average, up to 8.1×. Even the number of limit results is close to the complete query result, GAIA can also show better performance due to the fine-grained early-stop mechanism. Note that MaxGraph can also achieve low latency when the limit size is small (50), this is because a naive early-stop is implemented in MaxGraph to cancel the job from source operator to the end when already collected needed results. But the performance degrades rapidly when the limit size become larger due to coarse-grained job cancelling in MaxGraph.</p> <h3 id="scalability">Scalability</h3> <p>Finally, we study the scalability while running the same query as above. This is to prove that both features do not introduce additional overheads that impact performance/scalability of GAIA.</p> <p>In this experiment, we set the query result limit to infinity and vary the number of computing threads to show the scale-up performance of GAIA. We test the scalability using different size of queries by varying the number of start vertices.</p> <p><img src="/blog/assets/images/gaia-scalability.jpg" alt="gaia-scalability.jpg" height="50%" width="50%" /></p> <p>As we can see from the above figure, GAIA has linear scalability in all type (both large and small) of queries. It shows that new features such as dynamic scheduling do not hurt the scalability of GAIA.</p> <h3 id="conclusion">Conclusion</h3> <p>Diverse and irregular graph data and algorithms impose significant challenges in efficient distributed and parallel execution. Implementation choices can have a huge impact on system performance and memory requirements. GAIA is the first engine to support efficient graph traversal at scale that enables bounded-memory execution with minimum wastage. It will be included as an experimental feature in the coming release of GraphScope v0.6.0. We welcome community feedback!</p> </description>
<pubDate>Thu, 05 Aug 2021 03:10:42 +0000</pubDate>
<link>https://graphscope.io/blog/tech/2021/08/05/GAIA-Deep-Dive-Bounded-Memory-Execution-and-Early-Stop-Optimization-for-Efficient-Graph-Traversal-at-Scale.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/tech/2021/08/05/GAIA-Deep-Dive-Bounded-Memory-Execution-and-Early-Stop-Optimization-for-Efficient-Graph-Traversal-at-Scale.html</guid>
<category>Tech</category>
</item>
    
    <item>
<title>Release Notes: v0.5.0</title>
<description><p><img src="/blog/assets/images/release_note_t.png" alt="release-note" /> We are glad to announce the GraphScope 0.5 release. As the first step towards the ease of deployment in production, this major release includes two new features, namely <strong>a persistent graph store</strong> to enable a “service mode” for real-time graph computing, and <strong>lazy evaluation</strong> of GraphScope programs–an execution strategy which delays the execution of a GraphScope program until later when needed for efficiency. In addition, we improve the compatibility with NetworkX.​We highlight the following improvements included in this release:​</p> <ol> <li> <p>GraphScope-Store: A persistent store for mutable graphs. Currently, it has supported the following features/functions:</p> <ul> <li>A bulk-load tool to import a property graph from files to the GraphScope-Store instance.</li> <li>Helm support to launch GraphScope as a service with a store.</li> <li>Support for multiple session connections to a store.</li> <li>Interactive queries on graphs in the store with Gremlin.</li> </ul> </li> <li> <p>Lazy evaluation</p> <ul> <li>Support to switch between lazy-mode and eager-mode by just setting the value of <code class="language-plaintext highlighter-rouge">mode</code> as <code class="language-plaintext highlighter-rouge">lazy</code> or <code class="language-plaintext highlighter-rouge">eager</code> when creating a session <code class="language-plaintext highlighter-rouge">graphscope.session(mode='lazy'or 'eager')</code>.</li> <li>Adapt the NetworkX interfaces to switch between eager and lazy modes.</li> </ul> </li> <li> <p>Enhanced NetworkX compatibility</p> <ul> <li>Support for multi-queries on duplications of the whole graph.</li> <li>Add all-pairs shortest paths and closeness centrality algorithms.</li> </ul> </li> <li> <p>Provide a <a href="https://graphscope.io/docs/frequently_asked_questions.html">Q&amp;A page</a> for beginners</p> </li> </ol> <p>For more detailed improvements that have been made in this release, please refer to the complete <a href="https://github.com/alibaba/GraphScope/releases/tag/v0.5.0">changelog</a>.</p> </description>
<pubDate>Tue, 15 Jun 2021 03:33:20 +0000</pubDate>
<link>https://graphscope.io/blog/releasenotes/2021/06/15/release-notes-0.5.0.html</link>
<guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2021/06/15/release-notes-0.5.0.html</guid>
<category>ReleaseNotes</category>
</item>
    
      <item>
        <title>Towards a Swiss Army Knife for a Continuous Life Cycle of Big Graph Analytics</title>
        <description>&lt;p&gt;&lt;img src=&quot;/blog/assets/images/knife.png&quot; alt=&quot;knife&quot; /&gt;
In this post, we will present a high-level road-map of the GraphScope project with highlighting new exciting features coming in the v0.5 release.&lt;/p&gt;

&lt;h3 id=&quot;how-it-all-gets-started&quot;&gt;How It All Gets Started&lt;/h3&gt;

&lt;p&gt;To begin with, let us reflect on why we start this project. Due to huge diversity of graph data, scenarios, and algorithms, agility is key to the success of a big graph infrastructure, which boils down firstly to the ease of programming and interoperability. GraphScope generalizes previous execution environments such as &lt;a href=&quot;https://giraph.apache.org/&quot;&gt;Giraph&lt;/a&gt; and &lt;a href=&quot;https://spark.apache.org/graphx/&quot;&gt;GraphX&lt;/a&gt; in two ways: by providing a single-machine programming abstraction in Python that supports familiar notations for a variety of graph operations (&lt;a href=&quot;https://tinkerpop.apache.org/&quot;&gt;Gremlin&lt;/a&gt;, &lt;a href=&quot;https://networkx.org/&quot;&gt;NetworkX&lt;/a&gt;, &lt;a href=&quot;https://github.com/alibaba/graph-learn&quot;&gt;Graph Neural Networks&lt;/a&gt;, etc.) while hiding the system complexity from the programmer; and by bridging with other, existing big data infrastructure through &lt;a href=&quot;https://github.com/v6d-io/v6d&quot;&gt;Vineyard&lt;/a&gt; which provides efficient in-memory data transfer with high-level data structures as interface, as shown in Figure 1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/system-stack.png&quot; alt=&quot;system-stack.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure 1: The GraphScope system stack, and how it interacts with the &lt;a href=&quot;https://pydata.org/&quot;&gt;PyData&lt;/a&gt; ecosystem.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-vision-on-big-graph-infrastructure&quot;&gt;A Vision on Big Graph Infrastructure&lt;/h3&gt;

&lt;p&gt;In addition, we believe big graph infrastructure must be developed for a continuous life cycle. As illustrated in Figure 2, the centered box of “interactive analysis and testing” represents the current version of GraphScope, which facilitates the design of new (or specific) graph algorithms for each particular task in an exploratory manner. As such a process is highly experimental in nature, GraphScope makes it easy to construct and load large graphs on demand and to efficiently perform a wide range of graph computations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/lifecycle.png&quot; alt=&quot;lifecycle.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure 2: A continuous life cycle of big graph analytics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once such a design is achieved and selected, it will typically be &lt;em&gt;deployed in production&lt;/em&gt; for processing real dynamic graphs to generate insights in a continuous manner. The left and right box in Figure 2 show two representative processing paradigms for such a deployment: the real-time streaming and the batch-oriented processing, respectively, at two ends of the latency spectrum. In the real-time streaming, ideally, each update to the graph model has to be reflected in the output within a couple of seconds, and therefore the system optimizes for low latency and high availability. In the batch-oriented processing where the latency requirement is much relaxed, it is often more efficient to perform computation periodically (such as every one hour or day) to allow sophisticated optimizations for throughput.&lt;/p&gt;

&lt;h3 id=&quot;graphscope-v05&quot;&gt;GraphScope v0.5&lt;/h3&gt;

&lt;p&gt;As the first step towards the ease of deployment in production, we are introducing two new features in the coming release of GraphScope v0.5, including &lt;em&gt;a persistent graph store&lt;/em&gt; to enable a “service mode” for real-time graph computation, and &lt;em&gt;lazy evaluation&lt;/em&gt; of GraphScope programs–an execution strategy which delays the execution of a GraphScope program until later when needed for efficiency. We briefly introduce them below and will provide more details in the Release Note soon.&lt;/p&gt;

&lt;h4 id=&quot;persistent-graph-store&quot;&gt;Persistent Graph Store&lt;/h4&gt;

&lt;p&gt;In addition to Vineyard, the in-memory columnar graph store currently supported in GraphScope, we will introduce a new disk-based row-oriented multi-versioned persistent graph store. While Vineyard focuses on great support for in-memory whole graph analytics workload, the new persistent graph store is geared towards better supporting for running continuous graph data management service that frequently updates the graph and answers traversal queries.&lt;/p&gt;

&lt;p&gt;The store is a distributed graph store built on top of the popular RocksDB key value store. It adopts row-oriented design to support frequent small updates to the graph. Each row is tagged with a snapshot ID as its version. A query reads most recent version of rows relative to the snapshot ID when it starts and hence not blocked by writes. For writes we take a compromise between consistency and higher throughput (in a similar design to Kineograph [1]). In our design writes in the same session can be grouped and executed atomically as a unit and the persistent store assigns a snapshot ID (which is a low-resolution timestamp of current time) to each group and executes groups of writes by the order of their snapshot IDs and by a deterministic (though arbitrary) order for groups of writes that occur in the same snapshot ID. It provides high write throughput while still with some degree of order and isolation though it provides less consistency than strict snapshot isolation common in database. We hope our design choice provides an interesting trade-off for practical usage.&lt;/p&gt;

&lt;p&gt;Initially, the new persistent store is provided as a separate option from Vineyard. Going foward we hope to evole them into an integrated hybrid graph store suitable for all kinds of workloads.&lt;/p&gt;

&lt;h4 id=&quot;lazy-evaluation&quot;&gt;Lazy Evaluation&lt;/h4&gt;
&lt;p&gt;As an important performance optimization technique, lazy evaluation has been widely applied by many big data processing systems like &lt;a href=&quot;https://www.tensorflow.org/&quot;&gt;TensorFlow&lt;/a&gt;. We will introduce the support of lazy evaluation into the coming GraphScope v0.5, which provides three-fold benefits compared with eager evaluation. First, in the lazy evaluation, a job is expressed logically in a directed acyclic graph (DAG) where different nodes represent different operators of the overall job and edges represent the data dependencies between operators. When evaluating the operator (i.e., a vertex in the DAG), GraphScope looks back to check all the nodes that are required for this requested node. Only those nodes are evaluated in the appropriate order. Thus, a node in the DAG is evaluated only when needed; only if it is needed. Second, with the DAG in place, it can avoid repeatedly evaluating the same operator, blindly, regardless whether the operator can be memorized. Third, it allows to combine multiple operators (e.g., adding an edge to a graph) into a single batch-oriented operator (e.g., aggregating multiple edges into a batch and adding the batch to a graph), which is more efficient in GraphScope.&lt;/p&gt;

&lt;p&gt;In GraphScope, developers can easily switch between lazy-mode and eager-mode by just setting the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mode&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lazy&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eager&lt;/code&gt; when creating a session &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graphscope.session(mode='lazy'or 'eager')&lt;/code&gt;. Typically, developers can choose the eager-mode in the development stage, as it can ease the debugging of applications, while switch to the lazy-mode in the deployment stage for better performance.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;A tool or infrastructure built for a continuous life cycle of big graph applications requires to do much more than the ease of deployment, but also to help testing and diagnosis of real-world graph applications, and to allow a data-driven approach for continuous evolution of an on-line service or periodic pipeline. Even so, the new features coming in the GraphScope v0.5 release take us one step closer to that vision. Please give it a try and let us know what you think! Really appreciated.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;[1] Raymond Cheng, Ji Hong, Aapo Kyrola, Youshan Miao, Xuetian Weng, Ming Wu, Fan Yang, Lidong Zhou, Feng Zhao, and Enhong Chen. 2012. Kineograph: Taking the Pulse of A Fast-changing and Connected World. In EuroSys ‘12. (&lt;a href=&quot;https://www.cl.cam.ac.uk/~ey204/teaching/ACS/R212_2013_2014/papers/cheng_eurosys_2012.pdf&quot;&gt;pdf&lt;/a&gt;)&lt;/p&gt;
</description>
        <pubDate>Sat, 29 May 2021 11:10:42 +0800</pubDate>
        <link>https://graphscope.io/blog/tech/2021/05/29/Towards-a-Swiss-Army-Knife-for-a-Continuous-Life-Cycle-of-Big-Graph-Analytics.html</link>
        <guid isPermaLink="true">https://graphscope.io/blog/tech/2021/05/29/Towards-a-Swiss-Army-Knife-for-a-Continuous-Life-Cycle-of-Big-Graph-Analytics.html</guid>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>Release Notes: v0.4.0</title>
        <description>&lt;p&gt;&lt;img src=&quot;/blog/assets/images/release_note_t.png&quot; alt=&quot;release-note&quot; /&gt;
Today, we’re announcing the availability of GraphScope v0.4.0. This release focuses on
 the compatibility improvement with &lt;a href=&quot;https://networkx.org/&quot;&gt;NetworkX&lt;/a&gt;, with the aim of allowing users to
 develop graph applications on large-scale graphs in a distributed environment just
 like doing this on a single machine. In addition, this release improves the
 experience of standalone deployment.&lt;/p&gt;

&lt;p&gt;We highlight the following improvements included in this release:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Improved compatibility with NetworkX:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graph/DiGraph&lt;/code&gt; types in NetworkX;&lt;/li&gt;
      &lt;li&gt;Support Networkx APIs of operations and manipulations over the above two types of graphs;&lt;/li&gt;
      &lt;li&gt;A new &lt;a href=&quot;https://github.com/alibaba/GraphScope/blob/62b3bbff00767784d0bb3693fe9bb24e8a1b4b2a/tutorials/2_graph_manipulations_with_networkx_compatible_apis.ipynb&quot;&gt;tutorial&lt;/a&gt; in Playground to introduce graph processing with NetworkX APIs.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Improve the experience of standalone deployment:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Support to launch multiple sessions/instances in standalone mode.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more detailed improvements that have been made in this release, please refer to the complete &lt;a href=&quot;https://github.com/alibaba/GraphScope/releases/tag/v0.4.0&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 May 2021 13:08:20 +0800</pubDate>
        <link>https://graphscope.io/blog/releasenotes/2021/05/10/release-notes-0.4.0.html</link>
        <guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2021/05/10/release-notes-0.4.0.html</guid>
        
        
        <category>ReleaseNotes</category>
        
      </item>
    
      <item>
        <title>Introducing GAIA: A Scalable Engine for Gremlin – the SQL for Graphs</title>
        <description>&lt;p&gt;&lt;img src=&quot;/blog/assets/images/gaia.png&quot; alt=&quot;gaia&quot; /&gt;
GAIA extends GraphScope with &lt;a href=&quot;https://tinkerpop.apache.org/gremlin.html&quot;&gt;Gremlin&lt;/a&gt;, the industry’s de facto standard property graph query language defined and maintained by &lt;a href=&quot;http://tinkerpop.apache.org/&quot;&gt;the Apache TinkerPop project&lt;/a&gt;, which is widely adopted by popular graph database vendors such as &lt;a href=&quot;https://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt;, &lt;a href=&quot;https://www.orientdb.org/&quot;&gt;OrientDB&lt;/a&gt;, &lt;a href=&quot;https://janusgraph.org/&quot;&gt;JanusGraph&lt;/a&gt;, &lt;a href=&quot;https://azure.microsoft.com/en-us/services/cosmos-db/&quot;&gt;Microsoft Cosmos DB&lt;/a&gt;, and &lt;a href=&quot;https://aws.amazon.com/neptune/&quot;&gt;Amazon Neptune&lt;/a&gt;. GAIA is the first open-source implementation of Gremlin in a distributed or big-data environment in the industry.&lt;/p&gt;

&lt;h4 id=&quot;making-gremlin-accessible-to-data-scientists-historical-background&quot;&gt;Making Gremlin Accessible to Data Scientists: Historical Background&lt;/h4&gt;

&lt;p&gt;Since about two years ago, we have heard an increasing demand from data scientists at Alibaba to extract insights from structural patterns on massive heterogeneous datasets in a wide variety of important application domains such as e-commerce, on-line payments, and social media. Such data is naturally modeled as graphs to encode complex interrelationships among entities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/gaia-graph.png&quot; alt=&quot;cycle_detection.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As an example, consider the graph depicted in the above figure. It is a simplified subgraph pattern of the one employed at Alibaba for credit-card fraud detection [2,3]. By using a fake identifier, the “criminal” may obtain a short-term credit from a bank (vertex 4). He/she tries to illegally cash out money by forging a purchase (edge 2–&amp;gt;3) at time t1 with the help of a merchant (vertex 3). Once receiving payment (edge 4–&amp;gt;3) from the bank (vertex 4), the merchant tries to send the money back (edges 3–&amp;gt;1 and 1–&amp;gt;2) to the “criminal” via multiple accounts of a middle man (vertex 1) at time t3 and t4, respectively. This pattern eventually forms a cycle (2–&amp;gt;3–&amp;gt;1…–&amp;gt;2).&lt;/p&gt;

&lt;p&gt;In practice, the graph can contain billions of vertices (e.g., users) and hundreds of billions to trillions of edges (e.g., payments), and the entire fraudulent process can involve much more complex chains of transactions, through many entities, with various constraints, which therefore requires complex interactive analysis to identify. Although many distributed and parallel graph processing frameworks exist, writing efficient distributed algorithms for each particular task is exceedingly hard [4], especially for our target users of domain experts or data scientists.&lt;/p&gt;

&lt;p&gt;Motivated by the above (and many other) use cases, we started the GAIA project to offer a new distributed infrastructure for this new class of graph applications. GAIA differs from prior systems in two important ways: by exploiting Gremlin to provide a high-level language for graph and/or pattern traversal, and by supporting automatic parallel execution with advanced optimizations such as hybrid (BFS/DFS) traversal for bounded-memory execution and early stop (to avoid wasted computation).&lt;/p&gt;

&lt;h4 id=&quot;scaling-gremlin-for-large-distributed-graphs-a-closer-look&quot;&gt;Scaling Gremlin for Large Distributed Graphs: A Closer Look&lt;/h4&gt;

&lt;p&gt;Gremlin offers a flexible and expressive programming model to enable non-technical users to succinctly express complex traversal patterns in real-world applications. For example, one can write the above fraud-detection query in just a couple of lines using Gremlin, as shown below. In contrast, even common operations like cycle detection, which is a core part of the fraud-detection use case, is tricky to implement in existing graph systems.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g.V('account').has('id','2').as('s')
  .repeat(out('transfer').simplePath())
  .times(k-1)
  .where(out('transfer').as('s'))
  .path().limit(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The query finds cyclic paths of length &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;, starting from a given account. First, the source operator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V&lt;/code&gt; (with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has&lt;/code&gt; filter) returns all the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;account&lt;/code&gt; vertices with an identifier of “2”. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;as&lt;/code&gt; operator is a &lt;em&gt;modulator&lt;/em&gt; that introduces a tag (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; in this case) for later references. Second, it traverses the outgoing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transfer&lt;/code&gt; edges for exactly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k-1&lt;/code&gt; times, skipping any repeated vertices (by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simplePath&lt;/code&gt; operator). Third, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt; operator checks if the starting vertex &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; can be reached by one more step, that is, whether a cycle of length &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; is formed. Finally, for qualifying traversers, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; operator returns the full path information. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit&lt;/code&gt; operator at the end indicates only one such result is needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GAIA is designed to faithfully preserve the programming model of Gremlin. As a result, it can be used to scale existing Gremlin applications to large compute clusters with no (or minimum) modification. GAIA achieves high performance for complex Gremlin traversal by compiling it into a  dataflow that can be executed efficiently in a distributed system deployed on large clusters. We refer interested readers to this paper [1] for the full technical details of GAIA.&lt;/p&gt;

&lt;p&gt;The following figure shows a comparison between GAIA and JanusGraph using the &lt;a href=&quot;http://ldbcouncil.org/benchmarks/snb&quot;&gt;LDBC Social Network Benchmark&lt;/a&gt; (Interactive Workload). JanusGraph cannot process query in parallel, and we run GAIA in one machine for fair comparison. We run each query on GAIA with the degree of parallelism varying from 1 to 16, and report its max and min latency for each query while compared to JanusGraph.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/gaia-perf.png&quot; alt=&quot;GAIA-perf_JanusGraph.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JanusGraph fails to answer many queries (CR-&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3,5,9&lt;/code&gt;) due to out-of-time (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OT&lt;/code&gt;). As shown, even the maximum latency (single-thread) of GAIA is much shorter than that of JanusGraph in all cases. In addition, GAIA can scale those large, complex traversal queries almost linearly across multiple servers [1].&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;We’ve been building GAIA at Alibaba for over a year now and it is still under very active development. Find the current &lt;a href=&quot;https://github.com/alibaba/GraphScope/tree/main/research/gaia&quot;&gt;pre-release on GitHub here&lt;/a&gt;. Meanwhile, we are working on integrating GAIA into &lt;a href=&quot;https://github.com/alibaba/GraphScope&quot;&gt;the GraphScope project&lt;/a&gt; to make the “SQL for Graphs” available for a wider community of users to work with big data or data science. An early alpha release of GAIA will be included in GraphScope coming this summer, and we will further develop and refine GAIA to ship more Gremlin features such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt;-step for declarative pattern queries and iterative graph algorithms via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subgraph&lt;/code&gt;-step, both tentatively scheduled for release in late 2021.&lt;/p&gt;

&lt;p&gt;Graph technology is changing AI [5]. We’re excited to be creating new tools and fostering innovative graph solutions in the amazing community. We look forward to your feedbacks and contributions.&lt;/p&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[1] Zhengping Qian, Chenqiang Min, Longbin Lai, Yong Fang, Gaofeng Li, Youyang Yao, Bingqing Lyu, Zhimin Chen, Jingren Zhou. GraphScope: A System for Interactive Analysis on Distributed Graphs Using a High-Level Language. (&lt;a href=&quot;https://www.usenix.org/system/files/nsdi21-qian.pdf&quot;&gt;pdf&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[2] Bingqing Lyu, Lu Qin, Xuemin Lin, Ying Zhang, Zhengping Qian, and Jingren Zhou. Maximum biclique search at billion scale.  Awarded Best Paper Runner-up in VLDB 2020. (&lt;a href=&quot;http://www.vldb.org/pvldb/vol13/p1359-lyu.pdf&quot;&gt;pdf&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[3] Xiafei Qiu, Wubin Cen, Zhengping Qian, You Peng, Ying Zhang, Xuemin Lin, and Jingren Zhou. Real-time constrained cycle detection in large dynamic graphs.  In VLDB 2018. (&lt;a href=&quot;http://www.vldb.org/pvldb/vol11/p1876-qiu.pdf&quot;&gt;pdf&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[4] Vasiliki Kalavri, Vladimir Vlassov, Seif Haridi. High-Level Programming Abstractions for Distributed Graph Processing. (&lt;a href=&quot;https://arxiv.org/pdf/1607.02646v1.pdf&quot;&gt;pdf&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[5] Robert H.P. Engels. The Rise of Graph Technology. https://www.linkedin.com/pulse/rise-graph-technology-robert-h-p-engels-/&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 29 Apr 2021 10:10:42 +0800</pubDate>
        <link>https://graphscope.io/blog/tech/2021/04/29/Introducing-gaia-a-scalable-engine-for-gremlin-the-sql-for-graphs.html</link>
        <guid isPermaLink="true">https://graphscope.io/blog/tech/2021/04/29/Introducing-gaia-a-scalable-engine-for-gremlin-the-sql-for-graphs.html</guid>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>Release Notes: v0.3.0</title>
        <description>&lt;p&gt;&lt;img src=&quot;/blog/assets/images/release_note_t.png&quot; alt=&quot;release-note&quot; /&gt;
GraphScope v0.3.0 is released as scheduled. This release includes new features and major updates for  frontend APIs for graph manipulation, integration with other systems as well as code optimization for some operators. Another direction we are working on is to ease the deployment of GraphScope with/without Kubernetes.&lt;/p&gt;

&lt;p&gt;We highlight the following improvements included in this release:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Better integration with other systems&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;GraphScope aims to support easy integrations with other big data processing systems. As a first step, this release supported that the results (in the format of dataframe) of GraphScope can be further processed by Mars, a distributed tensor-based computation engine.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Performance and function enhancement&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Pre-compile a set of commonly used applications and graphs into the docker image to improve the response time of each operation in Python.&lt;/li&gt;
      &lt;li&gt;Optimize the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;session.gremlin(...)&lt;/code&gt;and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;session.close()&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Support Louvain algorithm as a built-in application in the graph analytics engine.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Improved graph manipulation APIs&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Support for adding vertices and edges to an existing graph.&lt;/li&gt;
      &lt;li&gt;Add a general project operator.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Easier deployment with/without Kubernetes.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;GraphScope v0.3.0 provided a &lt;a href=&quot;https://github.com/alibaba/GraphScope/blob/main/scripts/launch_cluster.py&quot;&gt;script&lt;/a&gt; to deploy GraphScope on a Kubernetes cluster of AWS/aliyun.&lt;/li&gt;
      &lt;li&gt;Support deployment with &lt;a href=&quot;https://artifacthub.io/packages/helm/graphscope/graphscope&quot;&gt;HELM&lt;/a&gt; and generalize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k8s_volumes&lt;/code&gt; to support PVC mount.&lt;/li&gt;
      &lt;li&gt;This release started to support the deployment and running of GraphScope locally without Kubernetes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more detailed improvements that have been made in this release, please refer to the complete &lt;a href=&quot;https://github.com/alibaba/GraphScope/releases/tag/v0.3.0&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Apr 2021 11:33:20 +0800</pubDate>
        <link>https://graphscope.io/blog/releasenotes/2021/04/11/release-notes-0.3.0.html</link>
        <guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2021/04/11/release-notes-0.3.0.html</guid>
        
        
        <category>ReleaseNotes</category>
        
      </item>
    
      <item>
        <title>A Review of Programming Models for Parallel Graph Processing</title>
        <description>&lt;p&gt;&lt;img src=&quot;/blog/assets/images/programing-models.jpg&quot; alt=&quot;programing-models&quot; /&gt;
To explore underlying insights hidden in graph data, many graph analytics algorithms, e.g., PageRank and single source shortest paths (the Dijkstra’s algorithm), have been designed to solve different problems.&lt;/p&gt;

&lt;p&gt;In a single machine environment, developers can easily implement sequential solutions to these algorithms as they have a global view of the graph and can freely iterate through all vertices and edges. Current graph data in real industrial scenarios usually consists of billions of vertices and trillions of edges. Such a graph has to be divided into multiple partitions, and stored and processed in a distributed/parallel way. To allow developers to succinctly express graph algorithms under such environment, many programming models for parallel graph processing have been proposed. In this post, we would like to introduce some commonly used programming models, and further discuss their pros and cons.&lt;/p&gt;

&lt;h4 id=&quot;think-like-a-vertex&quot;&gt;Think like a vertex&lt;/h4&gt;

&lt;p&gt;The vertex-centric model proposed in Pregel[1] follows the philosophy of “think like a vertex”, where each vertex contains information about itself as well as all its adjacent edges, and the computation is expressed at the level of a single vertex. More specifically, the entire computation process is divided into multiple iterations (called &lt;em&gt;supersteps&lt;/em&gt;), and in each superstep, all vertices execute the same user-defined function (called &lt;em&gt;vertex program&lt;/em&gt;) that expresses the logic of a given algorithm. The vertex program defines how each vertex processes incoming messages (sent in the previous superstep), and sends messages to other vertices (for the next superstep). The iterations terminate until no messages are sent from any vertex, indicating a halt.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/vertex-messaging.png&quot; alt=&quot;vertex-model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the vertex-centric model, the vertex program of single source shortest paths (SSSP) is expressed as follows.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VertexProgramForSSSP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# receive and merge incoming messages
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;incoming_msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiveMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;merged_msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incoming_msgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# update vertex property
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merged_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merged_msg&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# send messages to neighbors
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge_weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor_dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge_weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, the performance of Pregel drops dramatically when facing natural graphs which follow a power-law distribution. To solve this problem, PowerGraph[2] proposed the GAS (Gather-Apply-Scatter) programming model for the vertex-cut graph partitioning strategy. The &lt;em&gt;Gather&lt;/em&gt; function runs locally on each partition and then one accumulator is sent from each mirror to the master. The master runs the &lt;em&gt;Apply&lt;/em&gt; function and then sends the updated vertex data to all mirrors. Finally, the &lt;em&gt;Scatter&lt;/em&gt; phase is run in parallel on mirrors to update the data on adjacent edges.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/gas.png&quot; alt=&quot;gas-model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Following the GAS abstraction, the SSSP can be implemented as follows.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GASForSSSP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# gather_nbrs: ALL_NBRS
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_dist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;D_u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_dist&lt;/span&gt;
        
    &lt;span class=&quot;c1&quot;&gt;# scatter_nbrs: ALL_NBRS
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# If changed, activate neighbor
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;Activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;pros&quot;&gt;Pros:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Powerful expressiveness to express various graph algorithms.&lt;/li&gt;
  &lt;li&gt;The vertex program is easy to run parallelly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;cons&quot;&gt;Cons:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Existing sequential (single-machine) graph algorithms have to be modified to comply with the “think like a vertex” principle.&lt;/li&gt;
  &lt;li&gt;Each vertex is very short-sighted: it only has information about its 1-hop neighbors, and thus information is propagated through the graph slowly, one hop at a time. As a result, it may take many computation iterations to propagate a piece of information from a source to a destination.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;think-like-a-graph&quot;&gt;Think like a graph&lt;/h4&gt;

&lt;p&gt;To tackle the problem of short-sighted vertices in the vertex-centric model, the subgraph-centric (a.k.a. block-centric, partition-centric) programming model[3, 4] is proposed. Different from the vertex-centric model, the subgraph-centric model focuses on the entire subgraph, and is labeled as “think like a graph”. For the vertex-centric model, it uses the information of 1-hop neighbors to update the value of each vertex in one superstep. Instead, the subgraph-centric model leverages information within the whole subgraph. In addition, each vertex can send messages to any vertex in the graph, instead of 1-hop neighbors. In this way, the communication overhead and the number of supersteps are greatly reduced.&lt;/p&gt;

&lt;p&gt;The SSSP is expressed as follows in the subgraph-centric model.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ComputeSSSP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subgraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# vertices with improved distances
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;openset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superstep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# initialize distances
&lt;/span&gt;    	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subgraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;internal_vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# set distance to source as 0
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;openset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# distance has improved
&lt;/span&gt;	    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_INT&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# not source vertex
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# process input messages
&lt;/span&gt;	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subgraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;subgraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;openset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# distance improved
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;boundarySet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dijkstra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# Send new distances to boundary vertices
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boundarySG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boundarySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;SendToSubgraphVertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boundarySG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;VoteToHalt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dijkstra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;boundaryOpenset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;openset&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetShortestVertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# update neighbors, notify if boundary.
&lt;/span&gt;	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBoundary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;boundaryOpenset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subgraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;openset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# distance has improved
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;openset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# done with this local vertex
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boundaryOpenset&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;pros-1&quot;&gt;Pros:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;The same expressiveness with the vertex-centric model.&lt;/li&gt;
  &lt;li&gt;Offer lower communication overhead, lower scheduling overhead, and lower memory overhead compared with vertex-centric approaches.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;cons-1&quot;&gt;Cons:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Still need to recast existing sequential graph algorithms into the new programming model.&lt;/li&gt;
  &lt;li&gt;Developers need to know a lot of concepts (e.g., internal and boundary vertices), causing the implementation challenge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;think-sequential-run-parallel&quot;&gt;Think sequential, run parallel&lt;/h4&gt;

&lt;p&gt;To make parallel graph computations accessible to average users while achieving high performance at the same time, the PIE (PEval-IncEval-Assemble) programming model[5] is proposed. In this model, users only need to provide three functions,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;(1) PEval, a sequential (single-machine) function for given a query, computes the answer on a local partition;&lt;/li&gt;
  &lt;li&gt;(2) IncEval, a sequential incremental function, computes changes to the old output by treating incoming messages as updates; and&lt;/li&gt;
  &lt;li&gt;(3) Assemble, which collects partial answers, and combines them into a complete answer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The PIE model works on a graph G and each worker maintains a partition of G. Given a query, each worker first executes PEval against its local partition, to compute partial answers in parallel. Then each worker may exchange partial results with other workers via synchronous message passing. Upon receiving messages, each worker incrementally computes IncEval. The incremental step iterates until no further messages can be generated. At this point, Assemble pulls partial answers and assembles the final result. In this way, the PIE model parallelizes existing sequential graph algorithms, without revising their logic and workflow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/gs-workflow.png&quot; alt=&quot;vertex-model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following pseudo-code shows how SSSP is expressed in the PIE model, where the Dijkstra’s algorithm is directly used for the computation of parallel SSSP.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dijkstra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VertexHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vid&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;distu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_outgoing_edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_neighbor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;distv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distv&lt;/span&gt;
		    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_inner_vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distv&lt;/span&gt;       
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PEval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_INT&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dijkstra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IncEval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dijkstra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Currently, the PIE model has been developed and evaluated in the graph analytical engine of GraphScope. On the LDBC Graph Analytics benchmark, GraphScope outperforms other state-of-the-art graph processing systems (see &lt;a href=&quot;https://github.com/alibaba/libgrape-lite/blob/master/Performance.md&quot;&gt;link&lt;/a&gt;). Welcome to try and develop your own graph algorithms with GraphScope.&lt;/p&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Some images in this article are cited from [2] and https://twitter.com/katestarbird/status/1358088750765539329/photo/1.&lt;/li&gt;
  &lt;li&gt;[1] Malewicz, Grzegorz, et al. “Pregel: a system for large-scale graph processing.” Proceedings of the 2010 ACM SIGMOD International Conference on Management of data. 2010.&lt;/li&gt;
  &lt;li&gt;[2] Gonzalez, Joseph E., et al. “Powergraph: Distributed graph-parallel computation on natural graphs.” 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI 12). 2012.&lt;/li&gt;
  &lt;li&gt;[3] Tian, Yuanyuan, et al. “From” think like a vertex” to” think like a graph”.” Proceedings of the VLDB Endowment 7.3 (2013): 193-204.&lt;/li&gt;
  &lt;li&gt;[4] Yan, Da, et al. “Blogel: A block-centric framework for distributed computation on real-world graphs.” Proceedings of the VLDB Endowment 7.14 (2014): 1981-1992.&lt;/li&gt;
  &lt;li&gt;[5] Fan, Wenfei, et al. “Parallelizing sequential graph computations.” ACM Transactions on Database Systems (TODS) 43.4 (2018): 1-39.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 25 Mar 2021 18:21:42 +0800</pubDate>
        <link>https://graphscope.io/blog/tech/2021/03/25/a-review-of-programming-models-for-parallel-graph-processing.html</link>
        <guid isPermaLink="true">https://graphscope.io/blog/tech/2021/03/25/a-review-of-programming-models-for-parallel-graph-processing.html</guid>
        
        
        <category>Tech</category>
        
      </item>
    
      <item>
        <title>Introducing GraphScope Playground</title>
        <description>&lt;p&gt;&lt;img src=&quot;/blog/assets/images/try-record.gif&quot; alt=&quot;try-record.gif&quot; /&gt; 
Today we released &lt;a href=&quot;https://github.com/alibaba/GraphScope/releases/tag/v0.2.0&quot;&gt;GraphScope 0.2.0&lt;/a&gt;.  With this release, we are happy to introduce &lt;a href=&quot;http://try.graphscope.app/&quot;&gt;GraphScope Playground&lt;/a&gt;, a hosted JupyterLab with GraphScope ready out-of-the-box. Now you can get started with GraphScope straight away in your browser without any hassle for setting it up.&lt;/p&gt;

&lt;h4 id=&quot;signing-in&quot;&gt;Signing-in&lt;/h4&gt;
&lt;p&gt;The GraphScope Playground is built on top of &lt;a href=&quot;https://jupyter.org/hub&quot;&gt;JupyterHub&lt;/a&gt;. At the moment, it only supports Github OAuth for signing-in. Please make sure you have a &lt;a href=&quot;https://github.com/join&quot;&gt;Github account&lt;/a&gt; before proceed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/try-login.gif&quot; alt=&quot;try-login.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open &lt;a href=&quot;https://try.graphscope.app/&quot;&gt;GraphScope PlayGround&lt;/a&gt; in your browser. You will be shown a landing page of GraphScope Playground. It only take a few clicks to get authenticated with your Github account. A JupyterLab session will be created for you in a few seconds.&lt;/p&gt;

&lt;h4 id=&quot;in-the-playground&quot;&gt;In the Playground&lt;/h4&gt;
&lt;p&gt;You will be redirected to the JupyterLab interface after signing-in. It is a modern integrated development environment for Notebooks, where documents and activities integrate with each other, enabling new workflows for interactive computing in Python.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/raw-playground-snapshot.png&quot; alt=&quot;gs-snapshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the left, there is a sidebar, where you can navigate your workspace with the file browser, as well as check the list of running kernels and terminals, the command palette, and the list of tabs in the main work area etc. One the right, it is the main work area, where tabs and panes can be created for the files and notebooks you edit. You can also open a terminal if you like.&lt;/p&gt;

&lt;p&gt;A JupyterLab session lives inside a docker container is specifically created for you after signing-in. The session will live for up to 120 mins (or 15 mins without user interactions). Based on the the official &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jupyterhub/singleuser:1.3&lt;/code&gt; image, we added necessary packages, tutorials and sample datasets for running GraphScope to the  Playground image. You are given 1 CPU core and 2GB memory for the JupyterLab container, and you are also given the access to a Kubernetes cluster with a limit of 16 CPU cores and 32GB memory for you to run GraphScope sessions. Following the convention of JupyterLab, the default working directory is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/jovyan/&lt;/code&gt;,  where you can find tutorials at the root, datasets under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasets&lt;/code&gt; folder and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workspace&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;You can open an existing / create a new notebook, and start coding with GraphScope straight away. If you want to access the files you edited at a later time, you can place them under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workspace&lt;/code&gt; folder. All the changes elsewhere will be reset after session ends. We place  &lt;strong&gt;a copy of the sample datasets&lt;/strong&gt; on K8s hosts, which can be &lt;a href=&quot;https://nbviewer.jupyter.org/github/alibaba/GraphScope/blob/main/tutorials/1_how_to_launch_a_session.ipynb#Mounting-Volumes&quot;&gt;mounted to the GraphScope pods&lt;/a&gt;. Please note that your local edits to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/datasets&lt;/code&gt; won’t affect the copy on K8s hosts (&lt;em&gt;stay tuned!&lt;/em&gt;).&lt;/p&gt;

&lt;h4 id=&quot;tutorials&quot;&gt;Tutorials&lt;/h4&gt;

&lt;p&gt;In the GraphScope Playground, you have access to a set of comprehensive tutorials to get started with GraphScope. In the tutorials you could learn how to launch a session, to load graphs, and to run analytical analysis, interactive queries as well as graph neural network trainings in GraphScope. At the moment, we have the following tutorials included.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://nbviewer.jupyter.org/github/alibaba/GraphScope/blob/main/tutorials/1_how_to_launch_a_session.ipynb&quot;&gt;How to Create a Session&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nbviewer.jupyter.org/github/alibaba/GraphScope/blob/main/tutorials/2_loading_graphs.ipynb&quot;&gt;Loading Graphs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nbviewer.jupyter.org/github/alibaba/GraphScope/blob/main/tutorials/3_builtin_analytical_algorithms.ipynb&quot;&gt;Built-in Analytical Algorithms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nbviewer.jupyter.org/github/alibaba/GraphScope/blob/main/tutorials/4_writing_your_own_algorithms.ipynb&quot;&gt;Writing Your Own Algorithms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nbviewer.jupyter.org/github/alibaba/GraphScope/blob/main/tutorials/5_interactive_query_with_gremlin.ipynb&quot;&gt;Interactive Query with Gremlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nbviewer.jupyter.org/github/alibaba/GraphScope/blob/main/tutorials/6_unsupervised_learning_with_graphsage.ipynb&quot;&gt;Unsupervised Learning with GraphSage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nbviewer.jupyter.org/github/alibaba/GraphScope/blob/main/tutorials/7_supervised_learning_with_gcn.ipynb&quot;&gt;Supervised Learning with GCN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nbviewer.jupyter.org/github/alibaba/GraphScope/blob/main/tutorials/8_node_classification_on_citation_network.ipynb&quot;&gt;A Complex Workflow: Node Classification on Citation Network&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;stay-tuned-for-new-features&quot;&gt;Stay tuned for new features&lt;/h1&gt;
&lt;p&gt;With GraphScope Playground, we wish to make getting started with GraphScope as easy as possible. We are constantly working on improving the experience. If you have any questions or feedbacks, feel free to write a &lt;a href=&quot;https://github.com/alibaba/GraphScope/discussions&quot;&gt;post at Github Discussions&lt;/a&gt;. Happy Coding!&lt;/p&gt;

&lt;p&gt;Please note that the service provided by GraphScope Playground is strictly limited to the trial of GraphScope only. Any other use is strictly prohibited. Your use of the service will be at your own risk. And we provide no warranties to the service.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Feb 2021 14:33:20 +0800</pubDate>
        <link>https://graphscope.io/blog/newsroom/2021/02/01/introducing-graphscope-playground.html</link>
        <guid isPermaLink="true">https://graphscope.io/blog/newsroom/2021/02/01/introducing-graphscope-playground.html</guid>
        
        
        <category>Newsroom</category>
        
      </item>
    
      <item>
        <title>Release Notes: v0.2.0</title>
        <description>&lt;p&gt;&lt;img src=&quot;/blog/assets/images/release_note_t.png&quot; alt=&quot;release-note&quot; /&gt;
The GraphScope team is pleased to announce the 0.2.0 release after two-months development.
The 0.2.0 release is focused on better getting started experience for end-users and we have
make a lot of improvements since the last minor release. We have improved our documentation
a lot, and made the kubernetes integration work for more settings. We have also brought the
support for various I/O to make GraphScope suitable for more production environments.&lt;/p&gt;

&lt;p&gt;Along with the 0.2.0 release we also bring &lt;a href=&quot;https://try.graphscope.app&quot;&gt;GraphScope Playground&lt;/a&gt; to users
for getting started with GraphScope easier.&lt;/p&gt;

&lt;p&gt;We highlights the following improvements included in this releases:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Better Kubernetes integration.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoadBalancer&lt;/code&gt; service type has been supported in this release, which brings GraphScope to
vendored could environments like Alibabacloud, AWS and Azure.&lt;/li&gt;
      &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volumes&lt;/code&gt; parameter has been added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graphscope.session()&lt;/code&gt; to allow users mount their
volumes (host path, or cloud volumes, etc.) to worker pods for input graph data and retrieve
results.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enhancement for interactive query.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;GraphScope v0.2.0 added a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InteractiveQuery.traversal_source()&lt;/code&gt; method to allows an interative
query seamlessly works with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gremlinpython&lt;/code&gt; SDK.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Better I/O and serialization support.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;GraphScope v0.2.0 started to support various I/O, including Aliyun OSS, AWS S3, HDFS and other
storage services that the filesystem-spec could support, for input datasets and result sink.&lt;/li&gt;
      &lt;li&gt;GraphScope v0.2.0 added a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graph.serialize()&lt;/code&gt; method to allow users serialize a graph to external
storage and restore it back via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graph.deserailize()&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bugfix for learning engine.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;A bug in closing learning instance of a graph has been fixed along this release.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more detailed bugfixes and improvements that have been made in
this version, please refer to the &lt;a href=&quot;https://github.com/alibaba/GraphScope/releases/tag/v0.2.0&quot;&gt;complete changelog&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Feb 2021 11:33:20 +0800</pubDate>
        <link>https://graphscope.io/blog/releasenotes/2021/02/01/release-notes-0.2.0.html</link>
        <guid isPermaLink="true">https://graphscope.io/blog/releasenotes/2021/02/01/release-notes-0.2.0.html</guid>
        
        
        <category>ReleaseNotes</category>
        
      </item>
    
      <item>
        <title>Say Hello to GraphScope!</title>
        <description>&lt;p&gt;&lt;img src=&quot;/blog/assets/images/releasing.png&quot; alt=&quot;graphscope-releasing&quot; /&gt;
The source code of GraphScope is released today!&lt;/p&gt;

&lt;p&gt;github repo: &lt;a href=&quot;https://github.com/alibaba/graphscope&quot;&gt;https://github.com/alibaba/graphscope&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GraphScope aims to provide a single system that is able to support three
types of computation tasks, i.e., graph interactive query, graph analytics and graph deep learning.
We carefully design GraphScope with user-friendly interface and extensible programming APIs,
so that users can easily construct customized end-to-end graph processing pipelines involving
different types of graph computation tasks. In specific, GraphScope fully embraces the Python and
Gremlin ecosystem, and thus comes with a shallow learning curve for both data scientists and
developers. Under the hood, GraphScope comprises core engines specifically optimized for each
graph computation paradigm, and can smoothly orchestrate multiple engines to cooperate efficiently,
avoiding the complexity of manually stitching multiple independent systems together. GraphScope
can scale to ultra-large graphs, and run in industrial speed and robustness.&lt;/p&gt;

&lt;p&gt;GraphScope is released under Apache License 2.0. Any contributions are greatly appreciated!
You may reach us at &lt;a href=&quot;http://slack.graphscope.io/&quot;&gt;Slack channel&lt;/a&gt; or submit 
&lt;a href=&quot;https://github.com/alibaba/GraphScope/issues&quot;&gt;GitHub issues&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Dec 2020 18:18:42 +0800</pubDate>
        <link>https://graphscope.io/blog/newsroom/2020/12/07/say-hello-to-graphscope.html</link>
        <guid isPermaLink="true">https://graphscope.io/blog/newsroom/2020/12/07/say-hello-to-graphscope.html</guid>
        
        
        <category>Newsroom</category>
        
      </item>
    
  </channel>
</rss>
