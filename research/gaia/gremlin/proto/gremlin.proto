/**
 * Copyright 2020 Alibaba Group Holding Limited.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
package gremlin;
option java_package = "com.alibaba.graphscope.common.proto";
option java_outer_classname = "Gremlin";

import "common.proto";

enum Compare {
  EQ  = 0;
  NE  = 1;
  LT  = 2;
  LE  = 3;
  GT  = 4;
  GE  = 5;
  WITHIN = 6;
  WITHOUT = 7;
}

message FilterExp {
  common.Key     left  = 1;
  Compare cmp   = 2;
  common.Value   right = 3;
}

enum Connect {
  OR    = 0;
  AND   = 1;
}

message FilterNode {
  oneof inner {
    FilterExp single = 1;
    bytes    chain   = 2;
  }
  Connect next    = 3;
}

message FilterChain {
  repeated FilterNode node = 1;
}

message GremlinStep {
  // Every gremlin step can potentially carry tags
  repeated string tags = 1;
  oneof step {
    GraphStep graph_step = 2;
    VertexStep vertex_step = 3;
    HasStep has_step = 4;
    WhereStep where_step = 5;
    PathFilterStep path_filter_step = 6;
    RangeGlobalStep range_global_step = 7;
    PathStep path_step = 8;
    SelectStep select_step = 9;
    IdentityStep identity_step = 10;
    OrderByStep order_by_step = 11;
    GroupByStep group_by_step = 12;
    SelectOneStepWithoutBy select_one_without_by = 13;
    PathLocalCountStep  path_local_count_step = 14;
    ValuesStep values_step = 15;
    EdgeVertexStep edge_vertex_step = 16;
  };
}

enum EntityType {
  VERTEX = 0;
  EDGE = 1;
}

message GraphStep {
  // To filter vertices based on a id list
  repeated int64 ids = 1;
  // To filter vertices based on a label list
  repeated int32 labels = 2;
  // The entity type, either vertex or edge, for g.V() or g.E()
  EntityType return_type = 3;
  // To filter vertices based on some predicates, e.g. has("name", eq("John"))
  FilterChain predicates = 4;
}

enum Direction {
  OUT = 0;
  IN = 1;
  BOTH = 2;
}

message VertexStep {
  // To filter based on the edge labels, e.g. g.out("knows")
  repeated int32 edge_labels = 1;
  // For g.outX(), g.inX() and g.bothX()
  Direction direction = 2;
  // The entity type, either vertex or edge, for g.out(), g.outE()
  EntityType return_type = 3;
  // To filter vertices based on some predicates, e.g. has("name", eq("John"))
  FilterChain predicates = 4;
}

message HasStep {
  // To filter vertices based on some predicates, e.g. has("name", eq("John"))
  FilterChain predicates = 1;
}

message WhereStep {
  string start_tag = 1;
  common.Key start_token = 2;
  repeated string tags = 3;
  FilterChain predicates = 4;
}

// there's no path option for now
message PathStep {}

message PathFilterStep {
  enum PathHint {
    SIMPLE = 0;
    CYCLIC = 1;
  }
  PathHint hint = 1;
}

message RangeGlobalStep {
  int32 low_range = 1;
  int32 high_range = 2;
}

// IdentityStep caters for Gremlin's identity() step.
// We further use it to get properties from the graph properties, which is useful when
// ordering by or projecting certain properties of some entities.
message IdentityStep {
  // The properties of the entities that need to be collected to the traversal path
  repeated string properties = 1;
  // Whether we need to collect all properties
  bool is_all = 2 ;
}

message WhereJoiner {}
// for group and order by
message ByJoiner {}

message SubTaskJoiner {
    oneof inner {
        WhereJoiner where_joiner = 1;
        ByJoiner by_joiner = 2;
    }
}


message MapKey {}
message MapValue {}
message SubValue {}

// we try to unify the by key for select, group, and order
message ByKey {
  oneof item {
    // by(id/label/property/values("p1","p2")
    common.Key key = 1;
    // by(valueMap("prop1", "prop2")), empty means all
    common.StringArray name = 2;
    // by(keys)
    MapKey map_keys = 3;
    // by(values)
    MapValue map_values = 4;
    // by value computed by sub traversal
    SubValue computed = 5;
  }
}

// we support tag.by_key (e.g., xxx.as("a").select("a").by("name")) and head.by_key (e.g., select("name"))
message TagKey {
  string tag = 1;
  ByKey by_key = 2;
}

// hack way to implement select("a") temporarily
message SelectOneStepWithoutBy {
  string tag = 1;
}

message SelectStep {
  enum Pop {
    FIRST = 0;
    LAST = 1;
    ALL = 2;
    MIXED = 3;
  }
  Pop pop = 1;
  repeated TagKey select_keys = 2;
}

message OrderByComparePair {
    enum Order {
      // random
      SHUFFLE = 0;
      ASC = 1;
      DESC = 2;
    }
    TagKey key = 1;
    Order order = 2;
}

message OrderByStep {
    repeated OrderByComparePair pairs = 2;
}

message GroupByStep {
  TagKey key = 1;
}

message PathLocalCountStep{}

message ValuesStep {
  repeated string properties = 1;
}

message EdgeVertexStep {
    Direction direction = 1;
}
