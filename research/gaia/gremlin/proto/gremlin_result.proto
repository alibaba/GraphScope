/**
 * Copyright 2020 Alibaba Group Holding Limited.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
package protobuf;
option java_package = "com.alibaba.graphscope.common.proto";
option java_outer_classname = "GremlinResult";

import "common.proto";

message Label {
  oneof item {
    int32 name_id = 1;
  }
}

message Property {
  common.PropertyKey key = 1;
  common.Value value = 2;
}

message Vertex {
  int64 id = 1;
  Label label = 2;
  repeated Property properties = 3;
}

message Edge {
  bytes id = 1;
  Label label = 2;
  // TODO: should be consistent, bytes?
  int64 src_id = 3;
  Label src_label = 4;
  // TODO: should be consistent, bytes?
  int64 dst_id = 5;
  Label dst_label = 6;
  repeated Property properties = 7;
}

message GraphElement {
  oneof inner {
    Edge edge = 1;
    Vertex vertex = 2;
  }
}

message Path {
  repeated GraphElement path = 1;
}

message PathArray {
  repeated Path item = 1;
}

message GraphElementArray {
  repeated GraphElement item = 1;
}

message ValueMapEntries {
    repeated Property property = 1;
}

message OneTagValue {
    oneof item {
        // select("a")
        GraphElement element = 1;
        // select("a").by("name") or select("a").by(values("name"))
        common.Value value = 2;
        // select("a").by(valueMap("name", "age"))
        ValueMapEntries properties = 3;
    }
}

message TagEntry {
    int32 tag = 1;
    OneTagValue value = 2;
}

message TagEntries {
    repeated TagEntry entries = 1;
}

message TagEntriesArray {
    repeated TagEntries item = 1;
}

message ValueArray {
  repeated common.Value item =1;
}

message PairElement {
  // we only consider simple PairElement for now,
  // e.g., group().by().by(), where key is GraphElement, value is GraphElementArray
  //       group().by(values("id")).by(("id")), where key is Value, value is ValueArray
  oneof inner {
    GraphElement graph_element = 1;
    common.Value value = 2;
    GraphElementArray graph_element_list = 3;
    // As we have not support group().by().by(("id")) yet, we will not set ValueArray for now.
    ValueArray value_list = 4;
  }
}

message MapPair {
  PairElement first = 1;
  PairElement second = 2;
}

message MapArray {
  repeated MapPair item = 1;
}

message Result {
  oneof inner {
    // result of path()
    PathArray paths = 1;
    // result of g.V() etc.
    GraphElementArray elements = 2;
    // result of select(tag).by(key)
    TagEntriesArray tag_entries = 3;
    // result of group()
    MapArray map_result = 4;
    // result of fold(), e.g., count()
    common.Value value = 5;
    // result of list of values, e.g., values("id")
    ValueArray value_list = 6;
  }
}
