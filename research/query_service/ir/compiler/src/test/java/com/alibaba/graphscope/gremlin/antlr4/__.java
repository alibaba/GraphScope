package com.alibaba.graphscope.gremlin.antlr4;

import com.alibaba.graphscope.gremlin.plugin.traversal.IrCustomizedTraversal;

import org.apache.tinkerpop.gremlin.process.traversal.Traversal;
import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal;
import org.apache.tinkerpop.gremlin.structure.*;

import java.util.Map;

/**
 * standard {@link org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__} always returns
 * {@link org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal} by invoking start(),
 * which cannot be compared with {@link com.alibaba.graphscope.gremlin.plugin.traversal.IrCustomizedTraversal} for type difference.
 * Here rewrite these static functions to put the added step into IrCustomizedTraversal, which is comparable to the type generated by
 * {@link com.alibaba.graphscope.gremlin.plugin.script.AntlrToJavaScriptEngine}
 */
public class __ {
    protected __() {}

    public static <A> GraphTraversal<?, ?> start() {
        return GremlinAntlrToJava.getTraversalSupplier().get();
    }

    public static <A extends Element, B> GraphTraversal<?, Map<Object, B>> valueMap(
            final String... propertyKeys) {
        return start().valueMap(propertyKeys);
    }

    public static <A extends Element, B> GraphTraversal<?, B> values(final String... propertyKeys) {
        return start().values(propertyKeys);
    }

    public static <A> GraphTraversal<?, ?> as(final String label, final String... labels) {
        return start().as(label, labels);
    }

    public static GraphTraversal<?, Vertex> out(final String... edgeLabels) {
        return start().out(edgeLabels);
    }

    public static IrCustomizedTraversal<?, ?> out(Traversal rangeTraversal, String... labels) {
        return (IrCustomizedTraversal<?, ?>)
                ((IrCustomizedTraversal) start()).out(rangeTraversal, labels);
    }

    public static GraphTraversal<?, ?> endV() {
        return ((IrCustomizedTraversal) start()).endV();
    }

    public static <A> GraphTraversal<?, Long> count() {
        return start().count();
    }

    public static <A> GraphTraversal<?, ?> fold() {
        return start().fold();
    }

    public static <A> GraphTraversal<?, ?> range(final long low, final long high) {
        return start().range(low, high);
    }

    public static <A, B> GraphTraversal<?, B> select(final String selectKey) {
        return start().select(selectKey);
    }

    public static <A> GraphTraversal<?, ?> where(Traversal<?, ?> whereTraversal) {
        return start().where(whereTraversal);
    }

    public static <A> GraphTraversal<?, ?> not(Traversal<?, ?> notTraversal) {
        return start().not(notTraversal);
    }

    public static <A> GraphTraversal<?, ?> dedup(String... dedupLabels) {
        return start().dedup(dedupLabels);
    }

    public static <A> GraphTraversal<?, ?> sum() {
        return start().sum();
    }
}
