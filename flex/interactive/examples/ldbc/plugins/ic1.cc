// Generated by query_generator.h
// This file is generated by codegen/query_generator.h
// DO NOT EDIT

#include "flex/engines/graph_db/app/app_base.h"
#include "flex/engines/hqps_db/core/sync_engine.h"
#include "flex/engines/hqps_db/database/mutable_csr_interface.h"
#include "interactive_utils.h"

namespace gs {
// Auto generated expression class definition
struct Query0left_left_left_expr1 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0left_left_left_expr1(std::string_view firstName_0)
      : firstName_0(firstName_0) {}

  inline auto operator()(std::string_view firstName) const {
    return firstName == firstName_0;
  }

 private:
  std::string_view firstName_0;
};

struct Query0left_left_left_expr2 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0left_left_left_expr2() {}

  inline auto operator()(GlobalId var5, GlobalId var6) const {
    return var5 != var6;
  }

 private:
};

struct Query0left_left_left_expr3 {
 public:
  using result_t = std::tuple<std::string_view, int32_t, std::string_view>;
  ;
  static constexpr bool filter_null = true;
  Query0left_left_left_expr3() {}

  inline auto operator()(GlobalId var9, std::string_view name, int32_t workFrom,
                         std::string_view name_0) const {
    if (NONE == var9) {
      return NullRecordCreator<result_t>::GetNull();
    }

    return std::tuple{name, workFrom, name};
    ;
  }

 private:
};

struct Query0left_left_left_expr6 {
 public:
  using result_t = std::tuple<std::string_view, int32_t, std::string_view>;
  ;
  static constexpr bool filter_null = true;
  Query0left_left_left_expr6() {}

  inline auto operator()(GlobalId var13, std::string_view name,
                         int32_t classYear, std::string_view name_0) const {
    if (NONE == var13) {
      return NullRecordCreator<result_t>::GetNull();
    }

    return std::tuple{name, classYear, name};
    ;
  }

 private:
};

// Auto generated query class definition
class Query0 : public AppBase {
 public:
  using Engine = SyncEngine<gs::MutableCSRInterface>;
  using label_id_t = typename gs::MutableCSRInterface::label_id_t;
  using vertex_id_t = typename gs::MutableCSRInterface::vertex_id_t;
  using gid_t = typename gs::MutableCSRInterface::gid_t;
  // constructor
  Query0(const GraphDBSession& session) : graph(session) {}
  // Query function for query class
  results::CollectiveResults Query(int64_t personId,
                                   std::string_view firstName) const {
    auto left_left_left_ctx0 =
        Engine::template ScanVertexWithOid<gs::AppendOpt::Persist, int64_t>(
            graph, 1, std::vector<int64_t>{personId});

    auto left_left_left_edge_expand_opt1 = gs::make_edge_expandv_opt(
        gs::Direction::Both, (label_id_t) 8, (label_id_t) 1);

    auto left_left_left_get_v_opt0 = make_getv_opt(
        gs::VOpt::Start, std::array<label_id_t, 1>{(label_id_t) 1});

    auto left_left_left_path_opt2 = gs::make_path_expandv_opt(
        std::move(left_left_left_edge_expand_opt1),
        std::move(left_left_left_get_v_opt0), gs::Range(1, 4));
    auto left_left_left_ctx1 =
        Engine::PathExpandP<gs::AppendOpt::Persist, INPUT_COL_ID(0)>(
            graph, std::move(left_left_left_ctx0),
            std::move(left_left_left_path_opt2));
    auto left_left_left_get_v_opt3 =
        make_getv_opt(gs::VOpt::End, std::array<label_id_t, 1>{(label_id_t) 1});
    auto left_left_left_ctx2 =
        Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
            graph, std::move(left_left_left_ctx1),
            std::move(left_left_left_get_v_opt3));

    // auto left_left_left_ctx2 =
    //     Engine::PathExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
    //         graph, std::move(left_left_left_ctx0),
    //         std::move(left_left_left_path_opt2));

    auto left_left_left_expr1 =
        gs::make_filter(Query0left_left_left_expr1(firstName),
                        gs::PropertySelector<std::string_view>("firstName"));
    auto left_left_left_get_v_opt4 =
        make_getv_opt(gs::VOpt::Itself, std::array<label_id_t, 0>{},
                      std::move(left_left_left_expr1));
    auto left_left_left_ctx3 =
        Engine::template GetV<gs::AppendOpt::Temp, INPUT_COL_ID(-1)>(
            graph, std::move(left_left_left_ctx2),
            std::move(left_left_left_get_v_opt4));
    auto left_left_left_expr2 = gs::make_filter(
        Query0left_left_left_expr2(), gs::PropertySelector<GlobalId>("None"),
        gs::PropertySelector<GlobalId>("None"));
    auto left_left_left_ctx4 =
        Engine::template Select<INPUT_COL_ID(0), INPUT_COL_ID(2)>(
            graph, std::move(left_left_left_ctx3),
            std::move(left_left_left_expr2));

    auto left_left_left_ctx5 = Engine::Project<PROJ_TO_NEW>(
        graph, std::move(left_left_left_ctx4),
        std::tuple{gs::make_mapper_with_variable<INPUT_COL_ID(2)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(1)>(
                       gs::PropertySelector<LengthKey>("length"))});
    GroupKey<0, grape::EmptyType> left_left_left_group_key7(
        gs::PropertySelector<grape::EmptyType>("None"));

    auto left_left_left_agg_func8 = gs::make_aggregate_prop<gs::AggFunc::MIN>(
        std::tuple{gs::PropertySelector<grape::EmptyType>("None")},
        std::integer_sequence<int32_t, 1>{});

    auto left_left_left_ctx6 =
        Engine::GroupBy(graph, std::move(left_left_left_ctx5),
                        std::tuple{left_left_left_group_key7},
                        std::tuple{left_left_left_agg_func8});
    auto left_left_left_ctx7 = Engine::Sort(
        graph, std::move(left_left_left_ctx6), gs::Range(0, 20),
        std::tuple{
            gs::OrderingPropPair<gs::SortOrder::ASC, 1, int32_t>(""),
            gs::OrderingPropPair<gs::SortOrder::ASC, 0, std::string_view>(
                "lastName"),
            gs::OrderingPropPair<gs::SortOrder::ASC, 0, int64_t>("id")});

    auto left_left_right_ctx0 =
        Engine::template ScanVertex<gs::AppendOpt::Persist>(
            graph, 0, Filter<TruePredicate>());

    auto left_left_right_edge_expand_opt0 = gs::make_edge_expandv_opt(
        gs::Direction::In, (label_id_t) 7, (label_id_t) 0);
    auto left_left_right_ctx1 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(0)>(
            graph, std::move(left_left_right_ctx0),
            std::move(left_left_right_edge_expand_opt0));

    auto left_left_right_edge_expand_opt1 = gs::make_edge_expande_opt<int32_t>(
        gs::PropNameArray<int32_t>{"workFrom"}, gs::Direction::In,
        (label_id_t) 10, (label_id_t) 1);
    auto left_left_right_ctx2 =
        Engine::template EdgeExpandE<gs::AppendOpt::Persist, INPUT_COL_ID(1)>(
            graph, std::move(left_left_right_ctx1),
            std::move(left_left_right_edge_expand_opt1));

    auto left_left_right_get_v_opt2 = make_getv_opt(
        gs::VOpt::Start, std::array<label_id_t, 1>{(label_id_t) 1});
    auto left_left_right_ctx3 =
        Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
            graph, std::move(left_left_right_ctx2),
            std::move(left_left_right_get_v_opt2));

    auto left_left_left_ctx8 =
        Engine::template Join<0, 3, gs::JoinKind::LeftOuterJoin>(
            std::move(left_left_left_ctx7), std::move(left_left_right_ctx3));
    auto left_left_left_ctx9 = Engine::Project<PROJ_TO_NEW>(
        graph, std::move(left_left_left_ctx8),
        std::tuple{gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(1)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_expr<3, 3, 4, 2>(
                       Query0left_left_left_expr3(),
                       gs::PropertySelector<GlobalId>("None"),
                       gs::PropertySelector<std::string_view>("name"),
                       gs::PropertySelector<int32_t>("workFrom"),
                       gs::PropertySelector<std::string_view>("name"))});
    GroupKey<0, grape::EmptyType> left_left_left_group_key10(
        gs::PropertySelector<grape::EmptyType>("None"));

    GroupKey<1, grape::EmptyType> left_left_left_group_key11(
        gs::PropertySelector<grape::EmptyType>("None"));

    auto left_left_left_agg_func12 =
        gs::make_aggregate_prop<gs::AggFunc::TO_LIST>(
            std::tuple{gs::PropertySelector<grape::EmptyType>("None")},
            std::integer_sequence<int32_t, 2>{});

    auto left_left_left_ctx10 = Engine::GroupBy(
        graph, std::move(left_left_left_ctx9),
        std::tuple{left_left_left_group_key10, left_left_left_group_key11},
        std::tuple{left_left_left_agg_func12});

    auto left_right_ctx0 = Engine::template ScanVertex<gs::AppendOpt::Persist>(
        graph, 0, Filter<TruePredicate>());

    auto left_right_edge_expand_opt0 = gs::make_edge_expandv_opt(
        gs::Direction::In, (label_id_t) 7, (label_id_t) 0);
    auto left_right_ctx1 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(0)>(
            graph, std::move(left_right_ctx0),
            std::move(left_right_edge_expand_opt0));

    auto left_right_edge_expand_opt1 = gs::make_edge_expande_opt<int32_t>(
        gs::PropNameArray<int32_t>{"classYear"}, gs::Direction::In,
        (label_id_t) 14, (label_id_t) 1);
    auto left_right_ctx2 =
        Engine::template EdgeExpandE<gs::AppendOpt::Persist, INPUT_COL_ID(1)>(
            graph, std::move(left_right_ctx1),
            std::move(left_right_edge_expand_opt1));

    auto left_right_get_v_opt2 = make_getv_opt(
        gs::VOpt::Start, std::array<label_id_t, 1>{(label_id_t) 1});
    auto left_right_ctx3 =
        Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
            graph, std::move(left_right_ctx2),
            std::move(left_right_get_v_opt2));

    auto left_left_left_ctx11 =
        Engine::template Join<0, 3, gs::JoinKind::LeftOuterJoin>(
            std::move(left_left_left_ctx10), std::move(left_right_ctx3));
    auto left_left_left_ctx12 = Engine::Project<PROJ_TO_NEW>(
        graph, std::move(left_left_left_ctx11),
        std::tuple{gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(2)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(1)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_expr<4, 4, 5, 3>(
                       Query0left_left_left_expr6(),
                       gs::PropertySelector<GlobalId>("None"),
                       gs::PropertySelector<std::string_view>("name"),
                       gs::PropertySelector<int32_t>("classYear"),
                       gs::PropertySelector<std::string_view>("name"))});
    GroupKey<0, grape::EmptyType> left_left_left_group_key14(
        gs::PropertySelector<grape::EmptyType>("None"));

    GroupKey<1, grape::EmptyType> left_left_left_group_key15(
        gs::PropertySelector<grape::EmptyType>("None"));

    GroupKey<2, grape::EmptyType> left_left_left_group_key16(
        gs::PropertySelector<grape::EmptyType>("None"));

    auto left_left_left_agg_func17 =
        gs::make_aggregate_prop<gs::AggFunc::TO_LIST>(
            std::tuple{gs::PropertySelector<grape::EmptyType>("None")},
            std::integer_sequence<int32_t, 3>{});

    auto left_left_left_ctx13 = Engine::GroupBy(
        graph, std::move(left_left_left_ctx12),
        std::tuple{left_left_left_group_key14, left_left_left_group_key15,
                   left_left_left_group_key16},
        std::tuple{left_left_left_agg_func17});

    auto right_ctx0 = Engine::template ScanVertex<gs::AppendOpt::Persist>(
        graph, 0, Filter<TruePredicate>());

    auto right_edge_expand_opt0 = gs::make_edge_expandv_opt(
        gs::Direction::In, (label_id_t) 7, (label_id_t) 0);
    auto right_ctx1 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(0)>(
            graph, std::move(right_ctx0), std::move(right_edge_expand_opt0));

    auto left_left_left_ctx14 =
        Engine::template Join<0, 1, gs::JoinKind::InnerJoin>(
            std::move(left_left_left_ctx13), std::move(right_ctx1));
    auto left_left_left_ctx15 = Engine::Project<PROJ_TO_NEW>(
        graph, std::move(left_left_left_ctx14),
        std::tuple{gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<int64_t>("id")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("lastName")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(2)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<Date>("birthday")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<int64_t>("creationDate")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("gender")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("browserUsed")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("locationIP")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("email")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("language")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(4)>(
                       gs::PropertySelector<std::string_view>("name")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(3)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(1)>(
                       gs::PropertySelector<grape::EmptyType>(""))});
    return Engine::Sink(graph, left_left_left_ctx15,
                        std::array<int32_t, 13>{16, 17, 18, 19, 20, 21, 22, 23,
                                                24, 25, 26, 27, 28});
  }
  // Wrapper query function for query class
  bool Query(Decoder& decoder, Encoder& encoder) override {
    // decoding params from decoder, and call real query func
    int64_t var0 = decoder.get_long();

    std::string_view var1 = decoder.get_string();

    auto res = Query(var0, var1);
    encode_ic1_result(res, encoder);
    return true;
  }
  // private members
 private:
  gs::MutableCSRInterface graph;
};
}  // namespace gs

// extern c interfaces
extern "C" {
void* CreateApp(gs::GraphDBSession& db) {
  gs::Query0* app = new gs::Query0(db);
  return static_cast<void*>(app);
}
void DeleteApp(void* app) {
  if (app != nullptr) {
    gs::Query0* casted = static_cast<gs::Query0*>(app);
    delete casted;
  }
}
}
