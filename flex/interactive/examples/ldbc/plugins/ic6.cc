// Generated by query_generator.h
// This file is generated by codegen/query_generator.h
// DO NOT EDIT

#include "flex/engines/graph_db/app/app_base.h"
#include "flex/engines/hqps_db/core/sync_engine.h"
#include "flex/engines/hqps_db/database/mutable_csr_interface.h"

namespace gs {
// Auto generated expression class definition
struct Query0expr0 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr0(std::string_view tagName) : tagName(tagName) {}

  inline auto operator()(std::string_view name) const {
    return (name == tagName);
  }

 private:
  std::string_view tagName;
};

struct Query0expr1 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr1() {}

  inline auto operator()(LabelKey label) const {
    return label<WithIn> std::array<int64_t, 1>{3};
  }

 private:
};

struct Query0expr2 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr2(int64_t personId) : personId(personId) {}

  inline auto operator()(LabelKey label, int64_t id) const {
    return (label<WithIn> std::array<int64_t, 1>{1}) && (id == personId);
  }

 private:
  int64_t personId;
};

struct Query0expr3 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr3() {}

  inline auto operator()(GlobalId var8, GlobalId var9, GlobalId var10,
                         GlobalId var11) const {
    return var8 != var9 && var10 != var11;
  }

 private:
};

// Auto generated query class definition
class Query0 : public AppBase {
 public:
  using Engine = SyncEngine<gs::MutableCSRInterface>;
  using label_id_t = typename gs::MutableCSRInterface::label_id_t;
  using vertex_id_t = typename gs::MutableCSRInterface::vertex_id_t;
  using gid_t = typename gs::MutableCSRInterface::gid_t;
  // constructor
  Query0(const GraphDBSession& session) : graph(session) {}
  // Query function for query class
  results::CollectiveResults Query(int64_t personId,
                                   std::string_view tagName) const {
    auto expr0 = gs::make_filter(
        Query0expr0(tagName), gs::PropertySelector<std::string_view>("name"));
    auto ctx0 = Engine::template ScanVertex<gs::AppendOpt::Persist>(
        graph, 7, std::move(expr0));

    auto edge_expand_opt0 = gs::make_edge_expandv_opt(
        gs::Direction::In, (label_id_t) 1, (label_id_t) 3);
    auto ctx1 =
        Engine::template EdgeExpandV<gs::AppendOpt::Temp, INPUT_COL_ID(0)>(
            graph, std::move(ctx0), std::move(edge_expand_opt0));

    auto expr2 =
        gs::make_filter(Query0expr1(), gs::PropertySelector<LabelKey>("label"));
    auto get_v_opt1 = make_getv_opt(gs::VOpt::Itself,
                                    std::array<label_id_t, 1>{(label_id_t) 3},
                                    std::move(expr2));
    auto ctx2 = Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
        graph, std::move(ctx1), std::move(get_v_opt1));
    auto edge_expand_opt2 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 0, (label_id_t) 1);
    auto ctx3 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(1)>(
            graph, std::move(ctx2), std::move(edge_expand_opt2));

    auto edge_expand_opt4 = gs::make_edge_expandv_opt(
        gs::Direction::Both, (label_id_t) 8, (label_id_t) 1);

    auto get_v_opt3 = make_getv_opt(gs::VOpt::Itself,
                                    std::array<label_id_t, 1>{(label_id_t) 1});

    auto path_opt5 = gs::make_path_expandv_opt(
        std::move(edge_expand_opt4), std::move(get_v_opt3), gs::Range(1, 3));
    auto ctx4 = Engine::PathExpandV<gs::AppendOpt::Temp, INPUT_COL_ID(2)>(
        graph, std::move(ctx3), std::move(path_opt5));
    auto expr5 = gs::make_filter(Query0expr2(personId),
                                 gs::PropertySelector<LabelKey>("label"),
                                 gs::PropertySelector<int64_t>("id"));
    auto get_v_opt6 = make_getv_opt(
        gs::VOpt::Itself, std::array<label_id_t, 0>{}, std::move(expr5));
    auto ctx5 = Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
        graph, std::move(ctx4), std::move(get_v_opt6));
    auto edge_expand_opt7 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 1, (label_id_t) 7);
    auto ctx6 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(1)>(
            graph, std::move(ctx5), std::move(edge_expand_opt7));

    auto expr7 =
        gs::make_filter(Query0expr3(), gs::PropertySelector<GlobalId>("None"),
                        gs::PropertySelector<GlobalId>("None"),
                        gs::PropertySelector<GlobalId>("None"),
                        gs::PropertySelector<GlobalId>("None"));
    auto ctx7 = Engine::template Select<INPUT_COL_ID(3), INPUT_COL_ID(2),
                                        INPUT_COL_ID(4), INPUT_COL_ID(0)>(
        graph, std::move(ctx6), std::move(expr7));

    GroupKey<4, std::string_view> group_key12(
        gs::PropertySelector<std::string_view>("name"));

    auto agg_func13 = gs::make_aggregate_prop<gs::AggFunc::COUNT_DISTINCT>(
        std::tuple{gs::PropertySelector<grape::EmptyType>("None")},
        std::integer_sequence<int32_t, 1>{});

    auto ctx8 = Engine::GroupBy(graph, std::move(ctx7), std::tuple{group_key12},
                                std::tuple{agg_func13});
    auto ctx9 = Engine::Sort(
        graph, std::move(ctx8), gs::Range(0, 10),
        std::tuple{
            gs::OrderingPropPair<gs::SortOrder::DESC, 1, int64_t>(""),
            gs::OrderingPropPair<gs::SortOrder::ASC, 0, std::string_view>("")});
    return Engine::Sink(graph, ctx9, std::array<int32_t, 2>{5, 6});
  }
  // Wrapper query function for query class
  bool Query(Decoder& decoder, Encoder& encoder) override {
    // decoding params from decoder, and call real query func
    int64_t var0 = decoder.get_long();

    std::string_view var1 = decoder.get_string();

    auto res = Query(var0, var1);
    // dump results to string
    std::string res_str = res.SerializeAsString();
    // encode results to encoder
    if (!res_str.empty()) {
      encoder.put_string_view(res_str);
    }
    return true;
  }
  // private members
 private:
  gs::MutableCSRInterface graph;
};
}  // namespace gs

// extern c interfaces
extern "C" {
void* CreateApp(gs::GraphDBSession& db) {
  gs::Query0* app = new gs::Query0(db);
  return static_cast<void*>(app);
}
void DeleteApp(void* app) {
  if (app != nullptr) {
    gs::Query0* casted = static_cast<gs::Query0*>(app);
    delete casted;
  }
}
}
