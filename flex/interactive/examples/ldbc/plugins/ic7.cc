// Generated by query_generator.h
// This file is generated by codegen/query_generator.h
// DO NOT EDIT

#include "flex/engines/graph_db/app/app_base.h"
#include "flex/engines/hqps_db/core/sync_engine.h"
#include "flex/engines/hqps_db/database/mutable_csr_interface.h"

namespace gs {
// Auto generated expression class definition
struct Query0left_expr0 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0left_expr0(int64_t personId) : personId(personId) {}

  inline auto operator()(LabelKey label, int64_t id) const {
    return ((label<WithIn> std::array<int64_t, 1>{1}) && (id == personId));
  }

 private:
  int64_t personId;
};

struct Query0right_expr1 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0right_expr1() {}

  inline auto operator()(LabelKey label) const {
    return label<WithIn> std::array<int64_t, 1>{1};
  }

 private:
};

struct Query0left_expr1 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = false;
  Query0left_expr1() {}
  template <typename vertex_id_t>
  inline auto operator()(const DefaultEdge<vertex_id_t>& var3) const {
    return NONE == var3;
  }

 private:
};

struct Query0left_expr2 {
 public:
  using result_t = int64_t;
  static constexpr bool filter_null = true;
  Query0left_expr2() {}

  inline auto operator()(int64_t var9, int64_t creationDate) const {
    return ((var9 - creationDate) / 1000) / 60;
  }

 private:
};

// Auto generated query class definition
class Query0 : public AppBase {
 public:
  using Engine = SyncEngine<gs::MutableCSRInterface>;
  using label_id_t = typename gs::MutableCSRInterface::label_id_t;
  using vertex_id_t = typename gs::MutableCSRInterface::vertex_id_t;
  using gid_t = typename gs::MutableCSRInterface::gid_t;
  // constructor
  Query0(const GraphDBSession& session) : graph(session) {}
  // Query function for query class
  results::CollectiveResults Query(int64_t personId) const {
    auto left_expr0 = gs::make_filter(Query0left_expr0(personId),
                                      gs::PropertySelector<LabelKey>("label"),
                                      gs::PropertySelector<int64_t>("id"));
    auto left_ctx0 = Engine::template ScanVertex<gs::AppendOpt::Persist>(
        graph, 1, std::move(left_expr0));

    auto left_edge_expand_opt0 = gs::make_edge_expand_multiv_opt(
        gs::Direction::In, std::vector<std::array<label_id_t, 3>>{
                               std::array<label_id_t, 3>{2, 1, 0},
                               std::array<label_id_t, 3>{3, 1, 0}});
    auto left_ctx1 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(0)>(
            graph, std::move(left_ctx0), std::move(left_edge_expand_opt0));

    auto left_edge_expand_opt1 = gs::make_edge_expande_opt<int64_t>(
        gs::PropNameArray<int64_t>{"creationDate"}, gs::Direction::In,
        (label_id_t) 9, (label_id_t) 1);
    auto left_ctx2 =
        Engine::template EdgeExpandE<gs::AppendOpt::Persist, INPUT_COL_ID(1)>(
            graph, std::move(left_ctx1), std::move(left_edge_expand_opt1));

    auto left_get_v_opt2 = make_getv_opt(
        gs::VOpt::Start, std::array<label_id_t, 1>{(label_id_t) 1});
    auto left_ctx3 =
        Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
            graph, std::move(left_ctx2), std::move(left_get_v_opt2));

    auto right_ctx0 =
        Engine::template ScanVertexWithOid<gs::AppendOpt::Persist, int64_t>(
            graph, 1, std::vector<int64_t>{personId});

    auto right_edge_expand_opt0 = gs::make_edge_expande_opt<int64_t>(
        gs::PropNameArray<int64_t>{"creationDate"}, gs::Direction::Both,
        (label_id_t) 8, (label_id_t) 1);
    auto right_ctx1 =
        Engine::template EdgeExpandE<gs::AppendOpt::Persist, INPUT_COL_ID(0)>(
            graph, std::move(right_ctx0), std::move(right_edge_expand_opt0));

    auto right_get_v_opt1 =
        make_getv_opt(gs::VOpt::Other, std::array<label_id_t, 0>{});
    auto right_ctx2 =
        Engine::template GetV<gs::AppendOpt::Temp, INPUT_COL_ID(-1)>(
            graph, std::move(right_ctx1), std::move(right_get_v_opt1));
    auto right_expr1 = gs::make_filter(Query0right_expr1(),
                                       gs::PropertySelector<LabelKey>("label"));
    auto right_get_v_opt2 = make_getv_opt(
        gs::VOpt::Itself, std::array<label_id_t, 0>{}, std::move(right_expr1));
    auto right_ctx3 =
        Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
            graph, std::move(right_ctx2), std::move(right_get_v_opt2));

    auto left_ctx4 =
        Engine::template Join<0, 3, 0, 2, gs::JoinKind::LeftOuterJoin>(
            std::move(left_ctx3), std::move(right_ctx3));
    auto left_ctx5 = Engine::Project<PROJ_TO_NEW>(
        graph, std::move(left_ctx4),
        std::tuple{gs::make_mapper_with_variable<INPUT_COL_ID(3)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(1)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(2)>(
                       gs::PropertySelector<int64_t>("creationDate")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_expr<4>(
                       Query0left_expr1(),
                       gs::PropertySelector<const DefaultEdge<vertex_id_t>&>(
                           "None"))});
    auto left_ctx6 = Engine::Sort(
        graph, std::move(left_ctx5), gs::Range(0, 2147483647),
        std::tuple{gs::OrderingPropPair<gs::SortOrder::DESC, 2, int64_t>(""),
                   gs::OrderingPropPair<gs::SortOrder::ASC, 1, int64_t>("id")});
    GroupKey<0, grape::EmptyType> left_group_key4(
        gs::PropertySelector<grape::EmptyType>("None"));

    GroupKey<3, grape::EmptyType> left_group_key5(
        gs::PropertySelector<grape::EmptyType>("None"));

    GroupKey<4, grape::EmptyType> left_group_key6(
        gs::PropertySelector<grape::EmptyType>("None"));

    auto left_agg_func7 = gs::make_aggregate_prop<gs::AggFunc::FIRST>(
        std::tuple{gs::PropertySelector<grape::EmptyType>("None")},
        std::integer_sequence<int32_t, 1>{});

    auto left_agg_func8 = gs::make_aggregate_prop<gs::AggFunc::FIRST>(
        std::tuple{gs::PropertySelector<grape::EmptyType>("None")},
        std::integer_sequence<int32_t, 2>{});

    auto left_ctx7 = Engine::GroupBy(
        graph, std::move(left_ctx6),
        std::tuple{left_group_key4, left_group_key5, left_group_key6},
        std::tuple{left_agg_func7, left_agg_func8});
    auto left_ctx8 = Engine::Project<PROJ_TO_NEW>(
        graph, std::move(left_ctx7),
        std::tuple{
            gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                gs::PropertySelector<int64_t>("id")),
            gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                gs::PropertySelector<std::string_view>("firstName")),
            gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                gs::PropertySelector<std::string_view>("lastName")),
            gs::make_mapper_with_variable<INPUT_COL_ID(4)>(
                gs::PropertySelector<grape::EmptyType>("")),
            gs::make_mapper_with_variable<INPUT_COL_ID(3)>(
                gs::PropertySelector<int64_t>("id")),
            gs::make_mapper_with_variable<INPUT_COL_ID(3)>(
                gs::PropertySelector<std::string_view>("content")),
            gs::make_mapper_with_variable<INPUT_COL_ID(3)>(
                gs::PropertySelector<std::string_view>("imageFile")),
            gs::make_mapper_with_expr<4, 3>(
                Query0left_expr2(), gs::PropertySelector<int64_t>("None"),
                gs::PropertySelector<int64_t>("creationDate")),
            gs::make_mapper_with_variable<INPUT_COL_ID(2)>(
                gs::PropertySelector<grape::EmptyType>(""))});
    auto left_ctx9 = Engine::Sort(
        graph, std::move(left_ctx8), gs::Range(0, 20),
        std::tuple{gs::OrderingPropPair<gs::SortOrder::DESC, 3, int64_t>(""),
                   gs::OrderingPropPair<gs::SortOrder::ASC, 0, int64_t>("")});
    return Engine::Sink(graph, left_ctx9,
                        std::array<int32_t, 9>{7, 8, 9, 10, 11, 12, 13, 14, 6});
  }
  // Wrapper query function for query class
  bool Query(Decoder& decoder, Encoder& encoder) override {
    // decoding params from decoder, and call real query func
    int64_t var0 = decoder.get_long();

    auto res = Query(var0);
    // dump results to string
    std::string res_str = res.SerializeAsString();
    // encode results to encoder
    if (!res_str.empty()) {
      encoder.put_string_view(res_str);
    }
    return true;
  }
  // private members
 private:
  gs::MutableCSRInterface graph;
};
}  // namespace gs

// extern c interfaces
extern "C" {
void* CreateApp(gs::GraphDBSession& db) {
  gs::Query0* app = new gs::Query0(db);
  return static_cast<void*>(app);
}
void DeleteApp(void* app) {
  if (app != nullptr) {
    gs::Query0* casted = static_cast<gs::Query0*>(app);
    delete casted;
  }
}
}
