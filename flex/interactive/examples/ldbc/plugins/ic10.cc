// Generated by query_generator.h
// This file is generated by codegen/query_generator.h
// DO NOT EDIT

#include "flex/engines/graph_db/app/app_base.h"
#include "flex/engines/hqps_db/core/sync_engine.h"
#include "flex/engines/hqps_db/database/mutable_csr_interface.h"

namespace gs {
// Auto generated expression class definition
struct Query0left_left_left_expr0 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0left_left_left_expr0(int64_t personId) : personId(personId) {}

  inline auto operator()(LabelKey label, int64_t id) const {
    return ((label<WithIn> std::array<int64_t, 1>{1}) && (id == personId));
  }

 private:
  int64_t personId;
};

struct Query0left_left_right_expr1 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0left_left_right_expr1() {}

  inline auto operator()(LabelKey label) const {
    return label<WithIn> std::array<int64_t, 1>{1};
  }

 private:
};

struct Query0left_left_left_expr1 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0left_left_left_expr1() {}

  inline auto operator()(GlobalId var4, GlobalId var5) const {
    return var4 != var5;
  }

 private:
};

struct Query0left_left_left_expr2 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0left_left_left_expr2(int64_t month, int32_t month_0)
      : month(month), month_0(month_0) {}

  inline auto operator()(Date var6, Date var7, Date var8, Date var9) const {
    return gs::DateTimeExtractor<Interval::MONTH>::extract(var6) == month &&
               gs::DateTimeExtractor<Interval::DAY>::extract(var7) >= 21 ||
           gs::DateTimeExtractor<Interval::MONTH>::extract(var8) ==
                   month_0 + 1 &&
               gs::DateTimeExtractor<Interval::DAY>::extract(var9) < 22;
  }

 private:
  int64_t month;
  int32_t month_0;
};

struct Query0left_right_expr1 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0left_right_expr1() {}

  inline auto operator()(LabelKey label) const {
    return label<WithIn> std::array<int64_t, 1>{1};
  }

 private:
};

struct Query0right_expr1 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0right_expr1() {}

  inline auto operator()(LabelKey label) const {
    return label<WithIn> std::array<int64_t, 1>{1};
  }

 private:
};

struct Query0left_left_left_expr3 {
 public:
  using result_t = int64_t;
  static constexpr bool filter_null = true;
  Query0left_left_left_expr3() {}

  inline auto operator()(int64_t var18, int64_t var19, int64_t var20) const {
    return var18 - (var19 - var20);
  }

 private:
};

// Auto generated query class definition
class Query0 : public AppBase {
 public:
  using Engine = SyncEngine<gs::MutableCSRInterface>;
  using label_id_t = typename gs::MutableCSRInterface::label_id_t;
  using vertex_id_t = typename gs::MutableCSRInterface::vertex_id_t;
  using gid_t = typename gs::MutableCSRInterface::gid_t;
  // constructor
  Query0(const GraphDBSession& session) : graph(session) {}
  // Query function for query class
  results::CollectiveResults Query(int64_t personId, int64_t month) const {
    auto left_left_left_expr0 =
        gs::make_filter(Query0left_left_left_expr0(personId),
                        gs::PropertySelector<LabelKey>("label"),
                        gs::PropertySelector<int64_t>("id"));
    auto left_left_left_ctx0 =
        Engine::template ScanVertex<gs::AppendOpt::Persist>(
            graph, 1, std::move(left_left_left_expr0));

    auto left_left_left_edge_expand_opt1 = gs::make_edge_expandv_opt(
        gs::Direction::Both, (label_id_t) 8, (label_id_t) 1);

    auto left_left_left_get_v_opt0 = make_getv_opt(
        gs::VOpt::Itself, std::array<label_id_t, 1>{(label_id_t) 1});

    auto left_left_left_path_opt2 = gs::make_path_expandv_opt(
        std::move(left_left_left_edge_expand_opt1),
        std::move(left_left_left_get_v_opt0), gs::Range(2, 3));
    auto left_left_left_ctx1 =
        Engine::PathExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(0)>(
            graph, std::move(left_left_left_ctx0),
            std::move(left_left_left_path_opt2));
    auto left_left_left_edge_expand_opt3 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 7, (label_id_t) 0);
    auto left_left_left_ctx2 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(1)>(
            graph, std::move(left_left_left_ctx1),
            std::move(left_left_left_edge_expand_opt3));

    auto left_left_right_ctx0 =
        Engine::template ScanVertexWithOid<gs::AppendOpt::Persist, int64_t>(
            graph, 1, std::vector<int64_t>{personId});

    auto left_left_right_edge_expand_opt0 = gs::make_edge_expandv_opt(
        gs::Direction::Both, (label_id_t) 8, (label_id_t) 1);
    auto left_left_right_ctx1 =
        Engine::template EdgeExpandV<gs::AppendOpt::Temp, INPUT_COL_ID(0)>(
            graph, std::move(left_left_right_ctx0),
            std::move(left_left_right_edge_expand_opt0));

    auto left_left_right_expr1 = gs::make_filter(
        Query0left_left_right_expr1(), gs::PropertySelector<LabelKey>("label"));
    auto left_left_right_get_v_opt1 =
        make_getv_opt(gs::VOpt::Itself, std::array<label_id_t, 0>{},
                      std::move(left_left_right_expr1));
    auto left_left_right_ctx2 =
        Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
            graph, std::move(left_left_right_ctx1),
            std::move(left_left_right_get_v_opt1));

    auto left_left_left_ctx3 =
        Engine::template Join<0, 1, 0, 1, gs::JoinKind::AntiJoin>(
            std::move(left_left_left_ctx2), std::move(left_left_right_ctx2));
    auto left_left_left_expr3 = gs::make_filter(
        Query0left_left_left_expr1(), gs::PropertySelector<GlobalId>("None"),
        gs::PropertySelector<GlobalId>("None"));
    auto left_left_left_ctx4 =
        Engine::template Select<INPUT_COL_ID(1), INPUT_COL_ID(0)>(
            graph, std::move(left_left_left_ctx3),
            std::move(left_left_left_expr3));

    auto left_left_left_ctx5 = Engine::Project<PROJ_TO_NEW>(
        graph, std::move(left_left_left_ctx4),
        std::tuple{gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(2)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(1)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(1)>(
                       gs::PropertySelector<Date>("birthday"))});
    auto left_left_left_expr4 = gs::make_filter(
        Query0left_left_left_expr2(month, month),
        gs::PropertySelector<Date>("None"), gs::PropertySelector<Date>("None"),
        gs::PropertySelector<Date>("None"), gs::PropertySelector<Date>("None"));
    auto left_left_left_ctx6 =
        Engine::template Select<INPUT_COL_ID(3), INPUT_COL_ID(3),
                                INPUT_COL_ID(3), INPUT_COL_ID(3)>(
            graph, std::move(left_left_left_ctx5),
            std::move(left_left_left_expr4));

    auto left_left_left_ctx7 = Engine::Project<PROJ_TO_NEW>(
        graph, std::move(left_left_left_ctx6),
        std::tuple{gs::make_mapper_with_variable<INPUT_COL_ID(2)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(1)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<grape::EmptyType>(""))});
    auto left_left_left_ctx8 = Engine::template Dedup<0, 1, 2>(
        graph, std::move(left_left_left_ctx7),
        std::tuple{GlobalIdSelector(), GlobalIdSelector(), GlobalIdSelector()});

    auto left_right_ctx0 = Engine::template ScanVertex<gs::AppendOpt::Persist>(
        graph, 3, Filter<TruePredicate>());

    auto left_right_edge_expand_opt0 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 0, (label_id_t) 1);
    auto left_right_ctx1 =
        Engine::template EdgeExpandV<gs::AppendOpt::Temp, INPUT_COL_ID(0)>(
            graph, std::move(left_right_ctx0),
            std::move(left_right_edge_expand_opt0));

    auto left_right_expr1 = gs::make_filter(
        Query0left_right_expr1(), gs::PropertySelector<LabelKey>("label"));
    auto left_right_get_v_opt1 =
        make_getv_opt(gs::VOpt::Itself, std::array<label_id_t, 0>{},
                      std::move(left_right_expr1));
    auto left_right_ctx2 =
        Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
            graph, std::move(left_right_ctx1),
            std::move(left_right_get_v_opt1));

    auto left_left_left_ctx9 =
        Engine::template Join<0, 1, gs::JoinKind::LeftOuterJoin>(
            std::move(left_left_left_ctx8), std::move(left_right_ctx2));
    GroupKey<0, grape::EmptyType> left_left_left_group_key10(
        gs::PropertySelector<grape::EmptyType>("None"));

    GroupKey<1, grape::EmptyType> left_left_left_group_key11(
        gs::PropertySelector<grape::EmptyType>("None"));

    GroupKey<2, grape::EmptyType> left_left_left_group_key12(
        gs::PropertySelector<grape::EmptyType>("None"));

    auto left_left_left_agg_func13 =
        gs::make_aggregate_prop<gs::AggFunc::COUNT>(
            std::tuple{gs::PropertySelector<grape::EmptyType>("None")},
            std::integer_sequence<int32_t, 3>{});

    auto left_left_left_ctx10 = Engine::GroupBy(
        graph, std::move(left_left_left_ctx9),
        std::tuple{left_left_left_group_key10, left_left_left_group_key11,
                   left_left_left_group_key12},
        std::tuple{left_left_left_agg_func13});

    auto right_ctx0 =
        Engine::template ScanVertexWithOid<gs::AppendOpt::Persist, int64_t>(
            graph, 1, std::vector<int64_t>{personId});

    auto right_edge_expand_opt0 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 6, (label_id_t) 7);
    auto right_ctx1 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(0)>(
            graph, std::move(right_ctx0), std::move(right_edge_expand_opt0));

    auto right_edge_expand_opt1 = gs::make_edge_expandv_opt(
        gs::Direction::In, (label_id_t) 1, (label_id_t) 3);
    auto right_ctx2 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(1)>(
            graph, std::move(right_ctx1), std::move(right_edge_expand_opt1));

    auto right_edge_expand_opt2 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 0, (label_id_t) 1);
    auto right_ctx3 =
        Engine::template EdgeExpandV<gs::AppendOpt::Temp, INPUT_COL_ID(2)>(
            graph, std::move(right_ctx2), std::move(right_edge_expand_opt2));

    auto right_expr3 = gs::make_filter(Query0right_expr1(),
                                       gs::PropertySelector<LabelKey>("label"));
    auto right_get_v_opt3 = make_getv_opt(
        gs::VOpt::Itself, std::array<label_id_t, 0>{}, std::move(right_expr3));
    auto right_ctx4 =
        Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
            graph, std::move(right_ctx3), std::move(right_get_v_opt3));

    auto left_left_left_ctx11 =
        Engine::template Join<0, 2, 3, 0, gs::JoinKind::LeftOuterJoin>(
            std::move(left_left_left_ctx10), std::move(right_ctx4));
    GroupKey<0, grape::EmptyType> left_left_left_group_key14(
        gs::PropertySelector<grape::EmptyType>("None"));

    GroupKey<1, grape::EmptyType> left_left_left_group_key15(
        gs::PropertySelector<grape::EmptyType>("None"));

    GroupKey<3, grape::EmptyType> left_left_left_group_key16(
        gs::PropertySelector<grape::EmptyType>("None"));

    auto left_left_left_agg_func17 =
        gs::make_aggregate_prop<gs::AggFunc::COUNT>(
            std::tuple{gs::PropertySelector<grape::EmptyType>("None")},
            std::integer_sequence<int32_t, 5>{});

    auto left_left_left_ctx12 = Engine::GroupBy(
        graph, std::move(left_left_left_ctx11),
        std::tuple{left_left_left_group_key14, left_left_left_group_key15,
                   left_left_left_group_key16},
        std::tuple{left_left_left_agg_func17});
    auto left_left_left_ctx13 = Engine::Project<PROJ_TO_NEW>(
        graph, std::move(left_left_left_ctx12),
        std::tuple{gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<int64_t>("id")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("firstName")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("lastName")),
                   gs::make_mapper_with_expr<3, 2, 3>(
                       Query0left_left_left_expr3(),
                       gs::PropertySelector<int64_t>("None"),
                       gs::PropertySelector<int64_t>("None"),
                       gs::PropertySelector<int64_t>("None")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("gender")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(1)>(
                       gs::PropertySelector<std::string_view>("name"))});
    auto left_left_left_ctx14 = Engine::Sort(
        graph, std::move(left_left_left_ctx13), gs::Range(0, 10),
        std::tuple{gs::OrderingPropPair<gs::SortOrder::DESC, 3, int64_t>(""),
                   gs::OrderingPropPair<gs::SortOrder::ASC, 0, int64_t>("")});
    return Engine::Sink(graph, left_left_left_ctx14,
                        std::array<int32_t, 6>{9, 10, 11, 12, 13, 14});
  }
  // Wrapper query function for query class
  bool Query(Decoder& decoder, Encoder& encoder) override {
    // decoding params from decoder, and call real query func
    int64_t var0 = decoder.get_long();

    int64_t var3 = decoder.get_long();

    auto res = Query(var0, var3);
    // dump results to string
    std::string res_str = res.SerializeAsString();
    // encode results to encoder
    if (!res_str.empty()) {
      encoder.put_string_view(res_str);
    }
    return true;
  }
  // private members
 private:
  gs::MutableCSRInterface graph;
};
}  // namespace gs

// extern c interfaces
extern "C" {
void* CreateApp(gs::GraphDBSession& db) {
  gs::Query0* app = new gs::Query0(db);
  return static_cast<void*>(app);
}
void DeleteApp(void* app) {
  if (app != nullptr) {
    gs::Query0* casted = static_cast<gs::Query0*>(app);
    delete casted;
  }
}
}
