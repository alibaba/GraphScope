// Generated by query_generator.h
// This file is generated by codegen/query_generator.h
// DO NOT EDIT

#include "flex/engines/graph_db/app/app_base.h"
#include "flex/engines/hqps_db/core/sync_engine.h"
#include "flex/engines/hqps_db/database/mutable_csr_interface.h"
#include "interactive_utils.h"

namespace gs {
// Auto generated expression class definition
struct Query0expr1 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr1(std::string_view countryXName, std::string_view countryYName)
      : countryXName(countryXName), countryYName(countryYName) {}

  inline auto operator()(std::string_view name, std::string_view name_0) const {
    return name != countryXName && name_0 != countryYName;
  }

 private:
  std::string_view countryXName;
  std::string_view countryYName;
};

struct Query0expr2 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr2(Date startDate, Date endDate)
      : startDate(startDate), endDate(endDate) {}

  inline auto operator()(Date creationDate, Date creationDate_0) const {
    return creationDate >= startDate && creationDate_0 < endDate;
  }

 private:
  Date startDate;
  Date endDate;
};

struct Query0expr3 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr3(std::string_view countryYName) : countryYName(countryYName) {}

  inline auto operator()(std::string_view name) const {
    return name == countryYName;
  }

 private:
  std::string_view countryYName;
};

struct Query0expr4 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr4(Date startDate, Date endDate)
      : startDate(startDate), endDate(endDate) {}

  inline auto operator()(Date creationDate, Date creationDate_0) const {
    return creationDate >= startDate && creationDate_0 < endDate;
  }

 private:
  Date startDate;
  Date endDate;
};

struct Query0expr5 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr5(std::string_view countryXName) : countryXName(countryXName) {}

  inline auto operator()(std::string_view name) const {
    return name == countryXName;
  }

 private:
  std::string_view countryXName;
};

struct Query0expr6 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr6() {}

  inline auto operator()(GlobalId var14, GlobalId var15) const {
    return var14 != var15;
  }

 private:
};

struct Query0expr7 {
 public:
  using result_t = int64_t;
  static constexpr bool filter_null = true;
  Query0expr7() {}

  inline auto operator()(int64_t var19, int64_t var20) const {
    return var19 + var20;
  }

 private:
};

// Auto generated query class definition
class Query0 : public AppBase {
 public:
  using Engine = SyncEngine<gs::MutableCSRInterface>;
  using label_id_t = typename gs::MutableCSRInterface::label_id_t;
  using vertex_id_t = typename gs::MutableCSRInterface::vertex_id_t;
  using gid_t = typename gs::MutableCSRInterface::gid_t;
  // constructor
  Query0(const GraphDBSession& session) : graph(session) {}
  // Query function for query class
  results::CollectiveResults Query(std::string_view countryXName,
                                   std::string_view countryYName,
                                   int64_t personId, Date startDate,
                                   Date endDate) const {
    auto ctx0 =
        Engine::template ScanVertexWithOid<gs::AppendOpt::Persist, int64_t>(
            graph, 1, std::vector<int64_t>{personId});
    LOG(INFO) << "scan results: ";
    for (auto iter : ctx0) {
      LOG(INFO) << "ctx0:" << gs::to_string(iter.GetAllElement());
    }

    auto edge_expand_opt1 = gs::make_edge_expandv_opt(
        gs::Direction::Both, (label_id_t) 8, (label_id_t) 1);

    auto get_v_opt0 = make_getv_opt(gs::VOpt::Other,
                                    std::array<label_id_t, 1>{(label_id_t) 1});

    auto path_opt2 = gs::make_path_expandv_opt(
        std::move(edge_expand_opt1), std::move(get_v_opt0), gs::Range(1, 3));
    auto ctx1 = Engine::PathExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(0)>(
        graph, std::move(ctx0), std::move(path_opt2));
    auto edge_expand_opt3 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 7, (label_id_t) 0);
    auto ctx2 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(1)>(
            graph, std::move(ctx1), std::move(edge_expand_opt3));

    auto edge_expand_opt4 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 11, (label_id_t) 0);
    auto ctx3 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(2)>(
            graph, std::move(ctx2), std::move(edge_expand_opt4));

    auto expr3 =
        gs::make_filter(Query0expr1(countryXName, countryYName),
                        gs::PropertySelector<std::string_view>("name"),
                        gs::PropertySelector<std::string_view>("name"));
    auto get_v_opt5 = make_getv_opt(gs::VOpt::Itself,
                                    std::array<label_id_t, 1>{(label_id_t) 0},
                                    std::move(expr3));
    auto ctx4 = Engine::template GetV<gs::AppendOpt::Replace, INPUT_COL_ID(-1)>(
        graph, std::move(ctx3), std::move(get_v_opt5));
    auto edge_expand_opt6 = gs::make_edge_expand_multiv_opt(
        gs::Direction::In, std::vector<std::array<label_id_t, 3>>{
                               std::array<label_id_t, 3>{2, 1, 0},
                               std::array<label_id_t, 3>{3, 1, 0}});
    auto ctx5 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(1)>(
            graph, std::move(ctx4), std::move(edge_expand_opt6));

    auto expr5 = gs::make_filter(Query0expr2(startDate, endDate),
                                 gs::PropertySelector<Date>("creationDate"),
                                 gs::PropertySelector<Date>("creationDate"));
    auto get_v_opt7 =
        make_getv_opt(gs::VOpt::Itself,
                      std::array<label_id_t, 2>{(label_id_t) 2, (label_id_t) 3},
                      std::move(expr5));
    auto ctx6 = Engine::template GetV<gs::AppendOpt::Replace, INPUT_COL_ID(-1)>(
        graph, std::move(ctx5), std::move(get_v_opt7));
    auto edge_expand_opt8 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 7, (label_id_t) 0);
    auto ctx7 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(4)>(
            graph, std::move(ctx6), std::move(edge_expand_opt8));

    auto expr7 =
        gs::make_filter(Query0expr3(countryYName),
                        gs::PropertySelector<std::string_view>("name"));
    auto get_v_opt9 = make_getv_opt(gs::VOpt::Itself,
                                    std::array<label_id_t, 1>{(label_id_t) 0},
                                    std::move(expr7));
    auto ctx8 = Engine::template GetV<gs::AppendOpt::Replace, INPUT_COL_ID(-1)>(
        graph, std::move(ctx7), std::move(get_v_opt9));
    auto edge_expand_opt10 = gs::make_edge_expand_multiv_opt(
        gs::Direction::In, std::vector<std::array<label_id_t, 3>>{
                               std::array<label_id_t, 3>{2, 1, 0},
                               std::array<label_id_t, 3>{3, 1, 0}});
    auto ctx9 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(1)>(
            graph, std::move(ctx8), std::move(edge_expand_opt10));

    auto expr9 = gs::make_filter(Query0expr4(startDate, endDate),
                                 gs::PropertySelector<Date>("creationDate"),
                                 gs::PropertySelector<Date>("creationDate"));
    auto get_v_opt11 =
        make_getv_opt(gs::VOpt::Itself,
                      std::array<label_id_t, 2>{(label_id_t) 2, (label_id_t) 3},
                      std::move(expr9));
    auto ctx10 =
        Engine::template GetV<gs::AppendOpt::Replace, INPUT_COL_ID(-1)>(
            graph, std::move(ctx9), std::move(get_v_opt11));
    auto edge_expand_opt12 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 7, (label_id_t) 0);
    auto ctx11 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(6)>(
            graph, std::move(ctx10), std::move(edge_expand_opt12));

    auto expr11 =
        gs::make_filter(Query0expr5(countryXName),
                        gs::PropertySelector<std::string_view>("name"));
    auto get_v_opt13 = make_getv_opt(gs::VOpt::Itself,
                                     std::array<label_id_t, 1>{(label_id_t) 0},
                                     std::move(expr11));
    auto ctx12 =
        Engine::template GetV<gs::AppendOpt::Replace, INPUT_COL_ID(-1)>(
            graph, std::move(ctx11), std::move(get_v_opt13));
    auto expr12 =
        gs::make_filter(Query0expr6(), gs::PropertySelector<GlobalId>("None"),
                        gs::PropertySelector<GlobalId>("None"));
    auto ctx13 = Engine::template Select<INPUT_COL_ID(1), INPUT_COL_ID(0)>(
        graph, std::move(ctx12), std::move(expr12));

    GroupKey<1, grape::EmptyType> group_key16(
        gs::PropertySelector<grape::EmptyType>("None"));

    auto agg_func17 = gs::make_aggregate_prop<gs::AggFunc::COUNT>(
        std::tuple{gs::PropertySelector<grape::EmptyType>("None")},
        std::integer_sequence<int32_t, 6>{});

    auto agg_func18 = gs::make_aggregate_prop<gs::AggFunc::COUNT>(
        std::tuple{gs::PropertySelector<grape::EmptyType>("None")},
        std::integer_sequence<int32_t, 4>{});

    auto ctx14 =
        Engine::GroupBy(graph, std::move(ctx13), std::tuple{group_key16},
                        std::tuple{agg_func17, agg_func18});
    auto ctx15 = Engine::Project<PROJ_TO_NEW>(
        graph, std::move(ctx14),
        std::tuple{gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<int64_t>("id")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("firstName")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("lastName")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(1)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(2)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_expr<1, 2>(
                       Query0expr7(), gs::PropertySelector<int64_t>("None"),
                       gs::PropertySelector<int64_t>("None"))});
    auto ctx16 = Engine::Sort(
        graph, std::move(ctx15), gs::Range(0, 20),
        std::tuple{gs::OrderingPropPair<gs::SortOrder::DESC, 5, int64_t>(""),
                   gs::OrderingPropPair<gs::SortOrder::ASC, 0, int64_t>("")});
    return Engine::Sink(graph, ctx16,
                        std::array<int32_t, 6>{10, 11, 12, 8, 9, 13});
  }
  // Wrapper query function for query class
  bool Query(Decoder& decoder, Encoder& encoder) override {
    // decoding params from decoder, and call real query func

    int64_t var4 = decoder.get_long();
    std::string_view var0 = decoder.get_string();

    std::string_view var2 = decoder.get_string();

    Date var5 = decoder.get_long();

    int32_t days = decoder.get_int();
    const int64_t milli_sec_per_day = 24 * 60 * 60 * 1000l;
    int64_t end_date = var5.milli_second + days * milli_sec_per_day;

    Date var7 = end_date;

    LOG(INFO) << "id: " << var4 << " countryXName: " << var0
              << " countryYName: " << var2 << " startDate: " << var5
              << " endDate: " << var7;

    auto res = Query(var0, var2, var4, var5, var7);
    encode_ic3_result(res, encoder);
    return true;
  }
  // private members
 private:
  gs::MutableCSRInterface graph;
};
}  // namespace gs

// extern c interfaces
extern "C" {
void* CreateApp(gs::GraphDBSession& db) {
  gs::Query0* app = new gs::Query0(db);
  return static_cast<void*>(app);
}
void DeleteApp(void* app) {
  if (app != nullptr) {
    gs::Query0* casted = static_cast<gs::Query0*>(app);
    delete casted;
  }
}
}
