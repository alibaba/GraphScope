// Generated by query_generator.h
// This file is generated by codegen/query_generator.h
// DO NOT EDIT

#include "flex/engines/graph_db/app/app_base.h"
#include "flex/engines/hqps_db/core/sync_engine.h"
#include "flex/engines/hqps_db/database/mutable_csr_interface.h"

namespace gs {
// Auto generated expression class definition
struct Query0expr0 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr0(std::string_view countryYName) : countryYName(countryYName) {}

  inline auto operator()(LabelKey label, std::string_view name) const {
    return ((label<WithIn> std::array<int64_t, 1>{0}) &&
            (name == countryYName));
  }

 private:
  std::string_view countryYName;
};

struct Query0expr1 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr1(int64_t startDate, int64_t endDate)
      : startDate(startDate), endDate(endDate) {}

  inline auto operator()(int64_t creationDate, int64_t creationDate_0) const {
    return creationDate >= startDate && creationDate_0 < endDate;
  }

 private:
  int64_t startDate;
  int64_t endDate;
};

struct Query0expr2 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr2() {}

  inline auto operator()(LabelKey label) const {
    return label<WithIn> std::array<int64_t, 1>{1};
  }

 private:
};

struct Query0expr3 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr3(int64_t startDate, int64_t endDate)
      : startDate(startDate), endDate(endDate) {}

  inline auto operator()(int64_t creationDate, int64_t creationDate_0) const {
    return creationDate >= startDate && creationDate_0 < endDate;
  }

 private:
  int64_t startDate;
  int64_t endDate;
};

struct Query0expr4 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr4(std::string_view countryXName) : countryXName(countryXName) {}

  inline auto operator()(LabelKey label, std::string_view name) const {
    return (label<WithIn> std::array<int64_t, 1>{0}) && (name == countryXName);
  }

 private:
  std::string_view countryXName;
};

struct Query0expr5 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr5(int64_t personId) : personId(personId) {}

  inline auto operator()(LabelKey label, int64_t id) const {
    return (label<WithIn> std::array<int64_t, 1>{1}) && (id == personId);
  }

 private:
  int64_t personId;
};

struct Query0expr6 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr6(std::string_view countryXName, std::string_view countryYName)
      : countryXName(countryXName), countryYName(countryYName) {}

  inline auto operator()(std::string_view name, std::string_view name_0) const {
    return name != countryXName && name_0 != countryYName;
  }

 private:
  std::string_view countryXName;
  std::string_view countryYName;
};

struct Query0expr7 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr7() {}

  inline auto operator()(GlobalId var15, GlobalId var16) const {
    return var15 != var16;
  }

 private:
};

struct Query0expr8 {
 public:
  using result_t = int64_t;
  static constexpr bool filter_null = true;
  Query0expr8() {}

  inline auto operator()(int64_t var20, int64_t var21) const {
    return var20 + var21;
  }

 private:
};

// Auto generated query class definition
class Query0 : public AppBase {
 public:
  using Engine = SyncEngine<gs::MutableCSRInterface>;
  using label_id_t = typename gs::MutableCSRInterface::label_id_t;
  using vertex_id_t = typename gs::MutableCSRInterface::vertex_id_t;
  using gid_t = typename gs::MutableCSRInterface::gid_t;
  // constructor
  Query0(const GraphDBSession& session) : graph(session) {}
  // Query function for query class
  results::CollectiveResults Query(std::string_view countryXName,
                                   std::string_view countryYName,
                                   int64_t personId, int64_t startDate,
                                   int64_t endDate) const {
    auto expr0 = gs::make_filter(
        Query0expr0(countryYName), gs::PropertySelector<LabelKey>("label"),
        gs::PropertySelector<std::string_view>("name"));
    auto ctx0 = Engine::template ScanVertex<gs::AppendOpt::Persist>(
        graph, 0, std::move(expr0));

    auto edge_expand_opt0 = gs::make_edge_expand_multiv_opt(
        gs::Direction::In, std::vector<std::array<label_id_t, 3>>{
                               std::array<label_id_t, 3>{2, 0, 7},
                               std::array<label_id_t, 3>{3, 0, 7}});
    auto ctx1 =
        Engine::template EdgeExpandV<gs::AppendOpt::Temp, INPUT_COL_ID(0)>(
            graph, std::move(ctx0), std::move(edge_expand_opt0));

    auto expr2 = gs::make_filter(Query0expr1(startDate, endDate),
                                 gs::PropertySelector<int64_t>("creationDate"),
                                 gs::PropertySelector<int64_t>("creationDate"));
    auto get_v_opt1 =
        make_getv_opt(gs::VOpt::Itself,
                      std::array<label_id_t, 2>{(label_id_t) 2, (label_id_t) 3},
                      std::move(expr2));
    auto ctx2 = Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
        graph, std::move(ctx1), std::move(get_v_opt1));
    auto edge_expand_opt2 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 0, (label_id_t) 1);
    auto ctx3 =
        Engine::template EdgeExpandV<gs::AppendOpt::Temp, INPUT_COL_ID(1)>(
            graph, std::move(ctx2), std::move(edge_expand_opt2));

    auto expr4 =
        gs::make_filter(Query0expr2(), gs::PropertySelector<LabelKey>("label"));
    auto get_v_opt3 = make_getv_opt(gs::VOpt::Itself,
                                    std::array<label_id_t, 1>{(label_id_t) 1},
                                    std::move(expr4));
    auto ctx4 = Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
        graph, std::move(ctx3), std::move(get_v_opt3));
    auto edge_expand_opt4 = gs::make_edge_expand_multiv_opt(
        gs::Direction::In, std::vector<std::array<label_id_t, 3>>{
                               std::array<label_id_t, 3>{3, 1, 0},
                               std::array<label_id_t, 3>{2, 1, 0}});
    auto ctx5 =
        Engine::template EdgeExpandV<gs::AppendOpt::Temp, INPUT_COL_ID(2)>(
            graph, std::move(ctx4), std::move(edge_expand_opt4));

    auto expr6 = gs::make_filter(Query0expr3(startDate, endDate),
                                 gs::PropertySelector<int64_t>("creationDate"),
                                 gs::PropertySelector<int64_t>("creationDate"));
    auto get_v_opt5 =
        make_getv_opt(gs::VOpt::Itself,
                      std::array<label_id_t, 2>{(label_id_t) 2, (label_id_t) 3},
                      std::move(expr6));
    auto ctx6 = Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
        graph, std::move(ctx5), std::move(get_v_opt5));
    auto edge_expand_opt6 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 7, (label_id_t) 0);
    auto ctx7 =
        Engine::template EdgeExpandV<gs::AppendOpt::Temp, INPUT_COL_ID(3)>(
            graph, std::move(ctx6), std::move(edge_expand_opt6));

    auto expr8 = gs::make_filter(
        Query0expr4(countryXName), gs::PropertySelector<LabelKey>("label"),
        gs::PropertySelector<std::string_view>("name"));
    auto get_v_opt7 = make_getv_opt(
        gs::VOpt::Itself, std::array<label_id_t, 0>{}, std::move(expr8));
    auto ctx8 = Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
        graph, std::move(ctx7), std::move(get_v_opt7));
    auto edge_expand_opt9 = gs::make_edge_expandv_opt(
        gs::Direction::Both, (label_id_t) 8, (label_id_t) 1);

    auto get_v_opt8 = make_getv_opt(gs::VOpt::Itself,
                                    std::array<label_id_t, 1>{(label_id_t) 1});

    auto path_opt10 = gs::make_path_expandv_opt(
        std::move(edge_expand_opt9), std::move(get_v_opt8), gs::Range(1, 3));
    auto ctx9 = Engine::PathExpandV<gs::AppendOpt::Temp, INPUT_COL_ID(2)>(
        graph, std::move(ctx8), std::move(path_opt10));
    auto expr10 = gs::make_filter(Query0expr5(personId),
                                  gs::PropertySelector<LabelKey>("label"),
                                  gs::PropertySelector<int64_t>("id"));
    auto get_v_opt11 = make_getv_opt(
        gs::VOpt::Itself, std::array<label_id_t, 0>{}, std::move(expr10));
    auto ctx10 =
        Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
            graph, std::move(ctx9), std::move(get_v_opt11));
    auto edge_expand_opt12 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 7, (label_id_t) 0);
    auto ctx11 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(2)>(
            graph, std::move(ctx10), std::move(edge_expand_opt12));

    auto edge_expand_opt13 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 11, (label_id_t) 0);
    auto ctx12 =
        Engine::template EdgeExpandV<gs::AppendOpt::Temp, INPUT_COL_ID(6)>(
            graph, std::move(ctx11), std::move(edge_expand_opt13));

    auto expr13 =
        gs::make_filter(Query0expr6(countryXName, countryYName),
                        gs::PropertySelector<std::string_view>("name"),
                        gs::PropertySelector<std::string_view>("name"));
    auto get_v_opt14 = make_getv_opt(gs::VOpt::Itself,
                                     std::array<label_id_t, 1>{(label_id_t) 0},
                                     std::move(expr13));
    auto ctx13 =
        Engine::template GetV<gs::AppendOpt::Persist, INPUT_COL_ID(-1)>(
            graph, std::move(ctx12), std::move(get_v_opt14));
    auto expr14 =
        gs::make_filter(Query0expr7(), gs::PropertySelector<GlobalId>("None"),
                        gs::PropertySelector<GlobalId>("None"));
    auto ctx14 = Engine::template Select<INPUT_COL_ID(2), INPUT_COL_ID(5)>(
        graph, std::move(ctx13), std::move(expr14));

    GroupKey<2, grape::EmptyType> group_key17(
        gs::PropertySelector<grape::EmptyType>("None"));

    auto agg_func18 = gs::make_aggregate_prop<gs::AggFunc::COUNT>(
        std::tuple{gs::PropertySelector<grape::EmptyType>("None")},
        std::integer_sequence<int32_t, 3>{});

    auto agg_func19 = gs::make_aggregate_prop<gs::AggFunc::COUNT>(
        std::tuple{gs::PropertySelector<grape::EmptyType>("None")},
        std::integer_sequence<int32_t, 1>{});

    auto ctx15 =
        Engine::GroupBy(graph, std::move(ctx14), std::tuple{group_key17},
                        std::tuple{agg_func18, agg_func19});
    auto ctx16 = Engine::Project<PROJ_TO_NEW>(
        graph, std::move(ctx15),
        std::tuple{gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<int64_t>("id")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("firstName")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("lastName")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(1)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(2)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_expr<1, 2>(
                       Query0expr8(), gs::PropertySelector<int64_t>("None"),
                       gs::PropertySelector<int64_t>("None"))});
    auto ctx17 = Engine::Sort(
        graph, std::move(ctx16), gs::Range(0, 20),
        std::tuple{gs::OrderingPropPair<gs::SortOrder::DESC, 5, int64_t>(""),
                   gs::OrderingPropPair<gs::SortOrder::ASC, 0, int64_t>("")});
    return Engine::Sink(graph, ctx17,
                        std::array<int32_t, 6>{10, 11, 12, 8, 9, 13});
  }
  // Wrapper query function for query class
  bool Query(Decoder& decoder, Encoder& encoder) override {
    // decoding params from decoder, and call real query func
    std::string_view var0 = decoder.get_string();

    std::string_view var2 = decoder.get_string();

    int64_t var4 = decoder.get_long();

    int64_t var5 = decoder.get_long();

    int64_t var7 = decoder.get_long();

    auto res = Query(var0, var2, var4, var5, var7);
    // dump results to string
    std::string res_str = res.SerializeAsString();
    // encode results to encoder
    if (!res_str.empty()) {
      encoder.put_string_view(res_str);
    }
    return true;
  }
  // private members
 private:
  gs::MutableCSRInterface graph;
};
}  // namespace gs

// extern c interfaces
extern "C" {
void* CreateApp(gs::GraphDBSession& db) {
  gs::Query0* app = new gs::Query0(db);
  return static_cast<void*>(app);
}
void DeleteApp(void* app) {
  if (app != nullptr) {
    gs::Query0* casted = static_cast<gs::Query0*>(app);
    delete casted;
  }
}
}
