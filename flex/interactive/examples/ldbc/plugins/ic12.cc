// Generated by query_generator.h
// This file is generated by codegen/query_generator.h
// DO NOT EDIT

#include "flex/engines/graph_db/app/app_base.h"
#include "flex/engines/hqps_db/core/sync_engine.h"
#include "flex/engines/hqps_db/database/mutable_csr_interface.h"
#include "interactive_utils.h"

namespace gs {
// Auto generated expression class definition
struct Query0expr1 {
 public:
  using result_t = bool;
  static constexpr bool filter_null = true;
  Query0expr1(std::string_view tagClassName) : tagClassName(tagClassName) {}

  inline auto operator()(std::string_view name) const {
    return name == tagClassName;
  }

 private:
  std::string_view tagClassName;
};

// Auto generated query class definition
class Query0 : public AppBase {
 public:
  using Engine = SyncEngine<gs::MutableCSRInterface>;
  using label_id_t = typename gs::MutableCSRInterface::label_id_t;
  using vertex_id_t = typename gs::MutableCSRInterface::vertex_id_t;
  using gid_t = typename gs::MutableCSRInterface::gid_t;
  // constructor
  Query0(const GraphDBSession& session) : graph(session) {}
  // Query function for query class
  results::CollectiveResults Query(int64_t personId,
                                   std::string_view tagClassName) const {
    auto ctx0 =
        Engine::template ScanVertexWithOid<gs::AppendOpt::Persist, int64_t>(
            graph, 1, std::vector<int64_t>{personId});

    auto edge_expand_opt0 = gs::make_edge_expandv_opt(
        gs::Direction::Both, (label_id_t) 8, (label_id_t) 1);
    auto ctx1 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(0)>(
            graph, std::move(ctx0), std::move(edge_expand_opt0));

    auto edge_expand_opt1 = gs::make_edge_expandv_opt(
        gs::Direction::In, (label_id_t) 0, (label_id_t) 2);
    auto ctx2 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(1)>(
            graph, std::move(ctx1), std::move(edge_expand_opt1));

    auto edge_expand_opt2 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 2, (label_id_t) 3);
    auto ctx3 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(2)>(
            graph, std::move(ctx2), std::move(edge_expand_opt2));

    auto edge_expand_opt3 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 1, (label_id_t) 7);
    auto ctx4 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(3)>(
            graph, std::move(ctx3), std::move(edge_expand_opt3));

    auto edge_expand_opt4 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 12, (label_id_t) 6);
    auto ctx5 =
        Engine::template EdgeExpandV<gs::AppendOpt::Persist, INPUT_COL_ID(4)>(
            graph, std::move(ctx4), std::move(edge_expand_opt4));

    auto edge_expand_opt6 = gs::make_edge_expandv_opt(
        gs::Direction::Out, (label_id_t) 13, (label_id_t) 6);

    auto get_v_opt5 = make_getv_opt(gs::VOpt::Other,
                                    std::array<label_id_t, 1>{(label_id_t) 6});

    auto path_opt7 = gs::make_path_expandv_opt(
        std::move(edge_expand_opt6), std::move(get_v_opt5), gs::Range(0, 10));
    auto ctx6 = Engine::PathExpandV<gs::AppendOpt::Temp, INPUT_COL_ID(5)>(
        graph, std::move(ctx5), std::move(path_opt7));
    auto expr6 =
        gs::make_filter(Query0expr1(tagClassName),
                        gs::PropertySelector<std::string_view>("name"));
    auto get_v_opt8 = make_getv_opt(
        gs::VOpt::Itself, std::array<label_id_t, 0>{}, std::move(expr6));
    auto ctx7 = Engine::template GetV<gs::AppendOpt::Temp, INPUT_COL_ID(-1)>(
        graph, std::move(ctx6), std::move(get_v_opt8));
    GroupKey<1, grape::EmptyType> group_key9(
        gs::PropertySelector<grape::EmptyType>("None"));

    auto agg_func10 = gs::make_aggregate_prop<gs::AggFunc::TO_SET>(
        std::tuple{gs::PropertySelector<std::string_view>("name")},
        std::integer_sequence<int32_t, 4>{});

    auto agg_func11 = gs::make_aggregate_prop<gs::AggFunc::COUNT_DISTINCT>(
        std::tuple{gs::PropertySelector<grape::EmptyType>("None")},
        std::integer_sequence<int32_t, 2>{});

    auto ctx8 = Engine::GroupBy(graph, std::move(ctx7), std::tuple{group_key9},
                                std::tuple{agg_func10, agg_func11});
    auto ctx9 = Engine::Sort(
        graph, std::move(ctx8), gs::Range(0, 20),
        std::tuple{gs::OrderingPropPair<gs::SortOrder::DESC, 2, int64_t>(""),
                   gs::OrderingPropPair<gs::SortOrder::ASC, 0, int64_t>("id")});
    auto ctx10 = Engine::Project<PROJ_TO_NEW>(
        graph, std::move(ctx9),
        std::tuple{gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<int64_t>("id")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("firstName")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(0)>(
                       gs::PropertySelector<std::string_view>("lastName")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(1)>(
                       gs::PropertySelector<grape::EmptyType>("")),
                   gs::make_mapper_with_variable<INPUT_COL_ID(2)>(
                       gs::PropertySelector<grape::EmptyType>(""))});
    return Engine::Sink(graph, ctx10, std::array<int32_t, 5>{6, 7, 8, 4, 5});
  }
  // Wrapper query function for query class
  bool Query(Decoder& decoder, Encoder& encoder) override {
    // decoding params from decoder, and call real query func
    int64_t var0 = decoder.get_long();

    std::string_view var1 = decoder.get_string();

    auto res = Query(var0, var1);
    encode_ic12_result(res, encoder);
    return true;
  }
  // private members
 private:
  gs::MutableCSRInterface graph;
};
}  // namespace gs

// extern c interfaces
extern "C" {
void* CreateApp(gs::GraphDBSession& db) {
  gs::Query0* app = new gs::Query0(db);
  return static_cast<void*>(app);
}
void DeleteApp(void* app) {
  if (app != nullptr) {
    gs::Query0* casted = static_cast<gs::Query0*>(app);
    delete casted;
  }
}
}
