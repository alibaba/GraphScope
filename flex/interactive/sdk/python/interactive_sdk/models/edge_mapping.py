# coding: utf-8

"""
    GraphScope Interactive API v0.0.3

    This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query. 

    The version of the OpenAPI document: 1.0.0
    Contact: graphscope@alibaba-inc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, StrictStr

from interactive_sdk.models.column_mapping import ColumnMapping
from interactive_sdk.models.edge_mapping_destination_vertex_mappings_inner import \
    EdgeMappingDestinationVertexMappingsInner
from interactive_sdk.models.edge_mapping_source_vertex_mappings_inner import \
    EdgeMappingSourceVertexMappingsInner
from interactive_sdk.models.edge_mapping_type_triplet import \
    EdgeMappingTypeTriplet

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class EdgeMapping(BaseModel):
    """
    EdgeMapping
    """  # noqa: E501

    type_triplet: Optional[EdgeMappingTypeTriplet] = None
    inputs: Optional[List[StrictStr]] = None
    source_vertex_mappings: Optional[List[EdgeMappingSourceVertexMappingsInner]] = None
    destination_vertex_mappings: Optional[
        List[EdgeMappingDestinationVertexMappingsInner]
    ] = None
    column_mappings: Optional[List[ColumnMapping]] = None
    __properties: ClassVar[List[str]] = [
        "type_triplet",
        "inputs",
        "source_vertex_mappings",
        "destination_vertex_mappings",
        "column_mappings",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EdgeMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type_triplet
        if self.type_triplet:
            _dict["type_triplet"] = self.type_triplet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in source_vertex_mappings (list)
        _items = []
        if self.source_vertex_mappings:
            for _item in self.source_vertex_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict["source_vertex_mappings"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in destination_vertex_mappings (list)
        _items = []
        if self.destination_vertex_mappings:
            for _item in self.destination_vertex_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict["destination_vertex_mappings"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in column_mappings (list)
        _items = []
        if self.column_mappings:
            for _item in self.column_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict["column_mappings"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EdgeMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "type_triplet": (
                    EdgeMappingTypeTriplet.from_dict(obj.get("type_triplet"))
                    if obj.get("type_triplet") is not None
                    else None
                ),
                "inputs": obj.get("inputs"),
                "source_vertex_mappings": (
                    [
                        EdgeMappingSourceVertexMappingsInner.from_dict(_item)
                        for _item in obj.get("source_vertex_mappings")
                    ]
                    if obj.get("source_vertex_mappings") is not None
                    else None
                ),
                "destination_vertex_mappings": (
                    [
                        EdgeMappingDestinationVertexMappingsInner.from_dict(_item)
                        for _item in obj.get("destination_vertex_mappings")
                    ]
                    if obj.get("destination_vertex_mappings") is not None
                    else None
                ),
                "column_mappings": (
                    [
                        ColumnMapping.from_dict(_item)
                        for _item in obj.get("column_mappings")
                    ]
                    if obj.get("column_mappings") is not None
                    else None
                ),
            }
        )
        return _obj
