# coding: utf-8

"""
    GraphScope Interactive API v0.0.3

    This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query. 

    The version of the OpenAPI document: 1.0.0
    Contact: graphscope@alibaba-inc.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing_extensions import Self

from interactive_sdk.models.edge_type_vertex_type_pair_relations_inner import \
    EdgeTypeVertexTypePairRelationsInner
from interactive_sdk.models.property_meta import PropertyMeta


class EdgeType(BaseModel):
    """
    EdgeType
    """  # noqa: E501

    type_id: Optional[StrictInt] = None
    type_name: Optional[StrictStr] = None
    vertex_type_pair_relations: Optional[List[EdgeTypeVertexTypePairRelationsInner]] = (
        None
    )
    properties: Optional[List[PropertyMeta]] = None
    __properties: ClassVar[List[str]] = [
        "type_id",
        "type_name",
        "vertex_type_pair_relations",
        "properties",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EdgeType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in vertex_type_pair_relations (list)
        _items = []
        if self.vertex_type_pair_relations:
            for _item in self.vertex_type_pair_relations:
                if _item:
                    _items.append(_item.to_dict())
            _dict["vertex_type_pair_relations"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item in self.properties:
                if _item:
                    _items.append(_item.to_dict())
            _dict["properties"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EdgeType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "type_id": obj.get("type_id"),
                "type_name": obj.get("type_name"),
                "vertex_type_pair_relations": (
                    [
                        EdgeTypeVertexTypePairRelationsInner.from_dict(_item)
                        for _item in obj["vertex_type_pair_relations"]
                    ]
                    if obj.get("vertex_type_pair_relations") is not None
                    else None
                ),
                "properties": (
                    [PropertyMeta.from_dict(_item) for _item in obj["properties"]]
                    if obj.get("properties") is not None
                    else None
                ),
            }
        )
        return _obj
