/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.alibaba.graphscope.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * EdgeMapping
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EdgeMapping {
    public static final String SERIALIZED_NAME_TYPE_TRIPLET = "type_triplet";

    @SerializedName(SERIALIZED_NAME_TYPE_TRIPLET)
    private EdgeMappingTypeTriplet typeTriplet;

    public static final String SERIALIZED_NAME_INPUTS = "inputs";

    @SerializedName(SERIALIZED_NAME_INPUTS)
    private List<String> inputs;

    public static final String SERIALIZED_NAME_SOURCE_VERTEX_MAPPINGS = "source_vertex_mappings";

    @SerializedName(SERIALIZED_NAME_SOURCE_VERTEX_MAPPINGS)
    private List<EdgeMappingSourceVertexMappingsInner> sourceVertexMappings;

    public static final String SERIALIZED_NAME_DESTINATION_VERTEX_MAPPINGS =
            "destination_vertex_mappings";

    @SerializedName(SERIALIZED_NAME_DESTINATION_VERTEX_MAPPINGS)
    private List<EdgeMappingDestinationVertexMappingsInner> destinationVertexMappings;

    public static final String SERIALIZED_NAME_COLUMN_MAPPINGS = "column_mappings";

    @SerializedName(SERIALIZED_NAME_COLUMN_MAPPINGS)
    private List<ColumnMapping> columnMappings;

    public EdgeMapping() {}

    public EdgeMapping typeTriplet(EdgeMappingTypeTriplet typeTriplet) {
        this.typeTriplet = typeTriplet;
        return this;
    }

    /**
     * Get typeTriplet
     * @return typeTriplet
     **/
    @javax.annotation.Nullable
    public EdgeMappingTypeTriplet getTypeTriplet() {
        return typeTriplet;
    }

    public void setTypeTriplet(EdgeMappingTypeTriplet typeTriplet) {
        this.typeTriplet = typeTriplet;
    }

    public EdgeMapping inputs(List<String> inputs) {
        this.inputs = inputs;
        return this;
    }

    public EdgeMapping addInputsItem(String inputsItem) {
        if (this.inputs == null) {
            this.inputs = new ArrayList<>();
        }
        this.inputs.add(inputsItem);
        return this;
    }

    /**
     * Get inputs
     * @return inputs
     **/
    @javax.annotation.Nullable
    public List<String> getInputs() {
        return inputs;
    }

    public void setInputs(List<String> inputs) {
        this.inputs = inputs;
    }

    public EdgeMapping sourceVertexMappings(
            List<EdgeMappingSourceVertexMappingsInner> sourceVertexMappings) {
        this.sourceVertexMappings = sourceVertexMappings;
        return this;
    }

    public EdgeMapping addSourceVertexMappingsItem(
            EdgeMappingSourceVertexMappingsInner sourceVertexMappingsItem) {
        if (this.sourceVertexMappings == null) {
            this.sourceVertexMappings = new ArrayList<>();
        }
        this.sourceVertexMappings.add(sourceVertexMappingsItem);
        return this;
    }

    /**
     * Get sourceVertexMappings
     * @return sourceVertexMappings
     **/
    @javax.annotation.Nullable
    public List<EdgeMappingSourceVertexMappingsInner> getSourceVertexMappings() {
        return sourceVertexMappings;
    }

    public void setSourceVertexMappings(
            List<EdgeMappingSourceVertexMappingsInner> sourceVertexMappings) {
        this.sourceVertexMappings = sourceVertexMappings;
    }

    public EdgeMapping destinationVertexMappings(
            List<EdgeMappingDestinationVertexMappingsInner> destinationVertexMappings) {
        this.destinationVertexMappings = destinationVertexMappings;
        return this;
    }

    public EdgeMapping addDestinationVertexMappingsItem(
            EdgeMappingDestinationVertexMappingsInner destinationVertexMappingsItem) {
        if (this.destinationVertexMappings == null) {
            this.destinationVertexMappings = new ArrayList<>();
        }
        this.destinationVertexMappings.add(destinationVertexMappingsItem);
        return this;
    }

    /**
     * Get destinationVertexMappings
     * @return destinationVertexMappings
     **/
    @javax.annotation.Nullable
    public List<EdgeMappingDestinationVertexMappingsInner> getDestinationVertexMappings() {
        return destinationVertexMappings;
    }

    public void setDestinationVertexMappings(
            List<EdgeMappingDestinationVertexMappingsInner> destinationVertexMappings) {
        this.destinationVertexMappings = destinationVertexMappings;
    }

    public EdgeMapping columnMappings(List<ColumnMapping> columnMappings) {
        this.columnMappings = columnMappings;
        return this;
    }

    public EdgeMapping addColumnMappingsItem(ColumnMapping columnMappingsItem) {
        if (this.columnMappings == null) {
            this.columnMappings = new ArrayList<>();
        }
        this.columnMappings.add(columnMappingsItem);
        return this;
    }

    /**
     * Get columnMappings
     * @return columnMappings
     **/
    @javax.annotation.Nullable
    public List<ColumnMapping> getColumnMappings() {
        return columnMappings;
    }

    public void setColumnMappings(List<ColumnMapping> columnMappings) {
        this.columnMappings = columnMappings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EdgeMapping edgeMapping = (EdgeMapping) o;
        return Objects.equals(this.typeTriplet, edgeMapping.typeTriplet)
                && Objects.equals(this.inputs, edgeMapping.inputs)
                && Objects.equals(this.sourceVertexMappings, edgeMapping.sourceVertexMappings)
                && Objects.equals(
                        this.destinationVertexMappings, edgeMapping.destinationVertexMappings)
                && Objects.equals(this.columnMappings, edgeMapping.columnMappings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                typeTriplet,
                inputs,
                sourceVertexMappings,
                destinationVertexMappings,
                columnMappings);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EdgeMapping {\n");
        sb.append("    typeTriplet: ").append(toIndentedString(typeTriplet)).append("\n");
        sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
        sb.append("    sourceVertexMappings: ")
                .append(toIndentedString(sourceVertexMappings))
                .append("\n");
        sb.append("    destinationVertexMappings: ")
                .append(toIndentedString(destinationVertexMappings))
                .append("\n");
        sb.append("    columnMappings: ").append(toIndentedString(columnMappings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("type_triplet");
        openapiFields.add("inputs");
        openapiFields.add("source_vertex_mappings");
        openapiFields.add("destination_vertex_mappings");
        openapiFields.add("column_mappings");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EdgeMapping
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EdgeMapping.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in EdgeMapping is not found in the empty"
                                        + " JSON string",
                                EdgeMapping.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EdgeMapping.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `EdgeMapping` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `type_triplet`
        if (jsonObj.get("type_triplet") != null && !jsonObj.get("type_triplet").isJsonNull()) {
            EdgeMappingTypeTriplet.validateJsonElement(jsonObj.get("type_triplet"));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("inputs") != null
                && !jsonObj.get("inputs").isJsonNull()
                && !jsonObj.get("inputs").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `inputs` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("inputs").toString()));
        }
        if (jsonObj.get("source_vertex_mappings") != null
                && !jsonObj.get("source_vertex_mappings").isJsonNull()) {
            JsonArray jsonArraysourceVertexMappings =
                    jsonObj.getAsJsonArray("source_vertex_mappings");
            if (jsonArraysourceVertexMappings != null) {
                // ensure the json data is an array
                if (!jsonObj.get("source_vertex_mappings").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `source_vertex_mappings` to be an array in"
                                            + " the JSON string but got `%s`",
                                    jsonObj.get("source_vertex_mappings").toString()));
                }

                // validate the optional field `source_vertex_mappings` (array)
                for (int i = 0; i < jsonArraysourceVertexMappings.size(); i++) {
                    EdgeMappingSourceVertexMappingsInner.validateJsonElement(
                            jsonArraysourceVertexMappings.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("destination_vertex_mappings") != null
                && !jsonObj.get("destination_vertex_mappings").isJsonNull()) {
            JsonArray jsonArraydestinationVertexMappings =
                    jsonObj.getAsJsonArray("destination_vertex_mappings");
            if (jsonArraydestinationVertexMappings != null) {
                // ensure the json data is an array
                if (!jsonObj.get("destination_vertex_mappings").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `destination_vertex_mappings` to be an"
                                            + " array in the JSON string but got `%s`",
                                    jsonObj.get("destination_vertex_mappings").toString()));
                }

                // validate the optional field `destination_vertex_mappings` (array)
                for (int i = 0; i < jsonArraydestinationVertexMappings.size(); i++) {
                    EdgeMappingDestinationVertexMappingsInner.validateJsonElement(
                            jsonArraydestinationVertexMappings.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("column_mappings") != null
                && !jsonObj.get("column_mappings").isJsonNull()) {
            JsonArray jsonArraycolumnMappings = jsonObj.getAsJsonArray("column_mappings");
            if (jsonArraycolumnMappings != null) {
                // ensure the json data is an array
                if (!jsonObj.get("column_mappings").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `column_mappings` to be an array in the"
                                            + " JSON string but got `%s`",
                                    jsonObj.get("column_mappings").toString()));
                }

                // validate the optional field `column_mappings` (array)
                for (int i = 0; i < jsonArraycolumnMappings.size(); i++) {
                    ColumnMapping.validateJsonElement(jsonArraycolumnMappings.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EdgeMapping.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EdgeMapping' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EdgeMapping> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(EdgeMapping.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<EdgeMapping>() {
                        @Override
                        public void write(JsonWriter out, EdgeMapping value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public EdgeMapping read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of EdgeMapping given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EdgeMapping
     * @throws IOException if the JSON string is invalid with respect to EdgeMapping
     */
    public static EdgeMapping fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EdgeMapping.class);
    }

    /**
     * Convert an instance of EdgeMapping to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
