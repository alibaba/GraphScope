/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.alibaba.graphscope.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * EdgeTypeVertexTypePairRelationsInner
 */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-04-23T14:21:58.073358+08:00[Asia/Shanghai]",
        comments = "Generator version: 7.5.0")
public class EdgeTypeVertexTypePairRelationsInner {
    public static final String SERIALIZED_NAME_SOURCE_VERTEX = "source_vertex";

    @SerializedName(SERIALIZED_NAME_SOURCE_VERTEX)
    private String sourceVertex;

    public static final String SERIALIZED_NAME_DESTINATION_VERTEX = "destination_vertex";

    @SerializedName(SERIALIZED_NAME_DESTINATION_VERTEX)
    private String destinationVertex;

    /**
     * Gets or Sets relation
     */
    @JsonAdapter(RelationEnum.Adapter.class)
    public enum RelationEnum {
        MANY_TO_MANY("MANY_TO_MANY"),

        ONE_TO_MANY("ONE_TO_MANY"),

        MANY_TO_ONE("MANY_TO_ONE"),

        ONE_TO_ONE("ONE_TO_ONE");

        private String value;

        RelationEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RelationEnum fromValue(String value) {
            for (RelationEnum b : RelationEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<RelationEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RelationEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RelationEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RelationEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            RelationEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_RELATION = "relation";

    @SerializedName(SERIALIZED_NAME_RELATION)
    private RelationEnum relation;

    public static final String SERIALIZED_NAME_X_CSR_PARAMS = "x_csr_params";

    @SerializedName(SERIALIZED_NAME_X_CSR_PARAMS)
    private EdgeTypeVertexTypePairRelationsInnerXCsrParams xCsrParams;

    public EdgeTypeVertexTypePairRelationsInner() {}

    public EdgeTypeVertexTypePairRelationsInner sourceVertex(String sourceVertex) {
        this.sourceVertex = sourceVertex;
        return this;
    }

    /**
     * Get sourceVertex
     * @return sourceVertex
     **/
    @javax.annotation.Nullable
    public String getSourceVertex() {
        return sourceVertex;
    }

    public void setSourceVertex(String sourceVertex) {
        this.sourceVertex = sourceVertex;
    }

    public EdgeTypeVertexTypePairRelationsInner destinationVertex(String destinationVertex) {
        this.destinationVertex = destinationVertex;
        return this;
    }

    /**
     * Get destinationVertex
     * @return destinationVertex
     **/
    @javax.annotation.Nullable
    public String getDestinationVertex() {
        return destinationVertex;
    }

    public void setDestinationVertex(String destinationVertex) {
        this.destinationVertex = destinationVertex;
    }

    public EdgeTypeVertexTypePairRelationsInner relation(RelationEnum relation) {
        this.relation = relation;
        return this;
    }

    /**
     * Get relation
     * @return relation
     **/
    @javax.annotation.Nullable
    public RelationEnum getRelation() {
        return relation;
    }

    public void setRelation(RelationEnum relation) {
        this.relation = relation;
    }

    public EdgeTypeVertexTypePairRelationsInner xCsrParams(
            EdgeTypeVertexTypePairRelationsInnerXCsrParams xCsrParams) {
        this.xCsrParams = xCsrParams;
        return this;
    }

    /**
     * Get xCsrParams
     * @return xCsrParams
     **/
    @javax.annotation.Nullable
    public EdgeTypeVertexTypePairRelationsInnerXCsrParams getxCsrParams() {
        return xCsrParams;
    }

    public void setxCsrParams(EdgeTypeVertexTypePairRelationsInnerXCsrParams xCsrParams) {
        this.xCsrParams = xCsrParams;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EdgeTypeVertexTypePairRelationsInner edgeTypeVertexTypePairRelationsInner =
                (EdgeTypeVertexTypePairRelationsInner) o;
        return Objects.equals(this.sourceVertex, edgeTypeVertexTypePairRelationsInner.sourceVertex)
                && Objects.equals(
                        this.destinationVertex,
                        edgeTypeVertexTypePairRelationsInner.destinationVertex)
                && Objects.equals(this.relation, edgeTypeVertexTypePairRelationsInner.relation)
                && Objects.equals(this.xCsrParams, edgeTypeVertexTypePairRelationsInner.xCsrParams);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceVertex, destinationVertex, relation, xCsrParams);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EdgeTypeVertexTypePairRelationsInner {\n");
        sb.append("    sourceVertex: ").append(toIndentedString(sourceVertex)).append("\n");
        sb.append("    destinationVertex: ")
                .append(toIndentedString(destinationVertex))
                .append("\n");
        sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
        sb.append("    xCsrParams: ").append(toIndentedString(xCsrParams)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("source_vertex");
        openapiFields.add("destination_vertex");
        openapiFields.add("relation");
        openapiFields.add("x_csr_params");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EdgeTypeVertexTypePairRelationsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EdgeTypeVertexTypePairRelationsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in EdgeTypeVertexTypePairRelationsInner"
                                        + " is not found in the empty JSON string",
                                EdgeTypeVertexTypePairRelationsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EdgeTypeVertexTypePairRelationsInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `EdgeTypeVertexTypePairRelationsInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("source_vertex") != null && !jsonObj.get("source_vertex").isJsonNull())
                && !jsonObj.get("source_vertex").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `source_vertex` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("source_vertex").toString()));
        }
        if ((jsonObj.get("destination_vertex") != null
                        && !jsonObj.get("destination_vertex").isJsonNull())
                && !jsonObj.get("destination_vertex").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `destination_vertex` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("destination_vertex").toString()));
        }
        if ((jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull())
                && !jsonObj.get("relation").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `relation` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("relation").toString()));
        }
        // validate the optional field `relation`
        if (jsonObj.get("relation") != null && !jsonObj.get("relation").isJsonNull()) {
            RelationEnum.validateJsonElement(jsonObj.get("relation"));
        }
        // validate the optional field `x_csr_params`
        if (jsonObj.get("x_csr_params") != null && !jsonObj.get("x_csr_params").isJsonNull()) {
            EdgeTypeVertexTypePairRelationsInnerXCsrParams.validateJsonElement(
                    jsonObj.get("x_csr_params"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EdgeTypeVertexTypePairRelationsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EdgeTypeVertexTypePairRelationsInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EdgeTypeVertexTypePairRelationsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(EdgeTypeVertexTypePairRelationsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<EdgeTypeVertexTypePairRelationsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, EdgeTypeVertexTypePairRelationsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public EdgeTypeVertexTypePairRelationsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of EdgeTypeVertexTypePairRelationsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EdgeTypeVertexTypePairRelationsInner
     * @throws IOException if the JSON string is invalid with respect to EdgeTypeVertexTypePairRelationsInner
     */
    public static EdgeTypeVertexTypePairRelationsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, EdgeTypeVertexTypePairRelationsInner.class);
    }

    /**
     * Convert an instance of EdgeTypeVertexTypePairRelationsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
