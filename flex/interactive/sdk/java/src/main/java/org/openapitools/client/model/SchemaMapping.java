/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.alibaba.graphscope.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * SchemaMapping
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SchemaMapping {
    public static final String SERIALIZED_NAME_GRAPH = "graph";

    @SerializedName(SERIALIZED_NAME_GRAPH)
    private String graph;

    public static final String SERIALIZED_NAME_LOADING_CONFIG = "loading_config";

    @SerializedName(SERIALIZED_NAME_LOADING_CONFIG)
    private SchemaMappingLoadingConfig loadingConfig;

    public static final String SERIALIZED_NAME_VERTEX_MAPPINGS = "vertex_mappings";

    @SerializedName(SERIALIZED_NAME_VERTEX_MAPPINGS)
    private List<VertexMapping> vertexMappings;

    public static final String SERIALIZED_NAME_EDGE_MAPPINGS = "edge_mappings";

    @SerializedName(SERIALIZED_NAME_EDGE_MAPPINGS)
    private List<EdgeMapping> edgeMappings;

    public SchemaMapping() {}

    public SchemaMapping graph(String graph) {
        this.graph = graph;
        return this;
    }

    /**
     * Get graph
     * @return graph
     **/
    @javax.annotation.Nullable
    public String getGraph() {
        return graph;
    }

    public void setGraph(String graph) {
        this.graph = graph;
    }

    public SchemaMapping loadingConfig(SchemaMappingLoadingConfig loadingConfig) {
        this.loadingConfig = loadingConfig;
        return this;
    }

    /**
     * Get loadingConfig
     * @return loadingConfig
     **/
    @javax.annotation.Nullable
    public SchemaMappingLoadingConfig getLoadingConfig() {
        return loadingConfig;
    }

    public void setLoadingConfig(SchemaMappingLoadingConfig loadingConfig) {
        this.loadingConfig = loadingConfig;
    }

    public SchemaMapping vertexMappings(List<VertexMapping> vertexMappings) {
        this.vertexMappings = vertexMappings;
        return this;
    }

    public SchemaMapping addVertexMappingsItem(VertexMapping vertexMappingsItem) {
        if (this.vertexMappings == null) {
            this.vertexMappings = new ArrayList<>();
        }
        this.vertexMappings.add(vertexMappingsItem);
        return this;
    }

    /**
     * Get vertexMappings
     * @return vertexMappings
     **/
    @javax.annotation.Nullable
    public List<VertexMapping> getVertexMappings() {
        return vertexMappings;
    }

    public void setVertexMappings(List<VertexMapping> vertexMappings) {
        this.vertexMappings = vertexMappings;
    }

    public SchemaMapping edgeMappings(List<EdgeMapping> edgeMappings) {
        this.edgeMappings = edgeMappings;
        return this;
    }

    public SchemaMapping addEdgeMappingsItem(EdgeMapping edgeMappingsItem) {
        if (this.edgeMappings == null) {
            this.edgeMappings = new ArrayList<>();
        }
        this.edgeMappings.add(edgeMappingsItem);
        return this;
    }

    /**
     * Get edgeMappings
     * @return edgeMappings
     **/
    @javax.annotation.Nullable
    public List<EdgeMapping> getEdgeMappings() {
        return edgeMappings;
    }

    public void setEdgeMappings(List<EdgeMapping> edgeMappings) {
        this.edgeMappings = edgeMappings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SchemaMapping schemaMapping = (SchemaMapping) o;
        return Objects.equals(this.graph, schemaMapping.graph)
                && Objects.equals(this.loadingConfig, schemaMapping.loadingConfig)
                && Objects.equals(this.vertexMappings, schemaMapping.vertexMappings)
                && Objects.equals(this.edgeMappings, schemaMapping.edgeMappings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(graph, loadingConfig, vertexMappings, edgeMappings);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SchemaMapping {\n");
        sb.append("    graph: ").append(toIndentedString(graph)).append("\n");
        sb.append("    loadingConfig: ").append(toIndentedString(loadingConfig)).append("\n");
        sb.append("    vertexMappings: ").append(toIndentedString(vertexMappings)).append("\n");
        sb.append("    edgeMappings: ").append(toIndentedString(edgeMappings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("graph");
        openapiFields.add("loading_config");
        openapiFields.add("vertex_mappings");
        openapiFields.add("edge_mappings");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SchemaMapping
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SchemaMapping.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SchemaMapping is not found in the"
                                        + " empty JSON string",
                                SchemaMapping.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SchemaMapping.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SchemaMapping` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("graph") != null && !jsonObj.get("graph").isJsonNull())
                && !jsonObj.get("graph").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `graph` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("graph").toString()));
        }
        // validate the optional field `loading_config`
        if (jsonObj.get("loading_config") != null && !jsonObj.get("loading_config").isJsonNull()) {
            SchemaMappingLoadingConfig.validateJsonElement(jsonObj.get("loading_config"));
        }
        if (jsonObj.get("vertex_mappings") != null
                && !jsonObj.get("vertex_mappings").isJsonNull()) {
            JsonArray jsonArrayvertexMappings = jsonObj.getAsJsonArray("vertex_mappings");
            if (jsonArrayvertexMappings != null) {
                // ensure the json data is an array
                if (!jsonObj.get("vertex_mappings").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `vertex_mappings` to be an array in the"
                                            + " JSON string but got `%s`",
                                    jsonObj.get("vertex_mappings").toString()));
                }

                // validate the optional field `vertex_mappings` (array)
                for (int i = 0; i < jsonArrayvertexMappings.size(); i++) {
                    VertexMapping.validateJsonElement(jsonArrayvertexMappings.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("edge_mappings") != null && !jsonObj.get("edge_mappings").isJsonNull()) {
            JsonArray jsonArrayedgeMappings = jsonObj.getAsJsonArray("edge_mappings");
            if (jsonArrayedgeMappings != null) {
                // ensure the json data is an array
                if (!jsonObj.get("edge_mappings").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `edge_mappings` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("edge_mappings").toString()));
                }

                // validate the optional field `edge_mappings` (array)
                for (int i = 0; i < jsonArrayedgeMappings.size(); i++) {
                    EdgeMapping.validateJsonElement(jsonArrayedgeMappings.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SchemaMapping.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SchemaMapping' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SchemaMapping> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SchemaMapping.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SchemaMapping>() {
                        @Override
                        public void write(JsonWriter out, SchemaMapping value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SchemaMapping read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SchemaMapping given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SchemaMapping
     * @throws IOException if the JSON string is invalid with respect to SchemaMapping
     */
    public static SchemaMapping fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SchemaMapping.class);
    }

    /**
     * Convert an instance of SchemaMapping to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
