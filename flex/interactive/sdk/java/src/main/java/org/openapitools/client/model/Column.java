/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.alibaba.graphscope.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Column extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Column.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Column.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Column' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Element> adapterElement =
                    gson.getDelegateAdapter(this, TypeToken.get(Element.class));
            final TypeAdapter<Collection> adapterCollection =
                    gson.getDelegateAdapter(this, TypeToken.get(Collection.class));
            final TypeAdapter<KeyValue> adapterKeyValue =
                    gson.getDelegateAdapter(this, TypeToken.get(KeyValue.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Column>() {
                        @Override
                        public void write(JsonWriter out, Column value) throws IOException {
                            if (value == null || value.getActualInstance() == null) {
                                elementAdapter.write(out, null);
                                return;
                            }

                            // check if the actual instance is of the type `Element`
                            if (value.getActualInstance() instanceof Element) {
                                JsonElement element =
                                        adapterElement.toJsonTree(
                                                (Element) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `Collection`
                            if (value.getActualInstance() instanceof Collection) {
                                JsonElement element =
                                        adapterCollection.toJsonTree(
                                                (Collection) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `KeyValue`
                            if (value.getActualInstance() instanceof KeyValue) {
                                JsonElement element =
                                        adapterKeyValue.toJsonTree(
                                                (KeyValue) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            throw new IOException(
                                    "Failed to serialize as the type doesn't match oneOf schemas:"
                                            + " Collection, Element, KeyValue");
                        }

                        @Override
                        public Column read(JsonReader in) throws IOException {
                            Object deserialized = null;
                            JsonElement jsonElement = elementAdapter.read(in);

                            int match = 0;
                            ArrayList<String> errorMessages = new ArrayList<>();
                            TypeAdapter actualAdapter = elementAdapter;

                            // deserialize Element
                            try {
                                // validate the JSON object to see if any exception is thrown
                                Element.validateJsonElement(jsonElement);
                                actualAdapter = adapterElement;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'Element'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for Element failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'Element'",
                                        e);
                            }
                            // deserialize Collection
                            try {
                                // validate the JSON object to see if any exception is thrown
                                Collection.validateJsonElement(jsonElement);
                                actualAdapter = adapterCollection;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'Collection'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for Collection failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'Collection'",
                                        e);
                            }
                            // deserialize KeyValue
                            try {
                                // validate the JSON object to see if any exception is thrown
                                KeyValue.validateJsonElement(jsonElement);
                                actualAdapter = adapterKeyValue;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'KeyValue'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for KeyValue failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'KeyValue'",
                                        e);
                            }

                            if (match == 1) {
                                Column ret = new Column();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            }

                            throw new IOException(
                                    String.format(
                                            "Failed deserialization for Column: %d classes match"
                                                + " result, expected 1. Detailed failure message"
                                                + " for oneOf schemas: %s. JSON: %s",
                                            match, errorMessages, jsonElement.toString()));
                        }
                    }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public Column() {
        super("oneOf", Boolean.FALSE);
    }

    public Column(Collection o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Column(Element o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Column(KeyValue o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Element", Element.class);
        schemas.put("Collection", Collection.class);
        schemas.put("KeyValue", KeyValue.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Column.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * Collection, Element, KeyValue
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Element) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Collection) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof KeyValue) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Collection, Element, KeyValue");
    }

    /**
     * Get the actual instance, which can be the following:
     * Collection, Element, KeyValue
     *
     * @return The actual instance (Collection, Element, KeyValue)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Element`. If the actual instance is not `Element`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Element`
     * @throws ClassCastException if the instance is not `Element`
     */
    public Element getElement() throws ClassCastException {
        return (Element) super.getActualInstance();
    }
    /**
     * Get the actual instance of `Collection`. If the actual instance is not `Collection`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Collection`
     * @throws ClassCastException if the instance is not `Collection`
     */
    public Collection getCollection() throws ClassCastException {
        return (Collection) super.getActualInstance();
    }
    /**
     * Get the actual instance of `KeyValue`. If the actual instance is not `KeyValue`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `KeyValue`
     * @throws ClassCastException if the instance is not `KeyValue`
     */
    public KeyValue getKeyValue() throws ClassCastException {
        return (KeyValue) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Column
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Element
        try {
            Element.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format("Deserialization for Element failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Collection
        try {
            Collection.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for Collection failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with KeyValue
        try {
            KeyValue.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for KeyValue failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(
                    String.format(
                            "The JSON string is invalid for Column with oneOf schemas: Collection,"
                                + " Element, KeyValue. %d class(es) match the result, expected 1."
                                + " Detailed failure message for oneOf schemas: %s. JSON: %s",
                            validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of Column given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Column
     * @throws IOException if the JSON string is invalid with respect to Column
     */
    public static Column fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Column.class);
    }

    /**
     * Convert an instance of Column to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
