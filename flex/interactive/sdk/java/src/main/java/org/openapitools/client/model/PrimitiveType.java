/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.alibaba.graphscope.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * PrimitiveType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PrimitiveType {
    /**
     * Gets or Sets primitiveType
     */
    @JsonAdapter(PrimitiveTypeEnum.Adapter.class)
    public enum PrimitiveTypeEnum {
        SIGNED_INT32("DT_SIGNED_INT32"),

        UNSIGNED_INT32("DT_UNSIGNED_INT32"),

        SIGNED_INT64("DT_SIGNED_INT64"),

        UNSIGNED_INT64("DT_UNSIGNED_INT64"),

        BOOL("DT_BOOL"),

        FLOAT("DT_FLOAT"),

        DOUBLE("DT_DOUBLE");

        private String value;

        PrimitiveTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static PrimitiveTypeEnum fromValue(String value) {
            for (PrimitiveTypeEnum b : PrimitiveTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<PrimitiveTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final PrimitiveTypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public PrimitiveTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return PrimitiveTypeEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            PrimitiveTypeEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_PRIMITIVE_TYPE = "primitive_type";

    @SerializedName(SERIALIZED_NAME_PRIMITIVE_TYPE)
    private PrimitiveTypeEnum primitiveType;

    public PrimitiveType() {}

    public PrimitiveType primitiveType(PrimitiveTypeEnum primitiveType) {
        this.primitiveType = primitiveType;
        return this;
    }

    /**
     * Get primitiveType
     * @return primitiveType
     **/
    @javax.annotation.Nonnull
    public PrimitiveTypeEnum getPrimitiveType() {
        return primitiveType;
    }

    public void setPrimitiveType(PrimitiveTypeEnum primitiveType) {
        this.primitiveType = primitiveType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PrimitiveType primitiveType = (PrimitiveType) o;
        return Objects.equals(this.primitiveType, primitiveType.primitiveType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(primitiveType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PrimitiveType {\n");
        sb.append("    primitiveType: ").append(toIndentedString(primitiveType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("primitive_type");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("primitive_type");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PrimitiveType
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!PrimitiveType.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PrimitiveType is not found in the"
                                        + " empty JSON string",
                                PrimitiveType.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!PrimitiveType.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `PrimitiveType` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : PrimitiveType.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("primitive_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `primitive_type` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("primitive_type").toString()));
        }
        // validate the required field `primitive_type`
        PrimitiveTypeEnum.validateJsonElement(jsonObj.get("primitive_type"));
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PrimitiveType.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PrimitiveType' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PrimitiveType> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(PrimitiveType.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PrimitiveType>() {
                        @Override
                        public void write(JsonWriter out, PrimitiveType value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PrimitiveType read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PrimitiveType given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PrimitiveType
     * @throws IOException if the JSON string is invalid with respect to PrimitiveType
     */
    public static PrimitiveType fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PrimitiveType.class);
    }

    /**
     * Convert an instance of PrimitiveType to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
