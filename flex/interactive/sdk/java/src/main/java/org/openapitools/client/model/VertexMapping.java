/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.alibaba.graphscope.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * VertexMapping
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VertexMapping {
    public static final String SERIALIZED_NAME_TYPE_NAME = "type_name";

    @SerializedName(SERIALIZED_NAME_TYPE_NAME)
    private String typeName;

    public static final String SERIALIZED_NAME_INPUTS = "inputs";

    @SerializedName(SERIALIZED_NAME_INPUTS)
    private List<String> inputs;

    public static final String SERIALIZED_NAME_COLUMN_MAPPINGS = "column_mappings";

    @SerializedName(SERIALIZED_NAME_COLUMN_MAPPINGS)
    private List<ColumnMapping> columnMappings;

    public VertexMapping() {}

    public VertexMapping typeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

    /**
     * Get typeName
     * @return typeName
     **/
    @javax.annotation.Nullable
    public String getTypeName() {
        return typeName;
    }

    public void setTypeName(String typeName) {
        this.typeName = typeName;
    }

    public VertexMapping inputs(List<String> inputs) {
        this.inputs = inputs;
        return this;
    }

    public VertexMapping addInputsItem(String inputsItem) {
        if (this.inputs == null) {
            this.inputs = new ArrayList<>();
        }
        this.inputs.add(inputsItem);
        return this;
    }

    /**
     * Get inputs
     * @return inputs
     **/
    @javax.annotation.Nullable
    public List<String> getInputs() {
        return inputs;
    }

    public void setInputs(List<String> inputs) {
        this.inputs = inputs;
    }

    public VertexMapping columnMappings(List<ColumnMapping> columnMappings) {
        this.columnMappings = columnMappings;
        return this;
    }

    public VertexMapping addColumnMappingsItem(ColumnMapping columnMappingsItem) {
        if (this.columnMappings == null) {
            this.columnMappings = new ArrayList<>();
        }
        this.columnMappings.add(columnMappingsItem);
        return this;
    }

    /**
     * Get columnMappings
     * @return columnMappings
     **/
    @javax.annotation.Nullable
    public List<ColumnMapping> getColumnMappings() {
        return columnMappings;
    }

    public void setColumnMappings(List<ColumnMapping> columnMappings) {
        this.columnMappings = columnMappings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VertexMapping vertexMapping = (VertexMapping) o;
        return Objects.equals(this.typeName, vertexMapping.typeName)
                && Objects.equals(this.inputs, vertexMapping.inputs)
                && Objects.equals(this.columnMappings, vertexMapping.columnMappings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(typeName, inputs, columnMappings);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class VertexMapping {\n");
        sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
        sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
        sb.append("    columnMappings: ").append(toIndentedString(columnMappings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("type_name");
        openapiFields.add("inputs");
        openapiFields.add("column_mappings");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to VertexMapping
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!VertexMapping.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in VertexMapping is not found in the"
                                        + " empty JSON string",
                                VertexMapping.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!VertexMapping.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `VertexMapping` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("type_name") != null && !jsonObj.get("type_name").isJsonNull())
                && !jsonObj.get("type_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type_name` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("type_name").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("inputs") != null
                && !jsonObj.get("inputs").isJsonNull()
                && !jsonObj.get("inputs").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `inputs` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("inputs").toString()));
        }
        if (jsonObj.get("column_mappings") != null
                && !jsonObj.get("column_mappings").isJsonNull()) {
            JsonArray jsonArraycolumnMappings = jsonObj.getAsJsonArray("column_mappings");
            if (jsonArraycolumnMappings != null) {
                // ensure the json data is an array
                if (!jsonObj.get("column_mappings").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `column_mappings` to be an array in the"
                                            + " JSON string but got `%s`",
                                    jsonObj.get("column_mappings").toString()));
                }

                // validate the optional field `column_mappings` (array)
                for (int i = 0; i < jsonArraycolumnMappings.size(); i++) {
                    ColumnMapping.validateJsonElement(jsonArraycolumnMappings.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!VertexMapping.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'VertexMapping' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<VertexMapping> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(VertexMapping.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<VertexMapping>() {
                        @Override
                        public void write(JsonWriter out, VertexMapping value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public VertexMapping read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of VertexMapping given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of VertexMapping
     * @throws IOException if the JSON string is invalid with respect to VertexMapping
     */
    public static VertexMapping fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, VertexMapping.class);
    }

    /**
     * Convert an instance of VertexMapping to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
