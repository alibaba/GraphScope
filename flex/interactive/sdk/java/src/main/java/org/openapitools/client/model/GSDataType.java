/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.alibaba.graphscope.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GSDataType extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GSDataType.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GSDataType.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GSDataType' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PrimitiveType> adapterPrimitiveType =
                    gson.getDelegateAdapter(this, TypeToken.get(PrimitiveType.class));
            final TypeAdapter<StringType> adapterStringType =
                    gson.getDelegateAdapter(this, TypeToken.get(StringType.class));
            final TypeAdapter<TemporalType> adapterTemporalType =
                    gson.getDelegateAdapter(this, TypeToken.get(TemporalType.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GSDataType>() {
                        @Override
                        public void write(JsonWriter out, GSDataType value) throws IOException {
                            if (value == null || value.getActualInstance() == null) {
                                elementAdapter.write(out, null);
                                return;
                            }

                            // check if the actual instance is of the type `PrimitiveType`
                            if (value.getActualInstance() instanceof PrimitiveType) {
                                JsonElement element =
                                        adapterPrimitiveType.toJsonTree(
                                                (PrimitiveType) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `StringType`
                            if (value.getActualInstance() instanceof StringType) {
                                JsonElement element =
                                        adapterStringType.toJsonTree(
                                                (StringType) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `TemporalType`
                            if (value.getActualInstance() instanceof TemporalType) {
                                JsonElement element =
                                        adapterTemporalType.toJsonTree(
                                                (TemporalType) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            throw new IOException(
                                    "Failed to serialize as the type doesn't match oneOf schemas:"
                                            + " PrimitiveType, StringType, TemporalType");
                        }

                        @Override
                        public GSDataType read(JsonReader in) throws IOException {
                            Object deserialized = null;
                            JsonElement jsonElement = elementAdapter.read(in);

                            int match = 0;
                            ArrayList<String> errorMessages = new ArrayList<>();
                            TypeAdapter actualAdapter = elementAdapter;

                            // deserialize PrimitiveType
                            try {
                                // validate the JSON object to see if any exception is thrown
                                PrimitiveType.validateJsonElement(jsonElement);
                                actualAdapter = adapterPrimitiveType;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'PrimitiveType'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for PrimitiveType failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'PrimitiveType'",
                                        e);
                            }
                            // deserialize StringType
                            try {
                                // validate the JSON object to see if any exception is thrown
                                StringType.validateJsonElement(jsonElement);
                                actualAdapter = adapterStringType;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'StringType'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for StringType failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'StringType'",
                                        e);
                            }
                            // deserialize TemporalType
                            try {
                                // validate the JSON object to see if any exception is thrown
                                TemporalType.validateJsonElement(jsonElement);
                                actualAdapter = adapterTemporalType;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'TemporalType'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for TemporalType failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'TemporalType'",
                                        e);
                            }

                            if (match == 1) {
                                GSDataType ret = new GSDataType();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            }

                            throw new IOException(
                                    String.format(
                                            "Failed deserialization for GSDataType: %d classes"
                                                    + " match result, expected 1. Detailed failure"
                                                    + " message for oneOf schemas: %s. JSON: %s",
                                            match, errorMessages, jsonElement.toString()));
                        }
                    }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public GSDataType() {
        super("oneOf", Boolean.FALSE);
    }

    public GSDataType(PrimitiveType o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GSDataType(StringType o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public GSDataType(TemporalType o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PrimitiveType", PrimitiveType.class);
        schemas.put("StringType", StringType.class);
        schemas.put("TemporalType", TemporalType.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return GSDataType.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * PrimitiveType, StringType, TemporalType
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof PrimitiveType) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof StringType) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TemporalType) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
                "Invalid instance type. Must be PrimitiveType, StringType, TemporalType");
    }

    /**
     * Get the actual instance, which can be the following:
     * PrimitiveType, StringType, TemporalType
     *
     * @return The actual instance (PrimitiveType, StringType, TemporalType)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PrimitiveType`. If the actual instance is not `PrimitiveType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PrimitiveType`
     * @throws ClassCastException if the instance is not `PrimitiveType`
     */
    public PrimitiveType getPrimitiveType() throws ClassCastException {
        return (PrimitiveType) super.getActualInstance();
    }
    /**
     * Get the actual instance of `StringType`. If the actual instance is not `StringType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StringType`
     * @throws ClassCastException if the instance is not `StringType`
     */
    public StringType getStringType() throws ClassCastException {
        return (StringType) super.getActualInstance();
    }
    /**
     * Get the actual instance of `TemporalType`. If the actual instance is not `TemporalType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TemporalType`
     * @throws ClassCastException if the instance is not `TemporalType`
     */
    public TemporalType getTemporalType() throws ClassCastException {
        return (TemporalType) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GSDataType
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with PrimitiveType
        try {
            PrimitiveType.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for PrimitiveType failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with StringType
        try {
            StringType.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for StringType failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TemporalType
        try {
            TemporalType.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for TemporalType failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(
                    String.format(
                            "The JSON string is invalid for GSDataType with oneOf schemas:"
                                + " PrimitiveType, StringType, TemporalType. %d class(es) match the"
                                + " result, expected 1. Detailed failure message for oneOf schemas:"
                                + " %s. JSON: %s",
                            validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of GSDataType given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GSDataType
     * @throws IOException if the JSON string is invalid with respect to GSDataType
     */
    public static GSDataType fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GSDataType.class);
    }

    /**
     * Convert an instance of GSDataType to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
