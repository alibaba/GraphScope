/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.alibaba.graphscope.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * source label -&gt; [edge label] -&gt; destination label
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EdgeMappingTypeTriplet {
    public static final String SERIALIZED_NAME_EDGE = "edge";

    @SerializedName(SERIALIZED_NAME_EDGE)
    private String edge;

    public static final String SERIALIZED_NAME_SOURCE_VERTEX = "source_vertex";

    @SerializedName(SERIALIZED_NAME_SOURCE_VERTEX)
    private String sourceVertex;

    public static final String SERIALIZED_NAME_DESTINATION_VERTEX = "destination_vertex";

    @SerializedName(SERIALIZED_NAME_DESTINATION_VERTEX)
    private String destinationVertex;

    public EdgeMappingTypeTriplet() {}

    public EdgeMappingTypeTriplet edge(String edge) {
        this.edge = edge;
        return this;
    }

    /**
     * Get edge
     * @return edge
     **/
    @javax.annotation.Nullable
    public String getEdge() {
        return edge;
    }

    public void setEdge(String edge) {
        this.edge = edge;
    }

    public EdgeMappingTypeTriplet sourceVertex(String sourceVertex) {
        this.sourceVertex = sourceVertex;
        return this;
    }

    /**
     * Get sourceVertex
     * @return sourceVertex
     **/
    @javax.annotation.Nullable
    public String getSourceVertex() {
        return sourceVertex;
    }

    public void setSourceVertex(String sourceVertex) {
        this.sourceVertex = sourceVertex;
    }

    public EdgeMappingTypeTriplet destinationVertex(String destinationVertex) {
        this.destinationVertex = destinationVertex;
        return this;
    }

    /**
     * Get destinationVertex
     * @return destinationVertex
     **/
    @javax.annotation.Nullable
    public String getDestinationVertex() {
        return destinationVertex;
    }

    public void setDestinationVertex(String destinationVertex) {
        this.destinationVertex = destinationVertex;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EdgeMappingTypeTriplet edgeMappingTypeTriplet = (EdgeMappingTypeTriplet) o;
        return Objects.equals(this.edge, edgeMappingTypeTriplet.edge)
                && Objects.equals(this.sourceVertex, edgeMappingTypeTriplet.sourceVertex)
                && Objects.equals(this.destinationVertex, edgeMappingTypeTriplet.destinationVertex);
    }

    @Override
    public int hashCode() {
        return Objects.hash(edge, sourceVertex, destinationVertex);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EdgeMappingTypeTriplet {\n");
        sb.append("    edge: ").append(toIndentedString(edge)).append("\n");
        sb.append("    sourceVertex: ").append(toIndentedString(sourceVertex)).append("\n");
        sb.append("    destinationVertex: ")
                .append(toIndentedString(destinationVertex))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("edge");
        openapiFields.add("source_vertex");
        openapiFields.add("destination_vertex");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EdgeMappingTypeTriplet
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EdgeMappingTypeTriplet.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in EdgeMappingTypeTriplet is not found in"
                                        + " the empty JSON string",
                                EdgeMappingTypeTriplet.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EdgeMappingTypeTriplet.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `EdgeMappingTypeTriplet` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("edge") != null && !jsonObj.get("edge").isJsonNull())
                && !jsonObj.get("edge").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `edge` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("edge").toString()));
        }
        if ((jsonObj.get("source_vertex") != null && !jsonObj.get("source_vertex").isJsonNull())
                && !jsonObj.get("source_vertex").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `source_vertex` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("source_vertex").toString()));
        }
        if ((jsonObj.get("destination_vertex") != null
                        && !jsonObj.get("destination_vertex").isJsonNull())
                && !jsonObj.get("destination_vertex").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `destination_vertex` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("destination_vertex").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EdgeMappingTypeTriplet.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EdgeMappingTypeTriplet' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EdgeMappingTypeTriplet> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(EdgeMappingTypeTriplet.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<EdgeMappingTypeTriplet>() {
                        @Override
                        public void write(JsonWriter out, EdgeMappingTypeTriplet value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public EdgeMappingTypeTriplet read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of EdgeMappingTypeTriplet given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EdgeMappingTypeTriplet
     * @throws IOException if the JSON string is invalid with respect to EdgeMappingTypeTriplet
     */
    public static EdgeMappingTypeTriplet fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EdgeMappingTypeTriplet.class);
    }

    /**
     * Convert an instance of EdgeMappingTypeTriplet to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
