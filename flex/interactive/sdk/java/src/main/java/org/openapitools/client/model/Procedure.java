/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.alibaba.graphscope.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * Procedure
 */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-03-18T15:03:45.945656+08:00[Asia/Shanghai]")
public class Procedure {
    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_BOUND_GRAPH = "bound_graph";

    @SerializedName(SERIALIZED_NAME_BOUND_GRAPH)
    private String boundGraph;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    /**
     * Gets or Sets type
     */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        CPP("cpp"),

        CYPHER("cypher");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TypeEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            TypeEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    private TypeEnum type;

    public static final String SERIALIZED_NAME_QUERY = "query";

    @SerializedName(SERIALIZED_NAME_QUERY)
    private String query;

    public static final String SERIALIZED_NAME_ENABLE = "enable";

    @SerializedName(SERIALIZED_NAME_ENABLE)
    private Boolean enable;

    public static final String SERIALIZED_NAME_RUNNABLE = "runnable";

    @SerializedName(SERIALIZED_NAME_RUNNABLE)
    private Boolean runnable;

    public static final String SERIALIZED_NAME_PARAMS = "params";

    @SerializedName(SERIALIZED_NAME_PARAMS)
    private List<ProcedureParamsInner> params;

    public static final String SERIALIZED_NAME_RETURNS = "returns";

    @SerializedName(SERIALIZED_NAME_RETURNS)
    private List<ProcedureParamsInner> returns;

    public Procedure() {}

    public Procedure name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     * @return name
     **/
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Procedure boundGraph(String boundGraph) {
        this.boundGraph = boundGraph;
        return this;
    }

    /**
     * Get boundGraph
     * @return boundGraph
     **/
    @javax.annotation.Nullable
    public String getBoundGraph() {
        return boundGraph;
    }

    public void setBoundGraph(String boundGraph) {
        this.boundGraph = boundGraph;
    }

    public Procedure description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     * @return description
     **/
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Procedure type(TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     * @return type
     **/
    @javax.annotation.Nullable
    public TypeEnum getType() {
        return type;
    }

    public void setType(TypeEnum type) {
        this.type = type;
    }

    public Procedure query(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get query
     * @return query
     **/
    @javax.annotation.Nullable
    public String getQuery() {
        return query;
    }

    public void setQuery(String query) {
        this.query = query;
    }

    public Procedure enable(Boolean enable) {
        this.enable = enable;
        return this;
    }

    /**
     * Get enable
     * @return enable
     **/
    @javax.annotation.Nullable
    public Boolean getEnable() {
        return enable;
    }

    public void setEnable(Boolean enable) {
        this.enable = enable;
    }

    public Procedure runnable(Boolean runnable) {
        this.runnable = runnable;
        return this;
    }

    /**
     * Get runnable
     * @return runnable
     **/
    @javax.annotation.Nullable
    public Boolean getRunnable() {
        return runnable;
    }

    public void setRunnable(Boolean runnable) {
        this.runnable = runnable;
    }

    public Procedure params(List<ProcedureParamsInner> params) {
        this.params = params;
        return this;
    }

    public Procedure addParamsItem(ProcedureParamsInner paramsItem) {
        if (this.params == null) {
            this.params = new ArrayList<>();
        }
        this.params.add(paramsItem);
        return this;
    }

    /**
     * Get params
     * @return params
     **/
    @javax.annotation.Nullable
    public List<ProcedureParamsInner> getParams() {
        return params;
    }

    public void setParams(List<ProcedureParamsInner> params) {
        this.params = params;
    }

    public Procedure returns(List<ProcedureParamsInner> returns) {
        this.returns = returns;
        return this;
    }

    public Procedure addReturnsItem(ProcedureParamsInner returnsItem) {
        if (this.returns == null) {
            this.returns = new ArrayList<>();
        }
        this.returns.add(returnsItem);
        return this;
    }

    /**
     * Get returns
     * @return returns
     **/
    @javax.annotation.Nullable
    public List<ProcedureParamsInner> getReturns() {
        return returns;
    }

    public void setReturns(List<ProcedureParamsInner> returns) {
        this.returns = returns;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Procedure procedure = (Procedure) o;
        return Objects.equals(this.name, procedure.name)
                && Objects.equals(this.boundGraph, procedure.boundGraph)
                && Objects.equals(this.description, procedure.description)
                && Objects.equals(this.type, procedure.type)
                && Objects.equals(this.query, procedure.query)
                && Objects.equals(this.enable, procedure.enable)
                && Objects.equals(this.runnable, procedure.runnable)
                && Objects.equals(this.params, procedure.params)
                && Objects.equals(this.returns, procedure.returns);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                name, boundGraph, description, type, query, enable, runnable, params, returns);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Procedure {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    boundGraph: ").append(toIndentedString(boundGraph)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    query: ").append(toIndentedString(query)).append("\n");
        sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
        sb.append("    runnable: ").append(toIndentedString(runnable)).append("\n");
        sb.append("    params: ").append(toIndentedString(params)).append("\n");
        sb.append("    returns: ").append(toIndentedString(returns)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("name");
        openapiFields.add("bound_graph");
        openapiFields.add("description");
        openapiFields.add("type");
        openapiFields.add("query");
        openapiFields.add("enable");
        openapiFields.add("runnable");
        openapiFields.add("params");
        openapiFields.add("returns");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Procedure
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!Procedure.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in Procedure is not found in the empty"
                                        + " JSON string",
                                Procedure.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!Procedure.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `Procedure` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("bound_graph") != null && !jsonObj.get("bound_graph").isJsonNull())
                && !jsonObj.get("bound_graph").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bound_graph` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("bound_graph").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
                && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
                && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        // validate the optional field `type`
        if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
            TypeEnum.validateJsonElement(jsonObj.get("type"));
        }
        if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull())
                && !jsonObj.get("query").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `query` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("query").toString()));
        }
        if (jsonObj.get("params") != null && !jsonObj.get("params").isJsonNull()) {
            JsonArray jsonArrayparams = jsonObj.getAsJsonArray("params");
            if (jsonArrayparams != null) {
                // ensure the json data is an array
                if (!jsonObj.get("params").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `params` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("params").toString()));
                }

                // validate the optional field `params` (array)
                for (int i = 0; i < jsonArrayparams.size(); i++) {
                    ProcedureParamsInner.validateJsonElement(jsonArrayparams.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("returns") != null && !jsonObj.get("returns").isJsonNull()) {
            JsonArray jsonArrayreturns = jsonObj.getAsJsonArray("returns");
            if (jsonArrayreturns != null) {
                // ensure the json data is an array
                if (!jsonObj.get("returns").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `returns` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("returns").toString()));
                }

                // validate the optional field `returns` (array)
                for (int i = 0; i < jsonArrayreturns.size(); i++) {
                    ProcedureParamsInner.validateJsonElement(jsonArrayreturns.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Procedure.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Procedure' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Procedure> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(Procedure.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Procedure>() {
                        @Override
                        public void write(JsonWriter out, Procedure value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public Procedure read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of Procedure given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Procedure
     * @throws IOException if the JSON string is invalid with respect to Procedure
     */
    public static Procedure fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Procedure.class);
    }

    /**
     * Convert an instance of Procedure to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
