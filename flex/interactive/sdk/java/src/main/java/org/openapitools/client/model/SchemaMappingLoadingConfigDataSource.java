/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.alibaba.graphscope.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * SchemaMappingLoadingConfigDataSource
 */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        date = "2024-04-23T14:21:58.073358+08:00[Asia/Shanghai]",
        comments = "Generator version: 7.5.0")
public class SchemaMappingLoadingConfigDataSource {
    /**
     * Gets or Sets scheme
     */
    @JsonAdapter(SchemeEnum.Adapter.class)
    public enum SchemeEnum {
        FILE("file"),

        OSS("oss"),

        S3("s3"),

        HDFS("hdfs");

        private String value;

        SchemeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static SchemeEnum fromValue(String value) {
            for (SchemeEnum b : SchemeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<SchemeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final SchemeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public SchemeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return SchemeEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            SchemeEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_SCHEME = "scheme";

    @SerializedName(SERIALIZED_NAME_SCHEME)
    private SchemeEnum scheme;

    public SchemaMappingLoadingConfigDataSource() {}

    public SchemaMappingLoadingConfigDataSource scheme(SchemeEnum scheme) {
        this.scheme = scheme;
        return this;
    }

    /**
     * Get scheme
     * @return scheme
     **/
    @javax.annotation.Nullable
    public SchemeEnum getScheme() {
        return scheme;
    }

    public void setScheme(SchemeEnum scheme) {
        this.scheme = scheme;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SchemaMappingLoadingConfigDataSource schemaMappingLoadingConfigDataSource =
                (SchemaMappingLoadingConfigDataSource) o;
        return Objects.equals(this.scheme, schemaMappingLoadingConfigDataSource.scheme);
    }

    @Override
    public int hashCode() {
        return Objects.hash(scheme);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SchemaMappingLoadingConfigDataSource {\n");
        sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("scheme");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SchemaMappingLoadingConfigDataSource
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SchemaMappingLoadingConfigDataSource.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SchemaMappingLoadingConfigDataSource"
                                        + " is not found in the empty JSON string",
                                SchemaMappingLoadingConfigDataSource.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SchemaMappingLoadingConfigDataSource.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `SchemaMappingLoadingConfigDataSource` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("scheme") != null && !jsonObj.get("scheme").isJsonNull())
                && !jsonObj.get("scheme").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `scheme` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("scheme").toString()));
        }
        // validate the optional field `scheme`
        if (jsonObj.get("scheme") != null && !jsonObj.get("scheme").isJsonNull()) {
            SchemeEnum.validateJsonElement(jsonObj.get("scheme"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SchemaMappingLoadingConfigDataSource.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SchemaMappingLoadingConfigDataSource'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SchemaMappingLoadingConfigDataSource> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(SchemaMappingLoadingConfigDataSource.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SchemaMappingLoadingConfigDataSource>() {
                        @Override
                        public void write(
                                JsonWriter out, SchemaMappingLoadingConfigDataSource value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SchemaMappingLoadingConfigDataSource read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SchemaMappingLoadingConfigDataSource given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SchemaMappingLoadingConfigDataSource
     * @throws IOException if the JSON string is invalid with respect to SchemaMappingLoadingConfigDataSource
     */
    public static SchemaMappingLoadingConfigDataSource fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, SchemaMappingLoadingConfigDataSource.class);
    }

    /**
     * Convert an instance of SchemaMappingLoadingConfigDataSource to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
