/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.alibaba.graphscope.interactive;

import com.alibaba.graphscope.ApiCallback;
import com.alibaba.graphscope.ApiClient;
import com.alibaba.graphscope.ApiException;
import com.alibaba.graphscope.ApiResponse;
import com.alibaba.graphscope.Configuration;
import com.alibaba.graphscope.Pair;
import com.google.gson.reflect.TypeToken;

import org.openapitools.client.model.VertexData;
import org.openapitools.client.model.VertexRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GraphServiceVertexManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GraphServiceVertexManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GraphServiceVertexManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVertex
     * @param graphId  (required)
     * @param vertexRequest Add vertex to graph. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully created vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid input vertex </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Graph not found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Vertex already exists </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addVertexCall(
            String graphId, VertexRequest vertexRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vertexRequest;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}/vertex"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVertexValidateBeforeCall(
            String graphId, VertexRequest vertexRequest, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling addVertex(Async)");
        }

        return addVertexCall(graphId, vertexRequest, _callback);
    }

    /**
     * Add vertex to the graph
     * Add the provided vertex to the specified graph.
     * @param graphId  (required)
     * @param vertexRequest Add vertex to graph. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully created vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid input vertex </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Graph not found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Vertex already exists </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public String addVertex(String graphId, VertexRequest vertexRequest) throws ApiException {
        ApiResponse<String> localVarResp = addVertexWithHttpInfo(graphId, vertexRequest);
        return localVarResp.getData();
    }

    /**
     * Add vertex to the graph
     * Add the provided vertex to the specified graph.
     * @param graphId  (required)
     * @param vertexRequest Add vertex to graph. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully created vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid input vertex </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Graph not found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Vertex already exists </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<String> addVertexWithHttpInfo(String graphId, VertexRequest vertexRequest)
            throws ApiException {
        okhttp3.Call localVarCall = addVertexValidateBeforeCall(graphId, vertexRequest, null);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add vertex to the graph (asynchronously)
     * Add the provided vertex to the specified graph.
     * @param graphId  (required)
     * @param vertexRequest Add vertex to graph. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully created vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid input vertex </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Graph not found </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Vertex already exists </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addVertexAsync(
            String graphId, VertexRequest vertexRequest, final ApiCallback<String> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = addVertexValidateBeforeCall(graphId, vertexRequest, _callback);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVertex
     * @param graphId  (required)
     * @param label The label name of querying vertex. (required)
     * @param primaryKeyValue The value of the querying vertex&#39;s primary key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully delete vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid input vertex </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Vertex not exists or Graph not exits. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteVertexCall(
            String graphId, String label, Object primaryKeyValue, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}/vertex"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (primaryKeyValue != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("primary_key_value", primaryKeyValue));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVertexValidateBeforeCall(
            String graphId, String label, Object primaryKeyValue, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling deleteVertex(Async)");
        }

        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException(
                    "Missing the required parameter 'label' when calling deleteVertex(Async)");
        }

        // verify the required parameter 'primaryKeyValue' is set
        if (primaryKeyValue == null) {
            throw new ApiException(
                    "Missing the required parameter 'primaryKeyValue' when calling"
                            + " deleteVertex(Async)");
        }

        return deleteVertexCall(graphId, label, primaryKeyValue, _callback);
    }

    /**
     * Remove vertex from the graph
     * Remove the vertex from the specified graph.
     * @param graphId  (required)
     * @param label The label name of querying vertex. (required)
     * @param primaryKeyValue The value of the querying vertex&#39;s primary key (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully delete vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid input vertex </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Vertex not exists or Graph not exits. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public String deleteVertex(String graphId, String label, Object primaryKeyValue)
            throws ApiException {
        ApiResponse<String> localVarResp =
                deleteVertexWithHttpInfo(graphId, label, primaryKeyValue);
        return localVarResp.getData();
    }

    /**
     * Remove vertex from the graph
     * Remove the vertex from the specified graph.
     * @param graphId  (required)
     * @param label The label name of querying vertex. (required)
     * @param primaryKeyValue The value of the querying vertex&#39;s primary key (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully delete vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid input vertex </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Vertex not exists or Graph not exits. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<String> deleteVertexWithHttpInfo(
            String graphId, String label, Object primaryKeyValue) throws ApiException {
        okhttp3.Call localVarCall =
                deleteVertexValidateBeforeCall(graphId, label, primaryKeyValue, null);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove vertex from the graph (asynchronously)
     * Remove the vertex from the specified graph.
     * @param graphId  (required)
     * @param label The label name of querying vertex. (required)
     * @param primaryKeyValue The value of the querying vertex&#39;s primary key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully delete vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid input vertex </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Vertex not exists or Graph not exits. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteVertexAsync(
            String graphId,
            String label,
            Object primaryKeyValue,
            final ApiCallback<String> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                deleteVertexValidateBeforeCall(graphId, label, primaryKeyValue, _callback);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVertex
     * @param graphId The name of the graph (required)
     * @param label The label name of querying vertex. (required)
     * @param primaryKeyValue The primary key value of querying vertex. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Found vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad input parameter </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Vertex not found or graph not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getVertexCall(
            String graphId, String label, Object primaryKeyValue, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}/vertex"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (primaryKeyValue != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("primary_key_value", primaryKeyValue));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVertexValidateBeforeCall(
            String graphId, String label, Object primaryKeyValue, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling getVertex(Async)");
        }

        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException(
                    "Missing the required parameter 'label' when calling getVertex(Async)");
        }

        // verify the required parameter 'primaryKeyValue' is set
        if (primaryKeyValue == null) {
            throw new ApiException(
                    "Missing the required parameter 'primaryKeyValue' when calling"
                            + " getVertex(Async)");
        }

        return getVertexCall(graphId, label, primaryKeyValue, _callback);
    }

    /**
     * Get the vertex&#39;s properties with vertex primary key.
     * Get the properties for the specified vertex. example: &#x60;&#x60;&#x60;http GET /endpoint?param1&#x3D;value1&amp;param2&#x3D;value2 HTTP/1.1 Host: example.com &#x60;&#x60;&#x60;
     * @param graphId The name of the graph (required)
     * @param label The label name of querying vertex. (required)
     * @param primaryKeyValue The primary key value of querying vertex. (required)
     * @return VertexData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Found vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad input parameter </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Vertex not found or graph not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public VertexData getVertex(String graphId, String label, Object primaryKeyValue)
            throws ApiException {
        ApiResponse<VertexData> localVarResp =
                getVertexWithHttpInfo(graphId, label, primaryKeyValue);
        return localVarResp.getData();
    }

    /**
     * Get the vertex&#39;s properties with vertex primary key.
     * Get the properties for the specified vertex. example: &#x60;&#x60;&#x60;http GET /endpoint?param1&#x3D;value1&amp;param2&#x3D;value2 HTTP/1.1 Host: example.com &#x60;&#x60;&#x60;
     * @param graphId The name of the graph (required)
     * @param label The label name of querying vertex. (required)
     * @param primaryKeyValue The primary key value of querying vertex. (required)
     * @return ApiResponse&lt;VertexData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Found vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad input parameter </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Vertex not found or graph not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<VertexData> getVertexWithHttpInfo(
            String graphId, String label, Object primaryKeyValue) throws ApiException {
        okhttp3.Call localVarCall =
                getVertexValidateBeforeCall(graphId, label, primaryKeyValue, null);
        Type localVarReturnType = new TypeToken<VertexData>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the vertex&#39;s properties with vertex primary key. (asynchronously)
     * Get the properties for the specified vertex. example: &#x60;&#x60;&#x60;http GET /endpoint?param1&#x3D;value1&amp;param2&#x3D;value2 HTTP/1.1 Host: example.com &#x60;&#x60;&#x60;
     * @param graphId The name of the graph (required)
     * @param label The label name of querying vertex. (required)
     * @param primaryKeyValue The primary key value of querying vertex. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Found vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad input parameter </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Vertex not found or graph not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getVertexAsync(
            String graphId,
            String label,
            Object primaryKeyValue,
            final ApiCallback<VertexData> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getVertexValidateBeforeCall(graphId, label, primaryKeyValue, _callback);
        Type localVarReturnType = new TypeToken<VertexData>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVertex
     * @param graphId  (required)
     * @param vertexRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully update vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid input paramters </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Vertex not exists </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateVertexCall(
            String graphId, VertexRequest vertexRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vertexRequest;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}/vertex"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVertexValidateBeforeCall(
            String graphId, VertexRequest vertexRequest, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling updateVertex(Async)");
        }

        return updateVertexCall(graphId, vertexRequest, _callback);
    }

    /**
     * Update vertex&#39;s property
     * Remove the vertex from the specified graph.
     * @param graphId  (required)
     * @param vertexRequest  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully update vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid input paramters </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Vertex not exists </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public String updateVertex(String graphId, VertexRequest vertexRequest) throws ApiException {
        ApiResponse<String> localVarResp = updateVertexWithHttpInfo(graphId, vertexRequest);
        return localVarResp.getData();
    }

    /**
     * Update vertex&#39;s property
     * Remove the vertex from the specified graph.
     * @param graphId  (required)
     * @param vertexRequest  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully update vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid input paramters </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Vertex not exists </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<String> updateVertexWithHttpInfo(String graphId, VertexRequest vertexRequest)
            throws ApiException {
        okhttp3.Call localVarCall = updateVertexValidateBeforeCall(graphId, vertexRequest, null);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update vertex&#39;s property (asynchronously)
     * Remove the vertex from the specified graph.
     * @param graphId  (required)
     * @param vertexRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully update vertex </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Invalid input paramters </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Vertex not exists </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateVertexAsync(
            String graphId, VertexRequest vertexRequest, final ApiCallback<String> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateVertexValidateBeforeCall(graphId, vertexRequest, _callback);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
