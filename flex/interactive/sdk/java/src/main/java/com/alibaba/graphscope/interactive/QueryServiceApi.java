/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.alibaba.graphscope.interactive;

import com.alibaba.graphscope.ApiCallback;
import com.alibaba.graphscope.ApiClient;
import com.alibaba.graphscope.ApiException;
import com.alibaba.graphscope.ApiResponse;
import com.alibaba.graphscope.Configuration;
import com.alibaba.graphscope.Pair;
import com.google.gson.reflect.TypeToken;

import org.openapitools.client.model.CollectiveResults;
import org.openapitools.client.model.QueryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueryServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QueryServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueryServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for procCall
     * @param graphId  (required)
     * @param queryRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully runned. Empty if failed? </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call procCallCall(
            String graphId, QueryRequest queryRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryRequest;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}/query"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call procCallValidateBeforeCall(
            String graphId, QueryRequest queryRequest, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling procCall(Async)");
        }

        return procCallCall(graphId, queryRequest, _callback);
    }

    /**
     * run queries on graph
     * After the procedure is created, user can use this API to run the procedure. TODO: a full example cypher-&gt;plan-&gt;json. TODO: make sure typeinfo can be passed.
     * @param graphId  (required)
     * @param queryRequest  (optional)
     * @return CollectiveResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully runned. Empty if failed? </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public CollectiveResults procCall(String graphId, QueryRequest queryRequest)
            throws ApiException {
        ApiResponse<CollectiveResults> localVarResp = procCallWithHttpInfo(graphId, queryRequest);
        return localVarResp.getData();
    }

    /**
     * run queries on graph
     * After the procedure is created, user can use this API to run the procedure. TODO: a full example cypher-&gt;plan-&gt;json. TODO: make sure typeinfo can be passed.
     * @param graphId  (required)
     * @param queryRequest  (optional)
     * @return ApiResponse&lt;CollectiveResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully runned. Empty if failed? </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CollectiveResults> procCallWithHttpInfo(
            String graphId, QueryRequest queryRequest) throws ApiException {
        okhttp3.Call localVarCall = procCallValidateBeforeCall(graphId, queryRequest, null);
        Type localVarReturnType = new TypeToken<CollectiveResults>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * run queries on graph (asynchronously)
     * After the procedure is created, user can use this API to run the procedure. TODO: a full example cypher-&gt;plan-&gt;json. TODO: make sure typeinfo can be passed.
     * @param graphId  (required)
     * @param queryRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successfully runned. Empty if failed? </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Server internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call procCallAsync(
            String graphId,
            QueryRequest queryRequest,
            final ApiCallback<CollectiveResults> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = procCallValidateBeforeCall(graphId, queryRequest, _callback);
        Type localVarReturnType = new TypeToken<CollectiveResults>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
