/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.alibaba.graphscope.interactive;

import com.alibaba.graphscope.ApiCallback;
import com.alibaba.graphscope.ApiClient;
import com.alibaba.graphscope.ApiException;
import com.alibaba.graphscope.ApiResponse;
import com.alibaba.graphscope.Configuration;
import com.alibaba.graphscope.Pair;
import com.google.gson.reflect.TypeToken;

import org.openapitools.client.model.CreateGraphRequest;
import org.openapitools.client.model.CreateGraphResponse;
import org.openapitools.client.model.GetGraphResponse;
import org.openapitools.client.model.GetGraphSchemaResponse;
import org.openapitools.client.model.JobResponse;
import org.openapitools.client.model.SchemaMapping;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminServiceGraphManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminServiceGraphManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminServiceGraphManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDataloadingJob
     * @param graphId The name of graph to do bulk loading. (required)
     * @param schemaMapping  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createDataloadingJobCall(
            String graphId, SchemaMapping schemaMapping, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schemaMapping;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}/dataloading"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDataloadingJobValidateBeforeCall(
            String graphId, SchemaMapping schemaMapping, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling"
                            + " createDataloadingJob(Async)");
        }

        // verify the required parameter 'schemaMapping' is set
        if (schemaMapping == null) {
            throw new ApiException(
                    "Missing the required parameter 'schemaMapping' when calling"
                            + " createDataloadingJob(Async)");
        }

        return createDataloadingJobCall(graphId, schemaMapping, _callback);
    }

    /**
     *
     * Create a dataloading job
     * @param graphId The name of graph to do bulk loading. (required)
     * @param schemaMapping  (required)
     * @return JobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * </table>
     */
    public JobResponse createDataloadingJob(String graphId, SchemaMapping schemaMapping)
            throws ApiException {
        ApiResponse<JobResponse> localVarResp =
                createDataloadingJobWithHttpInfo(graphId, schemaMapping);
        return localVarResp.getData();
    }

    /**
     *
     * Create a dataloading job
     * @param graphId The name of graph to do bulk loading. (required)
     * @param schemaMapping  (required)
     * @return ApiResponse&lt;JobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<JobResponse> createDataloadingJobWithHttpInfo(
            String graphId, SchemaMapping schemaMapping) throws ApiException {
        okhttp3.Call localVarCall =
                createDataloadingJobValidateBeforeCall(graphId, schemaMapping, null);
        Type localVarReturnType = new TypeToken<JobResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a dataloading job
     * @param graphId The name of graph to do bulk loading. (required)
     * @param schemaMapping  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createDataloadingJobAsync(
            String graphId, SchemaMapping schemaMapping, final ApiCallback<JobResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createDataloadingJobValidateBeforeCall(graphId, schemaMapping, _callback);
        Type localVarReturnType = new TypeToken<JobResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGraph
     * @param createGraphRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createGraphCall(
            CreateGraphRequest createGraphRequest, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGraphRequest;

        // create path and map variables
        String localVarPath = "/v1/graph";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGraphValidateBeforeCall(
            CreateGraphRequest createGraphRequest, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'createGraphRequest' is set
        if (createGraphRequest == null) {
            throw new ApiException(
                    "Missing the required parameter 'createGraphRequest' when calling"
                            + " createGraph(Async)");
        }

        return createGraphCall(createGraphRequest, _callback);
    }

    /**
     *
     * Create a new graph
     * @param createGraphRequest  (required)
     * @return CreateGraphResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     * </table>
     */
    public CreateGraphResponse createGraph(CreateGraphRequest createGraphRequest)
            throws ApiException {
        ApiResponse<CreateGraphResponse> localVarResp = createGraphWithHttpInfo(createGraphRequest);
        return localVarResp.getData();
    }

    /**
     *
     * Create a new graph
     * @param createGraphRequest  (required)
     * @return ApiResponse&lt;CreateGraphResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateGraphResponse> createGraphWithHttpInfo(
            CreateGraphRequest createGraphRequest) throws ApiException {
        okhttp3.Call localVarCall = createGraphValidateBeforeCall(createGraphRequest, null);
        Type localVarReturnType = new TypeToken<CreateGraphResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new graph
     * @param createGraphRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createGraphAsync(
            CreateGraphRequest createGraphRequest, final ApiCallback<CreateGraphResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = createGraphValidateBeforeCall(createGraphRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateGraphResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGraph
     * @param graphId The name of graph to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteGraphCall(String graphId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGraphValidateBeforeCall(String graphId, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling deleteGraph(Async)");
        }

        return deleteGraphCall(graphId, _callback);
    }

    /**
     *
     * Delete a graph by name
     * @param graphId The name of graph to delete (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     * </table>
     */
    public String deleteGraph(String graphId) throws ApiException {
        ApiResponse<String> localVarResp = deleteGraphWithHttpInfo(graphId);
        return localVarResp.getData();
    }

    /**
     *
     * Delete a graph by name
     * @param graphId The name of graph to delete (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<String> deleteGraphWithHttpInfo(String graphId) throws ApiException {
        okhttp3.Call localVarCall = deleteGraphValidateBeforeCall(graphId, null);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a graph by name
     * @param graphId The name of graph to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteGraphAsync(String graphId, final ApiCallback<String> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = deleteGraphValidateBeforeCall(graphId, _callback);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGraph
     * @param graphId The name of graph to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getGraphCall(String graphId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGraphValidateBeforeCall(String graphId, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling getGraph(Async)");
        }

        return getGraphCall(graphId, _callback);
    }

    /**
     *
     * Get a graph by name
     * @param graphId The name of graph to get (required)
     * @return GetGraphResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     * </table>
     */
    public GetGraphResponse getGraph(String graphId) throws ApiException {
        ApiResponse<GetGraphResponse> localVarResp = getGraphWithHttpInfo(graphId);
        return localVarResp.getData();
    }

    /**
     *
     * Get a graph by name
     * @param graphId The name of graph to get (required)
     * @return ApiResponse&lt;GetGraphResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetGraphResponse> getGraphWithHttpInfo(String graphId) throws ApiException {
        okhttp3.Call localVarCall = getGraphValidateBeforeCall(graphId, null);
        Type localVarReturnType = new TypeToken<GetGraphResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a graph by name
     * @param graphId The name of graph to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getGraphAsync(String graphId, final ApiCallback<GetGraphResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getGraphValidateBeforeCall(graphId, _callback);
        Type localVarReturnType = new TypeToken<GetGraphResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSchema
     * @param graphId The name of graph to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSchemaCall(String graphId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}/schema"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemaValidateBeforeCall(String graphId, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling getSchema(Async)");
        }

        return getSchemaCall(graphId, _callback);
    }

    /**
     *
     * Get schema by graph name
     * @param graphId The name of graph to delete (required)
     * @return GetGraphSchemaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * </table>
     */
    public GetGraphSchemaResponse getSchema(String graphId) throws ApiException {
        ApiResponse<GetGraphSchemaResponse> localVarResp = getSchemaWithHttpInfo(graphId);
        return localVarResp.getData();
    }

    /**
     *
     * Get schema by graph name
     * @param graphId The name of graph to delete (required)
     * @return ApiResponse&lt;GetGraphSchemaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetGraphSchemaResponse> getSchemaWithHttpInfo(String graphId)
            throws ApiException {
        okhttp3.Call localVarCall = getSchemaValidateBeforeCall(graphId, null);
        Type localVarReturnType = new TypeToken<GetGraphSchemaResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get schema by graph name
     * @param graphId The name of graph to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSchemaAsync(
            String graphId, final ApiCallback<GetGraphSchemaResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getSchemaValidateBeforeCall(graphId, _callback);
        Type localVarReturnType = new TypeToken<GetGraphSchemaResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listGraphs
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listGraphsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/graph";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGraphsValidateBeforeCall(final ApiCallback _callback)
            throws ApiException {
        return listGraphsCall(_callback);
    }

    /**
     *
     * List all graphs
     * @return List&lt;GetGraphResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * </table>
     */
    public List<GetGraphResponse> listGraphs() throws ApiException {
        ApiResponse<List<GetGraphResponse>> localVarResp = listGraphsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     *
     * List all graphs
     * @return ApiResponse&lt;List&lt;GetGraphResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<GetGraphResponse>> listGraphsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listGraphsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<GetGraphResponse>>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all graphs
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listGraphsAsync(final ApiCallback<List<GetGraphResponse>> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = listGraphsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<GetGraphResponse>>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
