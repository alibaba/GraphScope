/*
 * GraphScope Interactive API v0.0.3
 * This is the definition of GraphScope Interactive API, including   - AdminService API   - Vertex/Edge API   - QueryService   AdminService API (with tag AdminService) defines the API for GraphManagement, ProcedureManagement and Service Management.  Vertex/Edge API (with tag GraphService) defines the API for Vertex/Edge management, including creation/updating/delete/retrive.  QueryService API (with tag QueryService) defines the API for procedure_call, Ahodc query.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: graphscope@alibaba-inc.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.alibaba.graphscope.interactive;

import com.alibaba.graphscope.ApiCallback;
import com.alibaba.graphscope.ApiClient;
import com.alibaba.graphscope.ApiException;
import com.alibaba.graphscope.ApiResponse;
import com.alibaba.graphscope.Configuration;
import com.alibaba.graphscope.Pair;
import com.google.gson.reflect.TypeToken;

import org.openapitools.client.model.CreateProcedureRequest;
import org.openapitools.client.model.CreateProcedureResponse;
import org.openapitools.client.model.GetProcedureResponse;
import org.openapitools.client.model.UpdateProcedureRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminServiceProcedureManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminServiceProcedureManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminServiceProcedureManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProcedure
     * @param graphId  (required)
     * @param createProcedureRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createProcedureCall(
            String graphId,
            CreateProcedureRequest createProcedureRequest,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProcedureRequest;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}/procedure"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProcedureValidateBeforeCall(
            String graphId,
            CreateProcedureRequest createProcedureRequest,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling createProcedure(Async)");
        }

        // verify the required parameter 'createProcedureRequest' is set
        if (createProcedureRequest == null) {
            throw new ApiException(
                    "Missing the required parameter 'createProcedureRequest' when calling"
                            + " createProcedure(Async)");
        }

        return createProcedureCall(graphId, createProcedureRequest, _callback);
    }

    /**
     *
     * Create a new procedure on a graph
     * @param graphId  (required)
     * @param createProcedureRequest  (required)
     * @return CreateProcedureResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     * </table>
     */
    public CreateProcedureResponse createProcedure(
            String graphId, CreateProcedureRequest createProcedureRequest) throws ApiException {
        ApiResponse<CreateProcedureResponse> localVarResp =
                createProcedureWithHttpInfo(graphId, createProcedureRequest);
        return localVarResp.getData();
    }

    /**
     *
     * Create a new procedure on a graph
     * @param graphId  (required)
     * @param createProcedureRequest  (required)
     * @return ApiResponse&lt;CreateProcedureResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateProcedureResponse> createProcedureWithHttpInfo(
            String graphId, CreateProcedureRequest createProcedureRequest) throws ApiException {
        okhttp3.Call localVarCall =
                createProcedureValidateBeforeCall(graphId, createProcedureRequest, null);
        Type localVarReturnType = new TypeToken<CreateProcedureResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new procedure on a graph
     * @param graphId  (required)
     * @param createProcedureRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createProcedureAsync(
            String graphId,
            CreateProcedureRequest createProcedureRequest,
            final ApiCallback<CreateProcedureResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createProcedureValidateBeforeCall(graphId, createProcedureRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateProcedureResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProcedure
     * @param graphId  (required)
     * @param procedureId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteProcedureCall(
            String graphId, String procedureId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}/procedure/{procedure_id}"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()))
                        .replace(
                                "{" + "procedure_id" + "}",
                                localVarApiClient.escapeString(procedureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProcedureValidateBeforeCall(
            String graphId, String procedureId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling deleteProcedure(Async)");
        }

        // verify the required parameter 'procedureId' is set
        if (procedureId == null) {
            throw new ApiException(
                    "Missing the required parameter 'procedureId' when calling"
                            + " deleteProcedure(Async)");
        }

        return deleteProcedureCall(graphId, procedureId, _callback);
    }

    /**
     *
     * Delete a procedure on a graph by name
     * @param graphId  (required)
     * @param procedureId  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public String deleteProcedure(String graphId, String procedureId) throws ApiException {
        ApiResponse<String> localVarResp = deleteProcedureWithHttpInfo(graphId, procedureId);
        return localVarResp.getData();
    }

    /**
     *
     * Delete a procedure on a graph by name
     * @param graphId  (required)
     * @param procedureId  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<String> deleteProcedureWithHttpInfo(String graphId, String procedureId)
            throws ApiException {
        okhttp3.Call localVarCall = deleteProcedureValidateBeforeCall(graphId, procedureId, null);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a procedure on a graph by name
     * @param graphId  (required)
     * @param procedureId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteProcedureAsync(
            String graphId, String procedureId, final ApiCallback<String> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                deleteProcedureValidateBeforeCall(graphId, procedureId, _callback);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProcedure
     * @param graphId  (required)
     * @param procedureId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getProcedureCall(
            String graphId, String procedureId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}/procedure/{procedure_id}"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()))
                        .replace(
                                "{" + "procedure_id" + "}",
                                localVarApiClient.escapeString(procedureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProcedureValidateBeforeCall(
            String graphId, String procedureId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling getProcedure(Async)");
        }

        // verify the required parameter 'procedureId' is set
        if (procedureId == null) {
            throw new ApiException(
                    "Missing the required parameter 'procedureId' when calling"
                            + " getProcedure(Async)");
        }

        return getProcedureCall(graphId, procedureId, _callback);
    }

    /**
     *
     * Get a procedure by name
     * @param graphId  (required)
     * @param procedureId  (required)
     * @return GetProcedureResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     * </table>
     */
    public GetProcedureResponse getProcedure(String graphId, String procedureId)
            throws ApiException {
        ApiResponse<GetProcedureResponse> localVarResp =
                getProcedureWithHttpInfo(graphId, procedureId);
        return localVarResp.getData();
    }

    /**
     *
     * Get a procedure by name
     * @param graphId  (required)
     * @param procedureId  (required)
     * @return ApiResponse&lt;GetProcedureResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetProcedureResponse> getProcedureWithHttpInfo(
            String graphId, String procedureId) throws ApiException {
        okhttp3.Call localVarCall = getProcedureValidateBeforeCall(graphId, procedureId, null);
        Type localVarReturnType = new TypeToken<GetProcedureResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a procedure by name
     * @param graphId  (required)
     * @param procedureId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getProcedureAsync(
            String graphId, String procedureId, final ApiCallback<GetProcedureResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getProcedureValidateBeforeCall(graphId, procedureId, _callback);
        Type localVarReturnType = new TypeToken<GetProcedureResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProcedures
     * @param graphId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listProceduresCall(String graphId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}/procedure"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProceduresValidateBeforeCall(
            String graphId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling listProcedures(Async)");
        }

        return listProceduresCall(graphId, _callback);
    }

    /**
     *
     * List all procedures
     * @param graphId  (required)
     * @return List&lt;GetProcedureResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     * </table>
     */
    public List<GetProcedureResponse> listProcedures(String graphId) throws ApiException {
        ApiResponse<List<GetProcedureResponse>> localVarResp = listProceduresWithHttpInfo(graphId);
        return localVarResp.getData();
    }

    /**
     *
     * List all procedures
     * @param graphId  (required)
     * @return ApiResponse&lt;List&lt;GetProcedureResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<GetProcedureResponse>> listProceduresWithHttpInfo(String graphId)
            throws ApiException {
        okhttp3.Call localVarCall = listProceduresValidateBeforeCall(graphId, null);
        Type localVarReturnType = new TypeToken<List<GetProcedureResponse>>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all procedures
     * @param graphId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listProceduresAsync(
            String graphId, final ApiCallback<List<GetProcedureResponse>> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = listProceduresValidateBeforeCall(graphId, _callback);
        Type localVarReturnType = new TypeToken<List<GetProcedureResponse>>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProcedure
     * @param graphId  (required)
     * @param procedureId  (required)
     * @param updateProcedureRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateProcedureCall(
            String graphId,
            String procedureId,
            UpdateProcedureRequest updateProcedureRequest,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProcedureRequest;

        // create path and map variables
        String localVarPath =
                "/v1/graph/{graph_id}/procedure/{procedure_id}"
                        .replace(
                                "{" + "graph_id" + "}",
                                localVarApiClient.escapeString(graphId.toString()))
                        .replace(
                                "{" + "procedure_id" + "}",
                                localVarApiClient.escapeString(procedureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProcedureValidateBeforeCall(
            String graphId,
            String procedureId,
            UpdateProcedureRequest updateProcedureRequest,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'graphId' is set
        if (graphId == null) {
            throw new ApiException(
                    "Missing the required parameter 'graphId' when calling updateProcedure(Async)");
        }

        // verify the required parameter 'procedureId' is set
        if (procedureId == null) {
            throw new ApiException(
                    "Missing the required parameter 'procedureId' when calling"
                            + " updateProcedure(Async)");
        }

        return updateProcedureCall(graphId, procedureId, updateProcedureRequest, _callback);
    }

    /**
     *
     * Update procedure on a graph by name
     * @param graphId  (required)
     * @param procedureId  (required)
     * @param updateProcedureRequest  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     * </table>
     */
    public String updateProcedure(
            String graphId, String procedureId, UpdateProcedureRequest updateProcedureRequest)
            throws ApiException {
        ApiResponse<String> localVarResp =
                updateProcedureWithHttpInfo(graphId, procedureId, updateProcedureRequest);
        return localVarResp.getData();
    }

    /**
     *
     * Update procedure on a graph by name
     * @param graphId  (required)
     * @param procedureId  (required)
     * @param updateProcedureRequest  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<String> updateProcedureWithHttpInfo(
            String graphId, String procedureId, UpdateProcedureRequest updateProcedureRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                updateProcedureValidateBeforeCall(
                        graphId, procedureId, updateProcedureRequest, null);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update procedure on a graph by name
     * @param graphId  (required)
     * @param procedureId  (required)
     * @param updateProcedureRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateProcedureAsync(
            String graphId,
            String procedureId,
            UpdateProcedureRequest updateProcedureRequest,
            final ApiCallback<String> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateProcedureValidateBeforeCall(
                        graphId, procedureId, updateProcedureRequest, _callback);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
