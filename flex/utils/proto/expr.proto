/**
 * Copyright 2020 Alibaba Group Holding Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package common;
option java_package = "com.alibaba.graphscope.gaia.proto";
option java_outer_classname = "OuterExpression";

import "common.proto";
import "type.proto";

message IdKey {}

message LabelKey {}

message LengthKey {}

message AllKey {}

// Use `NameOrId` as key item, which is the same as `Option<NameOrId>`
message NameOrIdKey {
  common.NameOrId key = 1;
}

message Property {
  oneof item {
    // Get id from the entity
    IdKey id = 2;
    // Get label from the entity
    LabelKey label = 3;
    // Get length from the entity
    LengthKey len = 4;
    // Get all properties
    AllKey all = 5;
    // Get property of key from the entity
    common.NameOrId key = 6;
  }
}

enum Logical {
  // A binary equality operator
  EQ  = 0;
  // A binary inequality operator
  NE  = 1;
  // A binary less-than operator
  LT  = 2;
  // A binary less-than-equal operator
  LE  = 3;
  // A binary greater-than operator
  GT  = 4;
  // A binary greater-than-equal operator
  GE  = 5;
  // A binary containment check operator, e.g 1 WITHIN [1, 2, 3, 4]
  WITHIN = 6;
  // A binary not-containment check operator, e.g 5 WITHOUT [1, 2, 3, 4]
  WITHOUT = 7;
  // A binary operator to verify whether a string is a prefix of another string
  STARTSWITH = 8;
  // A binary operator to verify whether a string is a suffix of another string
  ENDSWITH = 9;
  // A binary logical and operator.
  AND = 10;
  // A binary logical or operator.
  OR = 11;
  // A unary logical not operator.
  NOT = 12;
  // A unary logical isnull operator
  ISNULL = 13;
  // A binary operator to verify whether a string matches a regular expression
  REGEX = 14;
}

enum Arithmetic {
  // A binary addition operator
  ADD = 0;
  // A binary subtraction operator
  SUB = 1;
  // A binary multiplication operator
  MUL = 2;
  // A binary division operator
  DIV = 3;
  // A binary modulo operator
  MOD = 4;
  // A binary exponentiation operator
  EXP = 5;
  // A binary bitwise and operator
  BITAND = 6;
  // A binary bitwise or operator
  BITOR = 7;
  // A binary bitwise or operator
  BITXOR = 8;
  // A binary bitwise left-shift operator
  BITLSHIFT = 9;
  // A binary bitwise right-shift operator
  BITRSHIFT = 10;
}

message Variable {
  // The alias of a graph relation, which is required for a variable
  common.NameOrId tag = 1;
  // The property of a nested attribute (vertex/edge) of a graph relation, r.a.key, optional
  Property property = 2;
  // The data of type of Property
  common.IrDataType node_type = 3;
}

// Path function to rechieve properties of each vertex or edge (or both) in a path.
// e.g., project `a.name`, `a.[name, age]`, or `a.{name, age}`, where `a` refers to a path
message PathFunction {
  // rechieve properties from a path to a list
  message PathElementKeys {
    repeated Property keys = 1;
  }
  // rechieve properties from a path to a map
  message PathElementKeyValues {
    message PathElementKeyValue {
      common.Value key = 1;
      Property val = 2;
    }
    repeated PathElementKeyValue key_vals = 1;
  }
  // the option of PathFunction, e.g., rechieve the properties of each vertex, edge, or both, in a path
  enum FuncOpt {
    VERTEX = 0;
    EDGE = 1;
    VERTEX_EDGE = 2;
  }
  // The alias of a graph path
  common.NameOrId tag = 1;
  oneof path_key {
    // e.g., project name, and return the property of each entry in the path, 
    // and return [marko, josh]
    Property property = 2;
    // e.g., project [name, age] to a list of properties of each entry in the path, 
    // and [[marko, 29], [josh, 27]]
    PathElementKeys vars = 3;
    // e.g., project {name, age} to a map of properties of each entry in the path,
    // and return [{name: marko, age: 29}, {name: josh, age: 27}]
    PathElementKeyValues map = 4;
  }
  FuncOpt opt = 5;
  common.IrDataType node_type = 6;
}

message VariableKeys {
  repeated Variable keys = 1;
}

message VariableKeyValue {
  common.Value key = 1;
  oneof value {
    Variable val = 2;
    PathFunction path_func = 3;
    VariableKeyValues nested = 4;
  }
}

// A nested kv projection, which is used to project a nested structure of key-value pairs
// e.g., for a single kv projection,
// to project [VariableKeyValue('name', a.name), VariableKeyValue('age', a.age)], where `a` refers to a vertex,
// it outputs a map of {'name': 'marko', 'age': 27};
// or to project [VariableKeyValue('tagP', PathFunction{tag: a, path_key: PathElementKeys{keys: [name, age]}})], where `a` refers to a path (with two vertices in it),
// it outputs a map of {'tagP': [{'name': 'marko', 'age': 27}, {'name': 'josh', 'age', 29}]}.
// For a more complex nested projection, 
// to project [VariableKeyValue('tagA', nested{[VariableKeyValue('name', a.name), VariableKeyValue('age', a.age)]}), 
//             VariableKeyValue('tagP', nested{[VariableKeyValue('name', p.name), VariableKeyValue('age', p.age)]})],
// where `a` refers to a vertex, and `p` refers to a path (with two vertices in it),
// it outputs a map of {'tagA': {'name': 'marko', 'age': 27}, 'tagP': [{'name': 'marko', 'age': 27}, {'name': 'josh', 'age', 29}]}.
message VariableKeyValues {
  repeated VariableKeyValue key_vals = 1;
}

// dynamic param
message DynamicParam {
  string name = 1;
  int32 index = 2;
  common.IrDataType data_type = 3;
}

message Case {
  // Pair of when <expr> then <expr>
  message WhenThen {
    Expression when_expression = 1;
    Expression then_result_expression = 2;
  }
  // A case operator always follows with a sequence of when_then pairs, e.g.
  // CASE WHEN a.name == 'Marko' THEN 1
  //      WHEN a.name == 'John' THEN 2
  repeated WhenThen when_then_expressions = 1;
  // The trailed else expression:  ELSE 3
  Expression else_result_expression = 2;
}

// extract interval from a given expression which should be of temporal type 
message Extract {
  enum Interval {
    YEAR = 0;
    MONTH = 1;
    DAY = 2;
    HOUR = 3;
    MINUTE = 4;
    SECOND = 5;
    MILLISECOND = 6;
  }
  Interval interval = 1;
}

// denote time interval, i.e. 3 DAYS, 4 HOURS, 5 MINUTES
message TimeInterval {
    Extract.Interval interval = 1;

    oneof value {
        common.Value const = 2;
        DynamicParam param = 3;
    }
}

message DateTimeMinus {
    Extract.Interval interval = 1;
}

// e.g., supposing p1 refers to path[v1->v2->v3], p2 refers to path[v5->v4->v3],
// then PathCONCAT((p1, END), (p2, END))) outputs [v1->v2->v3->v4->v5]
message PathConcat {
   // Enum that defines the endpoint of a path where the concatenation will occur.
  enum Endpoint {
    START = 0;
    END = 1;
  }
  message ConcatPathInfo {
    Variable path_tag = 1;
    Endpoint endpoint = 2;
  }
  ConcatPathInfo left = 1;
  ConcatPathInfo right = 2;
}

message UserDefinedFunction {
  string name = 1;
  repeated Expression parameters = 2;
}

// An operator of expression is one of Logical, Arithmetic, Const and Variable.
message ExprOpr {
  enum Brace {
    LEFT_BRACE = 0;  // (
    RIGHT_BRACE = 1;  // )
  }
  oneof item {
    Logical logical = 2;
    Arithmetic arith = 3;
    common.Value const = 4;
    Variable var = 5;
    Brace brace = 6;
    VariableKeys vars = 7;
    VariableKeys var_map = 8;
    // dynamic param in expression
    DynamicParam param = 9;
    Case case = 10;
    Extract extract = 11;
    // TODO: the new definition for var_map, that allows user-given key name, and nested maps. Will remove the old var_map finally.
    VariableKeyValues map = 13;
    TimeInterval time_interval = 14;
    DateTimeMinus date_time_minus = 15;
    PathConcat path_concat = 16;
    PathFunction path_func = 17;
    UserDefinedFunction udf_func = 18;
  }
  // The data of type of ExprOpr
  common.IrDataType node_type = 12;
}

// An inner representation of an expression
message Expression {
  repeated ExprOpr operators = 1;
}

