syntax = "proto3";

package grin;

enum ListRetrieval {
    LR_NA = 0;
    LR_ARRAY_LIKE = 1;
    LR_ITERATOR = 2;
}

message TopologyFeature {
    bool grin_assume_has_directed_graph = 1;
    bool grin_assume_has_undirected_graph = 2;
    bool grin_assume_has_multi_edge_graph = 3;
    bool grin_with_vertex_data = 4;
    bool grin_with_edge_data = 5;
    repeated ListRetrieval vertex_list_retrievals = 6;
    repeated ListRetrieval edge_list_retrievals = 7;
    repeated ListRetrieval adjacent_list_retrievals = 8;
}

enum GraphPartitionStrategy {
    GPS_NA = 0;
    GPS_ALL_REPLICATE = 1;
    GPS_EDGE_CUT = 2;
    GPS_VERTEX_CUT = 3;
    GPS_HYBRID_CUT = 4;
}

enum PropertyDataPartitionStrategy {
    PDPS_NA = 0;
    PDPS_MASTER_ONLY = 1;
    PDPS_REPLICATE_MASTER_MIRROR = 2;
    PDPS_SPLIT_MASTER_MIRROR = 3;
}

message MirrorPartitionListFeature {
    bool grin_trait_master_vertex_mirror_partition_list = 1;
    bool grin_trait_mirror_vertex_mirror_partition_list = 2;
    bool grin_trait_master_edge_mirror_partition_list = 3;
    bool grin_trait_mirror_edge_mirror_partition_list = 4;
}


message PartitionFeature {
    GraphPartitionStrategy graph_partition_strategy = 1;
    
    bool grin_trait_natural_id_for_partition = 2;
    bool grin_enable_vertex_ref = 3;
    bool grin_enable_edge_ref = 4;
    
    PropertyDataPartitionStrategy vertex_data = 5;
    PropertyDataPartitionStrategy edge_data = 6;

    MirrorPartitionListFeature mirror_partition_list_feature = 7;

    bool grin_trait_select_master_for_vertex_list = 8;
    bool grin_trait_select_partition_for_vertex_list = 9;
    bool grin_trait_select_master_for_edge_list = 10;
    bool grin_trait_select_partition_for_edge_list = 11;
    bool grin_trait_select_master_neighbor_for_adjacent_list = 12;
    bool grin_trait_select_neighbor_partition_for_adjacent_list = 13;

    bool grin_trait_fast_vertex_ref = 14;
}

message VertexPropertyFeature {
    bool grin_with_vertex_property = 1;
    bool grin_with_vertex_property_name = 2;
    bool grin_with_vertex_type_name = 3;

    bool grin_enable_vertex_primary_keys = 4;

    bool grin_trait_natural_id_for_vertex_type = 5;
    bool grin_trait_natural_id_for_vertex_property = 6;
}

message EdgePropertyFeature {
    bool grin_with_edge_property = 1;
    bool grin_with_edge_property_name = 2;
    bool grin_with_edge_type_name = 3;

    bool grin_enable_edge_primary_keys = 4;

    bool grin_trait_natural_id_for_edge_type = 5;
    bool grin_trait_natural_id_for_edge_property = 6;
}

message PropertyFeature {
    bool grin_enable_row = 1;
    VertexPropertyFeature vertex_property_feature = 2;
    EdgePropertyFeature edge_property_feature = 3;

    PropertyDataPartitionStrategy vertex_property = 4;
    PropertyDataPartitionStrategy edge_property = 5;

    bool grin_trait_specific_vev_relation = 6;

    bool grin_trait_const_value_ptr = 7;
}

message IndexFeature {
    bool grin_with_vertex_label = 1;
    bool grin_with_edge_label = 2;

    bool grin_assume_all_vertex_list_sorted = 3;
    
    bool grin_enable_vertex_internal_id_index = 4;

    bool grin_enable_vertex_pk_index = 5;
    bool grin_enable_edge_pk_index = 6;
}

message PredicateFeature {
    
}

message StorageFeature {
    oneof specific_feature {
        TopologyFeature topology_feature = 1;
        PartitionFeature partition_feature = 2;
        PropertyFeature property_feature = 3;
        IndexFeature index_feature = 4;
        PredicateFeature predicate_feature = 5;
    }
}

message Statistics {
    int32 vertex_count = 1;
    int32 edge_count = 2;
    int32 partition_count = 3;
    int32 vertex_type_count = 4;
    int32 edge_type_count = 5;
}

message Graph {
    string uri = 1;
    string grin_version = 2;
    repeated StorageFeature features = 3;
    Statistics statistics = 4;
}
