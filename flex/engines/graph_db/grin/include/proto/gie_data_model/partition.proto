syntax = "proto3";

package gie;
option java_package = "com.alibaba.graphscope.proto.schema";

import "schema.proto";

message GraphTopologyPartitionStrategy {
    enum VertexPartitionStrategy {
        VPS_ALL = 0; // a vertex is replicated in all partitions
        VPS_ONE = 1; // Edge-Cut, a vertex is distributed to one partition
        VPS_FOLLOW_EDGE = 2; // Vertex-Cut, a vertex is distributed to the partitions where its edge resides, i.e. for query 'g.V(id)', we need broadcast to find all edges first and then filter out the vertex
    }

    enum EdgePartitionStrategy {
        EPS_ALL = 0; // an edge is replicated in all partitions
        EPS_ONE = 1; // Vertex-Cut, an edge is distributed to one partition
        EPS_FOLLOW_SRC = 2; // Edge-Cut, an edge is distributed to the partition where its source vertex resides
        EPS_FOLLOW_DST = 3; // Edge-Cut, an edge is distributed to the partition where its dst vertex resides
        EPS_FOLLOW_BOTH = 4; // Edge-Cut, an edge is distributed to the partitions where its src or dst vertices reside
    }

    // Index Strategy to lookup edges by vertex
    enum VertexToEdgeIndexStrategy {
        VTE_NONE = 0; // no indexing, i.e. Vertex-Cut
        VTE_INDEX_SRC = 1; // indexing based on the source vertex
        VTE_INDEX_DST = 2; // indexing based on the dst vertex
        VTE_INDEX_BOTH = 3; // indexing based on both the src and dst vertices
    }

    message AllReplicate {
        // VertexPartitionStrategy = ALL
        // EdgePartitionStrategy = ALL
        VertexToEdgeIndexStrategy index_strategy = 1;
    }

    message VertexCut {
        // partition edges first, then place vertices automatically
    }

    message EdgeCut {
        // partition vertices first using MAP_TO_ONE strategy,
        // then place edges with certain placement strategy

        // VertexPartitionStrategy = ONE
        EdgePartitionStrategy edge_partition_strategy = 1;
        VertexToEdgeIndexStrategy edge_index_strategy = 2;
    }

    message AdvancedEdgeCut {
        message VertexTypePairEdgePartitionStrategy {
            uint32 src_type = 1;
            uint32 dst_type = 2;
            EdgePartitionStrategy edge_partition_strategy = 3;
        }

        message VertexTypePairEdgeIndexStrategy {
            uint32 src_type = 1;
            uint32 dst_type = 2;
            VertexToEdgeIndexStrategy edge_index_strategy = 3;
        }

        message VertexTypePairEdgePartitionStrategyArray {
            repeated VertexTypePairEdgePartitionStrategy vertex_type_pair_edge_partition_strategy = 1;
        }

        message VertexTypePairEdgeIndexStrategyArray {
            repeated VertexTypePairEdgeIndexStrategy vertex_type_pair_edge_index_strategy = 1;
        }

        map<uint32, VertexPartitionStrategy> vertex_type_to_partition_strategy = 1;
        map<uint32, VertexTypePairEdgePartitionStrategyArray> edge_type_to_partition_strategy = 2;
        map<uint32, VertexTypePairEdgeIndexStrategyArray> edge_type_to_index_strategy = 3;
    }

    oneof item {
        AllReplicate replicate = 1;
        EdgeCut edge_cut = 2;
        VertexCut vertex_cut = 3;
        AdvancedEdgeCut advanced_edge_cut = 4;
    }
}

message GraphPropertyPlacementStrategy {
    // This strategy assumes that properties are always distributed along with the topology of the vertices/edges. 
    // Other strategies, i.e., properties are not distributed along with the topology, are not currently being considered.
    enum PropertyPlacementStrategy {
        PPS_UNDEFINED = 0;
        // Properties exist only in one of partitions (i.e., the master node in GRIN) where the vertex/edge topology resides.
        // i.e., In EdgeCut, the vertex properties exist only once in the partition where the vertex topology resides, we consider this case as 'PPS_ON_MASTER'.
        PPS_ON_MASTER = 1;
        // Properties exist in each partition where the vertex/edge topology resides.
        // i.e., In EdgeCut, the edge properties exist in each partition where the edge topology resides, we consider this case as 'PPS_ON_MASTER_N_MIRROR'.
        PPS_ON_MASTER_N_MIRROR = 2;
    }

    message AllReplicatePropertyPlacement {
        PropertyPlacementStrategy all_replicate_vertex_property_placement_strategy = 1;
        PropertyPlacementStrategy all_replicate_edge_property_placement_strategy = 2;
    }

    // Combine the EdgeCut and AdvancedEdgeCut partition strategies.
    message EdgeCutPropertyPlacement {
        PropertyPlacementStrategy all_replicate_vertex_property_placement_strategy = 1;
        PropertyPlacementStrategy edge_cut_vertex_property_placement_strategy = 2;
        PropertyPlacementStrategy edge_cut_edge_property_placement_strategy = 3;
    }
    
    message VertexCutPropertyPlacement {
        // property placement in VertexCut is not considered currently.
    }

    oneof item {
        AllReplicatePropertyPlacement all_replicate_property_placement = 1;
        EdgeCutPropertyPlacement edge_cut_property_placement = 2;
        VertexCutPropertyPlacement vertex_cut_property_placement = 3;
    }
}

message GraphPartitionStrategy {
    GraphTopologyPartitionStrategy topology_partition = 1;
    GraphPropertyPlacementStrategy property_placement = 2;
}
