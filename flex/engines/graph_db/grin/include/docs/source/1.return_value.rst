Return Values
--------------
Handle
^^^^^^^

In most cases, the return value of a GRIN API call is a GRIN handle.
A GRIN handle represents a GRIN object, such as a vertex or edge, and can be 
used as a parameter for another GRIN API call. 
For example, in the previous section, we obtained a GRIN_GRAPH handle g, 
which we can use to get a vertex list of the graph:

::

    #ifdef GRIN_WITH_VERTEX_PROPERTY
    GRIN_VERTEX_TYPE vt = grin_get_vertex_type_by_name(g, "person");
    GRIN_VERTEX_LIST vlist = grin_get_vertex_list_by_type(g, vt);
    #else
    GRIN_VERTEX_LIST vlist = grin_get_vertex_list(g);
    #endif

    #ifdef GRIN_ENABLE_VERTEX_LIST_ARRAY
    size_t vlist_size = grin_get_vertex_list_size(g, vlist);

    for (unsigned int i = 0; i < vlist_size; ++i){
        GRIN_VERTEX v = grin_get_vertex_from_list(g, vlist, i);
        // use v 
        grin_destroy_vertex(g, v);
    } 
    #endif

    #ifdef GRIN_ENABLE_VERTEX_LIST_ITERATOR
    GRIN_VERTEX_LIST_ITERATOR vlist_iter = grin_get_vertex_list_begin(g, vlist);

    while (grin_is_vertex_list_end(g, vlist_iter)) {
        GRIN_VERTEX v = grin_get_vertex_from_iter(g, vlist_iter);
        // use v 
        grin_destroy_vertex(g, v);
        grin_get_next_vertex_list_iter(g, vlist_iter);
    } 
    
    grin_destroy_vertex_list_iter(g, vlist_iter);
    #endif

    grin_destroy_vertex_list(g, vlist);

In the first step, we obtain a vertex list handle from a graph handle.
Note that when vertex property is supported (i.e., GRIN_WITH_VERTEX_PROPERTY is defined),
GRIN only provides the API to get the vertex list of a single type (e.g., person).
This is based on the low-level API design principle of GRIN, which means
GRIN APIs are a set of low-level abstractions for graph-retrieval actions.
Please refer to the low-level API subsection in the topology API section for more details.
However, GRIN does provide high-level APIs in its extensions.
Please refer to the extension section for more details.

In the next step, the vertex list can be accessed in two ways: array and iterator.
This is also controlled by the macros enabled by the storage.
Some storage may only support one type of access, while some may support both.

In the final step, we have to destroy every handle we obtain from GRIN to avoid memory leaks.

Others
^^^^^^
Exceptionally, there are three types of values returned by GRIN API calls other than handles:

- GRIN enumerates: This includes enumerates defined in predefine.h, namely GRIN_DIRECTION, GRIN_DATATYPE, and GRIN_ERROR_CODE.
- Common values: This includes common values such as ``size_t`` for list size, ``bool`` for condition check, ``unsigned int`` for ID, and ``const char*`` for name.
- Property values: This includes property values such as ``int32``, ``int64``, ``float``, ``double``, and ``const char*``. The types are defined in the ``GRIN_DATATYPE`` enumerate.
- Serialized values: This includes serialized ``const char*`` from vertex ref or edge ref.

Users do NOT have to destroy these return values since they are on the ``"stack"``,
except for the ``const char*`` in property values and serialized values.
In this case, users have to destroy the string value by using ``grin_destroy_string_value``
and ``grin_destroy_serialized_vertex(edge)_ref``, respectively.
Note that if the ``const char*`` is returned by a GRIN API call for a name,
such as a vertex type name or edge property name, users do NOT have to destroy
it since they are common values.

Validation
^^^^^^^^^^^
GRIN provides invalid values for handles to let users check whether a handle 
is valid or not. Normally, the invalid value of a GRIN handle ``GRIN_A`` is 
defined as ``GRIN_NULL_A``. GRIN also provides invalid values for common values,
namely ``GRIN_NULL_SIZE`` and ``GRIN_NULL_NAME``. GRIN does NOT provide invalid
values for enumerates because each enumerate should cover all possible values.
GRIN also does NOT define invalid values for property values because there is
no specific value that can be defined as invalid for types like ``int32`` or ``double``.
This case is handled by GRIN error codes, as explained in the next section.

Error Code
^^^^^^^^^^^
GRIN defines a set of error codes in the ``GRIN_ERROR_CODE`` enumerate.
When a GRIN API call encounters an error but cannot return invalid values
(e.g., the property value case above), it can set the thread_local error code to
indicate the error. Users can get the error code using the ``grin_get_last_error_code``
API and handle the error case accordingly.

::

    int value = grin_get_int32_from_row(g, row, 0);
    if (grin_get_last_error_code() != GRIN_ERROR_CODE::GRIN_NO_ERROR) {
        // handle error
    }

Summary
^^^^^^^
To summerize, we list a table for return values of GRIN API calls and related operations:

=================== =========================== =================
Return Value Types  Check Invalid               Destroy Required
=================== =========================== =================
handle              != GRIN_NULL_A              grin_destroy_A
GRIN enumerates     N/A                         N/A
Common values       != GRIN_NULL_X              N/A
Property values     grin_get_last_error_code    grin_destroy_string_value only
Serialized values   N/A                         grin_destroy_serialized_A_ref only
=================== =========================== =================
