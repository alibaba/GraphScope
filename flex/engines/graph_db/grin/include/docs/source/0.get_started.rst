Getting Started
----------------

Get Graph from Storage
^^^^^^^^^^^^^^^^^^^^^^
To use GRIN, the first API we need is to get a graph handle for the graph in storage.
Here we introduce the ``grin_get_graph_from_storage`` API.

::
    
    GRIN_GRAPH grin_get_graph_from_storage(const char* uri);

This API takes a URI as its parameter, which is a string that identifies the graph in storage.

Different storage systems may define different required parameters in the URI:
    - gart://{etcd_endpoint}?prefix={etcd_prefix}&version={version}
    - graphar://{yaml_path}?partition_num={partition_num}&strategy={strategy}
    - v6d://{object_id}?ipc_socket={ipc_socket} where ipc_socket is optional.

The return value of this API is a GRIN graph handle.

Partitioned Graph
^^^^^^^^^^^^^^^^^
In GRIN, a partitioned graph is a graph that is split into multiple fragments,
which can be stored separately.

To work with a partitioned graph, we first need to get a handle to the partitioned graph.
We can do this using the `grin_get_partitioned_graph_from_storage` function.

::
        
    GRIN_PARTITIONED_GRAPH grin_get_partitioned_graph_from_storage(const char* uri);

The parameters of this API are the same as the ``grin_get_graph_from_storage`` API.
The return value of this API is a GRIN partitioned graph handle.

Once we have a handle to the partitioned graph, we can access the individual 
graph fragments using the `grin_get_local_partition_list` and `grin_get_graph_by_partition` functions.

::

    GRIN_PARTITIONED_GRAPH pg = grin_get_partitioned_graph_from_storage(uri);
    GRIN_PARTITION_LIST local_partitions = grin_get_local_partition_list(pg);
    size_t num_partitions = grin_get_partition_list_size(local_partitions);

    if (num_partitions == 1) { // suppose we have only one local partition
      GRIN_PARTITION partition = grin_get_partition_from_list(pg, local_partitions, 0);
      GRIN_GRAPH g = grin_get_local_graph_by_partition(pg, partition);
    }

We can then perform operations on each fragment of the partitioned graph,
just as we would with a regular graph.

Note that partitioned graphs can be useful for working with large graphs 
that are too large to be stored in memory all at once. By splitting the graph 
into smaller fragments, we can work with the graph more efficiently.

In the above code, all the types with ``GRIN_`` prefix are GRIN handle types.
A GRIN handle is an opaque value that identifies an object in GRIN.
It is important to note that the specific type of the handle,
whether it be an integer, a pointer, or something else, is not specified by 
GRIN APIs and may vary between different implementations of GRIN from different storage systems.
Therefore, it is not safe to make assumptions about the type of a handle and 
its properties based on its value.
Instead, you should use the GRIN APIs to access the object associated with the handle.
