Index APIs
--------------

Sorted List and Order
^^^^^^^^^^^^^^^^^^^^^^
Some storage sort the vertices in a vertex list by default.
This enables the ability to let the user to find the position of a vertex in the list
in sub-linear time complexity (O(log(n)) for binary search).

To describe this feature, storage can define ``GRIN_ASSUME_ALL_VERTEX_LIST_SORTED`` to show
that all the vertex lists are sorted by default. If ``GRIN_ENABLE_VERTEX_LIST_ARRAY`` is also
defined, the position API is enabled:

::

    size_t grin_get_position_of_vertex_from_sorted_list(GRIN_GRAPH, GRIN_VERTEX_LIST, GRIN_VERTEX);

Internal ID
^^^^^^^^^^^
Internal ID is an integer range indexing for vertices of a certain type. 
The key feature of internal ID is that storage can provide lower and upper 
bounds (left-closed, right-open) for internal IDs of vertices of a certain type. 
This enables the ability to use vertices as an array index in the computing engine.

PK Indexing
^^^^^^^^^^^^^
To get a vertex from its PK values, we will first put all the values into a row 
according to the PK properties of the vertex's type. Then we can use the row 
to get the vertex handle. The following example shows how to get the vertex of 
type "person" with name "marko" and age 29 if the PK properties of "person" are
"name" and "age"

::

    GRIN_VERTEX_TYPE vtype = grin_get_vertex_type_by_name(g, "person");
    GRIN_ROW row = grin_create_row(g);
    if (!grin_insert_string_to_row(g, row, "marko")) {
        printf("Failed to insert string to row\n");
    }
    if (!grin_insert_int32_to_row(g, row, 29)) {
        printf("Failed to insert int32 to row\n");
    }
    GRIN_VERTEX v = grin_get_vertex_by_primary_keys(g, vtype, row);