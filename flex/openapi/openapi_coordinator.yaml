openapi: 3.0.3
info:
  title: GraphScope FLEX HTTP SERVICE API
  description: |-
    This is a specification for GraphScope FLEX HTTP service based on the OpenAPI 3.0 specification. You can find out more details about
    specification at [doc](https://swagger.io/specification/v3/).
    
    Some useful links:
    - [GraphScope Repository](https://github.com/alibaba/GraphScope)
    - [The Source API definition for GraphScope Interactive](https://github.com/GraphScope/portal/tree/main/httpservice)
  contact:
    name: GraphScope
    email: graphscope@alibaba-inc.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.9.1
externalDocs:
  description: Find out More about GraphScope
  url: http://graphscope.io
paths:
  /api/v1/connection:
    post:
      tags:
        - connection
      description: Connect to coordinator service
      operationId: connect
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
        required: true
      responses:
        '200':
          description: Connect coordinator service successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionStatus'
    delete:
      tags:
        - connection
      description: Close the connection with coordinator
      operationId: close
      responses:
        '200':
          description: Close connection successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph:
    post:
      tags:
        - graph
      description: Create a new graph
      operationId: create_graph
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Graph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    get:
      tags:
        - graph
      description: List all graphs
      operationId: list_graphs
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Graph'
              example:
                - name: demo
                  store_type: mutable_csr
                  stored_procedures:
                    directory: plugins
                  schema:
                    vertex_types:
                      - type_id: 0
                        type_name: person
                        properties:
                          - property_id: 0
                            property_name: id
                            property_type:
                              primitive_type: DT_STRING
                          - property_id: 1
                            property_name: name
                            property_type:
                              primitive_type: DT_STRING
                        primary_keys:
                          - id
                      - type_id: 1
                        type_name: software
                        properties:
                          - property_id: 0
                            property_name: id
                            property_type:
                              primitive_type: DT_STRING
                          - property_id: 1
                            property_name: name
                            property_type:
                              primitive_type: DT_STRING
                        primary_keys:
                          - id
                    edge_types:
                      - type_id: 0
                        type_name: knows
                        vertex_type_pair_relations:
                          - source_vertex: person
                            destination_vertex: person
                            relation: MANY_TO_MANY
                            x_csr_params:
                              edge_storage_strategy: ONLY_IN
                        properties:
                          - property_id: 0
                            property_name: weight
                            property_type:
                              primitive_type: DT_STRING
                      - type_id: 1
                        type_name: created
                        vertex_type_pair_relations:
                          - source_vertex: person
                            destination_vertex: software
                            relation: MANY_TO_MANY
                            x_csr_params:
                              edge_storage_strategy: ONLY_IN
                        properties:
                          - property_id: 0
                            property_name: weight
                            property_type:
                              primitive_type: DT_STRING
  /api/v1/graph/{graph_name}:
    delete:
      tags:
        - graph
      description: Delete a graph by name
      operationId: delete_graph
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/schema:
    get:
      tags:
        - graph
      description: Get graph schema by name
      operationId: get_schema
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
              example:
                vertex_types:
                  - type_id: 0
                    type_name: person
                    properties:
                      - property_id: 0
                        property_name: id
                        property_type:
                          primitive_type: DT_STRING
                      - property_id: 1
                        property_name: name
                        property_type:
                          primitive_type: DT_STRING
                    primary_keys:
                      - id
                  - type_id: 1
                    type_name: software
                    properties:
                      - property_id: 0
                        property_name: id
                        property_type:
                          primitive_type: DT_STRING
                      - property_id: 1
                        property_name: name
                        property_type:
                          primitive_type: DT_STRING
                    primary_keys:
                      - id
                edge_types:
                  - type_id: 0
                    type_name: knows
                    vertex_type_pair_relations:
                      - source_vertex: person
                        destination_vertex: person
                        relation: MANY_TO_MANY
                        x_csr_params:
                          edge_storage_strategy: ONLY_IN
                    properties:
                      - property_id: 0
                        property_name: weight
                        property_type:
                           primitive_type: DT_STRING
                  - type_id: 1
                    type_name: created
                    vertex_type_pair_relations:
                      - source_vertex: person
                        destination_vertex: software
                        relation: MANY_TO_MANY
                        x_csr_params:
                          edge_storage_strategy: ONLY_IN
                    properties:
                      - property_id: 0
                        property_name: weight
                        property_type:
                           primitive_type: DT_STRING
  /api/v1/graph/{graph_name}/schema/vertex_type:
    post:
      tags:
        - graph
      description: Create a vertex type
      operationId: create_vertex_type
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VertexType'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/schema/vertex_type/{type_name}:
    delete:
      tags:
        - graph
      description: Delete a vertex type by name
      operationId: delete_vertex_type
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
        - name: type_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/schema/edge_type:
    post:
      tags:
        - graph
      description: Create a edge type
      operationId: create_edge_type
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EdgeType'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/schema/edge_edge/{type_name}:
    delete:
      tags:
        - graph
      description: Delete a edge type by name
      operationId: delete_edge_type
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
        - name: type_name
          in: path
          required: true
          schema:
            type: string
        - name: source_vertex_type
          in: query
          required: true
          schema:
            type: string
        - name: destination_vertex_type
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/datasource:
    post:
      tags:
        - datasource
      description: Import data source in batch
      operationId: import_datasource
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSource'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    get:
      tags:
        - datasource
      description: List data source on graph
      operationId: get_datasource
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSource'
              example:
                vertices_datasource:
                  - data_source: FILE
                    type_name: person
                    location: /home/graphscope/path/to/person.csv
                    property_mapping:
                      "0": id
                      "1": name
                  - data_source: FILE
                    type_name: software
                    location: /home/graphscope/path/to/software.csv
                    property_mapping:
                      "0": id
                      "1": name
                edges_datasource:
                  - data_source: FILE
                    type_name: knows
                    source_vertex: person
                    destination_vertex: person
                    location: /home/graphscope/path/to/person_knows_person.csv
                    source_pk_column_map:
                      "0": id
                    destination_pk_column_map:
                      "1": id
                    property_mapping:
                      "2": weight
                  - data_source: FILE
                    type_name: created
                    source_vertex: person
                    destination_vertex: software
                    location: /home/graphscope/path/to/person_created_software.csv
                    source_pk_column_map:
                      "0": id
                    destination_pk_column_map:
                      "1": id
                    property_mapping:
                      "2": weight
  /api/v1/graph/{graph_name}/datasource/vertex_datasource:
    post:
      tags:
        - datasource
      description: Bind data source on vertex type
      operationId: bind_vertex_datasource
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VertexDataSource'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/datasource/vertex_datasource/{type_name}:
    get:
      tags:
        - datasource
      description: Get vertex data source
      operationId: get_vertex_datasource
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
        - name: type_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VertexDataSource'
              example:
                data_source: FILE
                type_name: person
                location: /home/graphscope/path/to/person.csv
                property_mapping:
                  "0": id
                  "1": name
    delete:
      tags:
        - datasource
      description: Unbind datasource on a vertex type
      operationId: unbind_vertex_datasource
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
        - name: type_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/datasource/edge_datasource:
    post:
      tags:
        - datasource
      description: Bind data source on edge type
      operationId: bind_edge_datasource
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EdgeDataSource'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/datasource/edge_datasource/{type_name}:
    get:
      tags:
        - datasource
      description: Get edge data source
      operationId: get_edge_datasource
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
        - name: type_name
          in: path
          required: true
          schema:
            type: string
        - name: source_vertex_type
          in: query
          required: true
          schema:
            type: string
        - name: destination_vertex_type
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdgeDataSource'
              example:
                data_source: FILE
                type_name: created
                source_vertex: person
                destination_vertex: software
                location: /home/graphscope/path/to/person_created_software.csv
                source_pk_column_map:
                  "0": id
                destination_pk_column_map:
                  "1": id
                property_mapping:
                  "2": weight
    delete:
      tags:
        - datasource
      description: Unbind datasource on an edge type
      operationId: unbind_edge_datasource
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
        - name: type_name
          in: path
          required: true
          schema:
            type: string
        - name: source_vertex_type
          in: query
          required: true
          schema:
            type: string
        - name: destination_vertex_type
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/groot/graph:
    get:
      tags:
        - legacy
      description: list groot graph
      operationId: list_groot_graph
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GrootGraph'
              example:
                - name: demo
                  type: GrootGraph
                  directed: true
                  creation_time: 2024-04-01 12:00:00
                  schema:
                    vertices:
                      - label: person
                        properties:
                          - id: 0
                            name: id
                            type: STRING
                            is_primary_key: true
                          - id: 1
                            name: name
                            type: STRING
                            is_primary_key: false
                      - label: software
                        properties:
                          - id: 0
                            name: id
                            type: STRING
                            is_primary_key: true
                          - id: 1
                            name: name
                            type: STRING
                            is_primary_key: false
                    edges:
                      - label: knows
                        relations:
                          - src_label: person
                            dst_label: person
                        properties:
                          - id: 0
                            name: weight
                            type: DOUBLE
                            is_primary_key: false
                      - label: created
                        relations:
                          - src_label: person
                            dst_label: software
                        properties:
                          - id: 0
                            name: weight
                            type: DOUBLE
                            is_primary_key: false
  /api/v1/groot/graph/{graph_name}/schema:
    post:
      tags:
        - legacy
      description: Import schema to groot graph
      operationId: import_groot_schema
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrootSchema'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    get:
      tags:
        - legacy
      description: Get graph schema by name
      operationId: get_groot_schema
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrootSchema'
              example:
                vertices:
                  - label: person
                    properties:
                      - id: 0
                        name: id
                        type: STRING
                        is_primary_key: true
                      - id: 1
                        name: name
                        type: STRING
                        is_primary_key: false
                  - label: software
                    properties:
                      - id: 0
                        name: id
                        type: STRING
                        is_primary_key: true
                      - id: 1
                        name: name
                        type: STRING
                        is_primary_key: false
                edges:
                  - label: knows
                    relations:
                      - src_label: person
                        dst_label: person
                    properties:
                      - id: 0
                        name: weight
                        type: DOUBLE
                        is_primary_key: false
                  - label: created
                    relations:
                      - src_label: person
                        dst_label: software
                    properties:
                      - id: 0
                        name: weight
                        type: DOUBLE
                        is_primary_key: false
  /api/v1/groot/graph/{graph_name}/dataloading:
    post:
      tags:
        - legacy
      operationId: create_groot_dataloading_job
      parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrootDataloadingJobConfig'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/job:
    get:
      tags:
        - job
      operationId: list_jobs
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobStatus'
              example:
                - job_id: JOB-QWERTYUIOPASDFGH-1
                  type: DATA IMPORT
                  status: RUNNING
                  start_time: 2024-02-24 00:00:00
                  end_time: null
                  log: logging...
                  detail:
                    graph_name: demo
                - job_id: JOB-QWERTYUIOPASDFGH-2
                  type: DATA IMPORT
                  status: CANCELLED
                  start_time: 2024-02-24 00:00:00
                  end_time: null
                  log: logging...
                  detail:
                    graph_name: demo
                - job_id: JOB-QWERTYUIOPASDFGH-3
                  type: DATA IMPORT
                  status: SUCCESS
                  start_time: 2024-02-24 00:00:00
                  end_time:  2024-02-24 12:00:00
                  log: logging...
                  detail:
                    graph_name: demo
                - job_id: JOB-QWERTYUIOPASDFGH-4
                  type: DATA IMPORT
                  status: FAILED
                  start_time: 2024-02-24 00:00:00
                  end_time: 2024-02-24 12:00:00
                  log: logging...
                  detail:
                    graph_name: demo
                - job_id: JOB-QWERTYUIOPASDFGH-5
                  type: DATA IMPORT
                  status: WAITING
                  start_time: null
                  end_time: null
                  detail:
                    graph_name: demo
  /api/v1/job/{job_id}:
    get:
      tags:
        - job
      operationId: get_job_by_id
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
              example:
                job_id: JOB-QWERTYUIOPASDFGH-1
                type: DATA IMPORT
                status: RUNNING
                start_time: 2024-02-24 00:00:00
                end_time: null
                log: logging...
    delete:
      tags:
        - job
      operationId: delete_job_by_id
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/dataloading:
    post:
      tags:
        - job
      operationId: create_dataloading_job
      parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaMapping'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/graph/{graph_name}/dataloading/config:
    get:
      tags:
        - job
      description: get dataloading configuration
      operationId: get_dataloading_config
      parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaMapping'
              example:
                graph: demo
                loading_config: overwrite
                format:
                  type: csv
                  metadata:
                    delimiter: "|"
                vertex_mappings:
                  - type_name: person
                    inputs:
                      - /home/graphscope/path/to/person.csv
                    column_mappings:
                      - column:
                          index: 0
                          name: id
                        property: id
                      - column:
                          index: 1
                          name: name
                        property: name
                  - type_name: software
                    inputs:
                      - /home/graphscope/path/to/software.csv
                    column_mappings:
                      - column:
                          index: 0
                          name: id
                        property: id
                      - column:
                          index: 1
                          name: name
                        property: name
                edge_mappings:
                  - type_triplet:
                      edge: knows
                      source_vertex:  person
                      destination_vertex:  person
                      inputs:
                        - /home/graphscope/path/to/person_knows_person.csv
                      source_vertex_mappings:
                        - column:
                            index: 0
                            name: id
                      destination_vertex_mappings:
                        - column:
                            index: 1
                            name: id
                      column_mappings:
                        - column:
                            index: 2
                            name: weight
                          property: weight
                  - type_triplet:
                      edge: created
                      source_vertex:  person
                      destination_vertex:  software
                      inputs:
                        - /home/graphscope/path/to/person_created_software.csv
                      source_vertex_mappings:
                        - column:
                            index: 0
                            name: id
                      destination_vertex_mappings:
                        - column:
                            index: 1
                            name: id
                      column_mappings:
                        - column:
                            index: 2
                            name: weight
                          property: weight
  /api/v1/procedure:
    get:
      tags:
        - procedure
      description: List all the stored procedures
      operationId: list_procedures
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Procedure'
              example:
                - bound_graph: demo
                  description: "stored procedure 1"
                  enable: true
                  runnable: true
                  name: procedure-1
                  query: "MATCH (u: person) Return u.id, u.name LIMIT 5;"
                  type: cypher
                  params:
                    - name: id
                      type: DT_STRING
                  returns:
                    - name: name
                      type: DT_STRING
  /api/v1/graph/{graph_name}/procedure:
    post:
      tags:
        - procedure
      description: Create a new stored procedure on a certain graph
      operationId: create_procedure
      parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Procedure'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    get:
      tags:
        - procedure
      description: List stored procedures on a certain graph
      operationId: list_procedures_by_graph
      parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Procedure'
              example:
                - bound_graph: demo
                  description: "stored procedure 1"
                  enable: true
                  runnable: true
                  name: procedure-1
                  query: "MATCH (u: person) Return u.id, u.name LIMIT 5;"
                  type: cypher
                  params:
                    - name: id
                      type: DT_STRING
                  returns:
                    - name: name
                      type: DT_STRING
  /api/v1/graph/{graph_name}/procedure/{procedure_name}:
    get:
      tags:
        - procedure
      description: Get a procedure by name
      operationId: get_procedure
      parameters:
      - name: graph_name
        in : path
        required: true
        schema:
          type: string
      - name: procedure_name
        in : path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Procedure'
              example:
                bound_graph: demo
                description: "stored procedure 1"
                enable: true
                runnable: true
                name: procedure-1
                query: "MATCH (u: person) Return u.id, u.name LIMIT 5;"
                type: cypher
                params:
                  - name: id
                    type: DT_STRING
                returns:
                  - name: name
                    type: DT_STRING
    put:
      tags:
        - procedure
      description:  Update stored procedure on a certain graph
      operationId: update_procedure
      parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
      - name: procedure_name
        in : path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Procedure'
      responses:
        '200':
           description: Successful operation
           content:
             application/json:
               schema:
                  $ref: '#/components/schemas/ApiResponse'
    delete:
      tags:
        - procedure
      description: Delete a stored procedure on a certain graph
      operationId: delete_procedure
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
        - name: procedure_name
          in : path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/deployment/info:
    get:
      tags:
        - deployment
      description: Get deployment's meta info
      operationId: get_deployment_info
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentInfo'
              example:
                cluster_type: HOSTS
                creation_time: 2024-02-07 14:21:28
                graphs_info:
                  demo:
                    creation_time: 2024-02-07 14:21:28
                    last_dataloading_time: 2024-02-08 14:21:28
                    name: demo
                    update_time: 2024-02-07 14:21:28
                name: demo
                solution: INTERACTIVE
                version: 0.27.0
  /api/v1/deployment/status:
    get:
      tags:
        - deployment
      description: Get deployment's status (k8s only)
      operationId: get_deployment_status
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeploymentStatus'
  /api/v1/deployment/log:
    get:
      tags:
        - deployment
      operationId: fetch_log
      parameters:
        - name: component
          in: query
          required: true
          schema:
            type: string
        - name: pod_name
          in: query
          required: true
          schema:
            type: string
        - name: container_name
          in: query
          required: true
          schema:
            type: string
        - name: since_seconds
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeploymentStatus'
  /api/v1/node/status:
    get:
      tags:
        - deployment
      description: Get node status (cpu/memory/disk, local only)
      operationId: get_node_status
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NodeStatus'
              example:
                - node: hostname-1
                  cpu_usage: 80
                  memory_usage: 40
                  disk_usage: 85
  /api/v1/service/start:
    post:
      tags:
        - service
      description: Start service
      operationId: start_service
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                graph_name:
                  type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/service/stop:
    post:
      tags:
        - service
      description: Stop current service
      operationId: stop_service
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/service/restart:
    post:
      tags:
        - service
      description: Restart current service
      operationId: restart_service
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/service/status:
    get:
      tags:
        - service
      description: Get service status
      operationId: get_service_status
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
              example:
                status: running
                graph_name: demo
                sdk_endpoints:
                  cypher: neo4j://mock.api.cypher:7676
                  gremlin: ws://mock.api.gremlin/gremlin
                  hqps: http://mock.api.hqps:10000
                  grpc: http://mock.api.grpc:10000
  /api/v1/alert/message:
    get:
      tags:
        - alert
      operationId: list_alert_messages
      parameters:
        - name: alert_type
          in: query
          required: false
          schema:
            type: string
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - solved
              - unsolved
              - dealing
        - name: severity
          in: query
          required: false
          schema:
            type: string
            enum:
              - warning
              - emergency
        - name: start_time
          in: query
          required: false
          description: format with "2023-02-21-11-56-30"
          schema:
            type: string
        - name: end_time
          in: query
          required: false
          description: format with "2023-02-21-11-56-30"
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertMessage'
              example:
                - message_id: ALERT-MESSAGE-QWERTYUIOP-1
                  alert_name: HighDiskUtilization
                  severity: warning
                  metric_type: node
                  target:
                    - hostname-1
                  trigger_time: 2023-02-21 11:56:30
                  status: unsolved
                  message: Disk usage node1 85.12%, exceeds threshold
                - message_id: ALERT-MESSAGE-QWERTYUIOP-2
                  alert_name: HighDiskUtilization
                  severity: emergency
                  metric_type: node
                  target:
                    - hostname-1
                  trigger_time: 2023-02-21 11:56:30
                  status: solved
                  message: Disk usage node1 85.12%, exceeds threshold
                - message_id: ALERT-MESSAGE-QWERTYUIOP-3
                  alert_name: HighDiskUtilization
                  severity: warning
                  metric_type: node
                  target:
                    - hostname-1
                  trigger_time: 2023-02-21 11:56:30
                  status: dealing
                  message: Disk usage node1 85.12%, exceeds threshold
    put:
      tags:
        - alert
      operationId: update_alert_messages
      description: Update alert messages in batch
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    $ref: '#/components/schemas/AlertMessage'
                batch_status:
                  type: string
                  description: Override the status of each message
                  enum:
                    - solved
                    - unsolved
                    - dealing
                batch_delete:
                  type: boolean
                  description: True will delete all the messages in request body
                  default: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Alert message not found
  /api/v1/alert/rule:
    get:
      tags:
        - alert
      operationId: list_alert_rules
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertRule'
              example:
                - name: HighDiskUtilization
                  severity: warning
                  metric_type: node
                  conditions_description: disk usage >= 85
                  enable: true
                - name: GremlinServiceAvailable
                  severity: emergency
                  metric_type: node
                  conditions_description: g.V().limit(1) failed
                  enable: false
  /api/v1/alert/rule/{rule_name}:
    put:
      tags:
        - alert
      operationId: update_alert_rule_by_name
      parameters:
        - name: rule_name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertRule'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags:
        - alert
      operationId: delete_alert_rule_by_name
      parameters:
        - name: rule_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/alert/receiver:
    post:
      tags:
        - alert
      operationId: register_receiver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertReceiver'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    get:
      tags:
        - alert
      operationId: list_receivers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertReceiver'
              example:
                - type: webhook
                  receiver_id: RECEIVER-QWERTYUIOP-1
                  webhook_url: http://webhook.com
                  is_at_all: false
                  at_user_ids:
                    - 111111
                    - 222222
                  enable: false
                - type: webhook
                  receiver_id: RECEIVER-QWERTYUIOP-2
                  webhook_url: http://webhook.com
                  is_at_all: false
                  at_user_ids:
                    - 111111
                    - 222222
                  enable: true
                  message: error message
  /api/v1/alert/receiver/{receiver_id}:
    put:
      tags:
        - alert
      operationId: update_receiver_by_id
      parameters:
        - name: receiver_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertReceiver'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Receiver not found
    delete:
      tags:
        - alert
      operationId: delete_receiver_by_id
      parameters:
        - name: receiver_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Receiver not found
  /api/v1/file/uploading:
    post:
      tags:
        - utils
      operationId: upload_file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filestorage:
                  type: string
                  format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
components:
  schemas:
    ApiResponse:
      type: string
      example: operation successful
    Connection:
      x-body-name: connection
      type: object
      properties:
        coordinator_endpoint:
          type: string
    ConnectionStatus:
        x-body-name: connection_status
        type: object
        properties:
          status:
            type: string
            enum:
              - CONNECTED
          solution:
            type: string
            enum:
              - INTERACTIVE
              - GRAPHSCOPE_INSIGHT
    Graph:
      x-body-name: graph
      type: object
      properties:
        name:
          type: string
        store_type:
          type: string
          enum:
            - mutable_csr
        stored_procedures:
          type: object
          properties:
            directory:
              type: string
              enum:
                - plugins
        schema:
          $ref: '#/components/schemas/Schema'
    Schema:
      x-body-name: schema
      type: object
      properties:
        vertex_types:
          type: array
          items:
            $ref: '#/components/schemas/VertexType'
        edge_types:
          type: array
          items:
            $ref: '#/components/schemas/EdgeType'
    VertexType:
      x-body-name: vertex_type
      type: object
      properties:
        type_id:
          type: integer
          format: int32
        type_name:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'
        primary_keys:
          type: array
          items:
            type: string
    EdgeType:
      x-body-name: edge_type
      type: object
      properties:
        type_id:
          type: integer
          format: int32
        type_name:
          type: string
        vertex_type_pair_relations:
          type: array
          items:
            type: object
            properties:
              source_vertex:
                type: string
              destination_vertex:
                type: string
              relation:
                type: string
                enum:
                  - MANY_TO_MANY
                  - ONE_TO_MANY
                  - MANY_TO_ONE
                  - ONE_TO_ONE
              x_csr_params:
                type: object
                description: Used for storage optimization
                properties:
                  edge_storage_strategy:
                    type: string
                    enum:
                      - ONLY_IN
                      - ONLY_OUT
                      - BOTH_OUT_IN
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'
    Property:
      x-body-name: property
      type: object
      properties:
        property_id:
          type: integer
          format: int32
        property_name:
          type: string
        property_type:
          type: object
          properties:
            primitive_type:
              type: string
              enum:
                - DT_DOUBLE
                - DT_STRING
                - DT_SIGNED_INT32
                - DT_SIGNED_INT64
                - DT_DATE32
    Procedure:
      x-body-name: procedure
      type: object
      properties:
        name:
          type: string
        bound_graph:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
           - cpp
           - cypher
        query:
          type: string
        enable:
          type: boolean
        runnable:
          type: boolean
        params:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
        returns:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
    DeploymentInfo:
      x-body-name: deployment_info
      type: object
      properties:
        name:
          type: string
        cluster_type:
          type: string
          enum:
            - HOSTS
            - KUBERNETES
        version:
          type: string
        solution:
          type: string
          enum:
            - INTERACTIVE
            - GRAPHSCOPE_INSIGHT
        creation_time:
          type: string
        graphs_info:
          type: object
          additionalProperties:
            type: object
            properties:
              name:
                type: string
              creation_time:
                type: string
              update_time:
                type: string
              last_dataloading_time:
                type: string
    DeploymentStatus:
      x-body-name: deployment_status
      type: object
      description: K8s only
      properties:
        name:
          type: string
        container:
          type: array
          items:
            type: string
        image:
          type: array
          items:
            type: string
        labels:
          type: array
          items:
            type: string
        node:
          type: string
        status:
          type: string
        restart_count:
          type: integer
          format: int32
        cpu_value:
          type: integer
          format: int32
          description: cpu value in millicore
        memory_value:
          type: integer
          format: int32
          description: memory value in megabytes
        timestamp:
          type: string
        creation_time:
          type: string
    NodeStatus:
      x-body-name: node_status
      type: object
      properties:
        node:
          type: string
        cpu_usage:
          type: number
          format: double
        memory_usage:
          type: number
          format: double
        disk_usage:
          type: number
          format: double
    ServiceStatus:
      x-body-name: service_status
      type: object
      properties:
        status:
          type: string
        graph_name:
          description: which graph is serving now
          type: string
        sdk_endpoints:
          type: object
          properties:
            cypher:
              type: string
            gremlin:
              type: string
            hqps:
              type: string
            grpc:
              type: string
    AlertRule:
      type: object
      x-body-name: alert_rule
      properties:
        name:
          type: string
        severity:
          type: string
          enum:
            - warning
            - emergency
        metric_type:
          type: string
          enum:
            - node
            - service
        conditions_description:
          type: string
        frequency:
          type: integer
          description: (mins)
        enable:
          type: boolean
    AlertMessage:
      type: object
      x-body-name: alert_message
      properties:
        message_id:
          type: string
          description: Generated in server side
        alert_name:
          type: string
        severity:
          type: string
          enum:
            - warning
            - emergency
        metric_type:
          type: string
          enum:
            - node
            - service
        target:
          type: array
          items:
            type: string
        trigger_time:
          type: string
        status:
          type: string
          enum:
            - unsolved
            - solved
            - dealing
        message:
          type: string
    AlertReceiver:
      type: object
      x-body-name: alert_receiver
      properties:
        type:
          type: string
          enum:
            - webhook
        receiver_id:
          type: string
          description: Generated in server side
        webhook_url:
          type: string
        at_user_ids:
          type: array
          items:
            type: string
        is_at_all:
          type: boolean
        enable:
          type: boolean
        message:
          type: string
          description: error message generated in server side
    SchemaMapping:
      x-body-name: schema_mapping
      type: object
      properties:
        graph:
          type: string
        loading_config:
          type: object
          properties:
            data_source:
              type: object
              properties:
                scheme:
                  type: string
                  enum:
                  - file
            import_option:
              type: string
              enum:
                - init
                - overwrite
            format:
              type: object
              properties:
                type:
                  type: string
                metadata:
                  type: object
                  additionalProperties: true
        vertex_mappings:
          type: array
          items:
            $ref: '#/components/schemas/VertexMapping'
        edge_mappings:
          type: array
          items:
            $ref: '#/components/schemas/EdgeMapping'
    VertexMapping:
      x-body-name: vertex_mapping
      type: object
      properties:
        type_name:
          type: string
        inputs:
          type: array
          items:
            type: string
        column_mappings:
          type: array
          items:
            $ref: '#/components/schemas/ColumnMapping'
    EdgeMapping:
      x-body-name: edge_mapping
      type: object
      properties:
        type_triplet:
          type: object
          description: source label -> [edge label] -> destination label
          properties:
            edge:
              type: string
            source_vertex:
              type: string
            destination_vertex:
              type: string
        inputs:
          type: array
          items:
            type: string
        source_vertex_mappings:
          type: array
          items:
            type: object
            description: Mapping column index to the primary key of source vertex
            properties:
              column:
                type: object
                properties:
                  index:
                    type: integer
                    format: int32
                  name:
                    type: string
        destination_vertex_mappings:
          type: array
          items:
            type: object
            description: Mapping column index to the primary key of destination vertex
            properties:
              column:
                type: object
                properties:
                  index:
                    type: integer
                    format: int32
                  name:
                    type: string
        column_mappings:
          type: array
          items:
            $ref: '#/components/schemas/ColumnMapping'
    ColumnMapping:
      x-body-name: column_mapping
      type: object
      properties:
        column:
          type: object
          properties:
            index:
              type: integer
              format: int32
            name:
              type: string
        property:
          type: string
          description: must align with the schema
    JobStatus:
      type: object
      x-body-name: job_status
      properties:
        job_id:
          type: string
        type:
          type: string
        status:
          type: string
          enum:
            - RUNNING
            - SUCCESS
            - FAILED
            - CANCELLED
            - WAITING
        start_time:
          type: string
        end_time:
          type: string
        log:
          type: string
          description: URL or log string
        detail:
          type: object
          additionalProperties: true
    VertexDataSource:
      x-body-name: vertex_data_source
      type: object
      properties:
        data_source:
          type: string
          enum:
            - ODPS
            - FILE
        type_name:
          type: string
        location:
          type: string
        property_mapping:
          type: object
          additionalProperties: true
    EdgeDataSource:
      x-body-name: edge_data_source
      type: object
      properties:
        data_source:
          type: string
          enum:
            - ODPS
            - FILE
        type_name:
          type: string
        source_vertex:
          type: string
        destination_vertex:
          type: string
        location:
          type: string
        source_pk_column_map:
          type: object
          additionalProperties: true
        destination_pk_column_map:
          type: object
          additionalProperties: true
        property_mapping:
          type: object
          additionalProperties: true
    DataSource:
      x-body-name: data_source
      type: object
      properties:
        vertices_datasource:
          type: array
          items:
            $ref: '#/components/schemas/VertexDataSource'
        edges_datasource:
          type: array
          items:
            $ref: '#/components/schemas/EdgeDataSource'
    GrootGraph:
      x-body-name: groot_graph
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - GrootGraph
        directed:
          type: boolean
        creation_time:
          type: string
        schema:
          $ref: '#/components/schemas/GrootSchema'
        gremlin_interface:
          type: object
          properties:
            gremlin_endpoint:
              type: string
            grpc_endpoint:
              type: string
            username:
              type: string
            password:
              type: string
    GrootSchema:
      x-body-name: groot_schema
      type: object
      properties:
        vertices:
          type: array
          items:
            $ref: '#/components/schemas/GrootVertexType'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/GrootEdgeType'
    GrootVertexType:
      x-body-name: groot_vertex_type
      type: object
      properties:
        label:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/GrootProperty'
    GrootEdgeType:
      x-body-name: groot_edge_type
      type: object
      properties:
        label:
          type: string
        relations:
          type: array
          items:
            type: object
            properties:
              src_label:
                type: string
              dst_label:
                type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/GrootProperty'
    GrootProperty:
      x-body-name: groot_property
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        type:
          type: string
          enum:
            - DT_STRING
            - DT_SIGNED_INT64
            - DT_DOUBLE
        is_primary_key:
          type: boolean
    GrootDataloadingJobConfig:
      x-body-name: groot_dataloading_job_config
      type: object
      properties:
        vertices:
          type: array
          items:
            type: string
        edges:
          type: array
          items:
            type: object
            properties:
              type_name:
                type: string
              source_vertex:
                type: string
              destination_vertex:
                type: string
        schedule:
          type: string
          description: "format with '2023-02-21 11:56:30'"
        repeat:
          type: string
          enum:
            - once
            - day
            - week