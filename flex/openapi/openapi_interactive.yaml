openapi: 3.0.3
info:
  title: GraphScope Interactive API
  description: |-
    This is a specification for GraphScope Interactive based on the OpenAPI 3.0 specification. You can find out more details about
    specification at [doc](https://swagger.io/specification/v3/).
    
    Some useful links:
    - [GraphScope Repository](https://github.com/alibaba/GraphScope)
    - [The Source API definition for GraphScope Interactive](#)
  contact:
    name: GraphScope
    email: graphscope@alibaba-inc.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.9.1
externalDocs:
  description: Find out More about GraphScope
  url: http://graphscope.io
tags:
  - name: graph
    description: Everything about interative graph
    externalDocs:
      description: Find out more
      url: http://graphscope.io
paths:
  /v1/graph:
    post:
      tags:
        - graph
      description: Create a new graph
      operationId: create_graph
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Graph'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    get:
      tags:
        - graph
      description: List all graphs
      operationId: list_graphs
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Graph'
  /v1/graph/{graph_name}:
    delete:
      tags:
        - graph
      description: Delete a graph by name
      operationId: delete_graph
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /v1/graph/{graph_name}/schema:
    get:
      tags:
        - graph
      description: Get schema by graph name
      operationId: get_schema
      parameters:
      - name: graph_name
        in : path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
  /v1/graph/{graph_name}/dataloading:
    post:
      tags:
        - job
      description: Create a dataloading job
      operationId: create_dataloading_job
      parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaMapping'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
  /v1/job/{job_id}:
    get:
      tags:
        - job
      operationId: get_job_by_id
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
    delete:
      tags:
        - job
      operationId: delete_job_by_id
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /v1/job:
    get:
      tags:
        - job
      operationId: list_jobs
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobStatus'
  /v1/graph/{graph_name}/procedure:
    post:
      tags:
        - procedure
      description: Create a new procedure on a graph
      operationId: create_procedure
      parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Procedure'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    get:
      tags:
        - procedure
      description: List all procedures
      operationId: list_procedures
      parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Procedure'
  /v1/graph/{graph_name}/procedure/{procedure_name}:
    get:
      tags:
        - procedure
      description: Get a procedure by name
      operationId: get_procedure
      parameters:
      - name: graph_name
        in : path
        required: true
        schema:
          type: string
      - name: procedure_name
        in : path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Procedure'
    put:
      tags:
        - procedure
      description:  Update procedure on a graph by name
      operationId: update_procedure
      parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
      - name: procedure_name
        in : path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Procedure'
      responses:
        '200':
           description: Successful operation
           content:
             application/json:
               schema:
                  $ref: '#/components/schemas/ApiResponse'
    delete:
      tags:
        - procedure
      description: Delete a procedure on a graph by name
      operationId: delete_procedure
      parameters:
        - name: graph_name
          in: path
          required: true
          schema:
            type: string
        - name: procedure_name
          in : path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /v1/service/start:
    post:
      tags:
        - service
      description: Start service on a specified graph
      operationId: start_service
      requestBody:
        description: Start service on a specified graph
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /v1/service/stop:
    post:
      tags:
        - service
      description: Stop current service
      operationId: stop_service
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /v1/service/restart:
    post:
      tags:
        - service
      description: Start current service
      operationId: restart_service
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /v1/service/status:
    get:
      tags:
        - service
      description: Get service status
      operationId: get_service_status
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
components:
  schemas:
    Graph:
      x-body-name: graph
      type: object
      properties:
        name:
          type: string
        store_type:
          type: string
          enum:
            - mutable_csr
        stored_procedures:
          type: object
          properties:
            directory:
              type: string
              enum:
                - plugins
        schema:
          $ref: '#/components/schemas/Schema'
    Schema:
      x-body-name: schema
      type: object
      properties:
        vertex_types:
          type: array
          items:
            $ref: '#/components/schemas/VertexType'
        edge_types:
          type: array
          items:
            $ref: '#/components/schemas/EdgeType'
    VertexType:
      x-body-name: vertex_type
      type: object
      properties:
        type_id:
          type: integer
          format: int32
        type_name:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'
        primary_keys:
          type: array
          items:
            type: string
    EdgeType:
      x-body-name: edge_type
      type: object
      properties:
        type_id:
          type: integer
          format: int32
        type_name:
          type: string
        vertex_type_pair_relations:
          type: array
          items:
            type: object
            properties:
              source_vertex:
                type: string
              destination_vertex:
                type: string
              relation:
                type: string
                enum:
                  - MANY_TO_MANY
                  - ONE_TO_MANY
                  - MANY_TO_ONE
                  - ONE_TO_ONE
              x_csr_params:
                type: object
                description: Used for storage optimization
                properties:
                  edge_storage_strategy:
                    type: string
                    enum:
                      - ONLY_IN
                      - ONLY_OUT
                      - BOTH_OUT_IN
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'
    Property:
      x-body-name: property
      type: object
      properties:
        property_id:
          type: integer
          format: int32
        property_name:
          type: string
        property_type:
          type: object
          description: Property type
          properties:
            primitive_type:
              type: string
              enum:
                - DT_DOUBLE
                - DT_STRING
                - DT_SIGNED_INT32
                - DT_SIGNED_INT64
                - DT_DATE32
    SchemaMapping:
      x-body-name: schema_mapping
      type: object
      properties:
        graph:
          type: string
        loading_config:
          type: object
          properties:
            data_source:
              type: object
              properties:
                scheme:
                  type: string
                  enum:
                  - file
                  - oss
                  - s3
                  - hdfs
            import_option:
              type: string
              enum:
                - init
                - overwrite
            format:
              type: object
              properties:
                type:
                  type: string
                metadata:
                  type: object
                  additionalProperties: true
        vertex_mappings:
          type: array
          items:
            $ref: '#/components/schemas/VertexMapping'
        edge_mappings:
          type: array
          items:
            $ref: '#/components/schemas/EdgeMapping'
    VertexMapping:
      x-body-name: vertex_mapping
      type: object
      properties:
        type_name:
          type: string
        inputs:
          type: array
          items:
            type: string
        column_mappings:
          type: array
          items:
            $ref: '#/components/schemas/ColumnMapping'
    EdgeMapping:
      x-body-name: edge_mapping
      type: object
      properties:
        type_triplet:
          type: object
          description: source label -> [edge label] -> destination label
          properties:
            edge:
              type: string
            source_vertex:
              type: string
            destination_vertex:
              type: string
        inputs:
          type: array
          items:
            type: string
        source_vertex_mappings:
          type: array
          items:
            type: object
            description: Mapping column to the primary key of source vertex
            properties:
              column:
                type: object
                properties:
                  index:
                    type: integer
                    format: int32
                  name:
                    type: string
        destination_vertex_mappings:
          type: array
          items:
            type: object
            description: Mapping column to the primary key of destination vertex
            properties:
              column:
                type: object
                properties:
                  index:
                    type: integer
                    format: int32
                  name:
                    type: string
        column_mappings:
          type: array
          items:
            $ref: '#/components/schemas/ColumnMapping'
    ColumnMapping:
      x-body-name: column_mapping
      type: object
      properties:
        column:
          type: object
          properties:
            index:
              type: integer
              format: int32
            name:
              type: string
        property:
          type: string
          description: must align with the schema
    Procedure:
      x-body-name: procedure
      type: object
      properties:
        name:
          type: string
        bound_graph:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
           - cpp
           - cypher
        query:
          type: string
        enable:
          type: boolean
        runnable:
          type: boolean
        params:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
        returns:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
    Service:
      x-body-name: service
      properties:
        graph_name:
          type: string
    ServiceStatus:
      x-body-name: service_status
      type: object
      properties:
        status:
          type: string
        graph_name:
          type: string
        bolt_port:
          type: integer
          format: int32
        hqps_port:
          type: integer
          format: int32
    JobResponse:
      type: object
      x-body-name: job_response
      properties:
        job_id:
          type: string
    JobStatus:
      type: object
      x-body-name: job_status
      properties:
        job_id:
          type: string
        type:
          type: string
        status:
          type: string
          enum:
            - RUNNING
            - SUCCESS
            - FAILED
            - CANCELLED
            - WAITING
        start_time:
          type: integer
          format: int32
        end_time:
          type: integer
          format: int32
        log:
          type: string
          description: URL or log string
        detail:
          type: object
          additionalProperties: true
    ApiResponse:
      type: string
