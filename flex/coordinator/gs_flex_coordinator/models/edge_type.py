from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gs_flex_coordinator.models.base_model import Model
from gs_flex_coordinator.models.edge_type_vertex_type_pair_relations_inner import EdgeTypeVertexTypePairRelationsInner
from gs_flex_coordinator.models.model_property import ModelProperty
from gs_flex_coordinator import util

from gs_flex_coordinator.models.edge_type_vertex_type_pair_relations_inner import EdgeTypeVertexTypePairRelationsInner  # noqa: E501
from gs_flex_coordinator.models.model_property import ModelProperty  # noqa: E501

class EdgeType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type_id=None, type_name=None, vertex_type_pair_relations=None, properties=None):  # noqa: E501
        """EdgeType - a model defined in OpenAPI

        :param type_id: The type_id of this EdgeType.  # noqa: E501
        :type type_id: int
        :param type_name: The type_name of this EdgeType.  # noqa: E501
        :type type_name: str
        :param vertex_type_pair_relations: The vertex_type_pair_relations of this EdgeType.  # noqa: E501
        :type vertex_type_pair_relations: List[EdgeTypeVertexTypePairRelationsInner]
        :param properties: The properties of this EdgeType.  # noqa: E501
        :type properties: List[ModelProperty]
        """
        self.openapi_types = {
            'type_id': int,
            'type_name': str,
            'vertex_type_pair_relations': List[EdgeTypeVertexTypePairRelationsInner],
            'properties': List[ModelProperty]
        }

        self.attribute_map = {
            'type_id': 'type_id',
            'type_name': 'type_name',
            'vertex_type_pair_relations': 'vertex_type_pair_relations',
            'properties': 'properties'
        }

        self._type_id = type_id
        self._type_name = type_name
        self._vertex_type_pair_relations = vertex_type_pair_relations
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt) -> 'EdgeType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EdgeType of this EdgeType.  # noqa: E501
        :rtype: EdgeType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type_id(self) -> int:
        """Gets the type_id of this EdgeType.


        :return: The type_id of this EdgeType.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id: int):
        """Sets the type_id of this EdgeType.


        :param type_id: The type_id of this EdgeType.
        :type type_id: int
        """

        self._type_id = type_id

    @property
    def type_name(self) -> str:
        """Gets the type_name of this EdgeType.


        :return: The type_name of this EdgeType.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name: str):
        """Sets the type_name of this EdgeType.


        :param type_name: The type_name of this EdgeType.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def vertex_type_pair_relations(self) -> List[EdgeTypeVertexTypePairRelationsInner]:
        """Gets the vertex_type_pair_relations of this EdgeType.


        :return: The vertex_type_pair_relations of this EdgeType.
        :rtype: List[EdgeTypeVertexTypePairRelationsInner]
        """
        return self._vertex_type_pair_relations

    @vertex_type_pair_relations.setter
    def vertex_type_pair_relations(self, vertex_type_pair_relations: List[EdgeTypeVertexTypePairRelationsInner]):
        """Sets the vertex_type_pair_relations of this EdgeType.


        :param vertex_type_pair_relations: The vertex_type_pair_relations of this EdgeType.
        :type vertex_type_pair_relations: List[EdgeTypeVertexTypePairRelationsInner]
        """

        self._vertex_type_pair_relations = vertex_type_pair_relations

    @property
    def properties(self) -> List[ModelProperty]:
        """Gets the properties of this EdgeType.


        :return: The properties of this EdgeType.
        :rtype: List[ModelProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: List[ModelProperty]):
        """Sets the properties of this EdgeType.


        :param properties: The properties of this EdgeType.
        :type properties: List[ModelProperty]
        """

        self._properties = properties
