from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gs_flex_coordinator.models.base_model import Model
from gs_flex_coordinator.models.groot_edge_type import GrootEdgeType
from gs_flex_coordinator.models.groot_vertex_type import GrootVertexType
from gs_flex_coordinator import util

from gs_flex_coordinator.models.groot_edge_type import GrootEdgeType  # noqa: E501
from gs_flex_coordinator.models.groot_vertex_type import GrootVertexType  # noqa: E501

class GrootSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vertices=None, edges=None):  # noqa: E501
        """GrootSchema - a model defined in OpenAPI

        :param vertices: The vertices of this GrootSchema.  # noqa: E501
        :type vertices: List[GrootVertexType]
        :param edges: The edges of this GrootSchema.  # noqa: E501
        :type edges: List[GrootEdgeType]
        """
        self.openapi_types = {
            'vertices': List[GrootVertexType],
            'edges': List[GrootEdgeType]
        }

        self.attribute_map = {
            'vertices': 'vertices',
            'edges': 'edges'
        }

        self._vertices = vertices
        self._edges = edges

    @classmethod
    def from_dict(cls, dikt) -> 'GrootSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GrootSchema of this GrootSchema.  # noqa: E501
        :rtype: GrootSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vertices(self) -> List[GrootVertexType]:
        """Gets the vertices of this GrootSchema.


        :return: The vertices of this GrootSchema.
        :rtype: List[GrootVertexType]
        """
        return self._vertices

    @vertices.setter
    def vertices(self, vertices: List[GrootVertexType]):
        """Sets the vertices of this GrootSchema.


        :param vertices: The vertices of this GrootSchema.
        :type vertices: List[GrootVertexType]
        """

        self._vertices = vertices

    @property
    def edges(self) -> List[GrootEdgeType]:
        """Gets the edges of this GrootSchema.


        :return: The edges of this GrootSchema.
        :rtype: List[GrootEdgeType]
        """
        return self._edges

    @edges.setter
    def edges(self, edges: List[GrootEdgeType]):
        """Sets the edges of this GrootSchema.


        :param edges: The edges of this GrootSchema.
        :type edges: List[GrootEdgeType]
        """

        self._edges = edges
