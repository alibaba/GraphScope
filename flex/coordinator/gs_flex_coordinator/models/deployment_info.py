from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gs_flex_coordinator.models.base_model import Model
from gs_flex_coordinator.models.deployment_info_graphs_info_value import DeploymentInfoGraphsInfoValue
from gs_flex_coordinator import util

from gs_flex_coordinator.models.deployment_info_graphs_info_value import DeploymentInfoGraphsInfoValue  # noqa: E501

class DeploymentInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, cluster_type=None, version=None, solution=None, creation_time=None, graphs_info=None):  # noqa: E501
        """DeploymentInfo - a model defined in OpenAPI

        :param name: The name of this DeploymentInfo.  # noqa: E501
        :type name: str
        :param cluster_type: The cluster_type of this DeploymentInfo.  # noqa: E501
        :type cluster_type: str
        :param version: The version of this DeploymentInfo.  # noqa: E501
        :type version: str
        :param solution: The solution of this DeploymentInfo.  # noqa: E501
        :type solution: str
        :param creation_time: The creation_time of this DeploymentInfo.  # noqa: E501
        :type creation_time: str
        :param graphs_info: The graphs_info of this DeploymentInfo.  # noqa: E501
        :type graphs_info: Dict[str, DeploymentInfoGraphsInfoValue]
        """
        self.openapi_types = {
            'name': str,
            'cluster_type': str,
            'version': str,
            'solution': str,
            'creation_time': str,
            'graphs_info': Dict[str, DeploymentInfoGraphsInfoValue]
        }

        self.attribute_map = {
            'name': 'name',
            'cluster_type': 'cluster_type',
            'version': 'version',
            'solution': 'solution',
            'creation_time': 'creation_time',
            'graphs_info': 'graphs_info'
        }

        self._name = name
        self._cluster_type = cluster_type
        self._version = version
        self._solution = solution
        self._creation_time = creation_time
        self._graphs_info = graphs_info

    @classmethod
    def from_dict(cls, dikt) -> 'DeploymentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeploymentInfo of this DeploymentInfo.  # noqa: E501
        :rtype: DeploymentInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this DeploymentInfo.


        :return: The name of this DeploymentInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DeploymentInfo.


        :param name: The name of this DeploymentInfo.
        :type name: str
        """

        self._name = name

    @property
    def cluster_type(self) -> str:
        """Gets the cluster_type of this DeploymentInfo.


        :return: The cluster_type of this DeploymentInfo.
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type: str):
        """Sets the cluster_type of this DeploymentInfo.


        :param cluster_type: The cluster_type of this DeploymentInfo.
        :type cluster_type: str
        """
        allowed_values = ["HOSTS", "KUBERNETES"]  # noqa: E501
        if cluster_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_type` ({0}), must be one of {1}"
                .format(cluster_type, allowed_values)
            )

        self._cluster_type = cluster_type

    @property
    def version(self) -> str:
        """Gets the version of this DeploymentInfo.


        :return: The version of this DeploymentInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this DeploymentInfo.


        :param version: The version of this DeploymentInfo.
        :type version: str
        """

        self._version = version

    @property
    def solution(self) -> str:
        """Gets the solution of this DeploymentInfo.


        :return: The solution of this DeploymentInfo.
        :rtype: str
        """
        return self._solution

    @solution.setter
    def solution(self, solution: str):
        """Sets the solution of this DeploymentInfo.


        :param solution: The solution of this DeploymentInfo.
        :type solution: str
        """
        allowed_values = ["INTERACTIVE", "GRAPHSCOPE_INSIGHT"]  # noqa: E501
        if solution not in allowed_values:
            raise ValueError(
                "Invalid value for `solution` ({0}), must be one of {1}"
                .format(solution, allowed_values)
            )

        self._solution = solution

    @property
    def creation_time(self) -> str:
        """Gets the creation_time of this DeploymentInfo.


        :return: The creation_time of this DeploymentInfo.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time: str):
        """Sets the creation_time of this DeploymentInfo.


        :param creation_time: The creation_time of this DeploymentInfo.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def graphs_info(self) -> Dict[str, DeploymentInfoGraphsInfoValue]:
        """Gets the graphs_info of this DeploymentInfo.


        :return: The graphs_info of this DeploymentInfo.
        :rtype: Dict[str, DeploymentInfoGraphsInfoValue]
        """
        return self._graphs_info

    @graphs_info.setter
    def graphs_info(self, graphs_info: Dict[str, DeploymentInfoGraphsInfoValue]):
        """Sets the graphs_info of this DeploymentInfo.


        :param graphs_info: The graphs_info of this DeploymentInfo.
        :type graphs_info: Dict[str, DeploymentInfoGraphsInfoValue]
        """

        self._graphs_info = graphs_info
