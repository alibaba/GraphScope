from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gs_flex_coordinator.models.base_model import Model
from gs_flex_coordinator.models.graph_stored_procedures import GraphStoredProcedures
from gs_flex_coordinator.models.model_schema import ModelSchema
from gs_flex_coordinator import util

from gs_flex_coordinator.models.graph_stored_procedures import GraphStoredProcedures  # noqa: E501
from gs_flex_coordinator.models.model_schema import ModelSchema  # noqa: E501

class Graph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, store_type=None, stored_procedures=None, _schema=None):  # noqa: E501
        """Graph - a model defined in OpenAPI

        :param name: The name of this Graph.  # noqa: E501
        :type name: str
        :param store_type: The store_type of this Graph.  # noqa: E501
        :type store_type: str
        :param stored_procedures: The stored_procedures of this Graph.  # noqa: E501
        :type stored_procedures: GraphStoredProcedures
        :param _schema: The _schema of this Graph.  # noqa: E501
        :type _schema: ModelSchema
        """
        self.openapi_types = {
            'name': str,
            'store_type': str,
            'stored_procedures': GraphStoredProcedures,
            '_schema': ModelSchema
        }

        self.attribute_map = {
            'name': 'name',
            'store_type': 'store_type',
            'stored_procedures': 'stored_procedures',
            '_schema': 'schema'
        }

        self._name = name
        self._store_type = store_type
        self._stored_procedures = stored_procedures
        self.__schema = _schema

    @classmethod
    def from_dict(cls, dikt) -> 'Graph':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Graph of this Graph.  # noqa: E501
        :rtype: Graph
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Graph.


        :return: The name of this Graph.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Graph.


        :param name: The name of this Graph.
        :type name: str
        """

        self._name = name

    @property
    def store_type(self) -> str:
        """Gets the store_type of this Graph.


        :return: The store_type of this Graph.
        :rtype: str
        """
        return self._store_type

    @store_type.setter
    def store_type(self, store_type: str):
        """Sets the store_type of this Graph.


        :param store_type: The store_type of this Graph.
        :type store_type: str
        """
        allowed_values = ["mutable_csr"]  # noqa: E501
        if store_type not in allowed_values:
            raise ValueError(
                "Invalid value for `store_type` ({0}), must be one of {1}"
                .format(store_type, allowed_values)
            )

        self._store_type = store_type

    @property
    def stored_procedures(self) -> GraphStoredProcedures:
        """Gets the stored_procedures of this Graph.


        :return: The stored_procedures of this Graph.
        :rtype: GraphStoredProcedures
        """
        return self._stored_procedures

    @stored_procedures.setter
    def stored_procedures(self, stored_procedures: GraphStoredProcedures):
        """Sets the stored_procedures of this Graph.


        :param stored_procedures: The stored_procedures of this Graph.
        :type stored_procedures: GraphStoredProcedures
        """

        self._stored_procedures = stored_procedures

    @property
    def _schema(self) -> ModelSchema:
        """Gets the _schema of this Graph.


        :return: The _schema of this Graph.
        :rtype: ModelSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema: ModelSchema):
        """Sets the _schema of this Graph.


        :param _schema: The _schema of this Graph.
        :type _schema: ModelSchema
        """

        self.__schema = _schema
