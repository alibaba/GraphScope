from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gs_flex_coordinator.models.base_model import Model
from gs_flex_coordinator.models.groot_dataloading_job_config_edges_inner import GrootDataloadingJobConfigEdgesInner
from gs_flex_coordinator import util

from gs_flex_coordinator.models.groot_dataloading_job_config_edges_inner import GrootDataloadingJobConfigEdgesInner  # noqa: E501

class GrootDataloadingJobConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vertices=None, edges=None, schedule=None, repeat=None):  # noqa: E501
        """GrootDataloadingJobConfig - a model defined in OpenAPI

        :param vertices: The vertices of this GrootDataloadingJobConfig.  # noqa: E501
        :type vertices: List[str]
        :param edges: The edges of this GrootDataloadingJobConfig.  # noqa: E501
        :type edges: List[GrootDataloadingJobConfigEdgesInner]
        :param schedule: The schedule of this GrootDataloadingJobConfig.  # noqa: E501
        :type schedule: str
        :param repeat: The repeat of this GrootDataloadingJobConfig.  # noqa: E501
        :type repeat: str
        """
        self.openapi_types = {
            'vertices': List[str],
            'edges': List[GrootDataloadingJobConfigEdgesInner],
            'schedule': str,
            'repeat': str
        }

        self.attribute_map = {
            'vertices': 'vertices',
            'edges': 'edges',
            'schedule': 'schedule',
            'repeat': 'repeat'
        }

        self._vertices = vertices
        self._edges = edges
        self._schedule = schedule
        self._repeat = repeat

    @classmethod
    def from_dict(cls, dikt) -> 'GrootDataloadingJobConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GrootDataloadingJobConfig of this GrootDataloadingJobConfig.  # noqa: E501
        :rtype: GrootDataloadingJobConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vertices(self) -> List[str]:
        """Gets the vertices of this GrootDataloadingJobConfig.


        :return: The vertices of this GrootDataloadingJobConfig.
        :rtype: List[str]
        """
        return self._vertices

    @vertices.setter
    def vertices(self, vertices: List[str]):
        """Sets the vertices of this GrootDataloadingJobConfig.


        :param vertices: The vertices of this GrootDataloadingJobConfig.
        :type vertices: List[str]
        """

        self._vertices = vertices

    @property
    def edges(self) -> List[GrootDataloadingJobConfigEdgesInner]:
        """Gets the edges of this GrootDataloadingJobConfig.


        :return: The edges of this GrootDataloadingJobConfig.
        :rtype: List[GrootDataloadingJobConfigEdgesInner]
        """
        return self._edges

    @edges.setter
    def edges(self, edges: List[GrootDataloadingJobConfigEdgesInner]):
        """Sets the edges of this GrootDataloadingJobConfig.


        :param edges: The edges of this GrootDataloadingJobConfig.
        :type edges: List[GrootDataloadingJobConfigEdgesInner]
        """

        self._edges = edges

    @property
    def schedule(self) -> str:
        """Gets the schedule of this GrootDataloadingJobConfig.

        format with '2023-02-21 11:56:30'  # noqa: E501

        :return: The schedule of this GrootDataloadingJobConfig.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule: str):
        """Sets the schedule of this GrootDataloadingJobConfig.

        format with '2023-02-21 11:56:30'  # noqa: E501

        :param schedule: The schedule of this GrootDataloadingJobConfig.
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def repeat(self) -> str:
        """Gets the repeat of this GrootDataloadingJobConfig.


        :return: The repeat of this GrootDataloadingJobConfig.
        :rtype: str
        """
        return self._repeat

    @repeat.setter
    def repeat(self, repeat: str):
        """Sets the repeat of this GrootDataloadingJobConfig.


        :param repeat: The repeat of this GrootDataloadingJobConfig.
        :type repeat: str
        """
        allowed_values = ["once", "day", "week"]  # noqa: E501
        if repeat not in allowed_values:
            raise ValueError(
                "Invalid value for `repeat` ({0}), must be one of {1}"
                .format(repeat, allowed_values)
            )

        self._repeat = repeat
