from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gs_flex_coordinator.models.base_model import Model
from gs_flex_coordinator import util


class ConnectionStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, solution=None):  # noqa: E501
        """ConnectionStatus - a model defined in OpenAPI

        :param status: The status of this ConnectionStatus.  # noqa: E501
        :type status: str
        :param solution: The solution of this ConnectionStatus.  # noqa: E501
        :type solution: str
        """
        self.openapi_types = {
            'status': str,
            'solution': str
        }

        self.attribute_map = {
            'status': 'status',
            'solution': 'solution'
        }

        self._status = status
        self._solution = solution

    @classmethod
    def from_dict(cls, dikt) -> 'ConnectionStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConnectionStatus of this ConnectionStatus.  # noqa: E501
        :rtype: ConnectionStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this ConnectionStatus.


        :return: The status of this ConnectionStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ConnectionStatus.


        :param status: The status of this ConnectionStatus.
        :type status: str
        """
        allowed_values = ["CONNECTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def solution(self) -> str:
        """Gets the solution of this ConnectionStatus.


        :return: The solution of this ConnectionStatus.
        :rtype: str
        """
        return self._solution

    @solution.setter
    def solution(self, solution: str):
        """Sets the solution of this ConnectionStatus.


        :param solution: The solution of this ConnectionStatus.
        :type solution: str
        """
        allowed_values = ["INTERACTIVE", "GRAPHSCOPE_INSIGHT"]  # noqa: E501
        if solution not in allowed_values:
            raise ValueError(
                "Invalid value for `solution` ({0}), must be one of {1}"
                .format(solution, allowed_values)
            )

        self._solution = solution
