from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gs_flex_coordinator.models.base_model import Model
from gs_flex_coordinator.models.procedure_params_inner import ProcedureParamsInner
from gs_flex_coordinator import util

from gs_flex_coordinator.models.procedure_params_inner import ProcedureParamsInner  # noqa: E501

class Procedure(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, bound_graph=None, description=None, type=None, query=None, enable=None, runnable=None, params=None, returns=None):  # noqa: E501
        """Procedure - a model defined in OpenAPI

        :param name: The name of this Procedure.  # noqa: E501
        :type name: str
        :param bound_graph: The bound_graph of this Procedure.  # noqa: E501
        :type bound_graph: str
        :param description: The description of this Procedure.  # noqa: E501
        :type description: str
        :param type: The type of this Procedure.  # noqa: E501
        :type type: str
        :param query: The query of this Procedure.  # noqa: E501
        :type query: str
        :param enable: The enable of this Procedure.  # noqa: E501
        :type enable: bool
        :param runnable: The runnable of this Procedure.  # noqa: E501
        :type runnable: bool
        :param params: The params of this Procedure.  # noqa: E501
        :type params: List[ProcedureParamsInner]
        :param returns: The returns of this Procedure.  # noqa: E501
        :type returns: List[ProcedureParamsInner]
        """
        self.openapi_types = {
            'name': str,
            'bound_graph': str,
            'description': str,
            'type': str,
            'query': str,
            'enable': bool,
            'runnable': bool,
            'params': List[ProcedureParamsInner],
            'returns': List[ProcedureParamsInner]
        }

        self.attribute_map = {
            'name': 'name',
            'bound_graph': 'bound_graph',
            'description': 'description',
            'type': 'type',
            'query': 'query',
            'enable': 'enable',
            'runnable': 'runnable',
            'params': 'params',
            'returns': 'returns'
        }

        self._name = name
        self._bound_graph = bound_graph
        self._description = description
        self._type = type
        self._query = query
        self._enable = enable
        self._runnable = runnable
        self._params = params
        self._returns = returns

    @classmethod
    def from_dict(cls, dikt) -> 'Procedure':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Procedure of this Procedure.  # noqa: E501
        :rtype: Procedure
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Procedure.


        :return: The name of this Procedure.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Procedure.


        :param name: The name of this Procedure.
        :type name: str
        """

        self._name = name

    @property
    def bound_graph(self) -> str:
        """Gets the bound_graph of this Procedure.


        :return: The bound_graph of this Procedure.
        :rtype: str
        """
        return self._bound_graph

    @bound_graph.setter
    def bound_graph(self, bound_graph: str):
        """Sets the bound_graph of this Procedure.


        :param bound_graph: The bound_graph of this Procedure.
        :type bound_graph: str
        """

        self._bound_graph = bound_graph

    @property
    def description(self) -> str:
        """Gets the description of this Procedure.


        :return: The description of this Procedure.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Procedure.


        :param description: The description of this Procedure.
        :type description: str
        """

        self._description = description

    @property
    def type(self) -> str:
        """Gets the type of this Procedure.


        :return: The type of this Procedure.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Procedure.


        :param type: The type of this Procedure.
        :type type: str
        """
        allowed_values = ["cpp", "cypher"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def query(self) -> str:
        """Gets the query of this Procedure.


        :return: The query of this Procedure.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query: str):
        """Sets the query of this Procedure.


        :param query: The query of this Procedure.
        :type query: str
        """

        self._query = query

    @property
    def enable(self) -> bool:
        """Gets the enable of this Procedure.


        :return: The enable of this Procedure.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable: bool):
        """Sets the enable of this Procedure.


        :param enable: The enable of this Procedure.
        :type enable: bool
        """

        self._enable = enable

    @property
    def runnable(self) -> bool:
        """Gets the runnable of this Procedure.


        :return: The runnable of this Procedure.
        :rtype: bool
        """
        return self._runnable

    @runnable.setter
    def runnable(self, runnable: bool):
        """Sets the runnable of this Procedure.


        :param runnable: The runnable of this Procedure.
        :type runnable: bool
        """

        self._runnable = runnable

    @property
    def params(self) -> List[ProcedureParamsInner]:
        """Gets the params of this Procedure.


        :return: The params of this Procedure.
        :rtype: List[ProcedureParamsInner]
        """
        return self._params

    @params.setter
    def params(self, params: List[ProcedureParamsInner]):
        """Sets the params of this Procedure.


        :param params: The params of this Procedure.
        :type params: List[ProcedureParamsInner]
        """

        self._params = params

    @property
    def returns(self) -> List[ProcedureParamsInner]:
        """Gets the returns of this Procedure.


        :return: The returns of this Procedure.
        :rtype: List[ProcedureParamsInner]
        """
        return self._returns

    @returns.setter
    def returns(self, returns: List[ProcedureParamsInner]):
        """Sets the returns of this Procedure.


        :param returns: The returns of this Procedure.
        :type returns: List[ProcedureParamsInner]
        """

        self._returns = returns
