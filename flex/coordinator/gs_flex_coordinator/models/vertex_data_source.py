from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gs_flex_coordinator.models.base_model import Model
from gs_flex_coordinator import util


class VertexDataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source=None, type_name=None, location=None, property_mapping=None):  # noqa: E501
        """VertexDataSource - a model defined in OpenAPI

        :param data_source: The data_source of this VertexDataSource.  # noqa: E501
        :type data_source: str
        :param type_name: The type_name of this VertexDataSource.  # noqa: E501
        :type type_name: str
        :param location: The location of this VertexDataSource.  # noqa: E501
        :type location: str
        :param property_mapping: The property_mapping of this VertexDataSource.  # noqa: E501
        :type property_mapping: Dict[str, object]
        """
        self.openapi_types = {
            'data_source': str,
            'type_name': str,
            'location': str,
            'property_mapping': Dict[str, object]
        }

        self.attribute_map = {
            'data_source': 'data_source',
            'type_name': 'type_name',
            'location': 'location',
            'property_mapping': 'property_mapping'
        }

        self._data_source = data_source
        self._type_name = type_name
        self._location = location
        self._property_mapping = property_mapping

    @classmethod
    def from_dict(cls, dikt) -> 'VertexDataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VertexDataSource of this VertexDataSource.  # noqa: E501
        :rtype: VertexDataSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source(self) -> str:
        """Gets the data_source of this VertexDataSource.


        :return: The data_source of this VertexDataSource.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source: str):
        """Sets the data_source of this VertexDataSource.


        :param data_source: The data_source of this VertexDataSource.
        :type data_source: str
        """
        allowed_values = ["ODPS", "FILE"]  # noqa: E501
        if data_source not in allowed_values:
            raise ValueError(
                "Invalid value for `data_source` ({0}), must be one of {1}"
                .format(data_source, allowed_values)
            )

        self._data_source = data_source

    @property
    def type_name(self) -> str:
        """Gets the type_name of this VertexDataSource.


        :return: The type_name of this VertexDataSource.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name: str):
        """Sets the type_name of this VertexDataSource.


        :param type_name: The type_name of this VertexDataSource.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def location(self) -> str:
        """Gets the location of this VertexDataSource.


        :return: The location of this VertexDataSource.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this VertexDataSource.


        :param location: The location of this VertexDataSource.
        :type location: str
        """

        self._location = location

    @property
    def property_mapping(self) -> Dict[str, object]:
        """Gets the property_mapping of this VertexDataSource.


        :return: The property_mapping of this VertexDataSource.
        :rtype: Dict[str, object]
        """
        return self._property_mapping

    @property_mapping.setter
    def property_mapping(self, property_mapping: Dict[str, object]):
        """Sets the property_mapping of this VertexDataSource.


        :param property_mapping: The property_mapping of this VertexDataSource.
        :type property_mapping: Dict[str, object]
        """

        self._property_mapping = property_mapping
