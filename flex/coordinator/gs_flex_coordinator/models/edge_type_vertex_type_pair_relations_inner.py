from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gs_flex_coordinator.models.base_model import Model
from gs_flex_coordinator.models.edge_type_vertex_type_pair_relations_inner_x_csr_params import EdgeTypeVertexTypePairRelationsInnerXCsrParams
from gs_flex_coordinator import util

from gs_flex_coordinator.models.edge_type_vertex_type_pair_relations_inner_x_csr_params import EdgeTypeVertexTypePairRelationsInnerXCsrParams  # noqa: E501

class EdgeTypeVertexTypePairRelationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_vertex=None, destination_vertex=None, relation=None, x_csr_params=None):  # noqa: E501
        """EdgeTypeVertexTypePairRelationsInner - a model defined in OpenAPI

        :param source_vertex: The source_vertex of this EdgeTypeVertexTypePairRelationsInner.  # noqa: E501
        :type source_vertex: str
        :param destination_vertex: The destination_vertex of this EdgeTypeVertexTypePairRelationsInner.  # noqa: E501
        :type destination_vertex: str
        :param relation: The relation of this EdgeTypeVertexTypePairRelationsInner.  # noqa: E501
        :type relation: str
        :param x_csr_params: The x_csr_params of this EdgeTypeVertexTypePairRelationsInner.  # noqa: E501
        :type x_csr_params: EdgeTypeVertexTypePairRelationsInnerXCsrParams
        """
        self.openapi_types = {
            'source_vertex': str,
            'destination_vertex': str,
            'relation': str,
            'x_csr_params': EdgeTypeVertexTypePairRelationsInnerXCsrParams
        }

        self.attribute_map = {
            'source_vertex': 'source_vertex',
            'destination_vertex': 'destination_vertex',
            'relation': 'relation',
            'x_csr_params': 'x_csr_params'
        }

        self._source_vertex = source_vertex
        self._destination_vertex = destination_vertex
        self._relation = relation
        self._x_csr_params = x_csr_params

    @classmethod
    def from_dict(cls, dikt) -> 'EdgeTypeVertexTypePairRelationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EdgeType_vertex_type_pair_relations_inner of this EdgeTypeVertexTypePairRelationsInner.  # noqa: E501
        :rtype: EdgeTypeVertexTypePairRelationsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_vertex(self) -> str:
        """Gets the source_vertex of this EdgeTypeVertexTypePairRelationsInner.


        :return: The source_vertex of this EdgeTypeVertexTypePairRelationsInner.
        :rtype: str
        """
        return self._source_vertex

    @source_vertex.setter
    def source_vertex(self, source_vertex: str):
        """Sets the source_vertex of this EdgeTypeVertexTypePairRelationsInner.


        :param source_vertex: The source_vertex of this EdgeTypeVertexTypePairRelationsInner.
        :type source_vertex: str
        """

        self._source_vertex = source_vertex

    @property
    def destination_vertex(self) -> str:
        """Gets the destination_vertex of this EdgeTypeVertexTypePairRelationsInner.


        :return: The destination_vertex of this EdgeTypeVertexTypePairRelationsInner.
        :rtype: str
        """
        return self._destination_vertex

    @destination_vertex.setter
    def destination_vertex(self, destination_vertex: str):
        """Sets the destination_vertex of this EdgeTypeVertexTypePairRelationsInner.


        :param destination_vertex: The destination_vertex of this EdgeTypeVertexTypePairRelationsInner.
        :type destination_vertex: str
        """

        self._destination_vertex = destination_vertex

    @property
    def relation(self) -> str:
        """Gets the relation of this EdgeTypeVertexTypePairRelationsInner.


        :return: The relation of this EdgeTypeVertexTypePairRelationsInner.
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation: str):
        """Sets the relation of this EdgeTypeVertexTypePairRelationsInner.


        :param relation: The relation of this EdgeTypeVertexTypePairRelationsInner.
        :type relation: str
        """
        allowed_values = ["MANY_TO_MANY", "ONE_TO_MANY", "MANY_TO_ONE", "ONE_TO_ONE"]  # noqa: E501
        if relation not in allowed_values:
            raise ValueError(
                "Invalid value for `relation` ({0}), must be one of {1}"
                .format(relation, allowed_values)
            )

        self._relation = relation

    @property
    def x_csr_params(self) -> EdgeTypeVertexTypePairRelationsInnerXCsrParams:
        """Gets the x_csr_params of this EdgeTypeVertexTypePairRelationsInner.


        :return: The x_csr_params of this EdgeTypeVertexTypePairRelationsInner.
        :rtype: EdgeTypeVertexTypePairRelationsInnerXCsrParams
        """
        return self._x_csr_params

    @x_csr_params.setter
    def x_csr_params(self, x_csr_params: EdgeTypeVertexTypePairRelationsInnerXCsrParams):
        """Sets the x_csr_params of this EdgeTypeVertexTypePairRelationsInner.


        :param x_csr_params: The x_csr_params of this EdgeTypeVertexTypePairRelationsInner.
        :type x_csr_params: EdgeTypeVertexTypePairRelationsInnerXCsrParams
        """

        self._x_csr_params = x_csr_params
