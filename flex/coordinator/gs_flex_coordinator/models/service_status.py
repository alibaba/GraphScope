from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gs_flex_coordinator.models.base_model import Model
from gs_flex_coordinator.models.get_graph_response import GetGraphResponse
from gs_flex_coordinator.models.service_status_sdk_endpoints import ServiceStatusSdkEndpoints
from gs_flex_coordinator import util

from gs_flex_coordinator.models.get_graph_response import GetGraphResponse  # noqa: E501
from gs_flex_coordinator.models.service_status_sdk_endpoints import ServiceStatusSdkEndpoints  # noqa: E501

class ServiceStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, graph=None, sdk_endpoints=None):  # noqa: E501
        """ServiceStatus - a model defined in OpenAPI

        :param status: The status of this ServiceStatus.  # noqa: E501
        :type status: str
        :param graph: The graph of this ServiceStatus.  # noqa: E501
        :type graph: GetGraphResponse
        :param sdk_endpoints: The sdk_endpoints of this ServiceStatus.  # noqa: E501
        :type sdk_endpoints: ServiceStatusSdkEndpoints
        """
        self.openapi_types = {
            'status': str,
            'graph': GetGraphResponse,
            'sdk_endpoints': ServiceStatusSdkEndpoints
        }

        self.attribute_map = {
            'status': 'status',
            'graph': 'graph',
            'sdk_endpoints': 'sdk_endpoints'
        }

        self._status = status
        self._graph = graph
        self._sdk_endpoints = sdk_endpoints

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceStatus of this ServiceStatus.  # noqa: E501
        :rtype: ServiceStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this ServiceStatus.


        :return: The status of this ServiceStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ServiceStatus.


        :param status: The status of this ServiceStatus.
        :type status: str
        """
        allowed_values = ["Running", "Stopped"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def graph(self) -> GetGraphResponse:
        """Gets the graph of this ServiceStatus.


        :return: The graph of this ServiceStatus.
        :rtype: GetGraphResponse
        """
        return self._graph

    @graph.setter
    def graph(self, graph: GetGraphResponse):
        """Sets the graph of this ServiceStatus.


        :param graph: The graph of this ServiceStatus.
        :type graph: GetGraphResponse
        """

        self._graph = graph

    @property
    def sdk_endpoints(self) -> ServiceStatusSdkEndpoints:
        """Gets the sdk_endpoints of this ServiceStatus.


        :return: The sdk_endpoints of this ServiceStatus.
        :rtype: ServiceStatusSdkEndpoints
        """
        return self._sdk_endpoints

    @sdk_endpoints.setter
    def sdk_endpoints(self, sdk_endpoints: ServiceStatusSdkEndpoints):
        """Sets the sdk_endpoints of this ServiceStatus.


        :param sdk_endpoints: The sdk_endpoints of this ServiceStatus.
        :type sdk_endpoints: ServiceStatusSdkEndpoints
        """

        self._sdk_endpoints = sdk_endpoints
