from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gs_flex_coordinator.models.base_model import Model
from gs_flex_coordinator.models.schema_mapping_loading_config_data_source import SchemaMappingLoadingConfigDataSource
from gs_flex_coordinator.models.schema_mapping_loading_config_format import SchemaMappingLoadingConfigFormat
from gs_flex_coordinator import util

from gs_flex_coordinator.models.schema_mapping_loading_config_data_source import SchemaMappingLoadingConfigDataSource  # noqa: E501
from gs_flex_coordinator.models.schema_mapping_loading_config_format import SchemaMappingLoadingConfigFormat  # noqa: E501

class SchemaMappingLoadingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source=None, import_option=None, format=None):  # noqa: E501
        """SchemaMappingLoadingConfig - a model defined in OpenAPI

        :param data_source: The data_source of this SchemaMappingLoadingConfig.  # noqa: E501
        :type data_source: SchemaMappingLoadingConfigDataSource
        :param import_option: The import_option of this SchemaMappingLoadingConfig.  # noqa: E501
        :type import_option: str
        :param format: The format of this SchemaMappingLoadingConfig.  # noqa: E501
        :type format: SchemaMappingLoadingConfigFormat
        """
        self.openapi_types = {
            'data_source': SchemaMappingLoadingConfigDataSource,
            'import_option': str,
            'format': SchemaMappingLoadingConfigFormat
        }

        self.attribute_map = {
            'data_source': 'data_source',
            'import_option': 'import_option',
            'format': 'format'
        }

        self._data_source = data_source
        self._import_option = import_option
        self._format = format

    @classmethod
    def from_dict(cls, dikt) -> 'SchemaMappingLoadingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SchemaMapping_loading_config of this SchemaMappingLoadingConfig.  # noqa: E501
        :rtype: SchemaMappingLoadingConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source(self) -> SchemaMappingLoadingConfigDataSource:
        """Gets the data_source of this SchemaMappingLoadingConfig.


        :return: The data_source of this SchemaMappingLoadingConfig.
        :rtype: SchemaMappingLoadingConfigDataSource
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source: SchemaMappingLoadingConfigDataSource):
        """Sets the data_source of this SchemaMappingLoadingConfig.


        :param data_source: The data_source of this SchemaMappingLoadingConfig.
        :type data_source: SchemaMappingLoadingConfigDataSource
        """

        self._data_source = data_source

    @property
    def import_option(self) -> str:
        """Gets the import_option of this SchemaMappingLoadingConfig.


        :return: The import_option of this SchemaMappingLoadingConfig.
        :rtype: str
        """
        return self._import_option

    @import_option.setter
    def import_option(self, import_option: str):
        """Sets the import_option of this SchemaMappingLoadingConfig.


        :param import_option: The import_option of this SchemaMappingLoadingConfig.
        :type import_option: str
        """
        allowed_values = ["init", "overwrite"]  # noqa: E501
        if import_option not in allowed_values:
            raise ValueError(
                "Invalid value for `import_option` ({0}), must be one of {1}"
                .format(import_option, allowed_values)
            )

        self._import_option = import_option

    @property
    def format(self) -> SchemaMappingLoadingConfigFormat:
        """Gets the format of this SchemaMappingLoadingConfig.


        :return: The format of this SchemaMappingLoadingConfig.
        :rtype: SchemaMappingLoadingConfigFormat
        """
        return self._format

    @format.setter
    def format(self, format: SchemaMappingLoadingConfigFormat):
        """Sets the format of this SchemaMappingLoadingConfig.


        :param format: The format of this SchemaMappingLoadingConfig.
        :type format: SchemaMappingLoadingConfigFormat
        """

        self._format = format
