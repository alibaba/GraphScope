from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gs_flex_coordinator.models.base_model import Model
from gs_flex_coordinator.models.groot_graph_gremlin_interface import GrootGraphGremlinInterface
from gs_flex_coordinator.models.groot_schema import GrootSchema
from gs_flex_coordinator import util

from gs_flex_coordinator.models.groot_graph_gremlin_interface import GrootGraphGremlinInterface  # noqa: E501
from gs_flex_coordinator.models.groot_schema import GrootSchema  # noqa: E501

class GrootGraph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, type=None, directed=None, creation_time=None, _schema=None, gremlin_interface=None):  # noqa: E501
        """GrootGraph - a model defined in OpenAPI

        :param name: The name of this GrootGraph.  # noqa: E501
        :type name: str
        :param type: The type of this GrootGraph.  # noqa: E501
        :type type: str
        :param directed: The directed of this GrootGraph.  # noqa: E501
        :type directed: bool
        :param creation_time: The creation_time of this GrootGraph.  # noqa: E501
        :type creation_time: str
        :param _schema: The _schema of this GrootGraph.  # noqa: E501
        :type _schema: GrootSchema
        :param gremlin_interface: The gremlin_interface of this GrootGraph.  # noqa: E501
        :type gremlin_interface: GrootGraphGremlinInterface
        """
        self.openapi_types = {
            'name': str,
            'type': str,
            'directed': bool,
            'creation_time': str,
            '_schema': GrootSchema,
            'gremlin_interface': GrootGraphGremlinInterface
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'directed': 'directed',
            'creation_time': 'creation_time',
            '_schema': 'schema',
            'gremlin_interface': 'gremlin_interface'
        }

        self._name = name
        self._type = type
        self._directed = directed
        self._creation_time = creation_time
        self.__schema = _schema
        self._gremlin_interface = gremlin_interface

    @classmethod
    def from_dict(cls, dikt) -> 'GrootGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GrootGraph of this GrootGraph.  # noqa: E501
        :rtype: GrootGraph
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this GrootGraph.


        :return: The name of this GrootGraph.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GrootGraph.


        :param name: The name of this GrootGraph.
        :type name: str
        """

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this GrootGraph.


        :return: The type of this GrootGraph.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this GrootGraph.


        :param type: The type of this GrootGraph.
        :type type: str
        """
        allowed_values = ["GrootGraph"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def directed(self) -> bool:
        """Gets the directed of this GrootGraph.


        :return: The directed of this GrootGraph.
        :rtype: bool
        """
        return self._directed

    @directed.setter
    def directed(self, directed: bool):
        """Sets the directed of this GrootGraph.


        :param directed: The directed of this GrootGraph.
        :type directed: bool
        """

        self._directed = directed

    @property
    def creation_time(self) -> str:
        """Gets the creation_time of this GrootGraph.


        :return: The creation_time of this GrootGraph.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time: str):
        """Sets the creation_time of this GrootGraph.


        :param creation_time: The creation_time of this GrootGraph.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def _schema(self) -> GrootSchema:
        """Gets the _schema of this GrootGraph.


        :return: The _schema of this GrootGraph.
        :rtype: GrootSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema: GrootSchema):
        """Sets the _schema of this GrootGraph.


        :param _schema: The _schema of this GrootGraph.
        :type _schema: GrootSchema
        """

        self.__schema = _schema

    @property
    def gremlin_interface(self) -> GrootGraphGremlinInterface:
        """Gets the gremlin_interface of this GrootGraph.


        :return: The gremlin_interface of this GrootGraph.
        :rtype: GrootGraphGremlinInterface
        """
        return self._gremlin_interface

    @gremlin_interface.setter
    def gremlin_interface(self, gremlin_interface: GrootGraphGremlinInterface):
        """Sets the gremlin_interface of this GrootGraph.


        :param gremlin_interface: The gremlin_interface of this GrootGraph.
        :type gremlin_interface: GrootGraphGremlinInterface
        """

        self._gremlin_interface = gremlin_interface
