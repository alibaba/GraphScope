#!/usr/bin/env bash
# This script was generated by bashly 0.9.3 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  echo "# this file is located in 'src/root_command.sh'"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

  # TODO: parse args and make.
  echo "artifact: graphscope_flex_${args[--app]}_"+${$comps// /_}+".deb is built."

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
flexbuild_usage() {
  if [[ -n $long_usage ]]; then
    printf "flexbuild - Utility script to build artifacts for GraphScope Flex\n"
    echo

  else
    printf "flexbuild - Utility script to build artifacts for GraphScope Flex\n"
    echo

  fi

  printf "Usage:\n"
  printf "  flexbuild [SOURCE] [OPTIONS]\n"
  printf "  flexbuild --help | -h\n"
  printf "  flexbuild --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --app, -a ATYPE (required)"
    printf "    Application type.\n"
    printf "    Allowed: db, olap\n"
    echo

    # :flag.usage
    echo "  --components, -c CPNS (required) (repeatable)"
    printf "    Selected components for Flex build\n"
    printf "    Allowed: cppsp, hiactor, mcsr, grape\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  SOURCE"
    printf "    SOURCE_DIR to build\n"
    printf "    Default: .\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  ./flexbuild --app db -c cppsp -c hiactor\n"
    printf "  ./flexbuild --app olap --components grape\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if ((${#args[@]})); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        flexbuild_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --app | -a)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--app']="$2"
          shift
          shift
        else
          printf "%s\n" "--app requires an argument: --app, -a ATYPE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --components | -c)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          if [[ -z ${args['--components']+x} ]]; then
            args['--components']="\"$2\""
          else
            args['--components']="${args[--components]} \"$2\""
          fi
          shift
          shift
        else
          printf "%s\n" "--components requires an argument: --components, -c CPNS" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['source']+x} ]]; then

          args['source']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args['--app']+x} ]]; then
    printf "missing required flag: --app, -a ATYPE\n" >&2
    exit 1
  fi
  if [[ -z ${args['--components']+x} ]]; then
    printf "missing required flag: --components, -c CPNS\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['source']:-} ]] || args['source']="."

  # :command.whitelist_filter
  if [[ ! ${args['--app']} =~ ^(db|olap)$ ]]; then
    printf "%s\n" "--app must be one of: db, olap" >&2
    exit 1
  fi
  eval "input_array=(${args[--components]})"
  for i in "${input_array[@]}"; do
    if [[ ! $i =~ ^(cppsp|hiactor|mcsr|grape)$ ]]; then
      printf "%s\n" "--components must be one of: cppsp, hiactor, mcsr, grape" >&2
      exit 1
    fi
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root")
      root_command
      ;;

  esac
}

initialize
run "$@"
