#!/usr/bin/env bash
# This script was generated by bashly 1.0.6 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  echo "# this file is located in 'src/root_command.sh'"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

  if [ ${args[--app]} == "db" ]; then
    echo "reach db"
    package_name="db"
    comps=''
    eval "comps=(${args[components]})"
    for i in "${comps[@]}"; do
      package_name="${package_name}_${i}"
    done
    echo $package_name
    output_dir=`pwd`
    echo $output_dir
    build_dir=`mktemp -d`
    pushd $build_dir
    cmd="cmake -DCPACK_PACKAGE_NAME=${package_name} ${output_dir} && make -j && make package && mv ${package_name}*.deb ${output_dir}/"
    echo $cmd
    eval $cmd
    popd
  else
    echo "not reach db"
  fi

  # TODO: parse args and make.
  # echo "artifact: graphscope_flex_${args[--app]}_"+${$comps// /_}+".deb is built."

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
flexbuild_usage() {
  if [[ -n $long_usage ]]; then
    printf "flexbuild - Utility script to build artifacts for GraphScope Flex\n"
    echo

  else
    printf "flexbuild - Utility script to build artifacts for GraphScope Flex\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  flexbuild COMPONENTS... [OPTIONS]\n"
  printf "  flexbuild --help | -h\n"
  printf "  flexbuild --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--app, -a ATYPE (required)"
    printf "    Application type.\n"
    printf "    Allowed: db, olap\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "COMPONENTS..."
    printf "    components to include and link\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ./flexbuild cppsp hiactor --app db\n"
    printf "  ./flexbuild grape --app olap\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        flexbuild_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --app | -a)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--app']="$2"
          shift
          shift
        else
          printf "%s\n" "--app requires an argument: --app, -a ATYPE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_repeatable

        if [[ -z ${args['components']+x} ]]; then
          args['components']="\"$1\""
          shift
        else
          args['components']="${args[components]} \"$1\""
          shift
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['components']+x} ]]; then
    printf "missing required argument: COMPONENTS\nusage: flexbuild COMPONENTS... [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.required_flags_filter
  if [[ -z ${args['--app']+x} ]]; then
    printf "missing required flag: --app, -a ATYPE\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ ${args['--app']} ]] && [[ ! ${args['--app']} =~ ^(db|olap)$ ]]; then
    printf "%s\n" "--app must be one of: db, olap" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
