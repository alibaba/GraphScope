#!/usr/bin/env bash
# This script was generated by bashly 0.8.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  # echo "# this file is located in 'src/root_command.sh'"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"
  # inspect_args

  function build_grape_cpu {
    target_name=$1

    tmp_dir=`mktemp -d`
    pushd ${tmp_dir} > /dev/null
    cmake_options=""
    # if [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    if [[ $(uname -s) == Linux* ]];then
      # Do something under GNU/Linux platform
      if grep -q avx512 /proc/cpuinfo; then
        cmake_options="${cmake_options} -DUSE_SIMD=ON"
      fi
      if grep -q HugePages_Total /proc/meminfo; then
        hpn=`grep HugePages_Total /proc/meminfo | cut -d ':' -f 2`
        if [[ $hpn -gt 0 ]]; then
          cmake_options="${cmake_options} -DUSE_HUGEPAGES=ON"
        fi
      fi
    fi
    cmd="git clone https://github.com/alibaba/libgrape-lite.git && cd libgrape-lite && git submodule update --init --recursive && mkdir build && cd build && cmake ${cmake_options} .. && make analytical_apps -j && mv run_app ${target_name}"
    echo $cmd
    eval $cmd
    popd > /dev/null
  }

  function build_grape_gpu {
    target_name=$1
    if nvidia-smi &> /dev/null; then
      tmp_dir=`mktemp -d`
      pushd ${tmp_dir} > /dev/null
      cmd="git clone https://github.com/alibaba/libgrape-lite.git && cd libgrape-lite && git submodule update --init --recursive && mkdir build && cd build && cmake .. && make gpu_analytical_apps -j && mv run_cuda_app ${target_name}"
      echo $cmd
      eval $cmd
      popd > /dev/null
    else
      echo "Building libgrape-gpu failed: GPU is not found"
    fi
  }

  function build_grape_ldbc_driver {
    package_name=$1

    tmp_dir=`mktemp -d`
    pushd ${tmp_dir} > /dev/null
    cmd="git clone https://github.com/alibaba/libgrape-lite.git && cd libgrape-lite/ldbc_driver/ && mvn package && mv graphalytics-*-bin.tar.gz ${package_name}"
    echo $cmd
    eval $cmd
    popd > /dev/null
  }

  SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

  ars=()

  output_dir=`realpath ${args[--output_dir]}`
  mkdir -p ${output_dir}

  if [ ${args[--app]} == "db" ]; then
    package_name="graphscope_flex_${args[--app]}"
    comps=""
    eval "comps=(${args[components]})"
    for i in "${comps[@]}"; do
      package_name="${package_name}_${i}"
    done
    build_dir=`mktemp -d`
    pushd $build_dir > /dev/null
    cmd="cmake -DCPACK_PACKAGE_NAME=${package_name} ${SCRIPT_DIR} && make -j && make package && mv ${package_name}*.deb ${output_dir}/"
    echo $cmd
    eval $cmd
    fname=`ls ${output_dir}/*.deb`
    ars+=("${fname}")
    popd > /dev/null
  elif [ ${args[--app]} == "olap" ]; then
    target_name="graphscope_flex_${args[--app]}"
    comps=""
    eval "comps=(${args[components]})"
    for i in "${comps[@]}"; do
      target_name="${target_name}_${i}"
    done
    if [[ " ${comps[*]} " =~ " grape-cpu " ]]; then
      build_grape_cpu ${output_dir}/${target_name}
    elif [[ " ${comps[*]} " =~ " grape-gpu " ]]; then
      build_grape_gpu ${output_dir}/${target_name}
    fi
    ars+=("${target_name}")
  elif [ ${args[--app]} == "ldbcdriver" ]; then
    target_name="graphscope_flex_olap"
    comps=""
    eval "comps=(${args[components]})"
    for i in "${comps[@]}"; do
      target_name="${target_name}_${i}"
    done
    if [[ " ${comps[*]} " =~ " grape-cpu " ]]; then
      build_grape_cpu ${output_dir}/${target_name}
    elif [[ " ${comps[*]} " =~ " grape-gpu " ]]; then
      build_grape_gpu ${output_dir}/${target_name}
    fi

    package_name="graphscope_flex_ldbcdriver"
    for i in "${comps[@]}"; do
      package_name="${package_name}_${i}"
    done
    package_name="${package_name}-SNAPSHOT-bin.tar.gz"

    build_grape_ldbc_driver ${output_dir}/${package_name}
    ars+=("${package_name}")

  elif [ ${args[--app]} == "gnn" ]; then
    target_name="graphscope_flex_gnn_gnnmodels_graphlearn_tensorflow_vineyard"
    pushd ${SCRIPT_DIR}/../ > /dev/null
    make learning
    mv learning_engine/graph-learn/graphlearn/built/lib/libgraphlearn_shared* ${output_dir}/
    fname=`ls ${output_dir}/libgraphlearn_shared*`
    ext="${fname##*.}"
    mv ${fname} ${output_dir}/${target_name}.${ext}
    ars+=("${target_name}.${ext}")
    popd > /dev/null
  else
    echo "$(red Unsupported composition: ${args[--app]} and ${args[components]})"
  fi

  echo "$(green_bold GraphScope Flex artifacts for customized deployment are built.)"
  echo

  echo "artifacts: "
  for x in "${ars[@]}"; do
    echo "$(green $x)"
  done

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
flexbuild_usage() {
  if [[ -n $long_usage ]]; then
    printf "flexbuild - Utility script to build artifacts for GraphScope Flex\n"
    echo

  else
    printf "flexbuild - Utility script to build artifacts for GraphScope Flex\n"
    echo

  fi

  printf "Usage:\n"
  printf "  flexbuild COMPONENTS... [OPTIONS]\n"
  printf "  flexbuild --help | -h\n"
  printf "  flexbuild --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --app, -a ATYPE (required)"
    printf "    Application type\n"
    printf "    Allowed: db, olap, ldbcdriver, gnn\n"
    echo

    # :flag.usage
    echo "  --output_dir, -o NAME"
    printf "    Output prefix\n"
    printf "    Default: .\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  COMPONENTS..."
    printf "    Components (LEGO bricks) to include and link\n"
    printf "    Allowed: cppsp, builtin, hiactor, gaia, grape-cpu, grape-gpu, vineyard, mcsr, gnnmodels, graphlearn, tensorflow\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  ./flexbuild cppsp hiactor mcsr --app db --output_dir ./output\n"
    printf "  ./flexbuild builtin grape-cpu --app olap\n"
    printf "  ./flexbuild builtin grape-gpu --app ldbcdriver\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*";
  else
    printf "%b\n" "$*";
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    flexbuild_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --app | -a )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--app]="$2"
        shift
        shift
      else
        printf "%s\n" "--app requires an argument: --app, -a ATYPE" >&2
        exit 1
      fi
      ;;

    # :flag.case
    --output_dir | -o )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--output_dir]="$2"
        shift
        shift
      else
        printf "%s\n" "--output_dir requires an argument: --output_dir, -o NAME" >&2
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_repeatable
      if [[ -z ${args[components]+x} ]]; then

        args[components]="\"$1\""
        shift
      else
        args[components]="${args[components]} \"$1\""
        shift
      fi

      ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args[components]+x} ]]; then
    printf "missing required argument: COMPONENTS\nusage: flexbuild COMPONENTS... [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.required_flags_filter
  if [[ -z ${args[--app]+x} ]]; then
    printf "missing required flag: --app, -a ATYPE\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args[--output_dir]:-} ]] || args[--output_dir]="."

  # :command.whitelist_filter
  eval "input_array=(${args[components]})"
  for i in "${input_array[@]}"; do
    if [[ ! $i =~ ^(cppsp|builtin|hiactor|gaia|grape-cpu|grape-gpu|vineyard|mcsr|gnnmodels|graphlearn|tensorflow)$ ]]; then
      printf "%s\n" "components must be one of: cppsp, builtin, hiactor, gaia, grape-cpu, grape-gpu, vineyard, mcsr, gnnmodels, graphlearn, tensorflow" >&2
      exit 1
    fi
  done
  if [[ ! ${args[--app]} =~ ^(db|olap|ldbcdriver|gnn)$ ]]; then
    printf "%s\n" "--app must be one of: db, olap, ldbcdriver, gnn" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
