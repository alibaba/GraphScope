#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright 2020 Alibaba Group Holding Limited. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import hashlib
import json

from graphscope.framework.utils import unify_type
from graphscope.proto import types_pb2


class GraphSchema:
    """Hold schema of a graph.

    Attributes:
        oid_type (str): Original ID type
        vid_type (str): Internal ID representation
        vdata_type (str): Type of the data that holding by vertex (simple graph only)
        edata_type (str): Type of the data that holding by edge (simple graph only)
        vertex_labels (list): Label names of vertex
        edge_labels (list): Label names of edge
        vertex_properties (list(dict)): Properties of each vertex label
        edge_properties (list(dict)): Properties of each edge label
        edge_relationships (list(list(tuple))): Source label and destination label of each edge label
    """

    def __init__(self):
        self._oid_type = None
        self._vid_type = None
        # simple graph only
        self._vdata_type = types_pb2.INVALID
        # simple graph only
        self._edata_type = types_pb2.INVALID
        self._schema = None
        # list of names
        self._vertex_labels = []
        # list of names
        self._edge_labels = []
        # relationships of edges
        self._edge_relationships = []
        # list of dict (each label corresponds to a dict: {property_name: type})
        self._vertex_properties = []
        # list of dict (each label corresponds to a dict: {property_name: type})
        self._edge_properties = []

    def get_schema_from_def(self, schema_def):
        """Decode informations from proto message, generated by engine.

        Args:
            schema_def (`GraphSchemaDef`): Proto message defined in `proto/graph_def.proto`.

        Raises:
            ValueError: If the schema is not valid.
        """
        self._oid_type = schema_def.oid_type
        self._vid_type = schema_def.vid_type

        # simple graph schema.
        if schema_def.vdata_type:
            self._vdata_type = unify_type(schema_def.vdata_type)
        if schema_def.edata_type:
            self._edata_type = unify_type(schema_def.edata_type)

        # property graph schema
        if schema_def.property_schema_json:
            try:
                self._schema = json.loads(schema_def.property_schema_json)
                if self._schema:
                    for item in self._schema["types"]:
                        if item["type"] == "VERTEX":
                            self._vertex_labels.append(item["label"])
                            self._vertex_properties.append(
                                {
                                    prop["name"]: unify_type(prop["data_type"])
                                    for prop in item["propertyDefList"]
                                }
                            )
                        elif item["type"] == "EDGE":
                            self._edge_labels.append(item["label"])
                            self._edge_properties.append(
                                {
                                    prop["name"]: unify_type(prop["data_type"])
                                    for prop in item["propertyDefList"]
                                }
                            )
                            relation = [
                                (rel["srcVertexLabel"], rel["dstVertexLabel"])
                                for rel in item["rawRelationShips"]
                            ]
                            self._edge_relationships.append(relation)
            except Exception as e:
                raise ValueError("Invalid property graph schema") from e

    def init_nx_schema(self, gs_schema=None):
        """Schema for `nx.Graph`

        Args:
            gs_schema (`GraphSchema`, optional): schema of a graphscope `Graph`. Defaults to None.
        """
        if gs_schema is not None:
            for props in gs_schema.vertex_properties:
                self._vertex_properties[0].update(props)
            for props in gs_schema.edge_properties:
                self._edge_properties[0].update(props)
        else:
            self._vertex_labels.append("_")
            self._edge_labels.append("_")
            self._vertex_properties.append(dict())
            self._edge_properties.append(dict())
            self._edge_relationships.append([("_", "_")])

    def __repr__(self):
        s = f"oid_type: {self._oid_type}\nvid_type: {self._vid_type}\n"
        if (
            self._vdata_type != types_pb2.INVALID
            and self._edata_type != types_pb2.INVALID
        ):
            s += f"vdata_type: {types_pb2.DataType.Name(self._vdata_type)}\n"
            s += f"edata_type: {types_pb2.DataType.Name(self._edata_type)}\n"
        for index, label in enumerate(self._vertex_labels):
            props = list(self._vertex_properties[index].keys())
            s += f"label: {label}\ntype: VERTEX\nproperties: {props}\n\n"
        for index, label in enumerate(self.edge_labels):
            props = list(self._edge_properties[index].keys())
            s += f"""label: {label}\ntype: EDGE\nproperties: {props}\nrelations: {self._edge_relationships[index]}\n\n"""
        return s

    def __str__(self):
        return self.__repr__()

    @property
    def oid_type(self):
        return self._oid_type

    @property
    def vid_type(self):
        return self._vid_type

    @property
    def vdata_type(self):
        # NB: simple graph only contain a single vertex property.
        return self._vdata_type

    @property
    def edata_type(self):
        # NB: simple graph only contain a single edge property.
        return self._edata_type

    @property
    def vertex_labels(self):
        return self._vertex_labels

    @property
    def edge_labels(self):
        return self._edge_labels

    @property
    def edge_relationships(self):
        return self._edge_relationships

    @property
    def vertex_label_num(self):
        return len(self._vertex_labels)

    @property
    def edge_label_num(self):
        return len(self._edge_labels)

    @property
    def vertex_properties(self):
        return self._vertex_properties

    @property
    def edge_properties(self):
        return self._edge_properties

    def vertex_label_index(self, label):
        return self.vertex_labels.index(label)

    def edge_label_index(self, label):
        return self.edge_labels.index(label)

    def vertex_property_index(self, label_id, prop):
        return list(self.vertex_properties[label_id].keys()).index(prop)

    def edge_property_index(self, label_id, prop):
        return list(self.edge_properties[label_id].keys()).index(prop)

    def add_vertex_properties(self, properties) -> bool:
        for key, value in properties.items():
            try:
                prop_type = unify_type(type(value))
                if key in self._vertex_properties[0]:
                    if prop_type != self._vertex_properties[0][key]:
                        return False
                else:
                    self._vertex_properties[0][key] = prop_type
            except TypeError:
                return False
        return True

    def add_edge_properties(self, properties) -> bool:
        for key, value in properties.items():
            try:
                prop_type = unify_type(type(value))
                if key in self._edge_properties[0]:
                    if prop_type != self._edge_properties[0][key]:
                        return False
                else:
                    self._edge_properties[0][key] = prop_type
            except TypeError:
                return False
        return True

    def clear(self):
        self._oid_type = None
        self._vid_type = None
        self._vdata_type = None
        self._edata_type = None
        self._schema = None
        self._vertex_labels.clear()
        self._edge_labels.clear()
        self._vertex_properties.clear()
        self._edge_properties.clear()

    def signature(self):
        return hashlib.sha256("{}".format(self.__repr__()).encode("utf-8")).hexdigest()
