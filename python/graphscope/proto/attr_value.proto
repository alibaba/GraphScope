/**
 *
 * The file proto/attr_value.proto is referred and derived from project
 * tensorflow,
 *
 *    https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/attr_value.proto
 *
 * which has the following license:
 *
 *
 Copyright 2015 The TensorFlow Authors. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================
 */
syntax = "proto3";

package gs.rpc;

// Comment indicates the corresponding attr type. Only the field matching the
// attr type may be filled.
message AttrValue {
  enum NullValue { NULL_VALUE = 0; }

  // Allows recursive nesting
  message ListValue {
    repeated bytes s = 2;                         // "list(string)"
    repeated int64 i = 3 [ packed = true ];       // "list(int)"
    repeated float f = 4 [ packed = true ];       // "list(float)"
    repeated bool b = 5 [ packed = true ];        // "list(bool)"
    repeated NameAttrList func = 9;               // "list(attr)"
    repeated ListValue list = 10;                 // "list(list)
  }

  oneof value {
    NullValue null = 1;    // "null"
    bytes s = 2;           // "string"
    int64 i = 3;           // "int"
    uint64 u = 4;          // "uint64"
    float f = 5;           // "float"
    bool b = 6;            // "bool"
    ListValue list = 11;    // any "list(...)"
    NameAttrList func = 12;
  }
}

// A list of attr names and their values.
message NameAttrList {
  string name = 1;
  map<int32, AttrValue> attr = 2;
}

// Chunk, ChunkMeta and LargeAttrValue is used for storing chunks of
// huge bytes, which is larger than the GRPC message limits(2 GB) 
message Chunk {
  bytes buffer = 1;
  map<int32, AttrValue> attr = 2;
}

message ChunkMeta {
  // total buffer size of the chunk
  int64 size = 1;
  map<int32, AttrValue> attr = 3;
}

// AttrValue for large chunk.
message LargeAttrValue {
  message ChunkList {
    repeated Chunk items = 1;
  }

  message ChunkMetaList {
    repeated ChunkMeta items = 1;
  }

  oneof large_value {
    ChunkList chunk_list = 1;
    ChunkMetaList chunk_meta_list = 2;
  }
}
