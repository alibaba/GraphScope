{{- $frontendFullname := include "graphscope-interactive.frontend.fullname" . }}
{{- $engineFullName := include "graphscope-interactive.engine.fullname" . }}
{{- $releaseNamespace := .Release.Namespace }}
{{- $clusterDomain := .Values.clusterDomain }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "graphscope-interactive.engine.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- include "graphscope-interactive.labels" . | nindent 4 }}
    app.kubernetes.io/component: engine
    {{- if .Values.commonLabels }}
    {{- include "graphscope-interactive.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "graphscope-interactive.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.engine.replicaCount }}
  selector:
    matchLabels: {{ include "graphscope-interactive.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: engine
  serviceName: {{ include "graphscope-interactive.engine.fullname" . }}-headless
  updateStrategy:
    type: {{ .Values.engine.updateStrategy }}
    {{- if (eq "Recreate" .Values.engine.updateStrategy) }}
    rollingUpdate: null
    {{- end }}
  template:
    metadata:
      annotations:
        {{- if .Values.engine.podAnnotations }}
        {{- include "graphscope-interactive.tplvalues.render" (dict "value" .Values.engine.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels: {{- include "graphscope-interactive.labels" . | nindent 8 }}
        app.kubernetes.io/component: engine
        {{- if .Values.commonLabels }}
        {{- include "graphscope-interactive.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets: {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "graphscope-interactive.serviceAccountName" . }}
      {{- if .Values.engine.affinity }}
      affinity: {{- include "graphscope-interactive.tplvalues.render" (dict "value" .Values.engine.affinity "context" $) | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.engine.initContainers }}
        {{- include "graphscope-interactive.tplvalues.render" (dict "value" .Values.engine.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: engine
          image: {{ include "graphscope-interactive.engine.image" . }}
          imagePullPolicy: {{ .Values.engine.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -c
            - |
              echo "Starting engine..."
              # first check engine_config.yaml exists
              if [ ! -f ${ENGINE_CONFIG_PATH} ]; then
                #error exit
                echo "${ENGINE_CONFIG_PATH} not found, exiting..."
                exit 1
              fi
              # then check interactive_server binary exists and executable
              if [ ! -x ${ENGINE_BINARY_PATH} ]; then
                #error exit
                echo "${ENGINE_BINARY_PATH} binary not found or not executable, exiting..."
                exit 1
              fi
              # always try to load the builin graph: gs_interactive_default_graph
              # for case CURRENT_GRAPH is not the default_graph, we assume the data is already loaded.
              # TODO.
              builtin_graph_schema_path="${INTERACTIVE_WORKSPACE}/data/${DEFAULT_GRAPH_NAME}/graph.yaml"
              builtin_graph_data_path="${INTERACTIVE_WORKSPACE}/data/${DEFAULT_GRAPH_NAME}/indices/"
              builtin_graph_import_path="${INTERACTIVE_WORKSPACE}/data/${DEFAULT_GRAPH_NAME}/bulk_load.yaml"
              # if builtin_graph_data_path exists, skip
              if [ ! -d ${builtin_graph_data_path} ]; then
                mkdir -p ${INTERACTIVE_WORKSPACE}/data/${DEFAULT_GRAPH_NAME}
                echo "Loading builtin graph: ${DEFAULT_GRAPH_NAME} with command: $builtin_graph_loader_cmd"
                cp /opt/flex/share/gs_interactive_default_graph/modern_graph.yaml ${builtin_graph_schema_path}
                cp /opt/flex/share/gs_interactive_default_graph/bulk_load.yaml ${builtin_graph_import_path}
                export FLEX_DATA_DIR=/opt/flex/share/gs_interactive_default_graph/

                builtin_graph_loader_cmd="${BULK_LOADER_BINARY_PATH} -g ${builtin_graph_schema_path} -d ${builtin_graph_data_path} -l ${builtin_graph_import_path}"
                echo "Loading builtin graph: ${DEFAULT_GRAPH_NAME} with command: $builtin_graph_loader_cmd"
                eval $builtin_graph_loader_cmd
              fi

              bash /etc/interactive/setup.sh
              cmd="GLOG_v=10 ${ENGINE_BINARY_PATH} -c ${REAL_ENGINE_CONFIG_PATH}"
              #cmd="${cmd} --enable-admin-service false -w ${INTERACTIVE_WORKSPACE}"
              cmd="${cmd} -g ${builtin_graph_schema_path} --data-path ${builtin_graph_data_path}"
              echo "Starting engine with command: $cmd"
              eval $cmd
          env:
            - name: INTERACTIVE_WORKSPACE
              value: {{ .Values.workspace | quote }}
            - name: ENGINE_SERVICE_HOST
              value: {{ $engineFullName }}-headless.{{ $releaseNamespace }}.svc.{{ $clusterDomain }}
            - name: ENGINE_CONFIG_PATH
              value: {{ include "graphscope-interactive.engineConfigPath" . }}
            - name: REAL_ENGINE_CONFIG_PATH
              value: {{ include "graphscope-interactive.realEngineConfigPath" . }}
            - name: ENGINE_BINARY_PATH
              value: {{ include "graphscope-interactive.engineBinaryPath" . }}
            - name: ENGINE_SHARD_NUM
              value: {{ .Values.engine.threadNumPerWorker | quote }}
            - name: BULK_LOADER_BINARY_PATH
              value: /opt/flex/bin/bulk_loader
            - name: DEFAULT_GRAPH_NAME
              value: {{ .Values.defaultGraph }}
          ports:
            - name: admin-port
              containerPort: {{ .Values.engine.service.adminPort }}
            - name: query-port
              containerPort: {{ .Values.engine.service.queryPort }}
          {{- if .Values.engine.resources }}
          resources: {{- toYaml .Values.engine.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: workspace
              mountPath: {{ .Values.workspace }}
            - name: config
              mountPath: {{ include "graphscope-interactive.engineConfigPath" . }}
              subPath: engine_config.yaml
            - name: config
              mountPath: /etc/interactive/setup.sh
              subPath: setup.sh
      volumes:
        - name: config
          configMap:
            name: {{ include "graphscope-interactive.configmapName" . }}
            defaultMode: 0755
  {{- if and .Values.engine.persistence.enabled .Values.engine.persistence.existingClaim }}
        - name: workspace
          persistentVolumeClaim:
            claimName: {{ tpl .Values.engine.persistence.existingClaim . }}
  {{- else if not .Values.engine.persistence.enabled }}
        - name: workspace
          emptyDir: {}
  {{- else if and .Values.engine.persistence.enabled (not .Values.engine.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: workspace
        {{- if .Values.persistence.annotations }}
        annotations: {{- include "common.tplvalues.render" (dict "value" .Values.persistence.annotations "context" $) | nindent 10 }}
        {{- end }}
        {{- if .Values.persistence.labels }}
        labels: {{- include "common.tplvalues.render" (dict "value" .Values.persistence.labels "context" $) | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.engine.persistence.size | quote }}
        {{ include "graphscope-interactive.storageClass" . | nindent 8 }}
        {{- if .Values.engine.persistence.selector }}
        selector: {{- include "graphscope-interactive.tplvalues.render" (dict "value" .Values.engine.persistence.selector "context" $) | nindent 10 }}
        {{- end -}}
  {{- end }}
