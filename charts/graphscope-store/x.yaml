---
# Source: graphscope-store/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-graphscope-store
  namespace: "default"
  labels:
    app.kubernetes.io/name: graphscope-store
    helm.sh/chart: graphscope-store-0.28.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.4.0"
  annotations:
automountServiceAccountToken: true
---
# Source: graphscope-store/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-graphscope-store
  namespace: default
  labels:
    app.kubernetes.io/name: graphscope-store
    helm.sh/chart: graphscope-store-0.28.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.4.0"
    app.kubernetes.io/component: configmap
data:
  groot.config: |-
    ## Common Config
    rpc.port=0
    discovery.mode=zookeeper

    role.name=ROLE
    node.idx=INDEX

    store.node.count=1
    frontend.node.count=1
    coordinator.node.count=1
    partition.count=16

    ## Frontend Config
    frontend.service.port=55556
    frontend.server.id=INDEX
    frontend.server.num=1

    ## Store Config
    store.data.path=/var/lib/graphscope-store
    store.write.thread.count=1
    store.queue.buffer.size=102400

    ## Zk Config
    zk.base.path=/graphscope/groot
    zk.connect.string=ZK_CONNECT

    ## Kafka Config
    kafka.servers=KAFKA_SERVERS
    kafka.topic=graphscope
    kafka.producer.custom.configs=
    kafka.test.cluster.enable=false

    ## Frontend Config
    gremlin.server.port=12312
    ## disable neo4j when launching groot server by default
    neo4j.bolt.server.disabled=true

    log4rs.config=LOG4RS_CONFIG
    release.full.name=RELEASE_FULL_NAME
    ## Auth config
    auth.username=
    auth.password=

    # Pegasus config
    pegasus.worker.num=1
    pegasus.timeout=240000
    pegasus.batch.size=1024
    pegasus.output.capacity=16

    ## Secondary config
    secondary.instance.enabled=false
    store.data.secondary.path=./data_secondary
    store.gc.interval.ms=5000

    write.ha.enabled=false
    tracing.enabled=false

    ## Coordinator Config
    rpc.max.bytes.mb=20
    snapshot.increase.interval.ms=1000
    offsets.persist.interval.ms=3000
    file.meta.store.path=/etc/groot/my.meta
    log.recycle.enable=true

    ## Extra Config
  setup.sh: |-
    #!/bin/bash

    sudo chown -R graphscope:graphscope /var/lib/graphscope-store || true
    sudo chown -R graphscope:graphscope /etc/groot || true

    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    ordinal=${BASH_REMATCH[1]}

    sudo sed  -e "s/ROLE/${ROLE}/g" \
              -e "s/INDEX/${ordinal}/g" \
              -e "s/RELEASE_FULL_NAME/${RELEASE_FULL_NAME}/g" \
              -e "s/ZK_CONNECT/${ZK_CONNECT}/g" \
              -e "s/KAFKA_SERVERS/${KAFKA_SERVERS}/g" \
              -e "s@LOG4RS_CONFIG@${GRAPHSCOPE_HOME}/groot/conf/log4rs.yml@g" \
    /etc/groot/groot.config.tpl | sudo tee -a /etc/groot/groot.config

    export LOG_NAME=graphscope-store
    export GROOT_CONF_FILE=/etc/groot/groot.config

    # For core and heap profiling
    # ulimit -c unlimited
    # sudo mkdir -p /apsara/cloud/data/corefile/ && sudo chown -R graphscope:graphscope /apsara/cloud/data/corefile/
    # export _RJEM_MALLOC_CONF=prof:true,lg_prof_interval:32,lg_prof_sample:19
    # export MALLOC_CONF=prof:true,lg_prof_interval:32

    export RUST_BACKTRACE=1
    ${GRAPHSCOPE_HOME}/groot/bin/store_ctl.sh start ${ROLE}  # || sleep infinity
---
# Source: graphscope-store/templates/onepod/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-graphscope-store-store
  namespace: default
  labels:
    app.kubernetes.io/name: graphscope-store
    helm.sh/chart: graphscope-store-0.28.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.4.0"
    app.kubernetes.io/component: store
  annotations:
spec:
  type: NodePort
  externalTrafficPolicy: "Cluster"
  ports:
    - name: grpc
      port: 55556
      protocol: TCP
      targetPort: grpc
    - name: gremlin
      port: 12312
      protocol: TCP
      targetPort: gremlin
  selector:
    app.kubernetes.io/name: graphscope-store
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: store
---
# Source: graphscope-store/templates/onepod/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: store
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: graphscope-store
    app.kubernetes.io/version: 3.4.0
    helm.sh/chart: graphscope-store-0.28.0
  name: release-name-graphscope-store-store
  namespace: default
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: store
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: graphscope-store
  serviceName: release-name-graphscope-store-store-headless
  template:
    metadata:
      annotations:
        checksum/configuration: 359aaeaae8d1012ce1d0ae566904aa789f806c9fb26c53ccd96f4e203f984772
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: graphscope-store
        app.kubernetes.io/version: 3.4.0
        helm.sh/chart: graphscope-store-0.28.0
    spec:
      containers:
      - command:
        - /etc/groot/setup.sh
        env:
        - name: KAFKA_SERVERS
          value: release-name-kafka-0.release-name-kafka-headless.default.svc.cluster.local:9092
        - name: ZK_CONNECT
          value: release-name-zookeeper-headless
        image: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-store:0.23.0
        imagePullPolicy: IfNotPresent
        name: default
        ports:
        - containerPort: 55556
          name: grpc
        - containerPort: 12312
          name: gremlin
        - containerPort: 55555
          name: inner-rpc
        readinessProbe:
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: gremlin
          timeoutSeconds: 5
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        volumeMounts:
        - mountPath: /etc/groot/groot.config.tpl
          name: config
          subPath: groot.config
        - mountPath: /etc/groot/setup.sh
          name: config
          subPath: setup.sh
        - mountPath: /var/lib/graphscope-store
          name: data
      hostIPC: false
      hostNetwork: false
      securityContext:
        fsGroup: 1001
      serviceAccountName: release-name-graphscope-store
      volumes:
      - configMap:
          defaultMode: 493
          name: release-name-graphscope-store
        name: config
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---
# Source: graphscope-store/templates/test/test-rpc.yaml
apiVersion: v1
kind: Pod
metadata:
  name: release-name-graphscope-store-frontend-test-gremlin-service
  labels:
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: python
      image: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-store:python-3.9.9-alpine3.14-gremlin
      env:
        - name: frontend
          value: release-name-graphscope-store-store
      command:
        - /bin/sh
        - -c
        - while sleep 3 && ! python3 -c 'import os;from gremlin_python.driver.client import Client;ip=os.getenv("frontend");graph_url = f"ws://{ip}:12312/gremlin"; username, password = "", ""; client = Client(graph_url, "g", username=username, password=password); ret = client.submit("g.V().limit(1)").all().result(); client.close();';
            do echo -n .;
          done
  restartPolicy: Never
