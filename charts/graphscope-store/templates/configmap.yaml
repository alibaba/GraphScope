apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "graphscope-store.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: configmap
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
data:
  groot.config: |-
    ## Common Config

{{- if .Values.distributed.enabled }}
    rpc.port=55555
    discovery.mode={{ .Values.discoveryMode }}
    role.name=ROLE
    node.idx=INDEX
{{- else }}
    rpc.port=0
    discovery.mode=zookeeper
    role.name=""
    node.idx=0
{{- end }}

    store.node.count={{ .Values.store.replicaCount }}
    frontend.node.count={{ .Values.frontend.replicaCount }}
    coordinator.node.count={{ .Values.coordinator.replicaCount }}
    partition.count={{ .Values.store.replicaCount | mul 16 }}

    ## Frontend Config
    frontend.service.port={{ .Values.frontend.service.servicePort }}
    frontend.server.id=INDEX
    frontend.server.num={{ .Values.frontend.replicaCount }}

    ## Store Config
    store.data.path={{ .Values.storeDataPath }}
    store.write.thread.count={{ .Values.storeWriteThreadCount }}
    store.queue.buffer.size={{ .Values.storeQueueBufferSize }}

    ## Zk Config
    zk.base.path={{ .Values.zkBasePath }}
    zk.connect.string={{ printf "%s-headless" (include "graphscope-store.zookeeper.fullname" .) }}

    ## Kafka Config
    kafka.servers={{ include "graphscope-store.kafka.brokerlist" . }}
    kafka.topic={{ .Values.kafkaTopic }}
    kafka.producer.custom.configs={{ .Values.kafkaProducerCustomConfigs }}
    kafka.test.cluster.enable=false

    ## Frontend Config
    gremlin.server.port=12312
    ## disable neo4j when launching groot server by default
    neo4j.bolt.server.disabled=true

    log4rs.config=LOG4RS_CONFIG
    release.full.name={{ include "graphscope-store.fullname" . }}
    ## Auth config
    auth.username={{ .Values.auth.username }}
    auth.password={{ .Values.auth.password }}

    # Pegasus config
    pegasus.worker.num={{ .Values.pegasus.worker.num }}
    pegasus.timeout={{ .Values.pegasus.timeout }}
    pegasus.batch.size=1024
    pegasus.output.capacity=16

    gaia.rpc.port=60000
    gaia.engine.port=60001

    ## Secondary config
    secondary.instance.enabled={{ .Values.secondary.enabled }}
    store.data.secondary.path={{ .Values.secondary.storeDataPath }}
    store.gc.interval.ms={{ .Values.storeGcIntervalMs }}

    write.ha.enabled={{ .Values.backup.enabled }}
    tracing.enabled={{ .Values.otel.enabled }}

    ## Coordinator Config
    rpc.max.bytes.mb={{ .Values.rpcMaxBytesMb }}
    snapshot.increase.interval.ms={{ .Values.snapshotIncreaseIntervalMs }}
    offsets.persist.interval.ms={{ .Values.offsetsPersistIntervalMs }}
    file.meta.store.path={{ .Values.fileMetaStorePath }}
    log.recycle.enable={{ .Values.logRecycleEnable }}

    ## Extra Config
    {{- if .Values.extraConfig }}
    {{- $config_list := regexSplit ";" .Values.extraConfig -1 }}
    {{- range $config_list }}
    {{ . }}
    {{- end }}
    {{- end }}
  setup.sh: |-
    #!/bin/bash

    sudo chown -R graphscope:graphscope {{ .Values.storeDataPath }} || true
    sudo chown -R graphscope:graphscope /etc/groot || true

    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    ordinal=${BASH_REMATCH[1]}

    sudo sed  -e "s/ROLE/${ROLE}/g" \
              -e "s/INDEX/${ordinal}/g" \
              -e "s@LOG4RS_CONFIG@${GRAPHSCOPE_HOME}/groot/conf/log4rs.yml@g" \
    /etc/groot/groot.config.tpl | sudo tee -a /etc/groot/groot.config

    export LOG_NAME=graphscope-store
    export GROOT_CONF_FILE=/etc/groot/groot.config

    {{- if .Values.otel.enabled }}
    export JAVA_TOOL_OPTIONS="-javaagent:/home/graphscope/opentelemetry-javaagent.jar"
    export OTEL_SERVICE_NAME="compiler"
    export OTEL_TRACES_SAMPLER={{ .Values.otel.traces.sampler.name }}
    export OTEL_TRACES_SAMPLER_ARG={{ .Values.otel.traces.sampler.arg }}
    {{- end }}

    # For core and heap profiling
    # ulimit -c unlimited
    # sudo mkdir -p /apsara/cloud/data/corefile/ && sudo chown -R graphscope:graphscope /apsara/cloud/data/corefile/
    # export _RJEM_MALLOC_CONF=prof:true,lg_prof_interval:32,lg_prof_sample:19
    # export MALLOC_CONF=prof:true,lg_prof_interval:32

    export RUST_BACKTRACE=1
    ${GRAPHSCOPE_HOME}/groot/bin/store_ctl.sh start ${ROLE}  # || sleep infinity
