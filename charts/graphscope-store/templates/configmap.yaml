{{- if (include "graphscope-store.createConfigmap" .) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "graphscope-store.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: configmap
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
data:
  groot.config: |-
    ## Common Config
    graph.name={{ .Values.graphName }}
    role.name=ROLE
    node.idx=INDEX
    rpc.port=55555
    rpc.max.bytes.mb={{ .Values.rpcMaxBytesMb }}
    store.node.count={{ .Values.store.replicaCount }}
    frontend.node.count={{ .Values.frontend.replicaCount }}
    ingestor.node.count={{ .Values.ingestor.replicaCount }}
    coordinator.node.count={{ .Values.coordinator.replicaCount }}
    ingestor.queue.count={{ .Values.ingestor.replicaCount }}
    partition.count={{ .Values.store.replicaCount | mul 8 }}
    engine.type={{ .Values.engineType }}
    discovery.mode={{ .Values.discoveryMode }}

    ## Frontend Config
    frontend.service.port=55556

    ## Ingestor Config
    ingestor.queue.buffer.size={{ .Values.ingestorQueueBufferSize }}
    ingestor.sender.buffer.size={{ .Values.ingestorSenderBufferSize }}

    ## Coordinator Config
    snapshot.increase.interval.ms={{ .Values.snapshotIncreaseIntervalMs }}
    offsets.persist.interval.ms={{ .Values.offsetsPersistIntervalMs }}
    file.meta.store.path={{ .Values.fileMetaStorePath }}

    ## Store Config
    store.data.path={{ .Values.storeDataPath }}
    store.write.thread.count={{ .Values.storeWriteThreadCount }}

    ## Kafka Config
    kafka.servers=KAFKA_SERVERS
    kafka.topic={{ .Values.kafkaTopic }}
    kafka.producer.custom.configs={{ .Values.kafkaProducerCustomConfigs }}

    ## Frontend Config
    gremlin.server.port=12312

    executor.worker.per.process={{ .Values.executorWorkerPerProcess }}
    executor.query.thread.count={{ .Values.executorQueryThreadCount }}
    executor.query.manager.thread.count={{ .Values.executorQueryManagerThreadCount }}
    executor.query.store.thread.count={{ .Values.executorQueryStoreThreadCount }}

    dns.name.prefix.frontend=FRONTEND
    dns.name.prefix.ingestor=INGESTOR
    dns.name.prefix.coordinator=COORDINATOR
    dns.name.prefix.store=STORE

    executor.graph.port=55556
    executor.query.port=55557
    executor.engine.port=55558

    log4rs.config=LOG4RS_CONFIG

    ## GAIA Config
    gaia.rpc.port=60000
    gaia.engine.port=60001

    ## Auth config
    auth.username={{ .Values.auth.username }}
    auth.password={{ .Values.auth.password }}

    # Pegasus config
    pegasus.worker.num={{ .Values.pegasus.worker.num }}
    pegasus.timeout={{ .Values.pegasus.timeout }}
    pegasus.batch.size=1024
    pegasus.output.capacity=16
    pegasus.hosts=PEGASUS_HOSTS

    ## Extra Config
    {{- if .Values.extraConfig }}
    {{- $config_list := regexSplit ";" .Values.extraConfig -1 }}
    {{- range $config_list }}
    {{ . }}
    {{- end }}
    {{- end }}
  setup.sh: |-
    #!/bin/bash

    sudo chown -R graphscope:graphscope {{ .Values.storeDataPath }} || true
    sudo chown -R graphscope:graphscope /etc/groot || true

    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    ordinal=${BASH_REMATCH[1]}

    pegasus_hosts=""
    i=0
    while [ $i -ne $STORE_COUNT ]; do
    pod=`echo $DNS_NAME_PREFIX_STORE | sed -e "s/{}/$i/g"`
    # 60001 is fixed gaia engine port
    pegasus_hosts="${pegasus_hosts},${pod}:60001"
      i=$(($i+1))
    done
    pegasus_hosts=${pegasus_hosts:1}

    sudo sed -e "s/GRAPH_NAME/${GRAPH_NAME}/g" \
              -e "s/ROLE/${ROLE}/g" \
              -e "s/INDEX/${ordinal}/g" \
              -e "s/KAFKA_SERVERS/${KAFKA_SERVERS}/g" \
              -e "s/FRONTEND/${DNS_NAME_PREFIX_FRONTEND}/g" \
              -e "s/INGESTOR/${DNS_NAME_PREFIX_INGESTOR}/g" \
              -e "s/COORDINATOR/${DNS_NAME_PREFIX_COORDINATOR}/g" \
              -e "s/STORE/${DNS_NAME_PREFIX_STORE}/g" \
              -e "s/PEGASUS_HOSTS/${pegasus_hosts}/g" \
              -e "s@LOG4RS_CONFIG@${GRAPHSCOPE_HOME}/groot/conf/log4rs.yml@g" \
    /etc/groot/groot.config.tpl | sudo tee /etc/groot/groot.config

    export LOG_NAME=graphscope-store
    export GROOT_CONF_FILE=/etc/groot/groot.config
    ${GRAPHSCOPE_HOME}/groot/bin/store_ctl.sh start_server ${ROLE}
{{- end -}}
