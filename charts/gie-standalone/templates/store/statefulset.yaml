{{- $frontendFullname := include "graphscope-store.frontend.fullname" . }}
{{- $storeFullname := include "graphscope-store.store.fullname" . }}
{{- $releaseNamespace := .Release.Namespace }}
{{- $clusterDomain := .Values.clusterDomain }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "graphscope-store.store.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- include "graphscope-store.labels" . | nindent 4 }}
    app.kubernetes.io/component: store
    {{- if .Values.commonLabels }}
    {{- include "graphscope-store.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "graphscope-store.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.executor.replicaCount }}
  selector:
    matchLabels: {{ include "graphscope-store.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: store
  serviceName: {{ include "graphscope-store.store.fullname" . }}-headless
  updateStrategy:
    type: {{ .Values.executor.updateStrategy }}
    {{- if (eq "Recreate" .Values.executor.updateStrategy) }}
    rollingUpdate: null
    {{- end }}
  template:
    metadata:
      annotations:
        {{- if .Values.executor.podAnnotations }}
        {{- include "graphscope-store.tplvalues.render" (dict "value" .Values.executor.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels: {{- include "graphscope-store.labels" . | nindent 8 }}
        app.kubernetes.io/component: store
        {{- if .Values.commonLabels }}
        {{- include "graphscope-store.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets: {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "graphscope-store.serviceAccountName" . }}
      {{- if .Values.executor.affinity }}
      affinity: {{- include "graphscope-store.tplvalues.render" (dict "value" .Values.executor.affinity "context" $) | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.executor.initContainers }}
        {{- include "graphscope-store.tplvalues.render" (dict "value" .Values.executor.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: engine
          image: {{ include "graphscope-store.store.image" . }}
          imagePullPolicy: {{ .Values.executor.image.pullPolicy | quote }}
          command:
          {{- if (eq "Vineyard" .Values.storageType) }}
            - /bin/bash
            - -c
            - |
              sleep 5s

              hosts=/tmp/hosts_of_nodes
              rm -rf $hosts && touch $hosts
              pod_ips=`kubectl get pod -lapp.kubernetes.io/component=store,app.kubernetes.io/instance=$INSTANCE_NAME -o jsonpath='{.items[*].status.podIP}'`
              pod_names=""
              for ip in `echo $pod_ips`
              do
                pod_name=`kubectl get pods -o custom-columns=:metadata.name --no-headers=true --field-selector status.podIP=$ip`
                echo $ip $pod_name >> $hosts
                pod_names="${pod_names},${pod_name}"
              done
              pod_names=${pod_names:1}

              # start vineyard service
              export VINEYARD_IPC_SOCKET=/tmp/vineyard.sock
              if [ $SERVERSSIZE -eq 1 ]
              then
                vineyardd --socket=${VINEYARD_IPC_SOCKET} --meta=local &
              else
                vineyardd --socket=${VINEYARD_IPC_SOCKET} --etcd_endpoint=$ETCD_ENDPOINT &
              fi

              # load vineyard graph
              config_path=/etc/groot/config

              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              server_id=${BASH_REMATCH[1]}

              if [ $server_id -eq 0 ]
              then
                mpirun --host $pod_names \
                  -x LD_LIBRARY_PATH=$LD_LIBRARY_PATH \
                  -x OPAL_PREFIX=$OPAL_PREFIX \
                  -x VINEYARD_IPC_SOCKET=$VINEYARD_IPC_SOCKET \
                  -x config_path=$config_path \
                    vineyard-graph-loader --config $config_path/$HTAP_LOADER_CONFIG
                if [ $? -ne 0 ]
                then
                  echo "load vineyard graph fail"
                  exit 1
                fi
              fi

              json_file=`ls /tmp/*.json`
              while [ $? -ne 0 ]
              do
                sleep 1s
                json_file=`ls /tmp/*.json`
              done
              object_id=${json_file//[^0-9]/}

              # write schema json to remote frontend
              if [ $server_id -eq 0 ]
              then
                frontend_pods=`kubectl get pod -lapp.kubernetes.io/component=frontend,app.kubernetes.io/instance=$INSTANCE_NAME --no-headers -o custom-columns=":metadata.name"`
                for pod in $(echo $frontend_pods)
                do
                  kubectl cp $json_file $pod:$json_file
                done
              fi

              # start engine service
              pegasus_hosts=""
              i=0
              while [ $i -ne $SERVERSSIZE ]
              do
              pod=`echo $DNS_NAME_PREFIX_STORE | sed -e "s/{}/$i/g"`
              pegasus_hosts="${pegasus_hosts},${pod}:${GAIA_ENGINE_PORT}"
                i=$(($i+1))
              done
              pegasus_hosts=${pegasus_hosts:1}

              GRAPHSCOPE_RUNTIME=/tmp/gs/${object_id}
              GRAPHSCOPE_HOME=${GRAPHSCOPE_HOME} ${GRAPHSCOPE_HOME}/bin/giectl start_executor ${GRAPHSCOPE_RUNTIME} \
                ${object_id} ${server_id} ${SERVERSSIZE} ${GAIA_RPC_PORT} ${pegasus_hosts}

              exit_code=$?
              while [ $exit_code -eq 0 ]
              do
                sleep 10
              done
          {{- end }}
          {{- if (eq "Experimental" .Values.storageType) }}
            - /bin/bash
            - -c
            - |
              RUST_LOG=info DATA_PATH=${STORE_DATA_PATH} /opt/GraphScope/interactive_engine/executor/ir/target/release/start_rpc_server_k8s
          {{- end }}
          env:
            - name: GAIA_RPC_PORT
              value: {{ .Values.executor.service.gaiaRpc | quote }}
            - name: GAIA_ENGINE_PORT
              value: {{ .Values.executor.service.gaiaEngine | quote }}
            - name: STORE_DATA_PATH
              value: {{ .Values.storeDataPath | quote }}
            - name: DNS_NAME_PREFIX_STORE
              value: {{ $storeFullname }}-{}.{{ $storeFullname }}-headless.{{ $releaseNamespace }}.svc.{{ $clusterDomain }}
            - name: SERVERSSIZE
              value: {{ .Values.executor.replicaCount | quote }}
            {{- if (eq "Vineyard" .Values.storageType) }}
            - name: ETCD_ENDPOINT
              value: {{ .Values.etcdEndpoint | quote }}
            - name: HTAP_LOADER_CONFIG
              value: {{ .Values.htapLoaderConfig | quote }}
            - name: INSTANCE_NAME
              value: {{ .Release.Name | quote }}
            {{- end }}
          ports:
            - name: gaia-rpc
              containerPort: {{ .Values.executor.service.gaiaRpc }}
            - name: gaia-engine
              containerPort: {{ .Values.executor.service.gaiaEngine }}
          {{- if .Values.executor.resources }}
          resources: {{- toYaml .Values.executor.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if eq (hasPrefix "hdfs" .Values.storeDataPath) false }}
            - name: data
              mountPath: {{ .Values.storeDataPath }}
            {{- end }}
            - name: config
              mountPath: /etc/groot/config
      volumes:
        - name: config
          configMap:
            name: {{ include "graphscope-store.configmapName" . }}
  {{- if and .Values.executor.persistence.enabled .Values.executor.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ tpl .Values.executor.persistence.existingClaim . }}
  {{- else if not .Values.executor.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else if and .Values.executor.persistence.enabled (not .Values.executor.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: {{ include "graphscope-store.selectorLabels" . | nindent 10 }}
          app.kubernetes.io/component: store
      {{- if .Values.executor.persistence.annotations }}
        annotations:
          {{- toYaml .Values.executor.persistence.annotations | nindent 10 }}
      {{- end }}
      spec:
        accessModes:
          {{- range .Values.executor.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.executor.persistence.size | quote }}
        {{ include "graphscope-store.storage.class" .Values.executor.persistence }}
        {{- if .Values.executor.persistence.selector }}
        selector: {{- include "graphscope-store.tplvalues.render" (dict "value" .Values.executor.persistence.selector "context" $) | nindent 10 }}
        {{- end -}}
  {{- end }}
