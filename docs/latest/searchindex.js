Search.setIndex({"alltitles": {"0. Environment": [[336, "environment"]], "0. \u672f\u8bed": [[321, "id1"]], "1 Data format": [[426, "data-format"]], "1 Introduction": [[429, "introduction"]], "1 Trying out the built-in models": [[437, "trying-out-the-built-in-models"]], "1. Build: Building a partitioned graph": [[590, "build-building-a-partitioned-graph"]], "1. Download Datasets": [[336, "download-datasets"]], "1. \u8f7d\u56fe": [[321, "id2"]], "1.1 Basic format": [[426, "basic-format"]], "1.1 \u521d\u59cb\u5316partitioner": [[321, "partitioner"]], "1.2 Attribute format\uff08ATTRIBUTED\uff09": [[426, "attribute-format-attributed"]], "1.2 \u6784\u5efa\u539f\u59cbarrow table": [[321, "arrow-table"]], "1.3 Weight format\uff08WEIGHTED\uff09": [[426, "weight-format-weighted"]], "1.3. Shuffle vtable": [[321, "shuffle-vtable"]], "1.4 Label format\uff08LABELED\uff09": [[426, "label-format-labeled"]], "1.4. \u6784\u5efaVertex map(BasicArrowVertexMapBuilder)": [[321, "vertex-map-basicarrowvertexmapbuilder"]], "1.5 Putting together": [[426, "putting-together"]], "1.5. \u6784\u5efaFragment\u51c6\u5907": [[321, "fragment"]], "1.5.1. \u5904\u7406edge table(BasicEVFragmentLoader)": [[321, "edge-table-basicevfragmentloader"]], "1.5.2 FragmentBuilder\u6570\u636e\u521d\u59cb\u5316 (BasicArrowFragmentBuilder)": [[321, "fragmentbuilder-basicarrowfragmentbuilder"]], "1.6 Fragment\u6784\u5efa": [[321, "id3"]], "2 Data source type": [[426, "data-source-type"]], "2 Describe the Topology": [[427, "describe-the-topology"]], "2 How to use the GL APIs": [[437, "how-to-use-the-gl-apis"]], "2. Load the Graph": [[336, "load-the-graph"]], "2. Loading graph partitions": [[590, "loading-graph-partitions"]], "2. \u8bbf\u95eeFragment": [[321, "id4"]], "2.1 \u8bbf\u95ee\u9876\u70b9": [[321, "id5"]], "2.1.1 \u8bbf\u95ee\u5185\u90e8\u70b9": [[321, "id6"]], "2.1.2 \u8303\u56f4\u5916\u90e8\u70b9": [[321, "id7"]], "2.1.3 \u8bbf\u95ee\u5168\u90e8\u70b9": [[321, "id8"]], "2.1.4 \u8bbf\u95ee\u9876\u70b9\u6570\u636e": [[321, "id9"]], "2.2 Alibaba Cloud MaxCompute data table": [[426, "alibaba-cloud-maxcompute-data-table"]], "2.2 \u8bbf\u95ee\u8fb9": [[321, "id10"]], "2.2.1 \u8bbf\u95ee\u51fa\u8fb9": [[321, "id11"]], "2.2.2 \u8bbf\u95ee\u5165\u8fb9": [[321, "id12"]], "2.2.3 \u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": [[321, "id13"]], "3 Developing a GNN model": [[437, "developing-a-gnn-model"]], "3 User API": [[426, "user-api"]], "3. Commit to store service": [[590, "commit-to-store-service"]], "3. Set Endpoint and API Key": [[336, "set-endpoint-and-api-key"]], "3.1 Data Preparation": [[437, "data-preparation"]], "3.1 Stand-alone Mode": [[427, "stand-alone-mode"]], "3.2 Distributed Mode \u2013 Client/Server Mode": [[427, "distributed-mode-client-server-mode"]], "3.2 Graph Construction": [[437, "graph-construction"]], "3.3 Graph Sampling": [[437, "graph-sampling"]], "3.4 GNN Model": [[437, "gnn-model"]], "4. Generate Graph Query Sentence from Questions": [[336, "generate-graph-query-sentence-from-questions"]], "5. Execute Generated Query Sentence with GIE": [[336, "execute-generated-query-sentence-with-gie"]], "<h3 id=\"gremlin-order\">Order</h3>": [[341, "order"]], "A Generic Benchmark Tool": [[328, null]], "A Solid Foundation": [[318, "a-solid-foundation"]], "API \u53c2\u8003": [[606, null]], "APIResponseWithCode": [[135, null], [225, null]], "AS graph": [[576, "module-networkx.generators.internet_as_graphs"]], "About Grape JDK": [[372, null]], "Accessing Edges and Neighbors": [[20, "accessing-edges-and-neighbors"]], "Across-Engine Workflow Orchestration": [[346, "across-engine-workflow-orchestration"]], "Adding Attributes to Graphs, Nodes and Edges": [[20, "adding-attributes-to-graphs-nodes-and-edges"]], "Adding Edges": [[20, "adding-edges"], [356, "adding-edges"]], "Adding Nodes": [[20, "adding-nodes"]], "Adding Vertices": [[356, "adding-vertices"]], "Adjacency List": [[579, "adjacency-list"]], "Advanced Usages": [[356, "advanced-usages"]], "Aggregate": [[341, "aggregate"]], "Aggregate (Group)": [[341, "aggregate-group"]], "Aggregate Steps": [[343, "aggregate-steps"]], "Aggregators": [[1, "aggregators"]], "Algorithm Library": [[34, "algorithm-library"]], "All Pairs Shortest Path Length": [[0, "all-pairs-shortest-path-length"]], "AlongEdgeToOuterVertex": [[10, "alongedgetooutervertex"]], "AlongIncomingEdgeToOuterVertex": [[10, "alongincomingedgetooutervertex"]], "AlongOutgoingEdgeToOuterVertex": [[10, "alongoutgoingedgetooutervertex"]], "Ambiguous Pattern": [[333, "ambiguous-pattern"]], "Analytical App": [[368, null]], "Analytical Apps": [[367, "analytical-apps"]], "Analytical Engine": [[367, "analytical-engine"]], "Analytical Engine API Reference": [[367, null]], "Analytical Workers": [[367, "analytical-workers"]], "Analyzing Graphs": [[20, "analyzing-graphs"]], "Analyzing Queries": [[333, "analyzing-queries"]], "Apache TinkerPop": [[608, "apache-tinkerpop"]], "Apache TinkerPop Ecosystem": [[344, null]], "App object": [[368, "app-object"]], "AppAssets": [[368, "appassets"]], "Application Layer": [[12, "application-layer"]], "Application layer": [[357, "application-layer"]], "Applications and algorithms": [[592, null]], "Apply Some Filters": [[343, "apply-some-filters"]], "Apply filters after expansion": [[343, "apply-filters-after-expansion"]], "App\u2019s Context": [[367, "app-s-context"]], "Architecture": [[6, "architecture"], [12, "architecture"]], "Architecture and Workflow": [[586, "architecture-and-workflow"]], "Array Types": [[131, "array-types"]], "Array-style Retrieval": [[589, "array-style-retrieval"]], "Atlas": [[576, "module-graphscope.nx.generators.atlas"]], "Attribute Assortativity": [[0, "attribute-assortativity"]], "Attributes": [[443, "attributes"]], "Author": [[46, "author"]], "Authorization": [[47, "authorization"], [47, "id4"], [47, "id10"], [47, "id16"], [47, "id22"], [47, "id28"], [47, "id34"], [47, "id40"], [47, "id46"], [47, "id52"], [67, "authorization"], [67, "id4"], [67, "id10"], [67, "id16"], [75, "authorization"], [75, "id4"], [75, "id10"], [75, "id16"], [75, "id22"], [94, "authorization"], [94, "id4"], [94, "id10"], [94, "id16"], [94, "id22"], [94, "id28"], [94, "id34"], [94, "id40"], [94, "id46"], [94, "id52"], [95, "authorization"], [95, "id4"], [95, "id10"], [95, "id16"], [95, "id22"], [106, "authorization"], [106, "id4"], [106, "id10"], [106, "id16"], [106, "id22"], [110, "authorization"], [110, "id4"], [110, "id10"], [110, "id16"], [110, "id22"], [121, "authorization"], [154, "authorization"], [154, "id4"], [154, "id10"], [173, "authorization"], [173, "id4"], [173, "id10"], [173, "id16"], [173, "id22"], [173, "id28"], [173, "id34"], [175, "authorization"], [175, "id4"], [175, "id10"], [181, "authorization"], [181, "id4"], [181, "id10"], [181, "id16"], [181, "id22"], [184, "authorization"], [184, "id4"], [191, "authorization"], [191, "id4"], [191, "id10"], [191, "id16"], [209, "authorization"], [209, "id4"], [209, "id10"], [244, "authorization"], [244, "id4"], [244, "id10"], [244, "id16"], [263, "authorization"], [263, "id4"], [263, "id10"], [263, "id16"], [263, "id22"], [263, "id28"], [263, "id34"], [263, "id40"], [263, "id46"], [263, "id52"], [263, "id58"], [263, "id64"], [263, "id70"], [263, "id76"], [265, "authorization"], [265, "id4"], [265, "id10"], [272, "authorization"], [272, "id4"], [272, "id10"], [272, "id16"], [272, "id22"], [274, "authorization"], [274, "id4"], [281, "authorization"], [281, "id4"], [281, "id10"], [281, "id16"], [299, "authorization"], [299, "id4"], [299, "id10"], [299, "id16"]], "Automatic instrument": [[39, "automatic-instrument"]], "Available Configurations": [[128, "available-configurations"]], "Average Degree Connectivity": [[0, "average-degree-connectivity"]], "BaseEdgeType": [[48, null], [136, null], [226, null]], "BaseEdgeTypeVertexTypePairRelationsInner": [[49, null], [137, null], [227, null]], "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams": [[50, null], [138, null], [228, null]], "BasePropertyMeta": [[51, null], [139, null], [229, null]], "BaseVertexType": [[52, null], [140, null], [230, null]], "BaseVertexTypeXCsrParams": [[53, null], [141, null], [231, null]], "Basic Traversal Query": [[343, "basic-traversal-query"]], "Basic Vertex/Edge Query": [[343, "basic-vertex-edge-query"]], "Benchmark Tool Overview": [[328, "benchmark-tool-overview"]], "Benchmark Tool Usage": [[328, "benchmark-tool-usage"]], "Benchmark Tools": [[333, "benchmark-tools"]], "Betweenness Centrality": [[0, "betweenness-centrality"]], "Bind Data Source": [[129, "bind-data-source"]], "Bind application to graph": [[592, "bind-application-to-graph"]], "BothInOut": [[10, "bothinout"]], "Breadth-First Search": [[0, "breadth-first-search"]], "Build All Targets for GraphScope": [[36, "build-all-targets-for-graphscope"], [41, "build-all-targets-for-graphscope"]], "Build Components Individually": [[36, "build-components-individually"]], "Build Coordinator": [[36, "build-coordinator"]], "Build Edge": [[610, "build-edge"]], "Build GIE with Vineyard Store on Local": [[331, "build-gie-with-vineyard-store-on-local"]], "Build Interactive": [[134, "build-interactive"]], "Build Learning Engine": [[348, "build-learning-engine"]], "Build Python Client": [[36, "build-python-client"]], "Build Vertex": [[610, "build-vertex"]], "Build and Test Engines": [[36, "build-and-test-engines"]], "Build and install": [[32, "build-and-install"]], "Build from source": [[17, "build-from-source"], [432, "build-from-source"]], "Build gsctl": [[36, "build-gsctl"], [45, "build-gsctl"]], "Build image": [[590, "build-image"]], "Build images": [[41, "build-images"]], "Building Analytical Engine": [[4, "building-analytical-engine"]], "Building from source": [[372, "building-from-source"]], "Building the benchmark": [[328, "building-the-benchmark"]], "Built-in Algorithms": [[0, null], [6, "built-in-algorithms"]], "Built-in algorithms": [[592, "built-in-algorithms"]], "BuiltIn apps": [[368, "builtin-apps"]], "BuiltIn operations": [[581, "module-graphscope.framework.dag_utils"]], "Builtin Procedures": [[319, "builtin-procedures"]], "Builtin algorithms": [[442, null]], "BulkLoading": [[173, "bulkloading"], [263, "bulkloading"]], "ByteStreamAccessFile": [[436, "bytestreamaccessfile"]], "C++ Style": [[35, "c-style"]], "CDLP": [[0, "cdlp"]], "CMake options": [[134, "cmake-options"]], "Call the Stored Procedure via Interactive SDK": [[319, "call-the-stored-procedure-via-interactive-sdk"]], "Call the Stored Procedure via Neo4j-native Tools": [[319, "call-the-stored-procedure-via-neo4j-native-tools"]], "CallProcedure": [[184, "callprocedure"], [274, "callprocedure"]], "CallProcedureOnCurrentGraph": [[184, "callprocedureoncurrentgraph"], [274, "callprocedureoncurrentgraph"]], "CancelJob": [[175, "canceljob"], [265, "canceljob"]], "Challenges of Applying GNNs on Large Graphs": [[362, "challenges-of-applying-gnns-on-large-graphs"]], "Challenges of Graph Analytics on Large Graphs": [[360, "challenges-of-graph-analytics-on-large-graphs"]], "Challenges of Handling Graph Computation": [[325, "challenges-of-handling-graph-computation"]], "Change Scope": [[597, "change-scope"]], "Check Service Status": [[126, "check-service-status"], [315, "check-service-status"]], "Classic": [[576, "module-graphscope.nx.generators.classic"]], "Clause": [[337, "clause"]], "Clean up": [[33, "clean-up"]], "Cleaning Up": [[27, "cleaning-up"]], "Cleaning up": [[30, "cleaning-up"]], "Client/Server Mode": [[597, "client-server-mode"]], "Clone source code": [[435, "clone-source-code"]], "Close the Connection": [[597, "close-the-connection"]], "Close the connection": [[126, "close-the-connection"], [315, "close-the-connection"]], "Closeness Centrality": [[0, "closeness-centrality"]], "Cloud Native Design": [[346, "cloud-native-design"]], "Clustering": [[0, "clustering"]], "Code Style Guide": [[35, null]], "Code of Conduct": [[37, "code-of-conduct"]], "Collecting the results": [[328, "collecting-the-results"]], "Column mapping": [[130, "column-mapping"]], "ColumnMapping": [[54, null], [142, null], [232, null]], "ColumnMappingColumn": [[55, null]], "Command-line Utility gsctl": [[597, null]], "Commands": [[597, "commands"]], "Commands for Debugging": [[38, "commands-for-debugging"]], "Common Configurations": [[590, "common-configurations"]], "Community": [[37, "community"], [576, "module-graphscope.nx.generators.community"]], "Compare with Graph Databases": [[364, "compare-with-graph-databases"]], "Compare with Graph Learning Systems": [[364, "compare-with-graph-learning-systems"]], "Compare with Graph Processing Systems": [[364, "compare-with-graph-processing-systems"]], "Compatibility with TinkerPop": [[339, "compatibility-with-tinkerpop"]], "Compile": [[432, "compile"], [435, "compile"]], "Compile.": [[316, "compile"]], "Compiler": [[134, "compiler"]], "Complex Queries": [[343, "complex-queries"]], "Configurable Items for Deploying Interactive with gsctl": [[128, "configurable-items-for-deploying-interactive-with-gsctl"]], "Configuration": [[29, "configuration"], [128, null], [333, "configuration"]], "Configuration Breakdown": [[130, "configuration-breakdown"]], "Configurations": [[328, "configurations"]], "Configure Compared Systems": [[328, "configure-compared-systems"]], "Configure Results Collection": [[328, "configure-results-collection"]], "Configure Workloads": [[328, "configure-workloads"]], "Configure the parameters for client pods": [[354, "configure-the-parameters-for-client-pods"]], "Configuring logs": [[590, "configuring-logs"]], "Connect and submit a query": [[216, "connect-and-submit-a-query"], [308, "connect-and-submit-a-query"]], "Connect to Coordinator Service(Interactive) via gsctl": [[126, "connect-to-coordinator-service-interactive-via-gsctl"]], "Connect to GraphScope": [[29, "connect-to-graphscope"]], "Connect to Interactive Service": [[315, "connect-to-interactive-service"]], "Connect to the Service": [[315, "connect-to-the-service"]], "Connect to the existing vineyard cluster with another GraphScope session": [[30, "connect-to-the-existing-vineyard-cluster-with-another-graphscope-session"]], "Connecting and Using": [[132, "connecting-and-using"]], "Connecting via Cypher-Shell": [[335, "connecting-via-cypher-shell"]], "Connecting via Gremlin-Console": [[342, "connecting-via-gremlin-console"]], "Connecting via Java SDK": [[342, "connecting-via-java-sdk"]], "Connecting via Python Driver": [[335, "connecting-via-python-driver"]], "Connecting via Python SDK": [[342, "connecting-via-python-sdk"]], "Connection": [[590, "connection"]], "Constructed Types": [[337, "constructed-types"]], "Contact Us": [[25, null]], "Context": [[369, null]], "Context object": [[369, "context-object"]], "Continuous integration testing": [[37, "continuous-integration-testing"]], "Contributing Code and Documentation Changes": [[37, "contributing-code-and-documentation-changes"]], "Convert a Graph to a nx.Graph": [[11, "convert-a-graph-to-a-nx-graph"]], "Coordinator": [[43, null]], "Coordinator Python SDK Reference": [[46, null]], "Coordinator RESTFul API": [[127, null]], "Coordinator configuration": [[28, "coordinator-configuration"]], "Copy all files to the destination environment and extract them to a location": [[31, "copy-all-files-to-the-destination-environment-and-extract-them-to-a-location"]], "Core Features": [[333, "core-features"]], "Create Data Loading Job": [[129, "create-data-loading-job"]], "Create a New Graph": [[45, "create-a-new-graph"]], "Create a Stored Procedure": [[314, "create-a-stored-procedure"], [319, "create-a-stored-procedure"]], "Create a new graph": [[216, "create-a-new-graph"], [308, "create-a-new-graph"], [590, "create-a-new-graph"]], "Create a pv and pvc": [[33, "create-a-pv-and-pvc"]], "Create a session on kubernetes and load graph": [[352, "create-a-session-on-kubernetes-and-load-graph"]], "Create a stored procedure": [[216, "create-a-stored-procedure"], [308, "create-a-stored-procedure"]], "Create c++ Stored Procedures on GraphScope Interactive": [[314, null]], "Create graph from GraphScope Graph Object": [[20, "create-graph-from-graphscope-graph-object"]], "Create neighbor loaderfor training, testing and validation": [[355, "create-neighbor-loaderfor-training-testing-and-validation"]], "CreateAlertReceiverRequest": [[56, null]], "CreateAlertRuleRequest": [[57, null]], "CreateDataloadingJobResponse": [[58, null]], "CreateEdgeType": [[59, null], [143, null], [233, null]], "CreateGraph": [[173, "creategraph"], [263, "creategraph"]], "CreateGraphRequest": [[60, null], [144, null], [234, null]], "CreateGraphResponse": [[61, null], [145, null], [235, null]], "CreateGraphSchemaRequest": [[62, null], [146, null], [236, null]], "CreateProcedure": [[181, "createprocedure"], [272, "createprocedure"]], "CreateProcedureRequest": [[147, null], [237, null]], "CreateProcedureResponse": [[148, null], [238, null]], "CreatePropertyMeta": [[63, null], [149, null], [239, null]], "CreateStoredProcRequest": [[64, null]], "CreateStoredProcResponse": [[65, null]], "CreateVertexType": [[66, null], [150, null], [240, null]], "Creating an Empty Graph": [[20, "creating-an-empty-graph"]], "Customize Configurations for GIE instance": [[332, "customize-configurations-for-gie-instance"]], "Customize image URI": [[27, "customize-image-uri"]], "Customized Algorithms": [[1, null]], "Customizing Interactive Engine Service Configuration": [[128, "customizing-interactive-engine-service-configuration"]], "Customizing Ports": [[132, "customizing-ports"]], "Cypher Support": [[337, null]], "Cypher.": [[316, "cypher"]], "Cython SDK API": [[370, null]], "Data Format": [[590, "data-format"]], "Data Import Configuration": [[130, null]], "Data Model": [[131, null]], "Data Source": [[426, null]], "Data Types": [[337, "data-types"], [588, "data-types"]], "Data files": [[588, "data-files"]], "Data model": [[433, "data-model"]], "DataloadingJobConfig": [[68, null]], "DataloadingJobConfigEdgesInner": [[69, null]], "DataloadingJobConfigLoadingConfig": [[70, null]], "DataloadingJobConfigLoadingConfigFormat": [[71, null]], "DataloadingJobConfigVerticesInner": [[72, null]], "DataloadingMRJobConfig": [[73, null]], "DateType": [[74, null], [151, null], [241, null]], "Debugging Techniques": [[38, "debugging-techniques"]], "Debugging on Kubernetes deployment": [[38, "debugging-on-kubernetes-deployment"]], "Debugging on local deployment": [[38, null]], "Decoder Class": [[307, "module-0"]], "Deduce vertex from edges": [[356, "deduce-vertex-from-edges"]], "Deduce vertex labels when not ambiguous": [[356, "deduce-vertex-labels-when-not-ambiguous"]], "DefaultSession Class": [[311, "defaultsession-class"]], "Define a C++ Stored Procedure": [[314, "define-a-c-stored-procedure"]], "Define a Stored Procedure": [[319, "define-a-stored-procedure"]], "Define test function": [[354, "define-test-function"]], "Define the PyG GraphSage Model and optimizer": [[355, "define-the-pyg-graphsage-model-and-optimizer"]], "Define the Training Process for the EgoGraphSAGE Model": [[353, "define-the-training-process-for-the-egographsage-model"]], "Define the YAML": [[314, "define-the-yaml"]], "Define the evaluation function": [[355, "define-the-evaluation-function"]], "Define the loader and training process": [[354, "define-the-loader-and-training-process"]], "Defining A FLASH Application": [[15, "defining-a-flash-application"]], "Defining Graph Mapping in GART": [[586, "defining-graph-mapping-in-gart"]], "Defining Your Own Operator": [[435, null]], "Degree Assortativity Coefficient": [[0, "degree-assortativity-coefficient"]], "Degree Centrality": [[0, "degree-centrality"]], "Degree Sequence": [[576, "module-graphscope.nx.generators.degree_seq"]], "Delete a Stored Procedures": [[319, "delete-a-stored-procedures"]], "Delete the graph": [[216, "delete-the-graph"], [308, "delete-the-graph"], [590, "delete-the-graph"]], "DeleteEdgeRequest": [[152, null], [242, null]], "DeleteGraph": [[173, "deletegraph"], [263, "deletegraph"]], "DeleteProcedure": [[181, "deleteprocedure"], [272, "deleteprocedure"]], "DeleteVertexRequest": [[153, null], [243, null]], "Dependency Graph": [[134, "dependency-graph"]], "Deploy GraphScope Operator": [[28, null]], "Deploy GraphScope along with Spark": [[23, "deploy-graphscope-along-with-spark"]], "Deploy GraphScope on Clouds": [[26, null]], "Deploy GraphScope with helm": [[29, null]], "Deploy Groot": [[590, "deploy-groot"]], "Deploy Your First GIE Service": [[329, "deploy-your-first-gie-service"]], "Deploy a Vineyard Cluster": [[30, "deploy-a-vineyard-cluster"]], "Deploy from Source Code": [[132, "deploy-from-source-code"]], "Deploy on K8s Cluster": [[27, null]], "Deploy on a Cluster": [[329, "deploy-on-a-cluster"]], "Deploy with Docker": [[132, "deploy-with-docker"]], "Deploy with Existing Vineyard Cluster": [[30, null]], "Deploy with Helm": [[132, "deploy-with-helm"]], "Deploying Customized Built Interactive": [[132, "deploying-customized-built-interactive"]], "Deploying GraphScope": [[27, "deploying-graphscope"]], "Deployment": [[132, null], [333, "deployment"]], "Deployment GAE only": [[2, "deployment-gae-only"]], "Deployment for GAE": [[2, null]], "Deployment with Helm": [[2, "deployment-with-helm"]], "Deployment with Python SDK": [[2, "deployment-with-python-sdk"]], "Depth-First Search": [[0, "depth-first-search"]], "Design Details": [[589, "design-details"]], "Design of Analytical Engine": [[3, null], [3, null], [34, null]], "Design of GIE": [[330, null]], "Design of GLE": [[347, null]], "Design of GOpt": [[333, "design-of-gopt"]], "Design of GraphScope": [[357, null]], "Design of Ingress": [[9, "design-of-ingress"]], "Destroy Groot": [[590, "destroy-groot"]], "Destroy the Interactive Instance": [[126, "destroy-the-interactive-instance"], [315, "destroy-the-interactive-instance"]], "Detailed Introduction": [[333, "detailed-introduction"]], "Dev Environment": [[36, "dev-environment"], [41, "dev-environment"], [45, "dev-environment"], [134, "dev-environment"], [331, "dev-environment"], [348, "dev-environment"]], "Dev and Test": [[4, null], [45, null], [134, null], [331, null], [348, null]], "Dev on docker container": [[348, "dev-on-docker-container"]], "Develop Giraph algorithm": [[22, "develop-giraph-algorithm"]], "Develop customized GraphX algorithm towards GraphScope.": [[23, "develop-customized-graphx-algorithm-towards-graphscope"]], "Develop on Docker Container": [[134, "develop-on-docker-container"]], "Develop with dev containers": [[45, "develop-with-dev-containers"]], "Develop with dev containers.": [[36, "develop-with-dev-containers"]], "Developing Algorithms with FLASH Model": [[15, "developing-algorithms-with-flash-model"]], "Developing Guide": [[590, "developing-guide"]], "Developing Your Algorithms with C++": [[594, "developing-your-algorithms-with-c"]], "Developing Your Algorithms with Java": [[594, "developing-your-algorithms-with-java"]], "Developing Your Algorithms with Python": [[594, "developing-your-algorithms-with-python"]], "Developing Your Own Model": [[425, null]], "Development": [[327, null]], "Development Guide": [[36, null]], "Development guide": [[44, null], [133, null]], "DiGraph": [[577, "digraph"]], "Directed": [[576, "module-graphscope.nx.generators.directed"]], "Directed Graphs": [[20, "directed-graphs"]], "Disaggregated Design for Diverse Graph Applications": [[357, "disaggregated-design-for-diverse-graph-applications"]], "Discussing and Keeping Your Pull Request Updated": [[37, "discussing-and-keeping-your-pull-request-updated"]], "Discussion on GitHub": [[25, "discussion-on-github"]], "Distributed Runtime Design": [[435, "distributed-runtime-design"]], "Distributed Runtime Engine": [[9, "distributed-runtime-engine"]], "Docker Setup": [[333, "docker-setup"]], "Docker image": [[432, "docker-image"]], "Documentation For Authorization": [[46, "documentation-for-authorization"], [309, "documentation-for-authorization"]], "Documentation For Models": [[46, "documentation-for-models"]], "Documentation for API Endpoints": [[46, "documentation-for-api-endpoints"]], "Documentation for Authorization": [[216, "documentation-for-authorization"]], "Documentation for Data Structures": [[216, "documentation-for-data-structures"], [309, "documentation-for-data-structures"]], "Documentation for Service APIs": [[216, "documentation-for-service-apis"], [309, "documentation-for-service-apis"]], "Documentation for Utilities APIs": [[216, "documentation-for-utilities-apis"], [309, "documentation-for-utilities-apis"]], "Download cypher-shell": [[315, "download-cypher-shell"]], "Download dependencies and GraphScope": [[31, "download-dependencies-and-graphscope"]], "Driver": [[306, null]], "Driver Class": [[306, "module-gs_interactive.client.driver"]], "Duplication Divergence": [[576, "module-graphscope.nx.generators.duplication"]], "E()": [[341, "e"]], "Ease-of-use: Python Interface": [[346, "ease-of-use-python-interface"]], "Edge": [[589, "edge"]], "Edge Attributes": [[20, "edge-attributes"]], "Edge Cut": [[10, "edge-cut"]], "Edge List": [[579, "edge-list"]], "Edge Mappings": [[130, "edge-mappings"]], "Edge-cut Partition Strategy": [[589, "edge-cut-partition-strategy"]], "EdgeAPI": [[154, null]], "EdgeApi": [[244, null]], "EdgeData": [[155, null], [245, null]], "EdgeMapping": [[76, null], [156, null], [246, null]], "EdgeMappingDestinationVertexMappingsInner": [[157, null], [247, null]], "EdgeMappingSourceVertexMappingsInner": [[158, null], [248, null]], "EdgeMappingSourceVertexMappingsInnerColumn": [[159, null], [249, null]], "EdgeMappingTypeTriplet": [[77, null], [160, null], [250, null]], "EdgeRequest": [[161, null], [251, null]], "EdgeStatistics": [[162, null], [252, null]], "Edges": [[443, "edges"]], "Ego Graph": [[576, "module-graphscope.nx.generators.ego"]], "EgoGraph-based node-centric aggregation": [[347, "egograph-based-node-centric-aggregation"]], "Eigenvector Centrality": [[0, "eigenvector-centrality"]], "Enable AdminService": [[134, "enable-adminservice"]], "Encoder": [[425, "encoder"], [433, "encoder"]], "Encoder Class": [[307, "module-gs_interactive.client.utils"]], "Encoder and Decoder": [[307, null]], "Encoder/Decoder": [[314, "encoder-decoder"]], "Engine Layer": [[12, "engine-layer"]], "Entity Data": [[131, "entity-data"]], "Enum: DeployModeEnum": [[194, "enum-deploymodeenum"]], "Enum: EdgeStorageStrategyEnum": [[138, "enum-edgestoragestrategyenum"]], "Enum: ImportOptionEnum": [[187, "enum-importoptionenum"]], "Enum: PrimitiveTypeEnum": [[165, "enum-primitivetypeenum"], [180, "enum-primitivetypeenum"]], "Enum: RelationEnum": [[137, "enum-relationenum"]], "Enum: SchemeEnum": [[188, "enum-schemeenum"]], "Enum: StatusEnum": [[177, "enum-statusenum"]], "Enum: StoreTypeEnum": [[167, "enum-storetypeenum"]], "Enum: TypeEnum": [[147, "enum-typeenum"], [170, "enum-typeenum"], [198, "enum-typeenum"]], "Error": [[78, null]], "Error Code": [[134, "error-code"]], "Error Codes": [[42, null], [596, null]], "Examining Elements of a Graph": [[20, "examining-elements-of-a-graph"]], "Example": [[47, "example"], [47, "id1"], [47, "id7"], [47, "id13"], [47, "id19"], [47, "id25"], [47, "id31"], [47, "id37"], [47, "id43"], [47, "id49"], [48, "example"], [49, "example"], [50, "example"], [51, "example"], [52, "example"], [53, "example"], [54, "example"], [55, "example"], [56, "example"], [57, "example"], [58, "example"], [59, "example"], [60, "example"], [61, "example"], [62, "example"], [63, "example"], [64, "example"], [65, "example"], [66, "example"], [67, "example"], [67, "id1"], [67, "id7"], [67, "id13"], [68, "example"], [69, "example"], [70, "example"], [71, "example"], [72, "example"], [73, "example"], [74, "example"], [75, "example"], [75, "id1"], [75, "id7"], [75, "id13"], [75, "id19"], [76, "example"], [77, "example"], [78, "example"], [79, "example"], [80, "example"], [81, "example"], [82, "example"], [83, "example"], [84, "example"], [85, "example"], [86, "example"], [87, "example"], [88, "example"], [89, "example"], [90, "example"], [91, "example"], [92, "example"], [93, "example"], [94, "example"], [94, "id1"], [94, "id7"], [94, "id13"], [94, "id19"], [94, "id25"], [94, "id31"], [94, "id37"], [94, "id43"], [94, "id49"], [95, "example"], [95, "id1"], [95, "id7"], [95, "id13"], [95, "id19"], [96, "example"], [97, "example"], [98, "example"], [99, "example"], [100, "example"], [101, "example"], [102, "example"], [103, "example"], [104, "example"], [105, "example"], [106, "example"], [106, "id1"], [106, "id7"], [106, "id13"], [106, "id19"], [107, "example"], [108, "example"], [109, "example"], [110, "example"], [110, "id1"], [110, "id7"], [110, "id13"], [110, "id19"], [111, "example"], [112, "example"], [113, "example"], [114, "example"], [115, "example"], [116, "example"], [117, "example"], [118, "example"], [119, "example"], [120, "example"], [121, "example"], [122, "example"], [123, "example"], [124, "example"], [154, "example"], [154, "id1"], [154, "id7"], [173, "example"], [173, "id1"], [173, "id7"], [173, "id13"], [173, "id19"], [173, "id25"], [173, "id31"], [175, "example"], [175, "id1"], [175, "id7"], [181, "example"], [181, "id1"], [181, "id7"], [181, "id13"], [181, "id19"], [184, "example"], [184, "id1"], [191, "example"], [191, "id1"], [191, "id7"], [191, "id13"], [209, "example"], [209, "id1"], [209, "id7"], [225, "example"], [226, "example"], [227, "example"], [228, "example"], [229, "example"], [230, "example"], [231, "example"], [232, "example"], [233, "example"], [234, "example"], [235, "example"], [236, "example"], [237, "example"], [238, "example"], [239, "example"], [240, "example"], [241, "example"], [242, "example"], [243, "example"], [244, "example"], [244, "id1"], [244, "id7"], [244, "id13"], [245, "example"], [246, "example"], [247, "example"], [248, "example"], [249, "example"], [250, "example"], [251, "example"], [252, "example"], [253, "example"], [254, "example"], [255, "example"], [256, "example"], [257, "example"], [258, "example"], [259, "example"], [260, "example"], [261, "example"], [262, "example"], [263, "example"], [263, "id1"], [263, "id7"], [263, "id13"], [263, "id19"], [263, "id25"], [263, "id31"], [263, "id37"], [263, "id43"], [263, "id49"], [263, "id55"], [263, "id61"], [263, "id67"], [263, "id73"], [264, "example"], [265, "example"], [265, "id1"], [265, "id7"], [266, "example"], [267, "example"], [268, "example"], [269, "example"], [270, "example"], [271, "example"], [272, "example"], [272, "id1"], [272, "id7"], [272, "id13"], [272, "id19"], [273, "example"], [274, "example"], [274, "id1"], [275, "example"], [276, "example"], [277, "example"], [278, "example"], [279, "example"], [280, "example"], [281, "example"], [281, "id1"], [281, "id7"], [281, "id13"], [282, "example"], [283, "example"], [284, "example"], [285, "example"], [286, "example"], [287, "example"], [288, "example"], [289, "example"], [290, "example"], [291, "example"], [292, "example"], [293, "example"], [294, "example"], [295, "example"], [296, "example"], [297, "example"], [298, "example"], [299, "example"], [299, "id1"], [299, "id7"], [299, "id13"], [300, "example"], [301, "example"], [302, "example"], [303, "example"], [304, "example"], [305, "example"]], "Execute graph analytical algorithms": [[2, "execute-graph-analytical-algorithms"]], "Execution Framework": [[34, "execution-framework"]], "Execution engine layer": [[357, "execution-engine-layer"]], "Expand": [[341, "expand"]], "Expanders": [[576, "module-graphscope.nx.generators.expanders"]], "Expansion": [[343, "expansion"]], "Expansion as filters": [[343, "expansion-as-filters"]], "Expansion from many starting points": [[343, "expansion-from-many-starting-points"]], "Expression": [[341, "expression"]], "Expression(Syntax Sugar)": [[343, "expression-syntax-sugar"]], "Extensible Algorithm Library for Graph Analytics": [[346, "extensible-algorithm-library-for-graph-analytics"]], "Extract Property Values": [[343, "extract-property-values"]], "FAQs": [[5, null]], "FAQs for GIE Gremlin Usage": [[339, null]], "FFIs": [[12, "ffis"]], "FLASH": [[359, "flash"]], "FLASH API": [[6, "flash-api"]], "FLEX Coordinator Python SDK": [[125, null]], "Features": [[588, "features"]], "Fennel": [[593, "fennel"]], "File Format": [[588, "file-format"]], "File System Interface": [[436, "file-system-interface"]], "Filter": [[341, "filter"]], "Filter & Expansion": [[343, "filter-expansion"]], "Filter Steps": [[343, "filter-steps"]], "Find logs for Graph Interactive Engine (GIE)": [[598, "find-logs-for-graph-interactive-engine-gie"]], "Find logs for Graph Learning Engine (GLE)": [[598, "find-logs-for-graph-learning-engine-gle"]], "Find logs for GraphScope Analytical Engine (GAE)": [[598, "find-logs-for-graphscope-analytical-engine-gae"]], "Find logs for Groot": [[598, "find-logs-for-groot"]], "Find logs in k8s": [[598, "find-logs-in-k8s"]], "Find the logs": [[38, "find-the-logs"], [38, "id1"]], "FixedChar": [[79, null], [163, null], [253, null]], "FixedCharChar": [[80, null], [164, null], [254, null]], "Flex API Reference": [[371, null]], "Flexible Memoization": [[9, "flexible-memoization"]], "Flexible programming models": [[34, "flexible-programming-models"]], "For computing engine": [[589, "for-computing-engine"]], "For storage engine": [[589, "for-storage-engine"]], "Fork and Create a Branch": [[37, "fork-and-create-a-branch"]], "Fragments in GraphScope": [[367, "fragments-in-graphscope"]], "Freezing graph structure": [[443, "freezing-graph-structure"]], "Frequently Asked Questions": [[322, null]], "Frequently used parameters": [[27, "frequently-used-parameters"]], "From Numpy": [[356, "from-numpy"]], "From Pandas": [[356, "from-pandas"]], "Functions": [[368, "functions"], [370, "functions"], [443, null]], "GAE": [[359, "gae"]], "GAIA": [[359, "gaia"]], "GART": [[359, "gart"]], "GART: Bridging the Gap between Relational OLTP and Graph Workloads": [[586, null]], "GAS Model": [[24, "gas-model"]], "GIE": [[359, "gie"]], "GIE For Tinkerpop Ecosystem": [[338, null], [344, null]], "GIE for Cypher": [[335, null]], "GIE for Gremlin": [[342, null]], "GNN Training & Inference": [[346, "gnn-training-inference"]], "GOpt: A Graph-Native Query Optimization Framework": [[333, null]], "GRAPE": [[359, "grape"]], "GRAPE Engine": [[12, "grape-engine"]], "GRIN": [[359, "grin"]], "GRIN Concepts": [[589, "grin-concepts"]], "GRIN: Graph Retrieval INterface": [[589, null]], "GSDataType": [[81, null], [165, null], [255, null]], "GSL": [[350, "gsl"]], "GUM": [[359, "gum"]], "Geometric": [[576, "module-graphscope.nx.generators.geometric"]], "Get from Maven Central Repository": [[17, "get-from-maven-central-repository"]], "Get the Code Format and Style Right": [[37, "get-the-code-format-and-style-right"]], "Get the Test Suite Running": [[37, "get-the-test-suite-running"]], "Get wheel package": [[432, "get-wheel-package"]], "GetAlertMessageResponse": [[82, null]], "GetAlertReceiverResponse": [[83, null]], "GetAlertRuleResponse": [[84, null]], "GetEdgeType": [[85, null], [166, null], [256, null]], "GetGraphMeta": [[173, "getgraphmeta"], [263, "getgraphmeta"]], "GetGraphResponse": [[86, null], [167, null], [257, null]], "GetGraphSchema": [[173, "getgraphschema"], [263, "getgraphschema"]], "GetGraphSchemaResponse": [[87, null], [168, null], [258, null]], "GetGraphStatistic": [[173, "getgraphstatistic"]], "GetGraphStatistics": [[263, "getgraphstatistics"]], "GetGraphStatisticsResponse": [[169, null], [259, null]], "GetJobById": [[175, "getjobbyid"], [265, "getjobbyid"]], "GetPodLogResponse": [[88, null]], "GetProcedure": [[181, "getprocedure"], [272, "getprocedure"]], "GetProcedureResponse": [[170, null], [260, null]], "GetPropertyMeta": [[89, null], [171, null], [261, null]], "GetResourceUsageResponse": [[90, null]], "GetServiceStatus": [[191, "getservicestatus"], [281, "getservicestatus"]], "GetStorageUsageResponse": [[91, null]], "GetStoredProcResponse": [[92, null]], "GetVertexType": [[93, null], [172, null], [262, null]], "Getting Properties": [[341, "getting-properties"]], "Getting Started": [[7, null], [46, "getting-started"], [126, null], [216, "getting-started"], [308, "getting-started"], [315, null], [332, null], [333, "getting-started"], [334, "getting-started"], [334, "id1"], [349, null], [358, null], [587, null]], "Getting Started for GLE": [[323, null]], "Getting Started.": [[314, "getting-started"]], "GitHub Discussion": [[37, "github-discussion"]], "Glossary": [[316, null], [359, null]], "Graph": [[439, null], [443, "graph"], [577, "graph"]], "Graph Analysis": [[19, "graph-analysis"]], "Graph Analytical Engine": [[327, null], [365, "graph-analytical-engine"]], "Graph Analytical Task Quick Start": [[358, "graph-analytical-task-quick-start"]], "Graph Analytics": [[324, "graph-analytics"]], "Graph Analytics Workloads": [[360, null]], "Graph Attributes": [[20, "graph-attributes"]], "Graph Data": [[131, "graph-data"]], "Graph Database Engine": [[314, "graph-database-engine"]], "Graph Display": [[19, "graph-display"]], "Graph Functions": [[439, "graph-functions"]], "Graph Interactive Engine": [[327, null], [365, "graph-interactive-engine"]], "Graph Interactive Query": [[324, "graph-interactive-query"]], "Graph Interactive Query Quick Start": [[358, "graph-interactive-query-quick-start"]], "Graph Interactive Workloads": [[361, null]], "Graph Learning": [[324, "graph-learning"], [441, null]], "Graph Learning Engine": [[327, null]], "Graph Learning Model": [[433, null]], "Graph Learning Quick Start": [[358, "graph-learning-quick-start"]], "Graph Learning Workloads": [[362, null]], "Graph Object": [[427, null]], "Graph Pattern Matching": [[333, "graph-pattern-matching"]], "Graph Planner Interface by JNI and RESTful API": [[334, null]], "Graph Query": [[428, null]], "Graph Sampling": [[350, null], [429, null]], "Graph Sampling Language\uff08GSL)": [[431, null]], "Graph Storage": [[34, "graph-storage"]], "Graph Transformation": [[580, null]], "Graph Traversal": [[350, "graph-traversal"], [361, "graph-traversal"], [430, null]], "Graph Traversal Support, in Gremlin and Cypher": [[346, "graph-traversal-support-in-gremlin-and-cypher"]], "Graph Workloads": [[324, null]], "Graph generators": [[576, null]], "Graph neural networks (GNNs)": [[352, "graph-neural-networks-gnns"]], "Graph object": [[439, "graph-object"]], "Graph types": [[577, null]], "GraphAr": [[359, "graphar"]], "GraphAr in GraphScope": [[588, "graphar-in-graphscope"]], "GraphAr: Standard Graph Data File Format": [[588, null]], "GraphManagementApI": [[263, null]], "GraphManagementApi": [[173, null]], "GraphScope C++ SDK with GitHub Template": [[16, "graphscope-c-sdk-with-github-template"]], "GraphScope Flex": [[327, null]], "GraphScope Interactive": [[320, null]], "GraphScope JavaSDK with GitHub Template": [[17, "graphscope-javasdk-with-github-template"]], "GraphScope for BI analysis": [[357, "graphscope-for-bi-analysis"]], "GraphScope for Data Scientists": [[325, null]], "GraphScope for graph analytics": [[357, "graphscope-for-graph-analytics"]], "GraphScope for high QPS queries": [[357, "graphscope-for-high-qps-queries"]], "GraphScope for learning": [[357, "graphscope-for-learning"]], "GraphScope types": [[370, "graphscope-types"]], "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba": [[327, null]], "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": [[606, null]], "GraphServiceRegistryRecord": [[174, null], [264, null]], "Graphs in Vineyard": [[591, "graphs-in-vineyard"]], "Gremlin Console\uff08\u5f00\u53d1\u63a7\u5236\u53f0\uff09": [[608, "id5"]], "Gremlin\u517c\u5bb9\u6027\uff08\u5bf9\u6bd4TinkerPop\uff09": [[608, "gremlin-tinkerpop"]], "Gremlin\u7f16\u7a0b\u5165\u95e8\u2013101": [[608, "gremlin-101"]], "Groot": [[359, "groot"]], "Groot: Persistent Graph Store": [[590, null]], "Guide and Examples": [[8, null], [340, null], [351, null]], "HTTP request headers": [[47, "http-request-headers"], [47, "id5"], [47, "id11"], [47, "id17"], [47, "id23"], [47, "id29"], [47, "id35"], [47, "id41"], [47, "id47"], [47, "id53"], [67, "http-request-headers"], [67, "id5"], [67, "id11"], [67, "id17"], [75, "http-request-headers"], [75, "id5"], [75, "id11"], [75, "id17"], [75, "id23"], [94, "http-request-headers"], [94, "id5"], [94, "id11"], [94, "id17"], [94, "id23"], [94, "id29"], [94, "id35"], [94, "id41"], [94, "id47"], [94, "id53"], [95, "http-request-headers"], [95, "id5"], [95, "id11"], [95, "id17"], [95, "id23"], [106, "http-request-headers"], [106, "id5"], [106, "id11"], [106, "id17"], [106, "id23"], [110, "http-request-headers"], [110, "id5"], [110, "id11"], [110, "id17"], [110, "id23"], [121, "http-request-headers"], [154, "http-request-headers"], [154, "id5"], [154, "id11"], [173, "http-request-headers"], [173, "id5"], [173, "id11"], [173, "id17"], [173, "id23"], [173, "id29"], [173, "id35"], [175, "http-request-headers"], [175, "id5"], [175, "id11"], [181, "http-request-headers"], [181, "id5"], [181, "id11"], [181, "id17"], [181, "id23"], [184, "http-request-headers"], [184, "id5"], [191, "http-request-headers"], [191, "id5"], [191, "id11"], [191, "id17"], [209, "http-request-headers"], [209, "id5"], [209, "id11"], [244, "http-request-headers"], [244, "id5"], [244, "id11"], [244, "id17"], [263, "http-request-headers"], [263, "id5"], [263, "id11"], [263, "id17"], [263, "id23"], [263, "id29"], [263, "id35"], [263, "id41"], [263, "id47"], [263, "id53"], [263, "id59"], [263, "id65"], [263, "id71"], [263, "id77"], [265, "http-request-headers"], [265, "id5"], [265, "id11"], [272, "http-request-headers"], [272, "id5"], [272, "id11"], [272, "id17"], [272, "id23"], [274, "http-request-headers"], [274, "id5"], [281, "http-request-headers"], [281, "id5"], [281, "id11"], [281, "id17"], [299, "http-request-headers"], [299, "id5"], [299, "id11"], [299, "id17"]], "HTTP response details": [[47, "http-response-details"], [47, "id6"], [47, "id12"], [47, "id18"], [47, "id24"], [47, "id30"], [47, "id36"], [47, "id42"], [47, "id48"], [47, "id54"], [67, "http-response-details"], [67, "id6"], [67, "id12"], [67, "id18"], [75, "http-response-details"], [75, "id6"], [75, "id12"], [75, "id18"], [75, "id24"], [94, "http-response-details"], [94, "id6"], [94, "id12"], [94, "id18"], [94, "id24"], [94, "id30"], [94, "id36"], [94, "id42"], [94, "id48"], [94, "id54"], [95, "http-response-details"], [95, "id6"], [95, "id12"], [95, "id18"], [95, "id24"], [106, "http-response-details"], [106, "id6"], [106, "id12"], [106, "id18"], [106, "id24"], [110, "http-response-details"], [110, "id6"], [110, "id12"], [110, "id18"], [110, "id24"], [121, "http-response-details"], [154, "http-response-details"], [154, "id6"], [154, "id12"], [173, "http-response-details"], [173, "id6"], [173, "id12"], [173, "id18"], [173, "id24"], [173, "id30"], [173, "id36"], [175, "http-response-details"], [175, "id6"], [175, "id12"], [181, "http-response-details"], [181, "id6"], [181, "id12"], [181, "id18"], [181, "id24"], [184, "http-response-details"], [184, "id6"], [191, "http-response-details"], [191, "id6"], [191, "id12"], [191, "id18"], [209, "http-response-details"], [209, "id6"], [209, "id12"], [244, "http-response-details"], [244, "id6"], [244, "id12"], [244, "id18"], [263, "http-response-details"], [263, "id6"], [263, "id12"], [263, "id18"], [263, "id24"], [263, "id30"], [263, "id36"], [263, "id42"], [263, "id48"], [263, "id54"], [263, "id60"], [263, "id66"], [263, "id72"], [263, "id78"], [265, "http-response-details"], [265, "id6"], [265, "id12"], [272, "http-response-details"], [272, "id6"], [272, "id12"], [272, "id18"], [272, "id24"], [274, "http-response-details"], [274, "id6"], [281, "http-response-details"], [281, "id6"], [281, "id12"], [281, "id18"], [299, "http-response-details"], [299, "id6"], [299, "id12"], [299, "id18"]], "Handler": [[589, "handler"]], "Handling Various Types of Graph Workloads": [[364, "handling-various-types-of-graph-workloads"]], "Harary Graph": [[576, "module-graphscope.nx.generators.harary_graph"]], "High Performant Built-in Algorithms": [[346, "high-performant-built-in-algorithms"]], "High-performance runtime": [[34, "high-performance-runtime"]], "How does Networkx Perform Graph Analysis?": [[19, "how-does-networkx-perform-graph-analysis"]], "How to Build a Graph Learning Algorithm": [[425, "how-to-build-a-graph-learning-algorithm"]], "How to Contribute": [[37, null]], "How to Find logs": [[598, null]], "How to Perform Graph Analysis with NetworkX APIs from GraphScope": [[19, "how-to-perform-graph-analysis-with-networkx-apis-from-graphscope"]], "How to Report Bugs": [[326, null]], "How to Review Pull Requests": [[37, "how-to-review-pull-requests"]], "How to Submit Pull-requests": [[40, null]], "How to Test": [[41, null], [348, "how-to-test"]], "How to Use an Operator": [[435, "how-to-use-an-operator"]], "How to aggregate data in GIE Gremlin like SQL?": [[339, "how-to-aggregate-data-in-gie-gremlin-like-sql"]], "How to filter data in GIE Gremlin like SQL ?": [[339, "how-to-filter-data-in-gie-gremlin-like-sql"]], "How to instrument": [[39, null]], "How to optimize Gremlin queries for performance in GIE?": [[339, "how-to-optimize-gremlin-queries-for-performance-in-gie"]], "How to use path expand in GIE Gremlin ?": [[339, "how-to-use-path-expand-in-gie-gremlin"]], "How to use subgraph in GIE Gremlin ?": [[339, "how-to-use-subgraph-in-gie-gremlin"]], "Hybrid Graph Relational": [[333, "hybrid-graph-relational"]], "Hybrid partitioning": [[593, "hybrid-partitioning"]], "Hyperlink-Induced Topic Search": [[0, "hyperlink-induced-topic-search"]], "Identity": [[341, "identity"]], "Implement Your Fix or Feature": [[37, "implement-your-fix-or-feature"]], "Implement a New Operator": [[435, "implement-a-new-operator"]], "Implement your algorithm": [[17, "implement-your-algorithm"]], "Implement your operator class": [[435, "implement-your-operator-class"]], "Implement your own algorithms in Java.": [[17, "implement-your-own-algorithms-in-java"]], "Implementation": [[6, "implementation"]], "Implementation Guideline": [[589, "implementation-guideline"]], "Implementing the Run Function": [[15, "implementing-the-run-function"]], "Import Graph Data": [[45, "import-graph-data"]], "Import data to the graph": [[216, "import-data-to-the-graph"], [308, "import-data-to-the-graph"], [590, "import-data-to-the-graph"]], "Import from CSV": [[130, "import-from-csv"]], "Import from ODPS Table": [[130, "import-from-odps-table"]], "Import packages": [[354, "import-packages"]], "Importing Data": [[333, "importing-data"]], "Improving Documentation": [[37, "improving-documentation"]], "In-memory immutable graphs on Vineyard": [[591, null]], "Include dependency": [[23, "include-dependency"]], "Incremental Computation Engine": [[12, "incremental-computation-engine"]], "Indices and tables": [[327, "indices-and-tables"]], "Induce deepcopy subgraph and edge_subgraph": [[20, "induce-deepcopy-subgraph-and-edge-subgraph"]], "Information files": [[588, "information-files"]], "Ingress": [[359, "ingress"]], "Ingress API": [[9, "ingress-api"]], "Ingress: Incrementalize Graph Algorithms": [[9, null]], "InnerVertex": [[10, "innervertex"]], "InnerVertexWithIncomingEdge": [[10, "innervertexwithincomingedge"]], "InnerVertexWithOutgoingEdge": [[10, "innervertexwithoutgoingedge"]], "Inspect the deployment": [[27, "inspect-the-deployment"]], "Install": [[432, "install"]], "Install Deps on Local": [[134, "install-deps-on-local"]], "Install GraphScope Client": [[27, "install-graphscope-client"], [30, "install-graphscope-client"]], "Install GraphScope in offline environment": [[31, null]], "Install GraphScope on Local": [[32, null]], "Install Interactive": [[315, "install-interactive"]], "Install TensorFlow": [[432, "install-tensorflow"]], "Install and Deploy Interactive": [[317, "install-and-deploy-interactive"]], "Install basic packages and gcc-g++,\u00a0python": [[31, "install-basic-packages-and-gcc-g-python"]], "Install dependent libraries": [[432, "install-dependent-libraries"]], "Install deps on local": [[36, "install-deps-on-local"], [45, "install-deps-on-local"], [348, "install-deps-on-local"]], "Install from ArtifactHub": [[590, "install-from-artifacthub"]], "Install from packages": [[32, "install-from-packages"]], "Install from pip": [[432, null]], "Install from source": [[31, "install-from-source"], [32, "install-from-source"]], "Install from wheels": [[31, "install-from-wheels"]], "Install git": [[432, "install-git"]], "Install pre-commit": [[37, "install-pre-commit"]], "Install preview version of GraphScope": [[32, "install-preview-version-of-graphscope"]], "Install stable version of GraphScope": [[32, "install-stable-version-of-graphscope"]], "Install third-party dependencies and GraphScope Analytical Engine": [[31, "install-third-party-dependencies-and-graphscope-analytical-engine"]], "Install using pip": [[432, "install-using-pip"]], "Install/Update gsctl": [[597, "install-update-gsctl"]], "Installation": [[7, "installation"], [29, "installation"], [216, "installation"], [317, null], [332, "installation"], [333, "installation"], [349, "installation"], [590, "installation"], [590, "id1"]], "Installation & Deployment": [[327, null]], "Installation & Usage": [[46, "installation-usage"], [308, "installation-usage"]], "Installing from a local directory": [[590, "installing-from-a-local-directory"]], "Integrating Other Data Sources": [[436, null]], "Integrating with the Python Client of GraphScope": [[15, "integrating-with-the-python-client-of-graphscope"]], "Integration of GOpt": [[333, "integration-of-gopt"]], "Integration with PyData Ecosystem": [[325, "integration-with-pydata-ecosystem"]], "Interactive Query": [[440, null]], "Interactive Query Engine": [[134, "interactive-query-engine"]], "Interactive RESTFul API": [[313, null]], "Interactive SDK": [[590, "interactive-sdk"]], "Interface Overview": [[334, "interface-overview"]], "Intersection": [[576, "module-graphscope.nx.generators.intersection"]], "Introducing GOpt": [[333, "introducing-gopt"]], "Introducing GraphScope": [[363, null]], "Introduction": [[341, "introduction"]], "Introduction to ArrowFragment": [[321, null]], "JNI API": [[334, "jni-api"]], "Java": [[39, "java"]], "Java Reference (javadoc)": [[373, null]], "Java SDK": [[314, "java-sdk"]], "Java SDK Reference": [[216, null]], "Java Style": [[35, "java-style"]], "JavaApp": [[368, "javaapp"]], "JobManagementApi": [[175, null]], "JobResponse": [[176, null], [266, null]], "JobStatus": [[96, null], [177, null], [267, null]], "Joint Degree Sequence": [[576, "module-graphscope.nx.generators.joint_degree_seq"]], "K-Core": [[0, "k-core"]], "K-Shell": [[0, "k-shell"]], "Katz Centrality": [[0, "katz-centrality"]], "Key Concepts": [[10, null]], "Key Features": [[318, "key-features"], [346, null]], "Known Limitation": [[590, "known-limitation"]], "LCC": [[0, "lcc"]], "LDBC BI11": [[343, "ldbc-bi11"]], "LDBC BI14": [[343, "ldbc-bi14"]], "LDBC BI2": [[343, "ldbc-bi2"]], "LDBC BI3": [[343, "ldbc-bi3"]], "LDBC BI4(Left Part)": [[343, "ldbc-bi4-left-part"]], "Label": [[589, "label"], [610, "label"]], "Label Propagation Algorithm": [[0, "label-propagation-algorithm"]], "LabeledVertexDataContext": [[583, "labeledvertexdatacontext"]], "LabeledVertexPropertyContext": [[583, "labeledvertexpropertycontext"]], "Launch the Learning Engine": [[353, "launch-the-learning-engine"], [355, "launch-the-learning-engine"]], "Launch the Server Engine": [[354, "launch-the-server-engine"]], "Launch with default parameters": [[27, "launch-with-default-parameters"]], "Launching Coordinator": [[45, "launching-coordinator"]], "Limit Step": [[343, "limit-step"]], "Limitations": [[318, "limitations"], [341, "limitations"]], "Linux": [[602, "linux"]], "List": [[589, "list"]], "List Iterator": [[589, "list-iterator"]], "ListGraphs": [[173, "listgraphs"], [263, "listgraphs"]], "ListJobs": [[175, "listjobs"], [265, "listjobs"]], "ListProcedures": [[181, "listprocedures"], [272, "listprocedures"]], "Load Built-in Datasets": [[356, "load-built-in-datasets"]], "Load Graph": [[353, "load-graph"], [355, "load-graph"]], "Load a graph to the existing vineyard cluster": [[30, "load-a-graph-to-the-existing-vineyard-cluster"]], "Load the LDBC Graph": [[343, "load-the-ldbc-graph"]], "Load the dataset to the Kubernetes cluster": [[30, "load-the-dataset-to-the-kubernetes-cluster"]], "LoadStrategy": [[10, "loadstrategy"]], "Loader Variants": [[356, "loader-variants"]], "Loader object": [[439, "loader-object"]], "Loader \u7684\u53d8\u79cd": [[610, "loader"]], "Loading Configurations": [[130, "loading-configurations"]], "Loading From Pandas or Numpy": [[356, "loading-from-pandas-or-numpy"]], "Loading GraphAr Data into GraphScope": [[588, "loading-graphar-data-into-graphscope"]], "Loading Graphs": [[356, null]], "Loading Graphs to Vineyard": [[591, "loading-graphs-to-vineyard"]], "Loading Logs to GART Storage": [[586, "loading-logs-to-gart-storage"]], "Loading Process": [[590, "loading-process"]], "Loading Your Own Datasets": [[356, "loading-your-own-datasets"]], "Local Complete": [[589, "local-complete"]], "Local Setup": [[333, "local-setup"]], "Local Vertex Map support": [[1, "local-vertex-map-support"]], "LongText": [[97, null], [178, null], [268, null]], "Loss Function and Training Process": [[425, "loss-function-and-training-process"]], "Making Copies": [[20, "making-copies"]], "Making Modifications": [[4, "making-modifications"]], "Manually Start the GIE Services": [[331, "manually-start-the-gie-services"]], "Master and Mirror": [[589, "master-and-mirror"]], "Match": [[341, "match"]], "Maven users": [[216, "maven-users"]], "MaxGraph (deprecated)": [[359, "maxgraph-deprecated"]], "Memory Footprint of Property Graphs": [[13, "memory-footprint-of-property-graphs"]], "Memory usage estimation": [[13, "memory-usage-estimation"]], "Merging a PR (maintainers only)": [[37, "merging-a-pr-maintainers-only"]], "Message-driven Differentiation": [[9, "message-driven-differentiation"]], "MessageManager and MessageStrategy": [[10, "messagemanager-and-messagestrategy"]], "Methods that use selectors": [[583, "methods-that-use-selectors"]], "Minor Fixes": [[37, "minor-fixes"]], "Model Paradigms": [[347, "model-paradigms"]], "ModelProperty": [[269, null]], "Modify the graph schema": [[590, "modify-the-graph-schema"]], "Monitoring": [[599, null]], "Motivation": [[6, "motivation"], [9, "motivation"], [333, "motivation"], [357, "motivation"]], "Motivations": [[589, "motivations"]], "Mount volumes": [[27, "mount-volumes"]], "Multi-dimensional results": [[583, "multi-dimensional-results"]], "Multi-language SDKs": [[34, "multi-language-sdks"]], "Multiple Expansion Steps": [[343, "multiple-expansion-steps"]], "Multiple relations": [[356, "multiple-relations"]], "Mycielski": [[576, "module-graphscope.nx.generators.mycielski"]], "Natural ID Trait": [[589, "natural-id-trait"]], "Negative Sampling": [[350, "negative-sampling"], [434, null]], "Neighborhood Sampling": [[350, "neighborhood-sampling"]], "Neo4j Ecosystem": [[338, null]], "Neo4j and Cypher": [[361, "neo4j-and-cypher"]], "NetworkX Compatibility": [[11, null]], "NetworkX-style API": [[578, null]], "Node Attributes": [[20, "node-attributes"]], "NodeStatus": [[98, null]], "Nodes": [[443, "nodes"]], "Non Isomorphic Trees": [[576, "module-graphscope.nx.generators.nonisomorphic_trees"]], "Offline Data Loading": [[590, "offline-data-loading"]], "Offline Installation": [[29, "offline-installation"]], "One-dimensional results": [[583, "one-dimensional-results"]], "One-stop Graph Processing": [[358, "one-stop-graph-processing"]], "OnlyIn": [[10, "onlyin"]], "OnlyOut": [[10, "onlyout"]], "Operation": [[581, null]], "Operation object": [[581, "operation-object"]], "Operators": [[337, "operators"]], "Optimizations": [[6, "optimizations"]], "Optimizing Memory Usage": [[13, "optimizing-memory-usage"]], "Optimizing Performance of Graph Analytics": [[13, "optimizing-performance-of-graph-analytics"]], "Order": [[589, "order"]], "Order Step": [[343, "order-step"]], "Other Useful Configurations": [[329, "other-useful-configurations"]], "Other features": [[590, "other-features"]], "Other parameters of graph": [[356, "other-parameters-of-graph"]], "Others": [[216, "others"]], "OuterVertex": [[10, "outervertex"]], "Overview": [[6, "overview"], [9, "overview"], [318, null], [327, null], [433, "overview"], [590, "overview"]], "Overview and Architecture": [[12, null]], "PIE": [[370, "pie"]], "PIE-model": [[359, "pie-model"]], "Packing Interactive from Source": [[132, "packing-interactive-from-source"]], "PageRank": [[0, "pagerank"]], "Paradigm of Model Training": [[362, "paradigm-of-model-training"]], "Parameter": [[99, null], [179, null], [270, null]], "Parameters": [[47, "parameters"], [47, "id2"], [47, "id8"], [47, "id14"], [47, "id20"], [47, "id26"], [47, "id32"], [47, "id38"], [47, "id44"], [47, "id50"], [67, "parameters"], [67, "id2"], [67, "id8"], [67, "id14"], [75, "parameters"], [75, "id2"], [75, "id8"], [75, "id14"], [75, "id20"], [94, "parameters"], [94, "id2"], [94, "id8"], [94, "id14"], [94, "id20"], [94, "id26"], [94, "id32"], [94, "id38"], [94, "id44"], [94, "id50"], [95, "parameters"], [95, "id2"], [95, "id8"], [95, "id14"], [95, "id20"], [106, "parameters"], [106, "id2"], [106, "id8"], [106, "id14"], [106, "id20"], [110, "parameters"], [110, "id2"], [110, "id8"], [110, "id14"], [110, "id20"], [121, "parameters"], [154, "parameters"], [154, "id2"], [154, "id8"], [173, "parameters"], [173, "id2"], [173, "id8"], [173, "id14"], [173, "id20"], [173, "id26"], [173, "id32"], [175, "parameters"], [175, "id2"], [175, "id8"], [181, "parameters"], [181, "id2"], [181, "id8"], [181, "id14"], [181, "id20"], [184, "parameters"], [184, "id2"], [191, "parameters"], [191, "id2"], [191, "id8"], [191, "id14"], [209, "parameters"], [209, "id2"], [209, "id8"], [244, "parameters"], [244, "id2"], [244, "id8"], [244, "id14"], [263, "parameters"], [263, "id2"], [263, "id8"], [263, "id14"], [263, "id20"], [263, "id26"], [263, "id32"], [263, "id38"], [263, "id44"], [263, "id50"], [263, "id56"], [263, "id62"], [263, "id68"], [263, "id74"], [265, "parameters"], [265, "id2"], [265, "id8"], [272, "parameters"], [272, "id2"], [272, "id8"], [272, "id14"], [272, "id20"], [274, "parameters"], [274, "id2"], [281, "parameters"], [281, "id2"], [281, "id8"], [281, "id14"], [299, "parameters"], [299, "id2"], [299, "id8"], [299, "id14"], [319, "parameters"], [319, "id1"], [319, "id3"]], "Partition Strategy": [[589, "partition-strategy"]], "PartitionStrategy": [[10, "partitionstrategy"]], "Path Expansion (Syntactic Sugar)": [[343, "path-expansion-syntactic-sugar"]], "PathExpand": [[341, "pathexpand"]], "Pattern Match": [[343, "pattern-match"]], "Pattern Matching": [[361, "pattern-matching"], [361, "id1"]], "Pegasus": [[359, "pegasus"]], "Performance Tuning": [[13, null]], "Performance and Benchmark": [[365, null]], "Performance on GPUs": [[365, "performance-on-gpus"]], "Persistence": [[590, "persistence"]], "Persistent storage of graphs on the Kubernetes cluster": [[33, null]], "Pipeline for Learning": [[347, "pipeline-for-learning"]], "PodStatus": [[100, null]], "Ports": [[128, "ports"]], "Positioning of GraphScope": [[364, null]], "Predefined Macros": [[589, "predefined-macros"]], "Pregel": [[370, "pregel"]], "Pregel Model": [[24, "pregel-model"]], "Preparation": [[45, "preparation"], [126, "preparation"], [315, "preparation"]], "Prepare GRAPE-jdk": [[17, "prepare-grape-jdk"]], "Prepare a Kubernetes cluster": [[27, "prepare-a-kubernetes-cluster"], [30, "prepare-a-kubernetes-cluster"], [41, "prepare-a-kubernetes-cluster"]], "Prerequisite": [[590, "prerequisite"]], "Prerequisites": [[2, "prerequisites"], [27, "prerequisites"], [29, "prerequisites"], [30, "prerequisites"], [32, "prerequisites"], [33, "prerequisites"], [317, "prerequisites"], [329, "prerequisites"], [590, "prerequisites"]], "Prerequisites:": [[16, "prerequisites"]], "Primitive Types": [[131, "primitive-types"]], "PrimitiveType": [[101, null], [180, null], [271, null]], "ProcedureManagementApi": [[181, null]], "Program as Single Machine and Run as Distributed": [[325, "program-as-single-machine-and-run-as-distributed"]], "Programming Interface": [[314, "programming-interface"], [435, "programming-interface"]], "Programming Model APIs": [[12, "programming-model-apis"]], "Programming Model: FLASH": [[6, null]], "Programming Model: PIE": [[14, null]], "Project": [[341, "project"]], "Project Steps": [[343, "project-steps"]], "Project Structure": [[372, "project-structure"]], "Properties": [[48, "properties"], [49, "properties"], [50, "properties"], [51, "properties"], [52, "properties"], [53, "properties"], [54, "properties"], [55, "properties"], [56, "properties"], [57, "properties"], [58, "properties"], [59, "properties"], [60, "properties"], [61, "properties"], [62, "properties"], [63, "properties"], [64, "properties"], [65, "properties"], [66, "properties"], [68, "properties"], [69, "properties"], [70, "properties"], [71, "properties"], [72, "properties"], [73, "properties"], [74, "properties"], [76, "properties"], [77, "properties"], [78, "properties"], [79, "properties"], [80, "properties"], [81, "properties"], [82, "properties"], [83, "properties"], [84, "properties"], [85, "properties"], [86, "properties"], [87, "properties"], [88, "properties"], [89, "properties"], [90, "properties"], [91, "properties"], [92, "properties"], [93, "properties"], [96, "properties"], [97, "properties"], [98, "properties"], [99, "properties"], [100, "properties"], [101, "properties"], [102, "properties"], [103, "properties"], [104, "properties"], [105, "properties"], [107, "properties"], [108, "properties"], [109, "properties"], [111, "properties"], [112, "properties"], [113, "properties"], [114, "properties"], [115, "properties"], [116, "properties"], [117, "properties"], [118, "properties"], [119, "properties"], [120, "properties"], [122, "properties"], [123, "properties"], [124, "properties"], [135, "properties"], [136, "properties"], [137, "properties"], [138, "properties"], [139, "properties"], [140, "properties"], [141, "properties"], [142, "properties"], [143, "properties"], [144, "properties"], [145, "properties"], [146, "properties"], [147, "properties"], [148, "properties"], [149, "properties"], [150, "properties"], [151, "properties"], [152, "properties"], [153, "properties"], [155, "properties"], [156, "properties"], [157, "properties"], [158, "properties"], [159, "properties"], [160, "properties"], [161, "properties"], [162, "properties"], [163, "properties"], [164, "properties"], [165, "properties"], [166, "properties"], [167, "properties"], [168, "properties"], [169, "properties"], [170, "properties"], [171, "properties"], [172, "properties"], [174, "properties"], [176, "properties"], [177, "properties"], [178, "properties"], [179, "properties"], [180, "properties"], [182, "properties"], [183, "properties"], [185, "properties"], [186, "properties"], [187, "properties"], [188, "properties"], [189, "properties"], [190, "properties"], [192, "properties"], [193, "properties"], [194, "properties"], [195, "properties"], [196, "properties"], [197, "properties"], [198, "properties"], [199, "properties"], [200, "properties"], [201, "properties"], [202, "properties"], [203, "properties"], [204, "properties"], [205, "properties"], [206, "properties"], [207, "properties"], [208, "properties"], [210, "properties"], [211, "properties"], [212, "properties"], [213, "properties"], [214, "properties"], [215, "properties"], [225, "properties"], [226, "properties"], [227, "properties"], [228, "properties"], [229, "properties"], [230, "properties"], [231, "properties"], [232, "properties"], [233, "properties"], [234, "properties"], [235, "properties"], [236, "properties"], [237, "properties"], [238, "properties"], [239, "properties"], [240, "properties"], [241, "properties"], [242, "properties"], [243, "properties"], [245, "properties"], [246, "properties"], [247, "properties"], [248, "properties"], [249, "properties"], [250, "properties"], [251, "properties"], [252, "properties"], [253, "properties"], [254, "properties"], [255, "properties"], [256, "properties"], [257, "properties"], [258, "properties"], [259, "properties"], [260, "properties"], [261, "properties"], [262, "properties"], [264, "properties"], [266, "properties"], [267, "properties"], [268, "properties"], [269, "properties"], [270, "properties"], [271, "properties"], [273, "properties"], [275, "properties"], [276, "properties"], [277, "properties"], [278, "properties"], [279, "properties"], [280, "properties"], [282, "properties"], [283, "properties"], [284, "properties"], [285, "properties"], [286, "properties"], [287, "properties"], [288, "properties"], [289, "properties"], [290, "properties"], [291, "properties"], [292, "properties"], [293, "properties"], [294, "properties"], [295, "properties"], [296, "properties"], [297, "properties"], [298, "properties"], [300, "properties"], [301, "properties"], [302, "properties"], [303, "properties"], [304, "properties"], [305, "properties"]], "Property": [[182, null], [589, "property"]], "Property Data Types": [[588, "property-data-types"]], "Property Graph Constraints": [[339, "property-graph-constraints"]], "Property Graph Model": [[589, "property-graph-model"]], "Property Graph Model and Graph Queries": [[318, "property-graph-model-and-graph-queries"]], "Property Types": [[337, "property-types"]], "Property graph data structure": [[13, "property-graph-data-structure"]], "Provide a kubeconfig file other than default": [[27, "provide-a-kubeconfig-file-other-than-default"]], "Pushing to Your Own Registry": [[132, "pushing-to-your-own-registry"]], "Putting them Together": [[356, "putting-them-together"]], "Python API Reference": [[582, null]], "Python SDK": [[314, "python-sdk"], [590, "python-sdk"]], "Python SDK Guide": [[308, null]], "Python SDK Reference": [[309, null]], "Python Style": [[35, "python-style"]], "Query Data": [[590, "query-data"]], "Query Input and Output": [[314, "query-input-and-output"]], "Query Processing": [[330, "query-processing"]], "Query the stored procedure": [[216, "query-the-stored-procedure"]], "QueryRequest": [[183, null], [273, null]], "QueryServiceApi": [[184, null]], "Querying Stored Procedures": [[319, "querying-stored-procedures"]], "Quick Start": [[333, "quick-start"], [437, null]], "Reading graphs": [[579, null]], "Real Applications": [[343, "real-applications"], [343, "id1"]], "Reference": [[327, null], [589, "reference"]], "Register Operator": [[435, "register-operator"]], "Register and Call the stored procedure": [[314, "register-and-call-the-stored-procedure"]], "Register with Scheme": [[436, "register-with-scheme"]], "RegistryInstanceRecord": [[185, null], [275, null]], "Relational Operations": [[343, "relational-operations"]], "Remove the GIE Service": [[329, "remove-the-gie-service"]], "Removing Elements from a Graph": [[20, "removing-elements-from-a-graph"]], "Reporting Bugs": [[37, "reporting-bugs"]], "Repository contents": [[328, "repository-contents"]], "Reproducing the results": [[365, "reproducing-the-results"]], "Requesting Features": [[37, "requesting-features"]], "Requirements": [[216, "requirements"]], "Requirements.": [[46, "requirements"], [308, "requirements"]], "ResourceUsage": [[102, null]], "Resources Estimator": [[585, null]], "Restart Groot": [[590, "restart-groot"]], "RestartService": [[191, "restartservice"], [281, "restartservice"]], "Restful API": [[334, "restful-api"]], "Restore graphs from the pvc": [[33, "restore-graphs-from-the-pvc"]], "Result": [[310, null]], "Result Class": [[310, "module-gs_interactive.client.result"]], "Results": [[365, "results"]], "Retrieve Vertices and Edges": [[343, "retrieve-vertices-and-edges"]], "Return type": [[47, "return-type"], [47, "id3"], [47, "id9"], [47, "id15"], [47, "id21"], [47, "id27"], [47, "id33"], [47, "id39"], [47, "id45"], [47, "id51"], [67, "return-type"], [67, "id3"], [67, "id9"], [67, "id15"], [75, "return-type"], [75, "id3"], [75, "id9"], [75, "id15"], [75, "id21"], [94, "return-type"], [94, "id3"], [94, "id9"], [94, "id15"], [94, "id21"], [94, "id27"], [94, "id33"], [94, "id39"], [94, "id45"], [94, "id51"], [95, "return-type"], [95, "id3"], [95, "id9"], [95, "id15"], [95, "id21"], [106, "return-type"], [106, "id3"], [106, "id9"], [106, "id15"], [106, "id21"], [110, "return-type"], [110, "id3"], [110, "id9"], [110, "id15"], [110, "id21"], [121, "return-type"], [154, "return-type"], [154, "id3"], [154, "id9"], [173, "return-type"], [173, "id3"], [173, "id9"], [173, "id15"], [173, "id21"], [173, "id27"], [173, "id33"], [175, "return-type"], [175, "id3"], [175, "id9"], [181, "return-type"], [181, "id3"], [181, "id9"], [181, "id15"], [181, "id21"], [184, "return-type"], [184, "id3"], [191, "return-type"], [191, "id3"], [191, "id9"], [191, "id15"], [209, "return-type"], [209, "id3"], [209, "id9"], [244, "return-type"], [244, "id3"], [244, "id9"], [244, "id15"], [263, "return-type"], [263, "id3"], [263, "id9"], [263, "id15"], [263, "id21"], [263, "id27"], [263, "id33"], [263, "id39"], [263, "id45"], [263, "id51"], [263, "id57"], [263, "id63"], [263, "id69"], [263, "id75"], [265, "return-type"], [265, "id3"], [265, "id9"], [272, "return-type"], [272, "id3"], [272, "id9"], [272, "id15"], [272, "id21"], [274, "return-type"], [274, "id3"], [281, "return-type"], [281, "id3"], [281, "id9"], [281, "id15"], [299, "return-type"], [299, "id3"], [299, "id9"], [299, "id15"]], "Returns": [[319, "returns"], [319, "id2"], [319, "id4"]], "Rules": [[333, "rules"]], "Run Test Script": [[45, "run-test-script"]], "Run Your Own Algorithms": [[18, "run-your-own-algorithms"]], "Run a Simple Query": [[315, "run-a-simple-query"]], "Run customized GraphX algorithms on Spark with GraphScope support": [[23, "run-customized-graphx-algorithms-on-spark-with-graphscope-support"]], "Run customized GraphX apps": [[23, "run-customized-graphx-apps"]], "Run example GraphX apps": [[23, "run-example-graphx-apps"]], "Run example algorithms with example jar": [[17, "run-example-algorithms-with-example-jar"]], "Run test": [[432, "run-test"]], "Run tests": [[41, "run-tests"], [41, "id1"]], "Run the script": [[354, "run-the-script"]], "Run your own Giraph apps.": [[22, "run-your-own-giraph-apps"]], "Running Examples": [[341, "running-examples"]], "Running GraphScope Analytical Engine on Local": [[7, "running-graphscope-analytical-engine-on-local"]], "Running GraphScope Interactive Engine on Local": [[332, "running-graphscope-interactive-engine-on-local"]], "Running GraphScope Learning Engine on Local": [[349, "running-graphscope-learning-engine-on-local"]], "Running tests manually via gsctl": [[45, "running-tests-manually-via-gsctl"]], "Running the FLASH Algorithms": [[15, "running-the-flash-algorithms"]], "Running the benchmark": [[328, "running-the-benchmark"]], "RunningDeploymentInfo": [[103, null]], "RunningDeploymentStatus": [[104, null]], "Rust Style": [[35, "rust-style"]], "ST Path": [[333, "st-path"]], "Sample Configuration": [[128, "sample-configuration"]], "Sample Configuration for loading \u201cModern\u201d Graph from csv files": [[130, "sample-configuration-for-loading-modern-graph-from-csv-files"]], "Sample configuration for loading \u201cModern Graph\u201d from odps tables": [[130, "sample-configuration-for-loading-modern-graph-from-odps-tables"]], "Sampling": [[425, "sampling"]], "Sampling Path": [[0, "sampling-path"]], "Saving Graph Data in GraphAr": [[588, "saving-graph-data-in-graphar"]], "Scaling and repartitioning": [[593, null]], "SchemaMapping": [[105, null], [186, null], [276, null]], "SchemaMappingLoadingConfig": [[187, null], [277, null]], "SchemaMappingLoadingConfigDataSource": [[188, null], [278, null]], "SchemaMappingLoadingConfigFormat": [[189, null], [279, null]], "SchemaMappingLoadingConfigXCsrParams": [[190, null], [280, null]], "Script Style": [[35, "script-style"]], "Secondary Instance": [[590, "secondary-instance"]], "Selector": [[583, null]], "Selectors in different context": [[583, "selectors-in-different-context"]], "Self loops": [[443, "self-loops"]], "Service Accessibility": [[317, "service-accessibility"]], "Service Configuration": [[128, "service-configuration"]], "ServiceManagementApi": [[191, null]], "ServiceMetrics": [[192, null], [282, null]], "ServiceRegistryRecord": [[193, null], [283, null]], "ServiceStatus": [[107, null], [194, null], [284, null]], "ServiceStatusSdkEndpoints": [[108, null]], "Session": [[311, null], [584, null]], "Session Functions": [[584, "session-functions"]], "Session Interface": [[311, "session-interface"]], "Session object": [[584, "session-object"]], "Set parameters & load graph": [[354, "set-parameters-load-graph"]], "Setup": [[4, "setup"]], "Setup build environment for Linux and macOS": [[32, "setup-build-environment-for-linux-and-macos"]], "Setuptools": [[46, "setuptools"], [308, "setuptools"]], "Sharded Service": [[128, "sharded-service"]], "Shipping a Release (maintainers only)": [[37, "shipping-a-release-maintainers-only"]], "Simulation of Pregel Model in Analytical Engine": [[24, "simulation-of-pregel-model-in-analytical-engine"]], "Single-Source Shortest Paths": [[0, "single-source-shortest-paths"]], "Slack": [[25, "slack"], [37, "slack"]], "Small": [[576, "module-graphscope.nx.generators.small"]], "SnapshotStatus": [[195, null], [285, null]], "Social Networks": [[576, "module-graphscope.nx.generators.social"]], "Solutions of GraphScope": [[325, "solutions-of-graphscope"]], "Source": [[341, "source"]], "Specify data types of properties manually": [[356, "specify-data-types-of-properties-manually"]], "Specify the number of workers": [[27, "specify-the-number-of-workers"]], "Spectral": [[576, "module-graphscope.nx.generators.spectral_graph_forge"]], "Standalone Deployment for GIE": [[329, null]], "Standard Steps": [[341, "standard-steps"]], "Start Compiler Service": [[134, "start-compiler-service"]], "Start the query service on the new graph": [[216, "start-the-query-service-on-the-new-graph"], [308, "start-the-query-service-on-the-new-graph"]], "StartService": [[191, "startservice"], [281, "startservice"]], "StartServiceRequest": [[109, null], [196, null], [286, null]], "Starting Neo4j Service": [[333, "starting-neo4j-service"]], "Starting Service Manually": [[134, "starting-service-manually"]], "Statistics": [[341, "statistics"]], "Status": [[312, null]], "Status Class": [[312, "module-gs_interactive.client.status"]], "Step 1: Build the Project": [[334, "step-1-build-the-project"], [334, "id2"]], "Step 1: Create a New Graph": [[129, "step-1-create-a-new-graph"]], "Step 1: Define the context class": [[16, "step-1-define-the-context-class"]], "Step 2: Define the Algorithm class": [[16, "step-2-define-the-algorithm-class"]], "Step 2: Import Graph Data": [[129, "step-2-import-graph-data"]], "Step 2: Locate and Extract the Package": [[334, "step-2-locate-and-extract-the-package"], [334, "id3"]], "Step 3: Package the Algorithm": [[16, "step-3-package-the-algorithm"]], "Step 3: Run the Example Binary": [[334, "step-3-run-the-example-binary"]], "Step 3: Start the Graph Planner RESTful Service": [[334, "step-3-start-the-graph-planner-restful-service"]], "Step 3: Start the Service with the New Graph": [[129, "step-3-start-the-service-with-the-new-graph"]], "Step 4: A More Complicated Movies Graph(optional)": [[129, "step-4-a-more-complicated-movies-graph-optional"]], "Step 4: Access the RESTful API by Curl": [[334, "step-4-access-the-restful-api-by-curl"]], "Step 4: Access the RESTful API by Java Sdk": [[334, "step-4-access-the-restful-api-by-java-sdk"]], "Step 4: Run the .gar file on GraphScope": [[16, "step-4-run-the-gar-file-on-graphscope"]], "Steps": [[333, "steps"]], "Steps of Model Training": [[362, "steps-of-model-training"]], "Stochastic": [[576, "module-networkx.generators.stochastic"]], "StopService": [[191, "stopservice"], [281, "stopservice"]], "StopServiceRequest": [[197, null], [287, null]], "Storage Engine": [[327, null]], "Storage Layer": [[12, "storage-layer"]], "Storage layer": [[357, "storage-layer"]], "Store graphs to the pvc": [[33, "store-graphs-to-the-pvc"]], "Stored Procedure.": [[316, "stored-procedure"]], "Stored Procedures": [[319, null]], "StoredProcedureMeta": [[111, null], [198, null], [288, null]], "String Types": [[131, "string-types"]], "StringType": [[112, null], [199, null], [289, null]], "StringTypeString": [[113, null], [200, null], [290, null]], "Strong Expressiveness": [[6, "strong-expressiveness"]], "Structural types": [[337, "structural-types"]], "StructuredAccessFile": [[436, "structuredaccessfile"]], "Style Linter and Checker": [[35, "style-linter-and-checker"]], "SubGraph-based graph message passing": [[347, "subgraph-based-graph-message-passing"]], "Subgraph": [[341, "subgraph"]], "Subgraph Sampling": [[350, "subgraph-sampling"], [362, "subgraph-sampling"]], "Submit Cypher Queries": [[315, "submit-cypher-queries"], [590, "submit-cypher-queries"]], "Submit Gremlin Queries": [[590, "submit-gremlin-queries"]], "Submit cypher queries": [[216, "submit-cypher-queries"], [308, "submit-cypher-queries"]], "Submit queries to the new graph": [[216, "submit-queries-to-the-new-graph"], [308, "submit-queries-to-the-new-graph"]], "Submit to GraphScope": [[17, "submit-to-graphscope"]], "Submit to GraphScope.": [[22, "submit-to-graphscope"]], "Submit to Spark": [[23, "submit-to-spark"]], "Submitting Your Changes": [[37, "submitting-your-changes"]], "Sudoku": [[576, "module-graphscope.nx.generators.sudoku"]], "Suggestions About Parallelism Settings for Queries": [[339, "suggestions-about-parallelism-settings-for-queries"]], "Supported Algorithms": [[11, "supported-algorithms"]], "Supported Graph Operations": [[11, "supported-graph-operations"]], "Supported Gremlin Steps": [[341, null]], "Supported data source": [[130, "supported-data-source"]], "SyncOnOuterVertex": [[10, "synconoutervertex"]], "SyncOnOuterVertexAsSource": [[10, "synconoutervertexassource"]], "SyncOnOuterVertexAsTarget": [[10, "synconoutervertexastarget"]], "Syntactic Sugars": [[341, "syntactic-sugars"]], "System configuration": [[438, null]], "TODOs": [[128, "todos"]], "Techniques targeting at large graph": [[356, "techniques-targeting-at-large-graph"]], "Temporal types": [[131, "temporal-types"]], "TemporalType": [[114, null], [201, null], [291, null]], "TemporalTypeTemporal": [[115, null], [202, null], [292, null]], "TensorContext": [[583, "tensorcontext"]], "Test GIE with Vineyard Store on Local": [[331, "test-gie-with-vineyard-store-on-local"]], "Test GraphScope on Kubernetes cluster": [[41, "test-graphscope-on-kubernetes-cluster"]], "Test GraphScope on local": [[41, "test-graphscope-on-local"]], "Testing": [[4, "testing"], [134, "testing"]], "Testing with Interactive": [[45, "testing-with-interactive"]], "Tests": [[46, "tests"], [308, "tests"]], "The Architecture": [[330, "the-architecture"]], "The Cypher Query Language": [[318, "the-cypher-query-language"]], "The FLASH Programming Model": [[6, "the-flash-programming-model"]], "The GraphAr File Format": [[588, "the-graphar-file-format"]], "The Motivations": [[330, "the-motivations"]], "The Performance Speed-up of GraphScope over NetworkX": [[19, "the-performance-speed-up-of-graphscope-over-networkx"]], "The lifecycle of a vineyard cluster": [[30, "the-lifecycle-of-a-vineyard-cluster"]], "TimeStampType": [[116, null], [203, null], [293, null]], "Tinkerpop and Gremlin": [[361, "tinkerpop-and-gremlin"]], "Tips for reduce memory consumption of graphs": [[356, "tips-for-reduce-memory-consumption-of-graphs"]], "To be Supported": [[341, "to-be-supported"]], "Traces": [[590, "traces"]], "Train and test": [[355, "train-and-test"]], "Train the Model": [[353, "train-the-model"]], "Transactions": [[134, "transactions"]], "Transform to GraphScope Graph Object": [[20, "transform-to-graphscope-graph-object"]], "Trees": [[576, "module-graphscope.nx.generators.trees"]], "Triads": [[576, "module-graphscope.nx.generators.triads"]], "Troubleshooting": [[590, "troubleshooting"]], "Troubleshooting & Utilities": [[327, null]], "Try other graphs": [[129, "try-other-graphs"]], "Try some example giraph apps": [[22, "try-some-example-giraph-apps"]], "Tutorial": [[333, "tutorial"]], "Tutorial: Develop Your Algorithms in C++ with FLASH Model": [[15, null]], "Tutorial: Develop algorithms in Python": [[18, null]], "Tutorial: Develop your Algorithm in C++ with PIE Model": [[16, null]], "Tutorial: Develop your Algorithm in Java with PIE Model": [[17, null]], "Tutorial: Graph Algorithms with NetworkX APIs": [[19, null]], "Tutorial: Graph Operations with NetworkX APIs": [[20, null]], "Tutorial: LDBC Gremlin": [[343, null]], "Tutorial: Run Giraph Applications on GraphScope": [[22, null]], "Tutorial: Run GraphX Applications on GraphScope": [[23, null]], "Tutorial: Running Builtin Algorithms": [[21, null]], "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine": [[355, null]], "Tutorial: Training a Node Classification Model (PyG) on a K8S Cluster": [[354, null]], "Tutorial: Training a Node Classification Model on K8s Cluster": [[352, null]], "Tutorial: Training a Node Classification Model on Your Local Machine": [[353, null]], "Tutorials for Java Users": [[345, null]], "Tutorials for Python Users": [[366, null]], "TypedValue": [[117, null], [204, null], [294, null]], "Typical GNN Models": [[362, "typical-gnn-models"]], "Understanding the Codebase": [[4, "understanding-the-codebase"], [45, "understanding-the-codebase"], [134, "understanding-the-codebase"]], "Unfold": [[341, "unfold"]], "Unified Graph Computing Platform": [[357, "unified-graph-computing-platform"]], "Unified Graph Retrieval": [[589, "unified-graph-retrieval"]], "Uninstall Groot": [[590, "uninstall-groot"]], "Uninstall deployment": [[2, "uninstall-deployment"]], "Uninstall the release": [[29, "uninstall-the-release"]], "Uninstalling and Restarting": [[590, "uninstalling-and-restarting"]], "Union": [[341, "union"]], "UpdateAlertMessageStatusRequest": [[118, null]], "UpdateProcedure": [[181, "updateprocedure"], [272, "updateprocedure"]], "UpdateProcedureRequest": [[205, null], [295, null]], "UpdateStoredProcRequest": [[119, null]], "UploadFileResponse": [[120, null], [206, null], [296, null]], "Use appropriate indexing": [[339, "use-appropriate-indexing"]], "Use dev image with all dependencies installed": [[32, "use-dev-image-with-all-dependencies-installed"]], "User Guide": [[590, "user-guide"]], "User Guide and Examples of GAE": [[594, null]], "User Guide and Examples of GLE": [[595, null]], "Using Custom Graph": [[129, null]], "Using Graph Constructors": [[20, "using-graph-constructors"]], "Using LLM as an Assistant in GIE": [[336, null]], "Using Loaded Graphs": [[591, "using-loaded-graphs"]], "Using Loaded Graphs from GraphScope": [[586, "using-loaded-graphs-from-graphscope"]], "Using Your Own Data": [[329, "using-your-own-data"]], "Using math.h Functions in Algorithms": [[18, "using-math-h-functions-in-algorithms"]], "Utility Scripts": [[597, "utility-scripts"]], "V()": [[341, "v"]], "VarChar": [[122, null], [207, null], [297, null]], "VarCharVarChar": [[123, null], [208, null], [298, null]], "Vertex Cut": [[10, "vertex-cut"]], "Vertex Mappings": [[130, "vertex-mappings"]], "Vertex Range": [[583, "vertex-range"]], "Vertex-Centric Model": [[24, null]], "Vertex-cut Partition Strategy": [[589, "vertex-cut-partition-strategy"]], "VertexApi": [[209, null], [299, null]], "VertexData": [[210, null], [300, null]], "VertexDataContext": [[583, "vertexdatacontext"]], "VertexEdgeRequest": [[211, null], [301, null]], "VertexMapping": [[124, null], [212, null], [302, null]], "VertexPropertyContext": [[583, "vertexpropertycontext"]], "VertexRequest": [[213, null], [303, null]], "VertexStatistics": [[214, null], [304, null]], "VertexTypePairStatistics": [[215, null], [305, null]], "Vertices on GraphScope analytical engine": [[10, "vertices-on-graphscope-analytical-engine"]], "Viewing Stored Procedures": [[319, "viewing-stored-procedures"]], "Viewing logs": [[590, "viewing-logs"]], "Vineyard, or v6d": [[359, "vineyard-or-v6d"]], "VoteRank": [[0, "voterank"]], "WCC": [[0, "wcc"]], "What are the Limitations": [[363, "what-are-the-limitations"]], "What are the Next": [[363, "what-are-the-next"]], "What are the Use Cases": [[363, "what-are-the-use-cases"]], "What can GraphScope Do": [[360, "what-can-graphscope-do"], [362, "what-can-graphscope-do"]], "What is Graph Analytics": [[360, "what-is-graph-analytics"]], "What is Graph Neural Network": [[362, "what-is-graph-neural-network"]], "What is GraphScope": [[363, "what-is-graphscope"]], "What is the PIE Model?": [[14, "what-is-the-pie-model"]], "What\u2019s the Next": [[7, "whats-the-next"], [332, "whats-the-next"], [349, "whats-the-next"], [597, "whats-the-next"]], "What\u2019s the difference between Inner ID and Property ID ?": [[339, "whats-the-difference-between-inner-id-and-property-id"]], "Why GOpt": [[333, "why-gopt"]], "Why use GraphScope": [[363, "why-use-graphscope"]], "Will Not be Supported": [[341, "will-not-be-supported"]], "Workflow of PIE": [[14, "workflow-of-pie"]], "WritableFile": [[436, "writablefile"]], "Write High-availability": [[590, "write-high-availability"]], "Write training and testing script": [[354, "write-training-and-testing-script"]], "Writing Algorithms in Pregel": [[18, "writing-algorithms-in-pregel"]], "Writing Your Own Algorithms in PIE": [[18, "writing-your-own-algorithms-in-pie"]], "XtraPuLP": [[593, "xtrapulp"]], "addEdge": [[154, "addedge"]], "addVertex": [[209, "addvertex"]], "add_edge": [[244, "add-edge"]], "add_vertex": [[299, "add-vertex"]], "bind_datasource_in_batch": [[67, "bind-datasource-in-batch"]], "both()": [[341, "both"], [341, "id9"]], "bothE()": [[341, "bothe"]], "bothV()": [[341, "bothv"]], "branch": [[341, "branch"]], "coin()": [[341, "coin"]], "constant()": [[341, "constant"], [343, "constant"]], "count()": [[341, "count"]], "count_vertices": [[319, "count-vertices"]], "createEdgeType": [[263, "createedgetype"]], "createVertexType": [[263, "createvertextype"]], "create_alert_receiver": [[47, "create-alert-receiver"]], "create_edge_type": [[94, "create-edge-type"]], "create_graph": [[94, "create-graph"]], "create_stored_procedure": [[110, "create-stored-procedure"]], "create_vertex_type": [[94, "create-vertex-type"]], "dedup()": [[341, "dedup"], [343, "dedup"]], "deleteEdgeType": [[263, "deleteedgetype"]], "deleteVertexType": [[263, "deletevertextype"]], "delete_alert_message_in_batch": [[47, "delete-alert-message-in-batch"]], "delete_alert_receiver_by_id": [[47, "delete-alert-receiver-by-id"]], "delete_alert_rule_by_id": [[47, "delete-alert-rule-by-id"]], "delete_edge": [[244, "delete-edge"]], "delete_edge_type_by_name": [[94, "delete-edge-type-by-name"]], "delete_graph_by_id": [[94, "delete-graph-by-id"]], "delete_job_by_id": [[95, "delete-job-by-id"]], "delete_stored_procedure_by_id": [[110, "delete-stored-procedure-by-id"]], "delete_vertex": [[299, "delete-vertex"]], "delete_vertex_type_by_name": [[94, "delete-vertex-type-by-name"]], "edges": [[610, "edges"]], "elementMap()": [[341, "elementmap"]], "endV()": [[341, "endv"]], "fold()": [[341, "fold"], [343, "fold"]], "getEdge": [[154, "getedge"]], "getSnapshotStatus": [[263, "getsnapshotstatus"]], "getVertex": [[209, "getvertex"]], "get_dataloading_job_config": [[95, "get-dataloading-job-config"]], "get_datasource_by_id": [[67, "get-datasource-by-id"]], "get_deployment_info": [[75, "get-deployment-info"]], "get_deployment_pod_log": [[75, "get-deployment-pod-log"]], "get_deployment_resource_usage": [[75, "get-deployment-resource-usage"]], "get_deployment_status": [[75, "get-deployment-status"]], "get_edge": [[244, "get-edge"]], "get_graph_by_id": [[94, "get-graph-by-id"]], "get_job_by_id": [[95, "get-job-by-id"]], "get_schema_by_id": [[94, "get-schema-by-id"]], "get_service_status_by_id": [[106, "get-service-status-by-id"]], "get_storage_usage": [[75, "get-storage-usage"]], "get_stored_procedure_by_id": [[110, "get-stored-procedure-by-id"]], "get_vertex": [[299, "get-vertex"]], "graphscope.Vertex": [[374, null]], "graphscope.declare": [[375, null]], "graphscope.flex.rest.AlertApi": [[47, null]], "graphscope.flex.rest.DataSourceApi": [[67, null]], "graphscope.flex.rest.DeploymentApi": [[75, null]], "graphscope.flex.rest.GraphApi": [[94, null]], "graphscope.flex.rest.JobApi": [[95, null]], "graphscope.flex.rest.ServiceApi": [[106, null]], "graphscope.flex.rest.StoredProcedureApi": [[110, null]], "graphscope.flex.rest.UtilsApi": [[121, null]], "graphscope.framework.app.load_app": [[376, null]], "graphscope.framework.dag_utils.add_column": [[377, null]], "graphscope.framework.dag_utils.add_labels_to_graph": [[378, null]], "graphscope.framework.dag_utils.arrow_to_dynamic": [[379, null]], "graphscope.framework.dag_utils.bind_app": [[380, null]], "graphscope.framework.dag_utils.clear_edges": [[381, null]], "graphscope.framework.dag_utils.clear_graph": [[382, null]], "graphscope.framework.dag_utils.context_to_dataframe": [[383, null]], "graphscope.framework.dag_utils.context_to_numpy": [[384, null]], "graphscope.framework.dag_utils.copy_graph": [[385, null]], "graphscope.framework.dag_utils.create_app": [[386, null]], "graphscope.framework.dag_utils.create_graph": [[387, null]], "graphscope.framework.dag_utils.create_graph_view": [[388, null]], "graphscope.framework.dag_utils.create_loader": [[389, null]], "graphscope.framework.dag_utils.create_subgraph": [[390, null]], "graphscope.framework.dag_utils.create_unload_op": [[391, null]], "graphscope.framework.dag_utils.dynamic_to_arrow": [[392, null]], "graphscope.framework.dag_utils.get_context_data": [[393, null]], "graphscope.framework.dag_utils.graph_to_dataframe": [[394, null]], "graphscope.framework.dag_utils.graph_to_numpy": [[395, null]], "graphscope.framework.dag_utils.gremlin_to_subgraph": [[396, null]], "graphscope.framework.dag_utils.modify_edges": [[397, null]], "graphscope.framework.dag_utils.modify_vertices": [[398, null]], "graphscope.framework.dag_utils.output": [[399, null]], "graphscope.framework.dag_utils.project_arrow_property_graph": [[400, null]], "graphscope.framework.dag_utils.project_to_simple": [[401, null]], "graphscope.framework.dag_utils.report_graph": [[402, null]], "graphscope.framework.dag_utils.run_app": [[403, null]], "graphscope.framework.dag_utils.to_data_sink": [[404, null]], "graphscope.framework.dag_utils.to_directed": [[405, null]], "graphscope.framework.dag_utils.to_undirected": [[406, null]], "graphscope.framework.dag_utils.to_vineyard_dataframe": [[407, null]], "graphscope.framework.dag_utils.to_vineyard_tensor": [[408, null]], "graphscope.framework.dag_utils.unload_app": [[409, null]], "graphscope.framework.dag_utils.unload_context": [[410, null]], "graphscope.framework.dag_utils.unload_graph": [[411, null]], "graphscope.framework.operation.Operation.__init__": [[412, null]], "graphscope.framework.operation.Operation.as_op_def": [[413, null]], "graphscope.framework.operation.Operation.eval": [[414, null]], "graphscope.framework.operation.Operation.evaluated": [[415, null]], "graphscope.framework.operation.Operation.key": [[416, null]], "graphscope.framework.operation.Operation.signature": [[417, null]], "graphscope.g": [[418, null]], "graphscope.get_default_session": [[419, null]], "graphscope.graphlearn": [[420, null]], "graphscope.gremlin": [[421, null]], "graphscope.has_default_session": [[422, null]], "graphscope.nx.classes.function.add_cycle": [[444, null]], "graphscope.nx.classes.function.add_path": [[445, null]], "graphscope.nx.classes.function.add_star": [[446, null]], "graphscope.nx.classes.function.all_neighbors": [[447, null]], "graphscope.nx.classes.function.common_neighbors": [[448, null]], "graphscope.nx.classes.function.create_empty_copy": [[449, null]], "graphscope.nx.classes.function.degree": [[450, null]], "graphscope.nx.classes.function.degree_histogram": [[451, null]], "graphscope.nx.classes.function.density": [[452, null]], "graphscope.nx.classes.function.edge_subgraph": [[453, null]], "graphscope.nx.classes.function.edges": [[454, null]], "graphscope.nx.classes.function.freeze": [[455, null]], "graphscope.nx.classes.function.induced_subgraph": [[456, null]], "graphscope.nx.classes.function.info": [[457, null]], "graphscope.nx.classes.function.is_directed": [[458, null]], "graphscope.nx.classes.function.is_empty": [[459, null]], "graphscope.nx.classes.function.is_frozen": [[460, null]], "graphscope.nx.classes.function.is_negatively_weighted": [[461, null]], "graphscope.nx.classes.function.is_weighted": [[462, null]], "graphscope.nx.classes.function.neighbors": [[463, null]], "graphscope.nx.classes.function.nodes": [[464, null]], "graphscope.nx.classes.function.nodes_with_selfloops": [[465, null]], "graphscope.nx.classes.function.non_edges": [[466, null]], "graphscope.nx.classes.function.non_neighbors": [[467, null]], "graphscope.nx.classes.function.number_of_edges": [[468, null]], "graphscope.nx.classes.function.number_of_nodes": [[469, null]], "graphscope.nx.classes.function.number_of_selfloops": [[470, null]], "graphscope.nx.classes.function.selfloop_edges": [[471, null]], "graphscope.nx.classes.function.subgraph": [[472, null]], "graphscope.nx.classes.function.to_directed": [[473, null]], "graphscope.nx.classes.function.to_undirected": [[474, null]], "graphscope.nx.generators.atlas.graph_atlas": [[475, null]], "graphscope.nx.generators.atlas.graph_atlas_g": [[476, null]], "graphscope.nx.generators.classic.balanced_tree": [[477, null]], "graphscope.nx.generators.classic.barbell_graph": [[478, null]], "graphscope.nx.generators.classic.binomial_tree": [[479, null]], "graphscope.nx.generators.classic.circulant_graph": [[480, null]], "graphscope.nx.generators.classic.circular_ladder_graph": [[481, null]], "graphscope.nx.generators.classic.complete_graph": [[482, null]], "graphscope.nx.generators.classic.complete_multipartite_graph": [[483, null]], "graphscope.nx.generators.classic.cycle_graph": [[484, null]], "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph": [[485, null]], "graphscope.nx.generators.classic.empty_graph": [[486, null]], "graphscope.nx.generators.classic.full_rary_tree": [[487, null]], "graphscope.nx.generators.classic.ladder_graph": [[488, null]], "graphscope.nx.generators.classic.lollipop_graph": [[489, null]], "graphscope.nx.generators.classic.null_graph": [[490, null]], "graphscope.nx.generators.classic.path_graph": [[491, null]], "graphscope.nx.generators.classic.star_graph": [[492, null]], "graphscope.nx.generators.classic.trivial_graph": [[493, null]], "graphscope.nx.generators.classic.turan_graph": [[494, null]], "graphscope.nx.generators.classic.wheel_graph": [[495, null]], "graphscope.nx.generators.community.LFR_benchmark_graph": [[496, null]], "graphscope.nx.generators.community.caveman_graph": [[497, null]], "graphscope.nx.generators.community.connected_caveman_graph": [[498, null]], "graphscope.nx.generators.community.gaussian_random_partition_graph": [[499, null]], "graphscope.nx.generators.community.planted_partition_graph": [[500, null]], "graphscope.nx.generators.community.random_partition_graph": [[501, null]], "graphscope.nx.generators.community.relaxed_caveman_graph": [[502, null]], "graphscope.nx.generators.community.ring_of_cliques": [[503, null]], "graphscope.nx.generators.community.stochastic_block_model": [[504, null]], "graphscope.nx.generators.community.windmill_graph": [[505, null]], "graphscope.nx.generators.degree_seq.configuration_model": [[506, null]], "graphscope.nx.generators.degree_seq.degree_sequence_tree": [[507, null]], "graphscope.nx.generators.degree_seq.directed_configuration_model": [[508, null]], "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph": [[509, null]], "graphscope.nx.generators.degree_seq.expected_degree_graph": [[510, null]], "graphscope.nx.generators.degree_seq.havel_hakimi_graph": [[511, null]], "graphscope.nx.generators.degree_seq.random_degree_sequence_graph": [[512, null]], "graphscope.nx.generators.directed.gn_graph": [[513, null]], "graphscope.nx.generators.directed.gnc_graph": [[514, null]], "graphscope.nx.generators.directed.gnr_graph": [[515, null]], "graphscope.nx.generators.directed.random_k_out_graph": [[516, null]], "graphscope.nx.generators.directed.scale_free_graph": [[517, null]], "graphscope.nx.generators.duplication.duplication_divergence_graph": [[518, null]], "graphscope.nx.generators.duplication.partial_duplication_graph": [[519, null]], "graphscope.nx.generators.ego.ego_graph": [[520, null]], "graphscope.nx.generators.expanders.chordal_cycle_graph": [[521, null]], "graphscope.nx.generators.expanders.margulis_gabber_galil_graph": [[522, null]], "graphscope.nx.generators.expanders.paley_graph": [[523, null]], "graphscope.nx.generators.geometric.geographical_threshold_graph": [[524, null]], "graphscope.nx.generators.geometric.random_geometric_graph": [[525, null]], "graphscope.nx.generators.geometric.soft_random_geometric_graph": [[526, null]], "graphscope.nx.generators.geometric.thresholded_random_geometric_graph": [[527, null]], "graphscope.nx.generators.geometric.waxman_graph": [[528, null]], "graphscope.nx.generators.harary_graph.hkn_harary_graph": [[529, null]], "graphscope.nx.generators.harary_graph.hnm_harary_graph": [[530, null]], "graphscope.nx.generators.intersection.general_random_intersection_graph": [[531, null]], "graphscope.nx.generators.intersection.k_random_intersection_graph": [[532, null]], "graphscope.nx.generators.intersection.uniform_random_intersection_graph": [[533, null]], "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph": [[534, null]], "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree": [[535, null]], "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree": [[536, null]], "graphscope.nx.generators.joint_degree_seq.joint_degree_graph": [[537, null]], "graphscope.nx.generators.mycielski.mycielski_graph": [[538, null]], "graphscope.nx.generators.mycielski.mycielskian": [[539, null]], "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees": [[540, null]], "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": [[541, null]], "graphscope.nx.generators.small.LCF_graph": [[542, null]], "graphscope.nx.generators.small.bull_graph": [[543, null]], "graphscope.nx.generators.small.chvatal_graph": [[544, null]], "graphscope.nx.generators.small.cubical_graph": [[545, null]], "graphscope.nx.generators.small.desargues_graph": [[546, null]], "graphscope.nx.generators.small.diamond_graph": [[547, null]], "graphscope.nx.generators.small.dodecahedral_graph": [[548, null]], "graphscope.nx.generators.small.frucht_graph": [[549, null]], "graphscope.nx.generators.small.heawood_graph": [[550, null]], "graphscope.nx.generators.small.house_graph": [[551, null]], "graphscope.nx.generators.small.house_x_graph": [[552, null]], "graphscope.nx.generators.small.icosahedral_graph": [[553, null]], "graphscope.nx.generators.small.krackhardt_kite_graph": [[554, null]], "graphscope.nx.generators.small.make_small_graph": [[555, null]], "graphscope.nx.generators.small.moebius_kantor_graph": [[556, null]], "graphscope.nx.generators.small.octahedral_graph": [[557, null]], "graphscope.nx.generators.small.pappus_graph": [[558, null]], "graphscope.nx.generators.small.petersen_graph": [[559, null]], "graphscope.nx.generators.small.sedgewick_maze_graph": [[560, null]], "graphscope.nx.generators.small.tetrahedral_graph": [[561, null]], "graphscope.nx.generators.small.truncated_cube_graph": [[562, null]], "graphscope.nx.generators.small.truncated_tetrahedron_graph": [[563, null]], "graphscope.nx.generators.small.tutte_graph": [[564, null]], "graphscope.nx.generators.social.davis_southern_women_graph": [[565, null]], "graphscope.nx.generators.social.florentine_families_graph": [[566, null]], "graphscope.nx.generators.social.karate_club_graph": [[567, null]], "graphscope.nx.generators.social.les_miserables_graph": [[568, null]], "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge": [[569, null]], "graphscope.nx.generators.sudoku.sudoku_graph": [[570, null]], "graphscope.nx.generators.trees.prefix_tree": [[571, null]], "graphscope.nx.generators.trees.random_tree": [[572, null]], "graphscope.nx.generators.triads.triad_graph": [[573, null]], "graphscope.session": [[423, null]], "graphscope.set_option": [[424, null]], "group by multiple keys": [[339, "group-by-multiple-keys"]], "group by multiple values:": [[339, "group-by-multiple-values"]], "group()": [[341, "group"], [343, "group"]], "groupCount()": [[341, "groupcount"], [343, "groupcount"]], "gs_interactive.AdminServiceJobManagementApi": [[265, null]], "gs_interactive.AdminServiceProcedureManagementApi": [[272, null]], "gs_interactive.AdminServiceServiceManagementApi": [[281, null]], "gs_interactive.QueryServiceApi": [[274, null]], "gsctl": [[314, "gsctl"]], "has()": [[341, "has"]], "hasId()": [[341, "hasid"], [343, "hasid"]], "hasLabel()": [[341, "haslabel"]], "hasNot()": [[341, "hasnot"]], "id()": [[341, "id"]], "id() and label()": [[343, "id-and-label"]], "identity()": [[341, "id5"]], "import.yaml": [[129, "import-yaml"]], "import_schema_by_id": [[94, "import-schema-by-id"]], "in()": [[341, "in"], [341, "id8"]], "inE()": [[341, "ine"]], "inV()": [[341, "inv"]], "is()": [[341, "is"]], "job_config.yaml": [[129, "job-config-yaml"]], "k_hop_neighbors": [[319, "k-hop-neighbors"]], "label": [[610, "id6"]], "label()": [[341, "label"]], "limit()": [[341, "limit"]], "list_alert_messages": [[47, "list-alert-messages"]], "list_alert_receivers": [[47, "list-alert-receivers"]], "list_alert_rules": [[47, "list-alert-rules"]], "list_graphs": [[94, "list-graphs"]], "list_jobs": [[95, "list-jobs"]], "list_service_status": [[106, "list-service-status"]], "list_stored_procedures": [[110, "list-stored-procedures"]], "local()": [[341, "local"]], "macOS": [[602, "macos"]], "main function": [[354, "main-function"]], "match()": [[341, "id3"]], "max()": [[341, "max"]], "mean()": [[341, "mean"]], "min()": [[341, "min"]], "movie_graph.yaml": [[129, "movie-graph-yaml"]], "networkx.generators.internet_as_graphs.random_internet_as_graph": [[574, null]], "networkx.generators.stochastic.stochastic_graph": [[575, null]], "not(traversal)": [[341, "not-traversal"]], "order()": [[341, "id1"]], "otherV()": [[341, "otherv"]], "out()": [[341, "out"], [341, "id7"]], "out(), in() and both()": [[343, "out-in-and-both"]], "outE()": [[341, "oute"]], "outE(), inE() and bothE()": [[343, "oute-ine-and-bothe"]], "outV()": [[341, "outv"]], "outV(), inV(), bothV() and otherV()": [[343, "outv-inv-bothv-and-otherv"]], "pagerank": [[319, "pagerank"]], "path()": [[341, "path"]], "pip install": [[46, "pip-install"], [308, "pip-install"]], "properties": [[610, "properties"], [610, "id7"]], "properties()": [[341, "properties"]], "repeat()": [[341, "repeat"]], "restart_service": [[106, "restart-service"]], "sample()": [[341, "sample"]], "select()": [[341, "select"], [343, "select"]], "shortest_path_among_three": [[319, "shortest-path-among-three"]], "sideEffect": [[341, "sideeffect"]], "src_field and dst_field": [[610, "src-field-and-dst-field"]], "src_label and dst_label": [[610, "src-label-and-dst-label"]], "start_service": [[106, "start-service"]], "stop_service": [[106, "stop-service"]], "subgraph()": [[341, "id4"]], "submit_dataloading_job": [[95, "submit-dataloading-job"]], "sum()": [[341, "sum"]], "sum(), min(), max() and  mean()": [[343, "sum-min-max-and-mean"]], "unbind_edge_datasource": [[67, "unbind-edge-datasource"]], "unbind_vertex_datasource": [[67, "unbind-vertex-datasource"]], "unfold()": [[341, "id6"], [341, "id10"]], "union()": [[341, "id2"]], "updateEdge": [[154, "updateedge"]], "updateEdgeType": [[263, "updateedgetype"]], "updateVertex": [[209, "updatevertex"]], "updateVertexType": [[263, "updatevertextype"]], "update_alert_message_in_batch": [[47, "update-alert-message-in-batch"]], "update_alert_receiver_by_id": [[47, "update-alert-receiver-by-id"]], "update_alert_rule_by_id": [[47, "update-alert-rule-by-id"]], "update_edge": [[244, "update-edge"]], "update_stored_procedure_by_id": [[110, "update-stored-procedure-by-id"]], "update_vertex": [[299, "update-vertex"]], "upload_file": [[121, "upload-file"]], "valueMap()": [[341, "valuemap"], [343, "valuemap"]], "values()": [[341, "values"]], "vertices": [[610, "vertices"]], "vid_field": [[610, "vid-field"]], "where()": [[343, "where"]], "where(predicate)": [[341, "where-predicate"]], "where(traversal)": [[341, "where-traversal"]], "\u4e00\u4e2a\u4f8b\u5b50": [[608, "id10"]], "\u4ea4\u4e92\u5f0f\u67e5\u8be2": [[604, "id6"]], "\u4ece Numpy \u4e2d\u8f7d\u56fe": [[610, "numpy"]], "\u4ece Pandas \u4e2d\u8f7d\u56fe": [[610, "pandas"]], "\u4ece Pandas \u6216 Numpy \u4e2d\u8f7d\u56fe": [[610, "pandas-numpy"]], "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": [[610, "id10"]], "\u4ee3\u7801\u98ce\u683c": [[602, "id3"]], "\u4f7f\u7528 PIE \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[600, "pie"]], "\u4f7f\u7528 Pregel \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[600, "pregel"]], "\u4f7f\u7528Helm\u90e8\u7f72GraphScope": [[601, "helmgraphscope"]], "\u4f7f\u7528Java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": [[600, "id7"]], "\u5165\u95e8\u6559\u7a0b": [[611, null]], "\u5173\u95ed\u4f1a\u8bdd": [[604, "id8"]], "\u5185\u7f6e\u7b97\u6cd5": [[600, "id2"]], "\u521b\u5efa\u4f1a\u8bdd": [[604, "id4"]], "\u5229\u7528Java\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[608, "java-gremlin-graphscope"]], "\u5229\u7528Python\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[608, "python-gremlin-graphscope"]], "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": [[607, "id2"]], "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": [[608, null]], "\u56fe\u5206\u6790": [[604, "id7"]], "\u56fe\u5206\u6790\u5f15\u64ce": [[600, null]], "\u56fe\u5b66\u4e60\u5f15\u64ce": [[609, null]], "\u56fe\u5b66\u4e60\u6a21\u578b": [[609, "id2"]], "\u56fe\u6570\u636e\u6a21\u578b": [[608, "id8"]], "\u56fe\u6570\u636e\u6d41": [[609, "id7"]], "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": [[610, "id13"]], "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": [[605, null]], "\u56fe\u795e\u7ecf\u7f51\u7edc (GNNs)": [[604, "gnns"]], "\u5728AWS/\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": [[601, "aws"]], "\u57fa\u4e8e Docker \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[602, "docker-graphscope"]], "\u57fa\u4e8e Kubernetes \u5b89\u88c5 GraphScope \u5ba2\u6237\u7aef": [[607, "kubernetes-graphscope"]], "\u57fa\u4e8e Kubernetes \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[602, "kubernetes-graphscope"]], "\u591a\u79cd\u8fb9\u5173\u7cfb": [[610, "id11"]], "\u5b89\u88c5": [[607, null]], "\u5b8c\u6574\u7684\u793a\u4f8b": [[610, "id14"]], "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": [[600, "id3"]], "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": [[605, "id5"]], "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": [[608, "id12"]], "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": [[608, "id11"]], "\u5df2\u77e5\u9650\u5236": [[608, "id14"]], "\u5e38\u89c1\u95ee\u9898": [[603, null]], "\u5f00\u53d1\u8005\u6307\u5357": [[602, null]], "\u5feb\u901f\u4e0a\u624b": [[604, null]], "\u624b\u52a8\u914d\u7f6e\u56fe": [[610, "id4"]], "\u6295\u5f71": [[605, "id3"]], "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": [[610, "id12"]], "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": [[609, "id9"]], "\u652f\u6301\u7684Gremlin\u64cd\u4f5c": [[608, "id13"]], "\u6570\u636e\u6a21\u578b": [[609, "id3"]], "\u672c\u5730\u90e8\u7f72GraphScope": [[601, "graphscope"]], "\u6784\u5efa Python Wheels": [[602, "python-wheels"]], "\u67e5\u8be2\u8bed\u8a00": [[608, "id9"]], "\u6a21\u578b": [[609, "id8"]], "\u6ca1\u6709\u6b67\u4e49\u65f6\uff0c\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": [[610, "id9"]], "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": [[605, "id2"]], "\u76ee\u5f55": [[606, null], [611, null]], "\u793a\u4f8b: \u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [[604, "id3"]], "\u7d22\u5f15": [[606, "id1"]], "\u7f16\u7801\u5668": [[609, "id4"]], "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": [[605, "id4"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[609, "id5"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528 math.h \u4e2d\u7684\u51fd\u6570": [[600, "math-h"]], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": [[610, "id3"]], "\u8f7d\u56fe": [[610, null]], "\u8fd0\u884cJava\u7f16\u5199\u7684\u7b97\u6cd5": [[600, "java"]], "\u8fd0\u884c\u793a\u4f8b\u7684Java\u7b97\u6cd5": [[600, "id6"]], "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[600, "id5"]], "\u90e8\u7f72": [[601, null]], "\u91c7\u6837": [[609, "id6"]], "\u9ad8\u7ea7\u7528\u6cd5": [[610, "id8"]]}, "docnames": ["analytical_engine/builtin_algorithms", "analytical_engine/customized_algorithms", "analytical_engine/deployment", "analytical_engine/design_of_gae", "analytical_engine/dev_and_test", "analytical_engine/faqs", "analytical_engine/flash", "analytical_engine/getting_started", "analytical_engine/guide_and_examples", "analytical_engine/ingress", "analytical_engine/key_concepts", "analytical_engine/networkx_compatibility", "analytical_engine/overview_and_architecture", "analytical_engine/performance_tuning", "analytical_engine/programming_model_pie", "analytical_engine/tutorial_dev_algo_cpp_flash", "analytical_engine/tutorial_dev_algo_cpp_pie", "analytical_engine/tutorial_dev_algo_java", "analytical_engine/tutorial_dev_algo_python", "analytical_engine/tutorial_networkx_algorithms", "analytical_engine/tutorial_networkx_operations", "analytical_engine/tutorial_run_builtin_algo", "analytical_engine/tutorial_run_giraph_apps", "analytical_engine/tutorial_run_graphx_apps", "analytical_engine/vertex_centric_models", "contact_us", "deployment/deploy_graphscope_on_clouds", "deployment/deploy_graphscope_on_self_managed_k8s", "deployment/deploy_graphscope_operator", "deployment/deploy_graphscope_with_helm", "deployment/deploy_with_existing_vineyard_cluster", "deployment/install_in_offline_env", "deployment/install_on_local", "deployment/persistent_storage_of_graphs_on_k8s", "design_of_gae", "development/code_style_guide", "development/dev_guide", "development/how_to_contribute", "development/how_to_debug", "development/how_to_instrument", "development/how_to_submit_pr", "development/how_to_test", "error_codes", "flex/coordinator", "flex/coordinator/dev_guide", "flex/coordinator/development/dev_and_test", "flex/coordinator/development/python/README", "flex/coordinator/development/python/docs/AlertApi", "flex/coordinator/development/python/docs/BaseEdgeType", "flex/coordinator/development/python/docs/BaseEdgeTypeVertexTypePairRelationsInner", "flex/coordinator/development/python/docs/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/coordinator/development/python/docs/BasePropertyMeta", "flex/coordinator/development/python/docs/BaseVertexType", "flex/coordinator/development/python/docs/BaseVertexTypeXCsrParams", "flex/coordinator/development/python/docs/ColumnMapping", "flex/coordinator/development/python/docs/ColumnMappingColumn", "flex/coordinator/development/python/docs/CreateAlertReceiverRequest", "flex/coordinator/development/python/docs/CreateAlertRuleRequest", "flex/coordinator/development/python/docs/CreateDataloadingJobResponse", "flex/coordinator/development/python/docs/CreateEdgeType", "flex/coordinator/development/python/docs/CreateGraphRequest", "flex/coordinator/development/python/docs/CreateGraphResponse", "flex/coordinator/development/python/docs/CreateGraphSchemaRequest", "flex/coordinator/development/python/docs/CreatePropertyMeta", "flex/coordinator/development/python/docs/CreateStoredProcRequest", "flex/coordinator/development/python/docs/CreateStoredProcResponse", "flex/coordinator/development/python/docs/CreateVertexType", "flex/coordinator/development/python/docs/DataSourceApi", "flex/coordinator/development/python/docs/DataloadingJobConfig", "flex/coordinator/development/python/docs/DataloadingJobConfigEdgesInner", "flex/coordinator/development/python/docs/DataloadingJobConfigLoadingConfig", "flex/coordinator/development/python/docs/DataloadingJobConfigLoadingConfigFormat", "flex/coordinator/development/python/docs/DataloadingJobConfigVerticesInner", "flex/coordinator/development/python/docs/DataloadingMRJobConfig", "flex/coordinator/development/python/docs/DateType", "flex/coordinator/development/python/docs/DeploymentApi", "flex/coordinator/development/python/docs/EdgeMapping", "flex/coordinator/development/python/docs/EdgeMappingTypeTriplet", "flex/coordinator/development/python/docs/Error", "flex/coordinator/development/python/docs/FixedChar", "flex/coordinator/development/python/docs/FixedCharChar", "flex/coordinator/development/python/docs/GSDataType", "flex/coordinator/development/python/docs/GetAlertMessageResponse", "flex/coordinator/development/python/docs/GetAlertReceiverResponse", "flex/coordinator/development/python/docs/GetAlertRuleResponse", "flex/coordinator/development/python/docs/GetEdgeType", "flex/coordinator/development/python/docs/GetGraphResponse", "flex/coordinator/development/python/docs/GetGraphSchemaResponse", "flex/coordinator/development/python/docs/GetPodLogResponse", "flex/coordinator/development/python/docs/GetPropertyMeta", "flex/coordinator/development/python/docs/GetResourceUsageResponse", "flex/coordinator/development/python/docs/GetStorageUsageResponse", "flex/coordinator/development/python/docs/GetStoredProcResponse", "flex/coordinator/development/python/docs/GetVertexType", "flex/coordinator/development/python/docs/GraphApi", "flex/coordinator/development/python/docs/JobApi", "flex/coordinator/development/python/docs/JobStatus", "flex/coordinator/development/python/docs/LongText", "flex/coordinator/development/python/docs/NodeStatus", "flex/coordinator/development/python/docs/Parameter", "flex/coordinator/development/python/docs/PodStatus", "flex/coordinator/development/python/docs/PrimitiveType", "flex/coordinator/development/python/docs/ResourceUsage", "flex/coordinator/development/python/docs/RunningDeploymentInfo", "flex/coordinator/development/python/docs/RunningDeploymentStatus", "flex/coordinator/development/python/docs/SchemaMapping", "flex/coordinator/development/python/docs/ServiceApi", "flex/coordinator/development/python/docs/ServiceStatus", "flex/coordinator/development/python/docs/ServiceStatusSdkEndpoints", "flex/coordinator/development/python/docs/StartServiceRequest", "flex/coordinator/development/python/docs/StoredProcedureApi", "flex/coordinator/development/python/docs/StoredProcedureMeta", "flex/coordinator/development/python/docs/StringType", "flex/coordinator/development/python/docs/StringTypeString", "flex/coordinator/development/python/docs/TemporalType", "flex/coordinator/development/python/docs/TemporalTypeTemporal", "flex/coordinator/development/python/docs/TimeStampType", "flex/coordinator/development/python/docs/TypedValue", "flex/coordinator/development/python/docs/UpdateAlertMessageStatusRequest", "flex/coordinator/development/python/docs/UpdateStoredProcRequest", "flex/coordinator/development/python/docs/UploadFileResponse", "flex/coordinator/development/python/docs/UtilsApi", "flex/coordinator/development/python/docs/VarChar", "flex/coordinator/development/python/docs/VarCharVarChar", "flex/coordinator/development/python/docs/VertexMapping", "flex/coordinator/development/python/python_sdk", "flex/coordinator/getting_started", "flex/coordinator/restful_api", "flex/interactive/configuration", "flex/interactive/custom_graph_data", "flex/interactive/data_import", "flex/interactive/data_model", "flex/interactive/deployment", "flex/interactive/dev_guide", "flex/interactive/development/dev_and_test", "flex/interactive/development/java/APIResponseWithCode", "flex/interactive/development/java/BaseEdgeType", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInner", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/interactive/development/java/BasePropertyMeta", "flex/interactive/development/java/BaseVertexType", "flex/interactive/development/java/BaseVertexTypeXCsrParams", "flex/interactive/development/java/ColumnMapping", "flex/interactive/development/java/CreateEdgeType", "flex/interactive/development/java/CreateGraphRequest", "flex/interactive/development/java/CreateGraphResponse", "flex/interactive/development/java/CreateGraphSchemaRequest", "flex/interactive/development/java/CreateProcedureRequest", "flex/interactive/development/java/CreateProcedureResponse", "flex/interactive/development/java/CreatePropertyMeta", "flex/interactive/development/java/CreateVertexType", "flex/interactive/development/java/DateType", "flex/interactive/development/java/DeleteEdgeRequest", "flex/interactive/development/java/DeleteVertexRequest", "flex/interactive/development/java/EdgeApi", "flex/interactive/development/java/EdgeData", "flex/interactive/development/java/EdgeMapping", "flex/interactive/development/java/EdgeMappingDestinationVertexMappingsInner", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInner", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInnerColumn", "flex/interactive/development/java/EdgeMappingTypeTriplet", "flex/interactive/development/java/EdgeRequest", "flex/interactive/development/java/EdgeStatistics", "flex/interactive/development/java/FixedChar", "flex/interactive/development/java/FixedCharChar", "flex/interactive/development/java/GSDataType", "flex/interactive/development/java/GetEdgeType", "flex/interactive/development/java/GetGraphResponse", "flex/interactive/development/java/GetGraphSchemaResponse", "flex/interactive/development/java/GetGraphStatisticsResponse", "flex/interactive/development/java/GetProcedureResponse", "flex/interactive/development/java/GetPropertyMeta", "flex/interactive/development/java/GetVertexType", "flex/interactive/development/java/GraphManagementApi", "flex/interactive/development/java/GraphServiceRegistryRecord", "flex/interactive/development/java/JobManagementApi", "flex/interactive/development/java/JobResponse", "flex/interactive/development/java/JobStatus", "flex/interactive/development/java/LongText", "flex/interactive/development/java/Parameter", "flex/interactive/development/java/PrimitiveType", "flex/interactive/development/java/ProcedureManagementApi", "flex/interactive/development/java/Property", "flex/interactive/development/java/QueryRequest", "flex/interactive/development/java/QueryServiceApi", "flex/interactive/development/java/RegistryInstanceRecord", "flex/interactive/development/java/SchemaMapping", "flex/interactive/development/java/SchemaMappingLoadingConfig", "flex/interactive/development/java/SchemaMappingLoadingConfigDataSource", "flex/interactive/development/java/SchemaMappingLoadingConfigFormat", "flex/interactive/development/java/SchemaMappingLoadingConfigXCsrParams", "flex/interactive/development/java/ServiceManagementApi", "flex/interactive/development/java/ServiceMetrics", "flex/interactive/development/java/ServiceRegistryRecord", "flex/interactive/development/java/ServiceStatus", "flex/interactive/development/java/SnapshotStatus", "flex/interactive/development/java/StartServiceRequest", "flex/interactive/development/java/StopServiceRequest", "flex/interactive/development/java/StoredProcedureMeta", "flex/interactive/development/java/StringType", "flex/interactive/development/java/StringTypeString", "flex/interactive/development/java/TemporalType", "flex/interactive/development/java/TemporalTypeTemporal", "flex/interactive/development/java/TimeStampType", "flex/interactive/development/java/TypedValue", "flex/interactive/development/java/UpdateProcedureRequest", "flex/interactive/development/java/UploadFileResponse", "flex/interactive/development/java/VarChar", "flex/interactive/development/java/VarCharVarChar", "flex/interactive/development/java/VertexApi", "flex/interactive/development/java/VertexData", "flex/interactive/development/java/VertexEdgeRequest", "flex/interactive/development/java/VertexMapping", "flex/interactive/development/java/VertexRequest", "flex/interactive/development/java/VertexStatistics", "flex/interactive/development/java/VertexTypePairStatistics", "flex/interactive/development/java/java_sdk", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/Driver", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/Session", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/common/Result", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/common/Status", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/impl/DefaultSession", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/utils/Decoder", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/utils/Encoder", "flex/interactive/development/java/reference/index", "flex/interactive/development/python/APIResponseWithCode", "flex/interactive/development/python/BaseEdgeType", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInner", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/interactive/development/python/BasePropertyMeta", "flex/interactive/development/python/BaseVertexType", "flex/interactive/development/python/BaseVertexTypeXCsrParams", "flex/interactive/development/python/ColumnMapping", "flex/interactive/development/python/CreateEdgeType", "flex/interactive/development/python/CreateGraphRequest", "flex/interactive/development/python/CreateGraphResponse", "flex/interactive/development/python/CreateGraphSchemaRequest", "flex/interactive/development/python/CreateProcedureRequest", "flex/interactive/development/python/CreateProcedureResponse", "flex/interactive/development/python/CreatePropertyMeta", "flex/interactive/development/python/CreateVertexType", "flex/interactive/development/python/DateType", "flex/interactive/development/python/DeleteEdgeRequest", "flex/interactive/development/python/DeleteVertexRequest", "flex/interactive/development/python/EdgeApi", "flex/interactive/development/python/EdgeData", "flex/interactive/development/python/EdgeMapping", "flex/interactive/development/python/EdgeMappingDestinationVertexMappingsInner", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInner", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInnerColumn", "flex/interactive/development/python/EdgeMappingTypeTriplet", "flex/interactive/development/python/EdgeRequest", "flex/interactive/development/python/EdgeStatistics", "flex/interactive/development/python/FixedChar", "flex/interactive/development/python/FixedCharChar", "flex/interactive/development/python/GSDataType", "flex/interactive/development/python/GetEdgeType", "flex/interactive/development/python/GetGraphResponse", "flex/interactive/development/python/GetGraphSchemaResponse", "flex/interactive/development/python/GetGraphStatisticsResponse", "flex/interactive/development/python/GetProcedureResponse", "flex/interactive/development/python/GetPropertyMeta", "flex/interactive/development/python/GetVertexType", "flex/interactive/development/python/GraphManagementApi", "flex/interactive/development/python/GraphServiceRegistryRecord", "flex/interactive/development/python/JobManagementApi", "flex/interactive/development/python/JobResponse", "flex/interactive/development/python/JobStatus", "flex/interactive/development/python/LongText", "flex/interactive/development/python/ModelProperty", "flex/interactive/development/python/Parameter", "flex/interactive/development/python/PrimitiveType", "flex/interactive/development/python/ProcedureManagementApi", "flex/interactive/development/python/QueryRequest", "flex/interactive/development/python/QueryServiceApi", "flex/interactive/development/python/RegistryInstanceRecord", "flex/interactive/development/python/SchemaMapping", "flex/interactive/development/python/SchemaMappingLoadingConfig", "flex/interactive/development/python/SchemaMappingLoadingConfigDataSource", "flex/interactive/development/python/SchemaMappingLoadingConfigFormat", "flex/interactive/development/python/SchemaMappingLoadingConfigXCsrParams", "flex/interactive/development/python/ServiceManagementApi", "flex/interactive/development/python/ServiceMetrics", "flex/interactive/development/python/ServiceRegistryRecord", "flex/interactive/development/python/ServiceStatus", "flex/interactive/development/python/SnapshotStatus", "flex/interactive/development/python/StartServiceRequest", "flex/interactive/development/python/StopServiceRequest", "flex/interactive/development/python/StoredProcedureMeta", "flex/interactive/development/python/StringType", "flex/interactive/development/python/StringTypeString", "flex/interactive/development/python/TemporalType", "flex/interactive/development/python/TemporalTypeTemporal", "flex/interactive/development/python/TimeStampType", "flex/interactive/development/python/TypedValue", "flex/interactive/development/python/UpdateProcedureRequest", "flex/interactive/development/python/UploadFileResponse", "flex/interactive/development/python/VarChar", "flex/interactive/development/python/VarCharVarChar", "flex/interactive/development/python/VertexApi", "flex/interactive/development/python/VertexData", "flex/interactive/development/python/VertexEdgeRequest", "flex/interactive/development/python/VertexMapping", "flex/interactive/development/python/VertexRequest", "flex/interactive/development/python/VertexStatistics", "flex/interactive/development/python/VertexTypePairStatistics", "flex/interactive/development/python/driver", "flex/interactive/development/python/encoder", "flex/interactive/development/python/python_sdk", "flex/interactive/development/python/python_sdk_ref", "flex/interactive/development/python/result", "flex/interactive/development/python/session", "flex/interactive/development/python/status", "flex/interactive/development/restful_api", "flex/interactive/development/stored_procedure/cpp_procedure", "flex/interactive/getting_started", "flex/interactive/glossary", "flex/interactive/installation", "flex/interactive/overview", "flex/interactive/stored_procedures", "flex/interactive_intro", "frag_intro", "frequently_asked_questions", "getting_started_gle", "graph_workloads", "graphscope_for_data_scientists", "how_to_report_bugs", "index", "interactive_engine/benchmark_tool", "interactive_engine/deployment", "interactive_engine/design_of_gie", "interactive_engine/dev_and_test", "interactive_engine/getting_started", "interactive_engine/gopt", "interactive_engine/graph_planner", "interactive_engine/neo4j/cypher_sdk", "interactive_engine/neo4j/llm_assistant", "interactive_engine/neo4j/supported_cypher", "interactive_engine/neo4j_eco", "interactive_engine/tinkerpop/faq", "interactive_engine/tinkerpop/guide_and_examples", "interactive_engine/tinkerpop/supported_gremlin_steps", "interactive_engine/tinkerpop/tinkerpop_gremlin", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin", "interactive_engine/tinkerpop_eco", "java_tutorials", "key_features", "learning_engine/design_of_gle", "learning_engine/dev_and_test", "learning_engine/getting_started", "learning_engine/graph_sampling", "learning_engine/guide_and_examples", "learning_engine/tutorial_node_classification_k8s", "learning_engine/tutorial_node_classification_local", "learning_engine/tutorial_node_classification_pyg_k8s", "learning_engine/tutorial_node_classification_pyg_local", "loading_graphs", "overview/design_of_graphscope", "overview/getting_started", "overview/glossary", "overview/graph_analytics_workloads", "overview/graph_interactive_workloads", "overview/graph_learning_workloads", "overview/intro", "overview/positioning", "performance_and_benchmark", "python_tutorials", "reference/analytical_engine_index", "reference/app", "reference/context", "reference/cython_sdk", "reference/flex/index", "reference/gae_java/about", "reference/gae_java/index", "reference/generated/graphscope.Vertex", "reference/generated/graphscope.declare", "reference/generated/graphscope.framework.app.load_app", "reference/generated/graphscope.framework.dag_utils.add_column", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic", "reference/generated/graphscope.framework.dag_utils.bind_app", "reference/generated/graphscope.framework.dag_utils.clear_edges", "reference/generated/graphscope.framework.dag_utils.clear_graph", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe", "reference/generated/graphscope.framework.dag_utils.context_to_numpy", "reference/generated/graphscope.framework.dag_utils.copy_graph", "reference/generated/graphscope.framework.dag_utils.create_app", "reference/generated/graphscope.framework.dag_utils.create_graph", "reference/generated/graphscope.framework.dag_utils.create_graph_view", "reference/generated/graphscope.framework.dag_utils.create_loader", "reference/generated/graphscope.framework.dag_utils.create_subgraph", "reference/generated/graphscope.framework.dag_utils.create_unload_op", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow", "reference/generated/graphscope.framework.dag_utils.get_context_data", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph", "reference/generated/graphscope.framework.dag_utils.modify_edges", "reference/generated/graphscope.framework.dag_utils.modify_vertices", "reference/generated/graphscope.framework.dag_utils.output", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph", "reference/generated/graphscope.framework.dag_utils.project_to_simple", "reference/generated/graphscope.framework.dag_utils.report_graph", "reference/generated/graphscope.framework.dag_utils.run_app", "reference/generated/graphscope.framework.dag_utils.to_data_sink", "reference/generated/graphscope.framework.dag_utils.to_directed", "reference/generated/graphscope.framework.dag_utils.to_undirected", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor", "reference/generated/graphscope.framework.dag_utils.unload_app", "reference/generated/graphscope.framework.dag_utils.unload_context", "reference/generated/graphscope.framework.dag_utils.unload_graph", "reference/generated/graphscope.framework.operation.Operation.__init__", "reference/generated/graphscope.framework.operation.Operation.as_op_def", "reference/generated/graphscope.framework.operation.Operation.eval", "reference/generated/graphscope.framework.operation.Operation.evaluated", "reference/generated/graphscope.framework.operation.Operation.key", "reference/generated/graphscope.framework.operation.Operation.signature", "reference/generated/graphscope.g", "reference/generated/graphscope.get_default_session", "reference/generated/graphscope.graphlearn", "reference/generated/graphscope.gremlin", "reference/generated/graphscope.has_default_session", "reference/generated/graphscope.session", "reference/generated/graphscope.set_option", "reference/gnn_engine/algo_en", "reference/gnn_engine/data_loader_en", "reference/gnn_engine/graph_object_en", "reference/gnn_engine/graph_query_en", "reference/gnn_engine/graph_sampling_en", "reference/gnn_engine/graph_traverse_en", "reference/gnn_engine/gsl_en", "reference/gnn_engine/install_en", "reference/gnn_engine/model_programming_en", "reference/gnn_engine/negative_sampling_en", "reference/gnn_engine/operator", "reference/gnn_engine/other_source", "reference/gnn_engine/quick_start_en", "reference/gnn_engine/system_config", "reference/graph", "reference/interactive", "reference/learning", "reference/networkx/builtin", "reference/networkx/functions", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle", "reference/networkx/generated/graphscope.nx.classes.function.add_path", "reference/networkx/generated/graphscope.nx.classes.function.add_star", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy", "reference/networkx/generated/graphscope.nx.classes.function.degree", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram", "reference/networkx/generated/graphscope.nx.classes.function.density", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.edges", "reference/networkx/generated/graphscope.nx.classes.function.freeze", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.info", "reference/networkx/generated/graphscope.nx.classes.function.is_directed", "reference/networkx/generated/graphscope.nx.classes.function.is_empty", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted", "reference/networkx/generated/graphscope.nx.classes.function.neighbors", "reference/networkx/generated/graphscope.nx.classes.function.nodes", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.non_edges", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges", "reference/networkx/generated/graphscope.nx.classes.function.subgraph", "reference/networkx/generated/graphscope.nx.classes.function.to_directed", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph", "reference/networkx/generators", "reference/networkx/graphs", "reference/networkx/index", "reference/networkx/io", "reference/networkx/transformation", "reference/operation", "reference/python_index", "reference/selector", "reference/session", "resources_estimator", "storage_engine/gart", "storage_engine/getting_started", "storage_engine/graphar", "storage_engine/grin", "storage_engine/groot", "storage_engine/vineyard", "tutorial/builtin", "tutorial/scaling", "user_guide_and_examples_of_gae", "user_guide_and_examples_of_gle", "utilities/error_codes", "utilities/gs", "utilities/how_to_find_logs", "utilities/monitoring", "zh/analytics_engine", "zh/deployment", "zh/developer_guide", "zh/frequently_asked_questions", "zh/getting_started", "zh/graph_transformation", "zh/index", "zh/installation", "zh/interactive_engine", "zh/learning_engine", "zh/loading_graph", "zh/tutorials"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["analytical_engine/builtin_algorithms.md", "analytical_engine/customized_algorithms.md", "analytical_engine/deployment.md", "analytical_engine/design_of_gae.md", "analytical_engine/dev_and_test.md", "analytical_engine/faqs.md", "analytical_engine/flash.md", "analytical_engine/getting_started.md", "analytical_engine/guide_and_examples.md", "analytical_engine/ingress.md", "analytical_engine/key_concepts.rst", "analytical_engine/networkx_compatibility.md", "analytical_engine/overview_and_architecture.md", "analytical_engine/performance_tuning.md", "analytical_engine/programming_model_pie.md", "analytical_engine/tutorial_dev_algo_cpp_flash.md", "analytical_engine/tutorial_dev_algo_cpp_pie.md", "analytical_engine/tutorial_dev_algo_java.md", "analytical_engine/tutorial_dev_algo_python.rst", "analytical_engine/tutorial_networkx_algorithms.md", "analytical_engine/tutorial_networkx_operations.md", "analytical_engine/tutorial_run_builtin_algo.md", "analytical_engine/tutorial_run_giraph_apps.md", "analytical_engine/tutorial_run_graphx_apps.md", "analytical_engine/vertex_centric_models.md", "contact_us.md", "deployment/deploy_graphscope_on_clouds.md", "deployment/deploy_graphscope_on_self_managed_k8s.md", "deployment/deploy_graphscope_operator.md", "deployment/deploy_graphscope_with_helm.md", "deployment/deploy_with_existing_vineyard_cluster.md", "deployment/install_in_offline_env.md", "deployment/install_on_local.md", "deployment/persistent_storage_of_graphs_on_k8s.md", "design_of_gae.md", "development/code_style_guide.md", "development/dev_guide.md", "development/how_to_contribute.md", "development/how_to_debug.md", "development/how_to_instrument.md", "development/how_to_submit_pr.md", "development/how_to_test.md", "error_codes.md", "flex/coordinator.md", "flex/coordinator/dev_guide.md", "flex/coordinator/development/dev_and_test.md", "flex/coordinator/development/python/README.md", "flex/coordinator/development/python/docs/AlertApi.md", "flex/coordinator/development/python/docs/BaseEdgeType.md", "flex/coordinator/development/python/docs/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/coordinator/development/python/docs/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/coordinator/development/python/docs/BasePropertyMeta.md", "flex/coordinator/development/python/docs/BaseVertexType.md", "flex/coordinator/development/python/docs/BaseVertexTypeXCsrParams.md", "flex/coordinator/development/python/docs/ColumnMapping.md", "flex/coordinator/development/python/docs/ColumnMappingColumn.md", "flex/coordinator/development/python/docs/CreateAlertReceiverRequest.md", "flex/coordinator/development/python/docs/CreateAlertRuleRequest.md", "flex/coordinator/development/python/docs/CreateDataloadingJobResponse.md", "flex/coordinator/development/python/docs/CreateEdgeType.md", "flex/coordinator/development/python/docs/CreateGraphRequest.md", "flex/coordinator/development/python/docs/CreateGraphResponse.md", "flex/coordinator/development/python/docs/CreateGraphSchemaRequest.md", "flex/coordinator/development/python/docs/CreatePropertyMeta.md", "flex/coordinator/development/python/docs/CreateStoredProcRequest.md", "flex/coordinator/development/python/docs/CreateStoredProcResponse.md", "flex/coordinator/development/python/docs/CreateVertexType.md", "flex/coordinator/development/python/docs/DataSourceApi.md", "flex/coordinator/development/python/docs/DataloadingJobConfig.md", "flex/coordinator/development/python/docs/DataloadingJobConfigEdgesInner.md", "flex/coordinator/development/python/docs/DataloadingJobConfigLoadingConfig.md", "flex/coordinator/development/python/docs/DataloadingJobConfigLoadingConfigFormat.md", "flex/coordinator/development/python/docs/DataloadingJobConfigVerticesInner.md", "flex/coordinator/development/python/docs/DataloadingMRJobConfig.md", "flex/coordinator/development/python/docs/DateType.md", "flex/coordinator/development/python/docs/DeploymentApi.md", "flex/coordinator/development/python/docs/EdgeMapping.md", "flex/coordinator/development/python/docs/EdgeMappingTypeTriplet.md", "flex/coordinator/development/python/docs/Error.md", "flex/coordinator/development/python/docs/FixedChar.md", "flex/coordinator/development/python/docs/FixedCharChar.md", "flex/coordinator/development/python/docs/GSDataType.md", "flex/coordinator/development/python/docs/GetAlertMessageResponse.md", "flex/coordinator/development/python/docs/GetAlertReceiverResponse.md", "flex/coordinator/development/python/docs/GetAlertRuleResponse.md", "flex/coordinator/development/python/docs/GetEdgeType.md", "flex/coordinator/development/python/docs/GetGraphResponse.md", "flex/coordinator/development/python/docs/GetGraphSchemaResponse.md", "flex/coordinator/development/python/docs/GetPodLogResponse.md", "flex/coordinator/development/python/docs/GetPropertyMeta.md", "flex/coordinator/development/python/docs/GetResourceUsageResponse.md", "flex/coordinator/development/python/docs/GetStorageUsageResponse.md", "flex/coordinator/development/python/docs/GetStoredProcResponse.md", "flex/coordinator/development/python/docs/GetVertexType.md", "flex/coordinator/development/python/docs/GraphApi.md", "flex/coordinator/development/python/docs/JobApi.md", "flex/coordinator/development/python/docs/JobStatus.md", "flex/coordinator/development/python/docs/LongText.md", "flex/coordinator/development/python/docs/NodeStatus.md", "flex/coordinator/development/python/docs/Parameter.md", "flex/coordinator/development/python/docs/PodStatus.md", "flex/coordinator/development/python/docs/PrimitiveType.md", "flex/coordinator/development/python/docs/ResourceUsage.md", "flex/coordinator/development/python/docs/RunningDeploymentInfo.md", "flex/coordinator/development/python/docs/RunningDeploymentStatus.md", "flex/coordinator/development/python/docs/SchemaMapping.md", "flex/coordinator/development/python/docs/ServiceApi.md", "flex/coordinator/development/python/docs/ServiceStatus.md", "flex/coordinator/development/python/docs/ServiceStatusSdkEndpoints.md", "flex/coordinator/development/python/docs/StartServiceRequest.md", "flex/coordinator/development/python/docs/StoredProcedureApi.md", "flex/coordinator/development/python/docs/StoredProcedureMeta.md", "flex/coordinator/development/python/docs/StringType.md", "flex/coordinator/development/python/docs/StringTypeString.md", "flex/coordinator/development/python/docs/TemporalType.md", "flex/coordinator/development/python/docs/TemporalTypeTemporal.md", "flex/coordinator/development/python/docs/TimeStampType.md", "flex/coordinator/development/python/docs/TypedValue.md", "flex/coordinator/development/python/docs/UpdateAlertMessageStatusRequest.md", "flex/coordinator/development/python/docs/UpdateStoredProcRequest.md", "flex/coordinator/development/python/docs/UploadFileResponse.md", "flex/coordinator/development/python/docs/UtilsApi.md", "flex/coordinator/development/python/docs/VarChar.md", "flex/coordinator/development/python/docs/VarCharVarChar.md", "flex/coordinator/development/python/docs/VertexMapping.md", "flex/coordinator/development/python/python_sdk.md", "flex/coordinator/getting_started.md", "flex/coordinator/restful_api.rst", "flex/interactive/configuration.md", "flex/interactive/custom_graph_data.md", "flex/interactive/data_import.md", "flex/interactive/data_model.md", "flex/interactive/deployment.md", "flex/interactive/dev_guide.md", "flex/interactive/development/dev_and_test.md", "flex/interactive/development/java/APIResponseWithCode.md", "flex/interactive/development/java/BaseEdgeType.md", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/interactive/development/java/BasePropertyMeta.md", "flex/interactive/development/java/BaseVertexType.md", "flex/interactive/development/java/BaseVertexTypeXCsrParams.md", "flex/interactive/development/java/ColumnMapping.md", "flex/interactive/development/java/CreateEdgeType.md", "flex/interactive/development/java/CreateGraphRequest.md", "flex/interactive/development/java/CreateGraphResponse.md", "flex/interactive/development/java/CreateGraphSchemaRequest.md", "flex/interactive/development/java/CreateProcedureRequest.md", "flex/interactive/development/java/CreateProcedureResponse.md", "flex/interactive/development/java/CreatePropertyMeta.md", "flex/interactive/development/java/CreateVertexType.md", "flex/interactive/development/java/DateType.md", "flex/interactive/development/java/DeleteEdgeRequest.md", "flex/interactive/development/java/DeleteVertexRequest.md", "flex/interactive/development/java/EdgeApi.md", "flex/interactive/development/java/EdgeData.md", "flex/interactive/development/java/EdgeMapping.md", "flex/interactive/development/java/EdgeMappingDestinationVertexMappingsInner.md", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInner.md", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInnerColumn.md", "flex/interactive/development/java/EdgeMappingTypeTriplet.md", "flex/interactive/development/java/EdgeRequest.md", "flex/interactive/development/java/EdgeStatistics.md", "flex/interactive/development/java/FixedChar.md", "flex/interactive/development/java/FixedCharChar.md", "flex/interactive/development/java/GSDataType.md", "flex/interactive/development/java/GetEdgeType.md", "flex/interactive/development/java/GetGraphResponse.md", "flex/interactive/development/java/GetGraphSchemaResponse.md", "flex/interactive/development/java/GetGraphStatisticsResponse.md", "flex/interactive/development/java/GetProcedureResponse.md", "flex/interactive/development/java/GetPropertyMeta.md", "flex/interactive/development/java/GetVertexType.md", "flex/interactive/development/java/GraphManagementApi.md", "flex/interactive/development/java/GraphServiceRegistryRecord.md", "flex/interactive/development/java/JobManagementApi.md", "flex/interactive/development/java/JobResponse.md", "flex/interactive/development/java/JobStatus.md", "flex/interactive/development/java/LongText.md", "flex/interactive/development/java/Parameter.md", "flex/interactive/development/java/PrimitiveType.md", "flex/interactive/development/java/ProcedureManagementApi.md", "flex/interactive/development/java/Property.md", "flex/interactive/development/java/QueryRequest.md", "flex/interactive/development/java/QueryServiceApi.md", "flex/interactive/development/java/RegistryInstanceRecord.md", "flex/interactive/development/java/SchemaMapping.md", "flex/interactive/development/java/SchemaMappingLoadingConfig.md", "flex/interactive/development/java/SchemaMappingLoadingConfigDataSource.md", "flex/interactive/development/java/SchemaMappingLoadingConfigFormat.md", "flex/interactive/development/java/SchemaMappingLoadingConfigXCsrParams.md", "flex/interactive/development/java/ServiceManagementApi.md", "flex/interactive/development/java/ServiceMetrics.md", "flex/interactive/development/java/ServiceRegistryRecord.md", "flex/interactive/development/java/ServiceStatus.md", "flex/interactive/development/java/SnapshotStatus.md", "flex/interactive/development/java/StartServiceRequest.md", "flex/interactive/development/java/StopServiceRequest.md", "flex/interactive/development/java/StoredProcedureMeta.md", "flex/interactive/development/java/StringType.md", "flex/interactive/development/java/StringTypeString.md", "flex/interactive/development/java/TemporalType.md", "flex/interactive/development/java/TemporalTypeTemporal.md", "flex/interactive/development/java/TimeStampType.md", "flex/interactive/development/java/TypedValue.md", "flex/interactive/development/java/UpdateProcedureRequest.md", "flex/interactive/development/java/UploadFileResponse.md", "flex/interactive/development/java/VarChar.md", "flex/interactive/development/java/VarCharVarChar.md", "flex/interactive/development/java/VertexApi.md", "flex/interactive/development/java/VertexData.md", "flex/interactive/development/java/VertexEdgeRequest.md", "flex/interactive/development/java/VertexMapping.md", "flex/interactive/development/java/VertexRequest.md", "flex/interactive/development/java/VertexStatistics.md", "flex/interactive/development/java/VertexTypePairStatistics.md", "flex/interactive/development/java/java_sdk.md", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/Driver.rst", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/Session.rst", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/common/Result.rst", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/common/Status.rst", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/impl/DefaultSession.rst", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/utils/Decoder.rst", "flex/interactive/development/java/reference/com/alibaba/graphscope/interactive/client/utils/Encoder.rst", "flex/interactive/development/java/reference/index.rst", "flex/interactive/development/python/APIResponseWithCode.md", "flex/interactive/development/python/BaseEdgeType.md", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/interactive/development/python/BasePropertyMeta.md", "flex/interactive/development/python/BaseVertexType.md", "flex/interactive/development/python/BaseVertexTypeXCsrParams.md", "flex/interactive/development/python/ColumnMapping.md", "flex/interactive/development/python/CreateEdgeType.md", "flex/interactive/development/python/CreateGraphRequest.md", "flex/interactive/development/python/CreateGraphResponse.md", "flex/interactive/development/python/CreateGraphSchemaRequest.md", "flex/interactive/development/python/CreateProcedureRequest.md", "flex/interactive/development/python/CreateProcedureResponse.md", "flex/interactive/development/python/CreatePropertyMeta.md", "flex/interactive/development/python/CreateVertexType.md", "flex/interactive/development/python/DateType.md", "flex/interactive/development/python/DeleteEdgeRequest.md", "flex/interactive/development/python/DeleteVertexRequest.md", "flex/interactive/development/python/EdgeApi.md", "flex/interactive/development/python/EdgeData.md", "flex/interactive/development/python/EdgeMapping.md", "flex/interactive/development/python/EdgeMappingDestinationVertexMappingsInner.md", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInner.md", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInnerColumn.md", "flex/interactive/development/python/EdgeMappingTypeTriplet.md", "flex/interactive/development/python/EdgeRequest.md", "flex/interactive/development/python/EdgeStatistics.md", "flex/interactive/development/python/FixedChar.md", "flex/interactive/development/python/FixedCharChar.md", "flex/interactive/development/python/GSDataType.md", "flex/interactive/development/python/GetEdgeType.md", "flex/interactive/development/python/GetGraphResponse.md", "flex/interactive/development/python/GetGraphSchemaResponse.md", "flex/interactive/development/python/GetGraphStatisticsResponse.md", "flex/interactive/development/python/GetProcedureResponse.md", "flex/interactive/development/python/GetPropertyMeta.md", "flex/interactive/development/python/GetVertexType.md", "flex/interactive/development/python/GraphManagementApi.md", "flex/interactive/development/python/GraphServiceRegistryRecord.md", "flex/interactive/development/python/JobManagementApi.md", "flex/interactive/development/python/JobResponse.md", "flex/interactive/development/python/JobStatus.md", "flex/interactive/development/python/LongText.md", "flex/interactive/development/python/ModelProperty.md", "flex/interactive/development/python/Parameter.md", "flex/interactive/development/python/PrimitiveType.md", "flex/interactive/development/python/ProcedureManagementApi.md", "flex/interactive/development/python/QueryRequest.md", "flex/interactive/development/python/QueryServiceApi.md", "flex/interactive/development/python/RegistryInstanceRecord.md", "flex/interactive/development/python/SchemaMapping.md", "flex/interactive/development/python/SchemaMappingLoadingConfig.md", "flex/interactive/development/python/SchemaMappingLoadingConfigDataSource.md", "flex/interactive/development/python/SchemaMappingLoadingConfigFormat.md", "flex/interactive/development/python/SchemaMappingLoadingConfigXCsrParams.md", "flex/interactive/development/python/ServiceManagementApi.md", "flex/interactive/development/python/ServiceMetrics.md", "flex/interactive/development/python/ServiceRegistryRecord.md", "flex/interactive/development/python/ServiceStatus.md", "flex/interactive/development/python/SnapshotStatus.md", "flex/interactive/development/python/StartServiceRequest.md", "flex/interactive/development/python/StopServiceRequest.md", "flex/interactive/development/python/StoredProcedureMeta.md", "flex/interactive/development/python/StringType.md", "flex/interactive/development/python/StringTypeString.md", "flex/interactive/development/python/TemporalType.md", "flex/interactive/development/python/TemporalTypeTemporal.md", "flex/interactive/development/python/TimeStampType.md", "flex/interactive/development/python/TypedValue.md", "flex/interactive/development/python/UpdateProcedureRequest.md", "flex/interactive/development/python/UploadFileResponse.md", "flex/interactive/development/python/VarChar.md", "flex/interactive/development/python/VarCharVarChar.md", "flex/interactive/development/python/VertexApi.md", "flex/interactive/development/python/VertexData.md", "flex/interactive/development/python/VertexEdgeRequest.md", "flex/interactive/development/python/VertexMapping.md", "flex/interactive/development/python/VertexRequest.md", "flex/interactive/development/python/VertexStatistics.md", "flex/interactive/development/python/VertexTypePairStatistics.md", "flex/interactive/development/python/driver.rst", "flex/interactive/development/python/encoder.rst", "flex/interactive/development/python/python_sdk.md", "flex/interactive/development/python/python_sdk_ref.md", "flex/interactive/development/python/result.rst", "flex/interactive/development/python/session.rst", "flex/interactive/development/python/status.rst", "flex/interactive/development/restful_api.rst", "flex/interactive/development/stored_procedure/cpp_procedure.md", "flex/interactive/getting_started.md", "flex/interactive/glossary.md", "flex/interactive/installation.md", "flex/interactive/overview.md", "flex/interactive/stored_procedures.md", "flex/interactive_intro.md", "frag_intro.md", "frequently_asked_questions.rst", "getting_started_gle.md", "graph_workloads.md", "graphscope_for_data_scientists.md", "how_to_report_bugs.md", "index.rst", "interactive_engine/benchmark_tool.md", "interactive_engine/deployment.md", "interactive_engine/design_of_gie.md", "interactive_engine/dev_and_test.md", "interactive_engine/getting_started.md", "interactive_engine/gopt.md", "interactive_engine/graph_planner.md", "interactive_engine/neo4j/cypher_sdk.md", "interactive_engine/neo4j/llm_assistant.md", "interactive_engine/neo4j/supported_cypher.md", "interactive_engine/neo4j_eco.md", "interactive_engine/tinkerpop/faq.md", "interactive_engine/tinkerpop/guide_and_examples.md", "interactive_engine/tinkerpop/supported_gremlin_steps.md", "interactive_engine/tinkerpop/tinkerpop_gremlin.md", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin.md", "interactive_engine/tinkerpop_eco.md", "java_tutorials.md", "key_features.md", "learning_engine/design_of_gle.md", "learning_engine/dev_and_test.md", "learning_engine/getting_started.md", "learning_engine/graph_sampling.md", "learning_engine/guide_and_examples.md", "learning_engine/tutorial_node_classification_k8s.md", "learning_engine/tutorial_node_classification_local.md", "learning_engine/tutorial_node_classification_pyg_k8s.md", "learning_engine/tutorial_node_classification_pyg_local.md", "loading_graphs.rst", "overview/design_of_graphscope.md", "overview/getting_started.md", "overview/glossary.md", "overview/graph_analytics_workloads.md", "overview/graph_interactive_workloads.md", "overview/graph_learning_workloads.md", "overview/intro.md", "overview/positioning.md", "performance_and_benchmark.md", "python_tutorials.md", "reference/analytical_engine_index.rst", "reference/app.rst", "reference/context.rst", "reference/cython_sdk.rst", "reference/flex/index.rst", "reference/gae_java/about.rst", "reference/gae_java/index.rst", "reference/generated/graphscope.Vertex.rst", "reference/generated/graphscope.declare.rst", "reference/generated/graphscope.framework.app.load_app.rst", "reference/generated/graphscope.framework.dag_utils.add_column.rst", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph.rst", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic.rst", "reference/generated/graphscope.framework.dag_utils.bind_app.rst", "reference/generated/graphscope.framework.dag_utils.clear_edges.rst", "reference/generated/graphscope.framework.dag_utils.clear_graph.rst", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.context_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.copy_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_app.rst", "reference/generated/graphscope.framework.dag_utils.create_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_graph_view.rst", "reference/generated/graphscope.framework.dag_utils.create_loader.rst", "reference/generated/graphscope.framework.dag_utils.create_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.create_unload_op.rst", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow.rst", "reference/generated/graphscope.framework.dag_utils.get_context_data.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.modify_edges.rst", "reference/generated/graphscope.framework.dag_utils.modify_vertices.rst", "reference/generated/graphscope.framework.dag_utils.output.rst", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph.rst", "reference/generated/graphscope.framework.dag_utils.project_to_simple.rst", "reference/generated/graphscope.framework.dag_utils.report_graph.rst", "reference/generated/graphscope.framework.dag_utils.run_app.rst", "reference/generated/graphscope.framework.dag_utils.to_data_sink.rst", "reference/generated/graphscope.framework.dag_utils.to_directed.rst", "reference/generated/graphscope.framework.dag_utils.to_undirected.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor.rst", "reference/generated/graphscope.framework.dag_utils.unload_app.rst", "reference/generated/graphscope.framework.dag_utils.unload_context.rst", "reference/generated/graphscope.framework.dag_utils.unload_graph.rst", "reference/generated/graphscope.framework.operation.Operation.__init__.rst", "reference/generated/graphscope.framework.operation.Operation.as_op_def.rst", "reference/generated/graphscope.framework.operation.Operation.eval.rst", "reference/generated/graphscope.framework.operation.Operation.evaluated.rst", "reference/generated/graphscope.framework.operation.Operation.key.rst", "reference/generated/graphscope.framework.operation.Operation.signature.rst", "reference/generated/graphscope.g.rst", "reference/generated/graphscope.get_default_session.rst", "reference/generated/graphscope.graphlearn.rst", "reference/generated/graphscope.gremlin.rst", "reference/generated/graphscope.has_default_session.rst", "reference/generated/graphscope.session.rst", "reference/generated/graphscope.set_option.rst", "reference/gnn_engine/algo_en.rst", "reference/gnn_engine/data_loader_en.rst", "reference/gnn_engine/graph_object_en.rst", "reference/gnn_engine/graph_query_en.rst", "reference/gnn_engine/graph_sampling_en.rst", "reference/gnn_engine/graph_traverse_en.rst", "reference/gnn_engine/gsl_en.rst", "reference/gnn_engine/install_en.rst", "reference/gnn_engine/model_programming_en.rst", "reference/gnn_engine/negative_sampling_en.rst", "reference/gnn_engine/operator.rst", "reference/gnn_engine/other_source.rst", "reference/gnn_engine/quick_start_en.rst", "reference/gnn_engine/system_config.rst", "reference/graph.rst", "reference/interactive.rst", "reference/learning.rst", "reference/networkx/builtin.rst", "reference/networkx/functions.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_path.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_star.rst", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram.rst", "reference/networkx/generated/graphscope.nx.classes.function.density.rst", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.freeze.rst", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.info.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_empty.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g.rst", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques.rst", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model.rst", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph.rst", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph.rst", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge.rst", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph.rst", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree.rst", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree.rst", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph.rst", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph.rst", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph.rst", "reference/networkx/generators.rst", "reference/networkx/graphs.rst", "reference/networkx/index.rst", "reference/networkx/io.rst", "reference/networkx/transformation.rst", "reference/operation.rst", "reference/python_index.rst", "reference/selector.rst", "reference/session.rst", "resources_estimator.md", "storage_engine/gart.md", "storage_engine/getting_started.md", "storage_engine/graphar.md", "storage_engine/grin.md", "storage_engine/groot.md", "storage_engine/vineyard.md", "tutorial/builtin.rst", "tutorial/scaling.rst", "user_guide_and_examples_of_gae.md", "user_guide_and_examples_of_gle.md", "utilities/error_codes.md", "utilities/gs.md", "utilities/how_to_find_logs.md", "utilities/monitoring.md", "zh/analytics_engine.rst", "zh/deployment.rst", "zh/developer_guide.rst", "zh/frequently_asked_questions.rst", "zh/getting_started.rst", "zh/graph_transformation.rst", "zh/index.rst", "zh/installation.rst", "zh/interactive_engine.rst", "zh/learning_engine.rst", "zh/loading_graph.rst", "zh/tutorials.rst"], "indexentries": {"__call__() (graphscope.analytical.app.javaapp method)": [[368, "graphscope.analytical.app.JavaApp.__call__", false]], "__contains__() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.__contains__", false]], "__contains__() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.__contains__", false]], "__del__() (graphscope.framework.app.app method)": [[368, "graphscope.framework.app.App.__del__", false]], "__enter__() (graphscope.session method)": [[584, "graphscope.Session.__enter__", false]], "__exit__() (graphscope.session method)": [[584, "graphscope.Session.__exit__", false]], "__getitem__() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.__getitem__", false]], "__getitem__() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.__getitem__", false]], "__init__() (graphscope.analytical.app.javaapp method)": [[368, "graphscope.analytical.app.JavaApp.__init__", false]], "__init__() (graphscope.framework.app.app method)": [[368, "graphscope.framework.app.App.__init__", false]], "__init__() (graphscope.framework.app.appassets method)": [[368, "graphscope.framework.app.AppAssets.__init__", false]], "__init__() (graphscope.framework.graph.graph method)": [[439, "graphscope.framework.graph.Graph.__init__", false]], "__init__() (graphscope.framework.graph.graphdagnode method)": [[439, "graphscope.framework.graph.GraphDAGNode.__init__", false]], "__init__() (graphscope.framework.loader.loader method)": [[439, "graphscope.framework.loader.Loader.__init__", false]], "__init__() (graphscope.framework.operation.operation method)": [[412, "graphscope.framework.operation.Operation.__init__", false]], "__init__() (graphscope.interactive.query.interactivequery method)": [[440, "graphscope.interactive.query.InteractiveQuery.__init__", false]], "__init__() (graphscope.learning.graph.graph method)": [[441, "graphscope.learning.graph.Graph.__init__", false]], "__init__() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.__init__", false]], "__init__() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.__init__", false]], "__init__() (graphscope.session method)": [[584, "graphscope.Session.__init__", false]], "__init__() (gs_interactive.client.driver.driver method)": [[306, "gs_interactive.client.driver.Driver.__init__", false]], "__init__() (gs_interactive.client.result.result method)": [[310, "gs_interactive.client.result.Result.__init__", false]], "__init__() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.__init__", false]], "__init__() (gs_interactive.client.status.status method)": [[312, "gs_interactive.client.status.Status.__init__", false]], "__init__() (gs_interactive.client.utils.decoder method)": [[307, "gs_interactive.client.utils.Decoder.__init__", false]], "__init__() (gs_interactive.client.utils.encoder method)": [[307, "gs_interactive.client.utils.Encoder.__init__", false]], "__init__() (in module graphscope.nx.graph)": [[580, "graphscope.nx.Graph.__init__", false]], "__iter__() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.__iter__", false]], "__iter__() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.__iter__", false]], "__len__() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.__len__", false]], "__len__() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.__len__", false]], "_convert_arrow_to_dynamic() (in module graphscope.nx.graph)": [[580, "graphscope.nx.Graph._convert_arrow_to_dynamic", false]], "add_column() (graphscope.framework.graph.graph method)": [[439, "graphscope.framework.graph.Graph.add_column", false]], "add_column() (graphscope.framework.graph.graphdagnode method)": [[439, "graphscope.framework.graph.GraphDAGNode.add_column", false]], "add_column() (in module graphscope.framework.dag_utils)": [[377, "graphscope.framework.dag_utils.add_column", false]], "add_cycle() (in module graphscope.nx.classes.function)": [[444, "graphscope.nx.classes.function.add_cycle", false]], "add_edge() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.add_edge", false]], "add_edge() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.add_edge", false]], "add_edge() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.add_edge", false]], "add_edges() (graphscope.framework.graph.graph method)": [[439, "graphscope.framework.graph.Graph.add_edges", false]], "add_edges() (graphscope.framework.graph.graphdagnode method)": [[439, "graphscope.framework.graph.GraphDAGNode.add_edges", false]], "add_edges_from() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.add_edges_from", false]], "add_edges_from() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.add_edges_from", false]], "add_labels_to_graph() (in module graphscope.framework.dag_utils)": [[378, "graphscope.framework.dag_utils.add_labels_to_graph", false]], "add_lib() (graphscope.session method)": [[584, "graphscope.Session.add_lib", false]], "add_node() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.add_node", false]], "add_node() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.add_node", false]], "add_nodes_from() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.add_nodes_from", false]], "add_nodes_from() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.add_nodes_from", false]], "add_path() (in module graphscope.nx.classes.function)": [[445, "graphscope.nx.classes.function.add_path", false]], "add_star() (in module graphscope.nx.classes.function)": [[446, "graphscope.nx.classes.function.add_star", false]], "add_vertex() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.add_vertex", false]], "add_vertices() (graphscope.framework.graph.graph method)": [[439, "graphscope.framework.graph.Graph.add_vertices", false]], "add_vertices() (graphscope.framework.graph.graphdagnode method)": [[439, "graphscope.framework.graph.GraphDAGNode.add_vertices", false]], "add_weighted_edges_from() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.add_weighted_edges_from", false]], "add_weighted_edges_from() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.add_weighted_edges_from", false]], "adj (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.adj", false]], "adj (graphscope.nx.graph property)": [[577, "graphscope.nx.Graph.adj", false]], "adjacency() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.adjacency", false]], "adjacency() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.adjacency", false]], "adjlist_inner_dict_factory (graphscope.nx.digraph attribute)": [[577, "graphscope.nx.DiGraph.adjlist_inner_dict_factory", false]], "adjlist_inner_dict_factory (graphscope.nx.graph attribute)": [[577, "graphscope.nx.Graph.adjlist_inner_dict_factory", false]], "adjlist_outer_dict_factory (graphscope.nx.digraph attribute)": [[577, "graphscope.nx.DiGraph.adjlist_outer_dict_factory", false]], "adjlist_outer_dict_factory (graphscope.nx.graph attribute)": [[577, "graphscope.nx.Graph.adjlist_outer_dict_factory", false]], "algo (graphscope.framework.app.appassets property)": [[368, "graphscope.framework.app.AppAssets.algo", false]], "all_neighbors() (in module graphscope.nx.classes.function)": [[447, "graphscope.nx.classes.function.all_neighbors", false]], "all_pairs_shortest_path_length()": [[0, "all_pairs_shortest_path_length", false]], "app (class in graphscope.framework.app)": [[368, "graphscope.framework.app.App", false]], "appassets (class in graphscope.framework.app)": [[368, "graphscope.framework.app.AppAssets", false]], "appdagnode (class in graphscope.framework.app)": [[368, "graphscope.framework.app.AppDAGNode", false]], "arrow_to_dynamic() (in module graphscope.framework.dag_utils)": [[379, "graphscope.framework.dag_utils.arrow_to_dynamic", false]], "as_default() (graphscope.session method)": [[584, "graphscope.Session.as_default", false]], "as_op_def() (graphscope.framework.operation.operation method)": [[413, "graphscope.framework.operation.Operation.as_op_def", false]], "attribute_assortativity()": [[0, "attribute_assortativity", false]], "attribute_assortativity_coefficient() (in module graphscope)": [[368, "graphscope.attribute_assortativity_coefficient", false]], "average_clustering() (in module graphscope.nx.builtin)": [[442, "graphscope.nx.builtin.average_clustering", false]], "average_degree_connectivity()": [[0, "average_degree_connectivity", false]], "average_degree_connectivity() (in module graphscope)": [[368, "graphscope.average_degree_connectivity", false]], "average_shortest_path_length() (in module graphscope)": [[368, "graphscope.average_shortest_path_length", false]], "average_shortest_path_length() (in module graphscope.nx.builtin)": [[442, "graphscope.nx.builtin.average_shortest_path_length", false]], "avg_clustering() (in module graphscope)": [[368, "graphscope.avg_clustering", false]], "balanced_tree() (in module graphscope.nx.generators.classic)": [[477, "graphscope.nx.generators.classic.balanced_tree", false]], "barbell_graph() (in module graphscope.nx.generators.classic)": [[478, "graphscope.nx.generators.classic.barbell_graph", false]], "basecontextdagnode (class in graphscope.framework.context)": [[369, "graphscope.framework.context.BaseContextDAGNode", false]], "betweenness_centrality()": [[0, "betweenness_centrality", false]], "bfs()": [[0, "bfs", false]], "bfs() (in module graphscope)": [[368, "graphscope.bfs", false]], "bfs_edges() (in module graphscope.nx.builtin)": [[442, "graphscope.nx.builtin.bfs_edges", false]], "bind_app() (in module graphscope.framework.dag_utils)": [[380, "graphscope.framework.dag_utils.bind_app", false]], "binomial_tree() (in module graphscope.nx.generators.classic)": [[479, "graphscope.nx.generators.classic.binomial_tree", false]], "built-in function": [[0, "all_pairs_shortest_path_length", false], [0, "attribute_assortativity", false], [0, "average_degree_connectivity", false], [0, "betweenness_centrality", false], [0, "bfs", false], [0, "closeness_centrality", false], [0, "degree_assortativity_coefficient", false], [0, "degree_centrality", false], [0, "dfs", false], [0, "eigenvector_centrality", false], [0, "hits", false], [0, "id0", false], [0, "id1", false], [0, "id2", false], [0, "id3", false], [0, "id4", false], [0, "id5", false], [0, "katz_centrality", false], [0, "kkore", false], [0, "kshell", false], [0, "lpa", false], [0, "sampling_path", false], [0, "sssp", false]], "bulk_loading() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.bulk_loading", false]], "bull_graph() (in module graphscope.nx.generators.small)": [[543, "graphscope.nx.generators.small.bull_graph", false]], "call_procedure() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.call_procedure", false]], "call_procedure_current() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.call_procedure_current", false]], "call_procedure_current_raw() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.call_procedure_current_raw", false]], "call_procedure_raw() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.call_procedure_raw", false]], "cancel_job() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.cancel_job", false]], "caveman_graph() (in module graphscope.nx.generators.community)": [[497, "graphscope.nx.generators.community.caveman_graph", false]], "cdlp()": [[0, "id0", false]], "cdlp() (in module graphscope)": [[368, "graphscope.cdlp", false]], "chordal_cycle_graph() (in module graphscope.nx.generators.expanders)": [[521, "graphscope.nx.generators.expanders.chordal_cycle_graph", false]], "chvatal_graph() (in module graphscope.nx.generators.small)": [[544, "graphscope.nx.generators.small.chvatal_graph", false]], "circulant_graph() (in module graphscope.nx.generators.classic)": [[480, "graphscope.nx.generators.classic.circulant_graph", false]], "circular_ladder_graph() (in module graphscope.nx.generators.classic)": [[481, "graphscope.nx.generators.classic.circular_ladder_graph", false]], "clear() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.clear", false]], "clear() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.clear", false]], "clear_edges() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.clear_edges", false]], "clear_edges() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.clear_edges", false]], "clear_edges() (in module graphscope.framework.dag_utils)": [[381, "graphscope.framework.dag_utils.clear_edges", false]], "clear_graph() (in module graphscope.framework.dag_utils)": [[382, "graphscope.framework.dag_utils.clear_graph", false]], "close() (graphscope.interactive.query.interactivequery method)": [[440, "graphscope.interactive.query.InteractiveQuery.close", false]], "close() (graphscope.session method)": [[584, "graphscope.Session.close", false]], "close() (gs_interactive.client.driver.driver method)": [[306, "gs_interactive.client.driver.Driver.close", false]], "closeness_centrality()": [[0, "closeness_centrality", false]], "clustering()": [[0, "id1", false]], "clustering() (in module graphscope)": [[368, "graphscope.clustering", false]], "clustering() (in module graphscope.nx.builtin)": [[442, "graphscope.nx.builtin.clustering", false]], "common_neighbors() (in module graphscope.nx.classes.function)": [[448, "graphscope.nx.classes.function.common_neighbors", false]], "complete_graph() (in module graphscope.nx.generators.classic)": [[482, "graphscope.nx.generators.classic.complete_graph", false]], "complete_multipartite_graph() (in module graphscope.nx.generators.classic)": [[483, "graphscope.nx.generators.classic.complete_multipartite_graph", false]], "configuration_model() (in module graphscope.nx.generators.degree_seq)": [[506, "graphscope.nx.generators.degree_seq.configuration_model", false]], "connected() (graphscope.session method)": [[584, "graphscope.Session.connected", false]], "connected_caveman_graph() (in module graphscope.nx.generators.community)": [[498, "graphscope.nx.generators.community.connected_caveman_graph", false]], "consolidate_columns() (graphscope.framework.graph.graph method)": [[439, "graphscope.framework.graph.Graph.consolidate_columns", false]], "consolidate_columns() (graphscope.framework.graph.graphdagnode method)": [[439, "graphscope.framework.graph.GraphDAGNode.consolidate_columns", false]], "context (class in graphscope.framework.context)": [[369, "graphscope.framework.context.Context", false]], "context_to_dataframe() (in module graphscope.framework.dag_utils)": [[383, "graphscope.framework.dag_utils.context_to_dataframe", false]], "context_to_numpy() (in module graphscope.framework.dag_utils)": [[384, "graphscope.framework.dag_utils.context_to_numpy", false]], "context_type (graphscope.framework.app.appassets property)": [[368, "graphscope.framework.app.AppAssets.context_type", false]], "copy() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.copy", false]], "copy() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.copy", false]], "copy_graph() (in module graphscope.framework.dag_utils)": [[385, "graphscope.framework.dag_utils.copy_graph", false]], "create_app() (in module graphscope.framework.dag_utils)": [[386, "graphscope.framework.dag_utils.create_app", false]], "create_edge_type() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.create_edge_type", false]], "create_empty_copy() (in module graphscope.nx.classes.function)": [[449, "graphscope.nx.classes.function.create_empty_copy", false]], "create_graph() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.create_graph", false]], "create_graph() (in module graphscope.framework.dag_utils)": [[387, "graphscope.framework.dag_utils.create_graph", false]], "create_graph_view() (in module graphscope.framework.dag_utils)": [[388, "graphscope.framework.dag_utils.create_graph_view", false]], "create_loader() (in module graphscope.framework.dag_utils)": [[389, "graphscope.framework.dag_utils.create_loader", false]], "create_procedure() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.create_procedure", false]], "create_subgraph() (in module graphscope.framework.dag_utils)": [[390, "graphscope.framework.dag_utils.create_subgraph", false]], "create_unload_op() (in module graphscope.framework.dag_utils)": [[391, "graphscope.framework.dag_utils.create_unload_op", false]], "create_vertex_type() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.create_vertex_type", false]], "cubical_graph() (in module graphscope.nx.generators.small)": [[545, "graphscope.nx.generators.small.cubical_graph", false]], "cycle_graph() (in module graphscope.nx.generators.classic)": [[484, "graphscope.nx.generators.classic.cycle_graph", false]], "cypher_driver (graphscope.interactive.query.interactivequery property)": [[440, "graphscope.interactive.query.InteractiveQuery.cypher_driver", false]], "cypher_url (graphscope.interactive.query.interactivequery property)": [[440, "graphscope.interactive.query.InteractiveQuery.cypher_url", false]], "davis_southern_women_graph() (in module graphscope.nx.generators.social)": [[565, "graphscope.nx.generators.social.davis_southern_women_graph", false]], "declare() (in module graphscope)": [[375, "graphscope.declare", false]], "decoder (class in gs_interactive.client.utils)": [[307, "gs_interactive.client.utils.Decoder", false]], "defaultsession (class in gs_interactive.client.session)": [[311, "gs_interactive.client.session.DefaultSession", false]], "degree (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.degree", false]], "degree (graphscope.nx.graph property)": [[577, "graphscope.nx.Graph.degree", false]], "degree() (in module graphscope.nx.classes.function)": [[450, "graphscope.nx.classes.function.degree", false]], "degree_assortativity_coefficient()": [[0, "degree_assortativity_coefficient", false]], "degree_assortativity_coefficient() (in module graphscope)": [[368, "graphscope.degree_assortativity_coefficient", false]], "degree_centrality()": [[0, "degree_centrality", false]], "degree_centrality() (in module graphscope)": [[368, "graphscope.degree_centrality", false]], "degree_centrality() (in module graphscope.nx.builtin)": [[442, "graphscope.nx.builtin.degree_centrality", false]], "degree_histogram() (in module graphscope.nx.classes.function)": [[451, "graphscope.nx.classes.function.degree_histogram", false]], "degree_sequence_tree() (in module graphscope.nx.generators.degree_seq)": [[507, "graphscope.nx.generators.degree_seq.degree_sequence_tree", false]], "delete_edge() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.delete_edge", false]], "delete_edge_type() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.delete_edge_type", false]], "delete_graph() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.delete_graph", false]], "delete_procedure() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.delete_procedure", false]], "delete_vertex() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.delete_vertex", false]], "delete_vertex_type() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.delete_vertex_type", false]], "density() (in module graphscope.nx.classes.function)": [[452, "graphscope.nx.classes.function.density", false]], "desargues_graph() (in module graphscope.nx.generators.small)": [[546, "graphscope.nx.generators.small.desargues_graph", false]], "detach() (graphscope.framework.graph.graph method)": [[439, "graphscope.framework.graph.Graph.detach", false]], "dfs()": [[0, "dfs", false]], "diamond_graph() (in module graphscope.nx.generators.small)": [[547, "graphscope.nx.generators.small.diamond_graph", false]], "digraph (class in graphscope.nx)": [[577, "graphscope.nx.DiGraph", false]], "directed_configuration_model() (in module graphscope.nx.generators.degree_seq)": [[508, "graphscope.nx.generators.degree_seq.directed_configuration_model", false]], "directed_havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[509, "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", false]], "directed_joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[534, "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", false]], "dodecahedral_graph() (in module graphscope.nx.generators.small)": [[548, "graphscope.nx.generators.small.dodecahedral_graph", false]], "dorogovtsev_goltsev_mendes_graph() (in module graphscope.nx.generators.classic)": [[485, "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", false]], "driver (class in gs_interactive.client.driver)": [[306, "gs_interactive.client.driver.Driver", false]], "duplication_divergence_graph() (in module graphscope.nx.generators.duplication)": [[518, "graphscope.nx.generators.duplication.duplication_divergence_graph", false]], "dynamic_to_arrow() (in module graphscope.framework.dag_utils)": [[392, "graphscope.framework.dag_utils.dynamic_to_arrow", false]], "dynamicvertexdatacontext (class in graphscope.framework.context)": [[369, "graphscope.framework.context.DynamicVertexDataContext", false]], "e() (graphscope.learning.graph.graph method)": [[441, "graphscope.learning.graph.Graph.E", false]], "edge_attr_dict_factory (graphscope.nx.digraph attribute)": [[577, "graphscope.nx.DiGraph.edge_attr_dict_factory", false]], "edge_attr_dict_factory (graphscope.nx.graph attribute)": [[577, "graphscope.nx.Graph.edge_attr_dict_factory", false]], "edge_subgraph() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.edge_subgraph", false]], "edge_subgraph() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.edge_subgraph", false]], "edge_subgraph() (in module graphscope.nx.classes.function)": [[453, "graphscope.nx.classes.function.edge_subgraph", false]], "edges (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.edges", false]], "edges (graphscope.nx.graph property)": [[577, "graphscope.nx.Graph.edges", false]], "edges() (in module graphscope.nx.classes.function)": [[454, "graphscope.nx.classes.function.edges", false]], "ego_graph() (in module graphscope.nx.generators.ego)": [[520, "graphscope.nx.generators.ego.ego_graph", false]], "eigenvector_centrality()": [[0, "eigenvector_centrality", false]], "eigenvector_centrality() (in module graphscope)": [[368, "graphscope.eigenvector_centrality", false]], "eigenvector_centrality() (in module graphscope.nx.builtin)": [[442, "graphscope.nx.builtin.eigenvector_centrality", false]], "empty_graph() (in module graphscope.nx.generators.classic)": [[486, "graphscope.nx.generators.classic.empty_graph", false]], "encoder (class in gs_interactive.client.utils)": [[307, "gs_interactive.client.utils.Encoder", false]], "engine_config (graphscope.session property)": [[584, "graphscope.Session.engine_config", false]], "ensure_param_str() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.ensure_param_str", false]], "error() (gs_interactive.client.result.result static method)": [[310, "gs_interactive.client.result.Result.error", false]], "eval() (graphscope.framework.operation.operation method)": [[414, "graphscope.framework.operation.Operation.eval", false]], "evaluated (graphscope.framework.operation.operation property)": [[415, "graphscope.framework.operation.Operation.evaluated", false]], "execute() (graphscope.interactive.query.interactivequery method)": [[440, "graphscope.interactive.query.InteractiveQuery.execute", false]], "expected_degree_graph() (in module graphscope.nx.generators.degree_seq)": [[510, "graphscope.nx.generators.degree_seq.expected_degree_graph", false]], "florentine_families_graph() (in module graphscope.nx.generators.social)": [[566, "graphscope.nx.generators.social.florentine_families_graph", false]], "freeze() (in module graphscope.nx.classes.function)": [[455, "graphscope.nx.classes.function.freeze", false]], "from_exception() (gs_interactive.client.result.result static method)": [[310, "gs_interactive.client.result.Result.from_exception", false]], "from_exception() (gs_interactive.client.status.status static method)": [[312, "gs_interactive.client.status.Status.from_exception", false]], "from_response() (gs_interactive.client.result.result static method)": [[310, "gs_interactive.client.result.Result.from_response", false]], "from_response() (gs_interactive.client.status.status static method)": [[312, "gs_interactive.client.status.Status.from_response", false]], "frucht_graph() (in module graphscope.nx.generators.small)": [[549, "graphscope.nx.generators.small.frucht_graph", false]], "full_rary_tree() (in module graphscope.nx.generators.classic)": [[487, "graphscope.nx.generators.classic.full_rary_tree", false]], "g() (graphscope.session method)": [[584, "graphscope.Session.g", false]], "g() (in module graphscope)": [[418, "graphscope.g", false]], "gar (graphscope.framework.app.appassets property)": [[368, "graphscope.framework.app.AppAssets.gar", false]], "gaussian_random_partition_graph() (in module graphscope.nx.generators.community)": [[499, "graphscope.nx.generators.community.gaussian_random_partition_graph", false]], "general_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[531, "graphscope.nx.generators.intersection.general_random_intersection_graph", false]], "geographical_threshold_graph() (in module graphscope.nx.generators.geometric)": [[524, "graphscope.nx.generators.geometric.geographical_threshold_graph", false]], "get_byte() (gs_interactive.client.utils.decoder method)": [[307, "gs_interactive.client.utils.Decoder.get_byte", false]], "get_bytes() (gs_interactive.client.utils.decoder method)": [[307, "gs_interactive.client.utils.Decoder.get_bytes", false]], "get_bytes() (gs_interactive.client.utils.encoder method)": [[307, "gs_interactive.client.utils.Encoder.get_bytes", false]], "get_code() (gs_interactive.client.status.status method)": [[312, "gs_interactive.client.status.Status.get_code", false]], "get_config() (graphscope.session method)": [[584, "graphscope.Session.get_config", false]], "get_context_data() (in module graphscope.framework.dag_utils)": [[393, "graphscope.framework.dag_utils.get_context_data", false]], "get_default_session() (in module graphscope)": [[419, "graphscope.get_default_session", false]], "get_double() (gs_interactive.client.utils.decoder method)": [[307, "gs_interactive.client.utils.Decoder.get_double", false]], "get_edge() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.get_edge", false]], "get_edge_data() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.get_edge_data", false]], "get_edge_data() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.get_edge_data", false]], "get_graph_meta() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.get_graph_meta", false]], "get_graph_schema() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.get_graph_schema", false]], "get_graph_statistics() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.get_graph_statistics", false]], "get_handle() (graphscope.learning.graph.graph method)": [[441, "graphscope.learning.graph.Graph.get_handle", false]], "get_int() (gs_interactive.client.utils.decoder method)": [[307, "gs_interactive.client.utils.Decoder.get_int", false]], "get_job() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.get_job", false]], "get_long() (gs_interactive.client.utils.decoder method)": [[307, "gs_interactive.client.utils.Decoder.get_long", false]], "get_message (gs_interactive.client.status.status property)": [[312, "gs_interactive.client.status.Status.get_message", false]], "get_procedure() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.get_procedure", false]], "get_service_status() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.get_service_status", false]], "get_snapshot_status() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.get_snapshot_status", false]], "get_status() (gs_interactive.client.result.result method)": [[310, "gs_interactive.client.result.Result.get_status", false]], "get_status_message() (gs_interactive.client.result.result method)": [[310, "gs_interactive.client.result.Result.get_status_message", false]], "get_string() (gs_interactive.client.utils.decoder method)": [[307, "gs_interactive.client.utils.Decoder.get_string", false]], "get_value() (gs_interactive.client.result.result method)": [[310, "gs_interactive.client.result.Result.get_value", false]], "get_vertex() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.get_vertex", false]], "get_vineyard_object_mapping_table() (graphscope.session method)": [[584, "graphscope.Session.get_vineyard_object_mapping_table", false]], "getdefaultsession() (gs_interactive.client.driver.driver method)": [[306, "gs_interactive.client.driver.Driver.getDefaultSession", false]], "getneo4jendpoint() (gs_interactive.client.driver.driver method)": [[306, "gs_interactive.client.driver.Driver.getNeo4jEndpoint", false]], "getneo4jsession() (gs_interactive.client.driver.driver method)": [[306, "gs_interactive.client.driver.Driver.getNeo4jSession", false]], "gn_graph() (in module graphscope.nx.generators.directed)": [[513, "graphscope.nx.generators.directed.gn_graph", false]], "gnc_graph() (in module graphscope.nx.generators.directed)": [[514, "graphscope.nx.generators.directed.gnc_graph", false]], "gnr_graph() (in module graphscope.nx.generators.directed)": [[515, "graphscope.nx.generators.directed.gnr_graph", false]], "graph (class in graphscope.framework.graph)": [[439, "graphscope.framework.graph.Graph", false]], "graph (class in graphscope.learning.graph)": [[441, "graphscope.learning.graph.Graph", false]], "graph (class in graphscope.nx)": [[577, "graphscope.nx.Graph", false]], "graph_atlas() (in module graphscope.nx.generators.atlas)": [[475, "graphscope.nx.generators.atlas.graph_atlas", false]], "graph_atlas_g() (in module graphscope.nx.generators.atlas)": [[476, "graphscope.nx.generators.atlas.graph_atlas_g", false]], "graph_attr_dict_factory (graphscope.nx.digraph attribute)": [[577, "graphscope.nx.DiGraph.graph_attr_dict_factory", false]], "graph_attr_dict_factory (graphscope.nx.graph attribute)": [[577, "graphscope.nx.Graph.graph_attr_dict_factory", false]], "graph_cache_factory (graphscope.nx.digraph attribute)": [[577, "graphscope.nx.DiGraph.graph_cache_factory", false]], "graph_cache_factory (graphscope.nx.graph attribute)": [[577, "graphscope.nx.Graph.graph_cache_factory", false]], "graph_to_dataframe() (in module graphscope.framework.dag_utils)": [[394, "graphscope.framework.dag_utils.graph_to_dataframe", false]], "graph_to_numpy() (in module graphscope.framework.dag_utils)": [[395, "graphscope.framework.dag_utils.graph_to_numpy", false]], "graph_type (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.graph_type", false]], "graph_type (graphscope.nx.graph property)": [[577, "graphscope.nx.Graph.graph_type", false]], "graph_url (graphscope.interactive.query.interactivequery property)": [[440, "graphscope.interactive.query.InteractiveQuery.graph_url", false]], "graphdagnode (class in graphscope.framework.graph)": [[439, "graphscope.framework.graph.GraphDAGNode", false]], "graphlearn() (graphscope.session method)": [[584, "graphscope.Session.graphlearn", false]], "graphlearn() (in module graphscope)": [[420, "graphscope.graphlearn", false]], "graphscope.framework.dag_utils": [[581, "module-graphscope.framework.dag_utils", false]], "graphscope.nx.classes.function": [[443, "module-graphscope.nx.classes.function", false]], "graphscope.nx.generators.atlas": [[576, "module-graphscope.nx.generators.atlas", false]], "graphscope.nx.generators.classic": [[576, "module-graphscope.nx.generators.classic", false]], "graphscope.nx.generators.community": [[576, "module-graphscope.nx.generators.community", false]], "graphscope.nx.generators.degree_seq": [[576, "module-graphscope.nx.generators.degree_seq", false]], "graphscope.nx.generators.directed": [[576, "module-graphscope.nx.generators.directed", false]], "graphscope.nx.generators.duplication": [[576, "module-graphscope.nx.generators.duplication", false]], "graphscope.nx.generators.ego": [[576, "module-graphscope.nx.generators.ego", false]], "graphscope.nx.generators.expanders": [[576, "module-graphscope.nx.generators.expanders", false]], "graphscope.nx.generators.geometric": [[576, "module-graphscope.nx.generators.geometric", false]], "graphscope.nx.generators.harary_graph": [[576, "module-graphscope.nx.generators.harary_graph", false]], "graphscope.nx.generators.intersection": [[576, "module-graphscope.nx.generators.intersection", false]], "graphscope.nx.generators.joint_degree_seq": [[576, "module-graphscope.nx.generators.joint_degree_seq", false]], "graphscope.nx.generators.mycielski": [[576, "module-graphscope.nx.generators.mycielski", false]], "graphscope.nx.generators.nonisomorphic_trees": [[576, "module-graphscope.nx.generators.nonisomorphic_trees", false]], "graphscope.nx.generators.small": [[576, "module-graphscope.nx.generators.small", false]], "graphscope.nx.generators.social": [[576, "module-graphscope.nx.generators.social", false]], "graphscope.nx.generators.spectral_graph_forge": [[576, "module-graphscope.nx.generators.spectral_graph_forge", false]], "graphscope.nx.generators.sudoku": [[576, "module-graphscope.nx.generators.sudoku", false]], "graphscope.nx.generators.trees": [[576, "module-graphscope.nx.generators.trees", false]], "graphscope.nx.generators.triads": [[576, "module-graphscope.nx.generators.triads", false]], "gremlin() (in module graphscope)": [[421, "graphscope.gremlin", false]], "gremlin_client (graphscope.interactive.query.interactivequery property)": [[440, "graphscope.interactive.query.InteractiveQuery.gremlin_client", false]], "gremlin_to_subgraph() (in module graphscope.framework.dag_utils)": [[396, "graphscope.framework.dag_utils.gremlin_to_subgraph", false]], "gremlin_url (graphscope.interactive.query.interactivequery property)": [[440, "graphscope.interactive.query.InteractiveQuery.gremlin_url", false]], "gs::appbase (c++ class)": [[367, "_CPPv4I00EN2gs7AppBaseE", false]], "gs::appbase::appbase (c++ function)": [[367, "_CPPv4N2gs7AppBase7AppBaseEv", false]], "gs::appbase::inceval (c++ function)": [[367, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", false]], "gs::appbase::load_strategy (c++ member)": [[367, "_CPPv4N2gs7AppBase13load_strategyE", false]], "gs::appbase::message_manager_t (c++ type)": [[367, "_CPPv4N2gs7AppBase17message_manager_tE", false]], "gs::appbase::message_strategy (c++ member)": [[367, "_CPPv4N2gs7AppBase16message_strategyE", false]], "gs::appbase::need_split_edges (c++ member)": [[367, "_CPPv4N2gs7AppBase16need_split_edgesE", false]], "gs::appbase::peval (c++ function)": [[367, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", false]], "gs::appbase::~appbase (c++ function)": [[367, "_CPPv4N2gs7AppBaseD0Ev", false]], "gs::appentry (c++ class)": [[367, "_CPPv4N2gs8AppEntryE", false]], "gs::appentry::appentry (c++ function)": [[367, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", false]], "gs::appentry::createworker (c++ function)": [[367, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", false]], "gs::appentry::init (c++ function)": [[367, "_CPPv4N2gs8AppEntry4InitEv", false]], "gs::appentry::query (c++ function)": [[367, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", false]], "gs::argsnum (c++ struct)": [[367, "_CPPv4I0EN2gs7ArgsNumE", false]], "gs::argsunpacker (c++ struct)": [[367, "_CPPv4I0EN2gs12ArgsUnpackerE", false]], "gs::argtypeat (c++ struct)": [[367, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", false]], "gs::arrowfragmentloader (c++ class)": [[367, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", false]], "gs::arrowfragmentloader::adddatatoexistedelabel (c++ function)": [[367, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", false]], "gs::arrowfragmentloader::adddatatoexistedvlabel (c++ function)": [[367, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", false]], "gs::arrowfragmentloader::addlabelstofragment (c++ function)": [[367, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", false]], "gs::arrowfragmentloader::addlabelstofragmentasfragmentgroup (c++ function)": [[367, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", false]], "gs::arrowfragmentloader::arrowfragmentloader (c++ function)": [[367, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", false], [367, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", false]], "gs::arrowfragmentloader::extendlabeldata (c++ function)": [[367, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", false]], "gs::arrowfragmentloader::initpartitioner (c++ function)": [[367, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv", false]], "gs::arrowfragmentloader::loadedgetables (c++ function)": [[367, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv", false]], "gs::arrowfragmentloader::loadfragment (c++ function)": [[367, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv", false]], "gs::arrowfragmentloader::loadfragmentasfragmentgroup (c++ function)": [[367, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv", false]], "gs::arrowfragmentloader::loadvertexedgetables (c++ function)": [[367, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv", false]], "gs::arrowfragmentloader::loadvertextables (c++ function)": [[367, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv", false]], "gs::arrowfragmentloader::~arrowfragmentloader (c++ function)": [[367, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev", false]], "gs::arrowprojectedfragment (c++ class)": [[367, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", false]], "gs::arrowprojectedfragment::adj_list_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE", false]], "gs::arrowprojectedfragment::compact_adj_list_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE", false]], "gs::arrowprojectedfragment::compact_edges (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv", false]], "gs::arrowprojectedfragment::compact_nbr_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE", false]], "gs::arrowprojectedfragment::const_adj_list_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE", false]], "gs::arrowprojectedfragment::const_compact_adj_list_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE", false]], "gs::arrowprojectedfragment::construct (c++ function)": [[367, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", false]], "gs::arrowprojectedfragment::create (c++ function)": [[367, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv", false]], "gs::arrowprojectedfragment::directed (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv", false]], "gs::arrowprojectedfragment::edata_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE", false]], "gs::arrowprojectedfragment::edge_label (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv", false]], "gs::arrowprojectedfragment::edge_prop_id (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv", false]], "gs::arrowprojectedfragment::eid_array_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE", false]], "gs::arrowprojectedfragment::eid_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE", false]], "gs::arrowprojectedfragment::fid (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv", false]], "gs::arrowprojectedfragment::fnum (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv", false]], "gs::arrowprojectedfragment::get_arrow_fragment (c++ function)": [[367, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv", false]], "gs::arrowprojectedfragment::get_edata_array_accessor (c++ function)": [[367, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv", false]], "gs::arrowprojectedfragment::get_ie_offsets_begin_ptr (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv", false]], "gs::arrowprojectedfragment::get_ie_offsets_end_ptr (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv", false]], "gs::arrowprojectedfragment::get_in_edges_ptr (c++ function)": [[367, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", false]], "gs::arrowprojectedfragment::get_oe_offsets_begin_ptr (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv", false]], "gs::arrowprojectedfragment::get_oe_offsets_end_ptr (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv", false]], "gs::arrowprojectedfragment::get_out_edges_ptr (c++ function)": [[367, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", false]], "gs::arrowprojectedfragment::get_vdata_array_accessor (c++ function)": [[367, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv", false]], "gs::arrowprojectedfragment::getdata (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", false]], "gs::arrowprojectedfragment::getedgenum (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv", false]], "gs::arrowprojectedfragment::getfragid (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", false]], "gs::arrowprojectedfragment::getid (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", false]], "gs::arrowprojectedfragment::getincomingadjlist (c++ function)": [[367, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", false], [367, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", false], [367, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", false]], "gs::arrowprojectedfragment::getincomingedgenum (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv", false]], "gs::arrowprojectedfragment::getincominginnervertexadjlist (c++ function)": [[367, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", false]], "gs::arrowprojectedfragment::getincomingoutervertexadjlist (c++ function)": [[367, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", false]], "gs::arrowprojectedfragment::getinedgenum (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv", false]], "gs::arrowprojectedfragment::getinnervertex (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", false]], "gs::arrowprojectedfragment::getinnervertexgid (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", false]], "gs::arrowprojectedfragment::getinnervertexid (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", false]], "gs::arrowprojectedfragment::getinnervertexinternalid (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", false]], "gs::arrowprojectedfragment::getinnerverticesnum (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv", false]], "gs::arrowprojectedfragment::getinternalid (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", false]], "gs::arrowprojectedfragment::getlocalindegree (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", false]], "gs::arrowprojectedfragment::getlocaloutdegree (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", false]], "gs::arrowprojectedfragment::getoutedgenum (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv", false]], "gs::arrowprojectedfragment::getoutervertex (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", false]], "gs::arrowprojectedfragment::getoutervertexgid (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", false]], "gs::arrowprojectedfragment::getoutervertexid (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", false]], "gs::arrowprojectedfragment::getoutervertexinternalid (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", false]], "gs::arrowprojectedfragment::getouterverticesnum (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv", false]], "gs::arrowprojectedfragment::getoutgoingadjlist (c++ function)": [[367, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", false], [367, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", false], [367, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", false]], "gs::arrowprojectedfragment::getoutgoingedgenum (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv", false]], "gs::arrowprojectedfragment::getoutgoinginnervertexadjlist (c++ function)": [[367, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", false]], "gs::arrowprojectedfragment::getoutgoingoutervertexadjlist (c++ function)": [[367, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", false]], "gs::arrowprojectedfragment::gettotalverticesnum (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv", false]], "gs::arrowprojectedfragment::getvertex (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", false]], "gs::arrowprojectedfragment::getvertexmap (c++ function)": [[367, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv", false], [367, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv", false]], "gs::arrowprojectedfragment::getverticesnum (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv", false]], "gs::arrowprojectedfragment::gid2oid (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", false]], "gs::arrowprojectedfragment::gid2vertex (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", false]], "gs::arrowprojectedfragment::iedests (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", false]], "gs::arrowprojectedfragment::iedestssize (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment11IEDestsSizeEv", false]], "gs::arrowprojectedfragment::inner_vertex_array_t (c++ type)": [[367, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", false]], "gs::arrowprojectedfragment::inner_vertices_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE", false]], "gs::arrowprojectedfragment::innervertexgid2vertex (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", false]], "gs::arrowprojectedfragment::innervertices (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv", false]], "gs::arrowprojectedfragment::internal_oid_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE", false]], "gs::arrowprojectedfragment::ioedests (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", false]], "gs::arrowprojectedfragment::ioedestssize (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment12IOEDestsSizeEv", false]], "gs::arrowprojectedfragment::isinnervertex (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", false]], "gs::arrowprojectedfragment::isoutervertex (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", false]], "gs::arrowprojectedfragment::label_id_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE", false]], "gs::arrowprojectedfragment::load_strategy (c++ member)": [[367, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE", false]], "gs::arrowprojectedfragment::local_vertex_map (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv", false]], "gs::arrowprojectedfragment::mirrorvertices (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", false]], "gs::arrowprojectedfragment::nbr_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE", false]], "gs::arrowprojectedfragment::nbr_unit_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE", false]], "gs::arrowprojectedfragment::oedests (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", false]], "gs::arrowprojectedfragment::oedestssize (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment11OEDestsSizeEv", false]], "gs::arrowprojectedfragment::oid2gid (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", false], [367, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", false]], "gs::arrowprojectedfragment::oid_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE", false]], "gs::arrowprojectedfragment::outer_vertex_array_t (c++ type)": [[367, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", false]], "gs::arrowprojectedfragment::outer_vertices_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE", false]], "gs::arrowprojectedfragment::outervertexgid2vertex (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", false]], "gs::arrowprojectedfragment::outervertices (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", false], [367, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv", false]], "gs::arrowprojectedfragment::preparetorunapp (c++ function)": [[367, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", false]], "gs::arrowprojectedfragment::project (c++ function)": [[367, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", false]], "gs::arrowprojectedfragment::prop_id_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE", false]], "gs::arrowprojectedfragment::property_graph_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE", false]], "gs::arrowprojectedfragment::property_vertex_map_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE", false]], "gs::arrowprojectedfragment::sub_vertices_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE", false]], "gs::arrowprojectedfragment::use_perfect_hash (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv", false]], "gs::arrowprojectedfragment::vdata_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE", false]], "gs::arrowprojectedfragment::vertex2gid (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", false]], "gs::arrowprojectedfragment::vertex_array_t (c++ type)": [[367, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", false]], "gs::arrowprojectedfragment::vertex_label (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv", false]], "gs::arrowprojectedfragment::vertex_map_id (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv", false]], "gs::arrowprojectedfragment::vertex_map_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE", false]], "gs::arrowprojectedfragment::vertex_prop_id (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv", false]], "gs::arrowprojectedfragment::vertex_range_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE", false]], "gs::arrowprojectedfragment::vertex_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE", false]], "gs::arrowprojectedfragment::vertices (c++ function)": [[367, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv", false]], "gs::arrowprojectedfragment::vertices_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE", false]], "gs::arrowprojectedfragment::vid_array_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE", false]], "gs::arrowprojectedfragment::vid_t (c++ type)": [[367, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE", false]], "gs::arrowprojectedfragment::~arrowprojectedfragment (c++ function)": [[367, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev", false]], "gs::arrowprojectedvertexmap (c++ class)": [[367, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", false]], "gs::arrowprojectedvertexmap::construct (c++ function)": [[367, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", false]], "gs::arrowprojectedvertexmap::create (c++ function)": [[367, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv", false]], "gs::arrowprojectedvertexmap::getfidfromgid (c++ function)": [[367, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", false]], "gs::arrowprojectedvertexmap::getgid (c++ function)": [[367, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", false], [367, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", false]], "gs::arrowprojectedvertexmap::getinnervertexsize (c++ function)": [[367, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", false]], "gs::arrowprojectedvertexmap::getlidfromgid (c++ function)": [[367, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", false]], "gs::arrowprojectedvertexmap::getoffsetfromlid (c++ function)": [[367, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", false]], "gs::arrowprojectedvertexmap::getoid (c++ function)": [[367, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", false]], "gs::arrowprojectedvertexmap::gettotalverticesnum (c++ function)": [[367, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv", false]], "gs::arrowprojectedvertexmap::offset2lid (c++ function)": [[367, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", false]], "gs::arrowprojectedvertexmap::project (c++ function)": [[367, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", false]], "gs::arrowprojectedvertexmap::use_perfect_hash (c++ function)": [[367, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv", false]], "gs::ctxwrapperbuilder (c++ struct)": [[367, "_CPPv4I00EN2gs17CtxWrapperBuilderE", false]], "gs::defaultpropertyworker (c++ class)": [[367, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", false]], "gs::defaultpropertyworker::context_t (c++ type)": [[367, "_CPPv4N2gs21DefaultPropertyWorker9context_tE", false]], "gs::defaultpropertyworker::defaultpropertyworker (c++ function)": [[367, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", false]], "gs::defaultpropertyworker::finalize (c++ function)": [[367, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv", false]], "gs::defaultpropertyworker::fragment_t (c++ type)": [[367, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE", false]], "gs::defaultpropertyworker::getcontext (c++ function)": [[367, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv", false]], "gs::defaultpropertyworker::init (c++ function)": [[367, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", false]], "gs::defaultpropertyworker::message_manager_t (c++ type)": [[367, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE", false]], "gs::defaultpropertyworker::output (c++ function)": [[367, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", false]], "gs::defaultpropertyworker::query (c++ function)": [[367, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", false]], "gs::defaultpropertyworker::~defaultpropertyworker (c++ function)": [[367, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev", false]], "gs::defaultworker (c++ class)": [[367, "_CPPv4I0EN2gs13DefaultWorkerE", false]], "gs::defaultworker::context_t (c++ type)": [[367, "_CPPv4N2gs13DefaultWorker9context_tE", false]], "gs::defaultworker::defaultworker (c++ function)": [[367, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", false]], "gs::defaultworker::finalize (c++ function)": [[367, "_CPPv4N2gs13DefaultWorker8FinalizeEv", false]], "gs::defaultworker::fragment_t (c++ type)": [[367, "_CPPv4N2gs13DefaultWorker10fragment_tE", false]], "gs::defaultworker::getcontext (c++ function)": [[367, "_CPPv4N2gs13DefaultWorker10GetContextEv", false]], "gs::defaultworker::init (c++ function)": [[367, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", false]], "gs::defaultworker::message_manager_t (c++ type)": [[367, "_CPPv4N2gs13DefaultWorker17message_manager_tE", false]], "gs::defaultworker::output (c++ function)": [[367, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", false]], "gs::defaultworker::query (c++ function)": [[367, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", false]], "gs::defaultworker::~defaultworker (c++ function)": [[367, "_CPPv4N2gs13DefaultWorkerD0Ev", false]], "gs::dispatcher (c++ class)": [[367, "_CPPv4N2gs10DispatcherE", false]], "gs::dispatcher::dispatch (c++ function)": [[367, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", false]], "gs::dispatcher::dispatcher (c++ function)": [[367, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", false]], "gs::dispatcher::setcommand (c++ function)": [[367, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", false]], "gs::dispatcher::start (c++ function)": [[367, "_CPPv4N2gs10Dispatcher5StartEv", false]], "gs::dispatcher::stop (c++ function)": [[367, "_CPPv4N2gs10Dispatcher4StopEv", false]], "gs::dispatcher::subscribe (c++ function)": [[367, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", false]], "gs::dispatchresult (c++ class)": [[367, "_CPPv4N2gs14DispatchResultE", false]], "gs::dispatchresult::aggregate_policy (c++ function)": [[367, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv", false]], "gs::dispatchresult::aggregatepolicy (c++ enum)": [[367, "_CPPv4N2gs14DispatchResult15AggregatePolicyE", false]], "gs::dispatchresult::aggregatepolicy::kconcat (c++ enumerator)": [[367, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", false]], "gs::dispatchresult::aggregatepolicy::kmergegraphdef (c++ enumerator)": [[367, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", false]], "gs::dispatchresult::aggregatepolicy::kpickfirst (c++ enumerator)": [[367, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", false]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonempty (c++ enumerator)": [[367, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", false]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonemptygraphdef (c++ enumerator)": [[367, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", false]], "gs::dispatchresult::aggregatepolicy::krequireconsistent (c++ enumerator)": [[367, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", false]], "gs::dispatchresult::data (c++ function)": [[367, "_CPPv4NK2gs14DispatchResult4dataEv", false]], "gs::dispatchresult::dispatchresult (c++ function)": [[367, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", false], [367, "_CPPv4N2gs14DispatchResult14DispatchResultEv", false]], "gs::dispatchresult::error_code (c++ function)": [[367, "_CPPv4NK2gs14DispatchResult10error_codeEv", false]], "gs::dispatchresult::graph_def (c++ function)": [[367, "_CPPv4N2gs14DispatchResult9graph_defEv", false], [367, "_CPPv4NK2gs14DispatchResult9graph_defEv", false]], "gs::dispatchresult::has_large_data (c++ function)": [[367, "_CPPv4NK2gs14DispatchResult14has_large_dataEv", false]], "gs::dispatchresult::message (c++ function)": [[367, "_CPPv4N2gs14DispatchResult7messageEv", false]], "gs::dispatchresult::set_data (c++ function)": [[367, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", false], [367, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", false]], "gs::dispatchresult::set_error (c++ function)": [[367, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", false]], "gs::dispatchresult::set_graph_def (c++ function)": [[367, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", false]], "gs::dispatchresult::worker_id (c++ function)": [[367, "_CPPv4NK2gs14DispatchResult9worker_idEv", false]], "gs::engineconfig (c++ struct)": [[367, "_CPPv4N2gs12EngineConfigE", false]], "gs::engineconfig::enable_java_sdk (c++ member)": [[367, "_CPPv4N2gs12EngineConfig15enable_java_sdkE", false]], "gs::engineconfig::networkx (c++ member)": [[367, "_CPPv4N2gs12EngineConfig8networkxE", false]], "gs::engineconfig::tojsonstring (c++ function)": [[367, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv", false]], "gs::engineconfig::vineyard_rpc_endpoint (c++ member)": [[367, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE", false]], "gs::engineconfig::vineyard_socket (c++ member)": [[367, "_CPPv4N2gs12EngineConfig15vineyard_socketE", false]], "gs::fragmentwrapper (c++ class)": [[367, "_CPPv4I0EN2gs15FragmentWrapperE", false]], "gs::grapeengine (c++ class)": [[367, "_CPPv4N2gs11GrapeEngineE", false]], "gs::grapeengine::grapeengine (c++ function)": [[367, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", false], [367, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", false]], "gs::grapeengine::rundagfile (c++ function)": [[367, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv", false]], "gs::grapeengine::start (c++ function)": [[367, "_CPPv4N2gs11GrapeEngine5StartEv", false]], "gs::grapeengine::stop (c++ function)": [[367, "_CPPv4N2gs11GrapeEngine4StopEv", false]], "gs::grapeinstance (c++ class)": [[367, "_CPPv4N2gs13GrapeInstanceE", false]], "gs::grapeinstance::grapeinstance (c++ function)": [[367, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", false]], "gs::grapeinstance::init (c++ function)": [[367, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", false]], "gs::grapeinstance::onreceive (c++ function)": [[367, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", false]], "gs::gsobject (c++ class)": [[367, "_CPPv4N2gs8GSObjectE", false]], "gs::gsobject::gsobject (c++ function)": [[367, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", false]], "gs::gsobject::id (c++ function)": [[367, "_CPPv4NK2gs8GSObject2idEv", false]], "gs::gsobject::tostring (c++ function)": [[367, "_CPPv4NK2gs8GSObject8ToStringEv", false]], "gs::gsobject::type (c++ function)": [[367, "_CPPv4NK2gs8GSObject4typeEv", false]], "gs::gsobject::~gsobject (c++ function)": [[367, "_CPPv4N2gs8GSObjectD0Ev", false]], "gs::objectmanager (c++ class)": [[367, "_CPPv4N2gs13ObjectManagerE", false]], "gs::objectmanager::getobject (c++ function)": [[367, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", false], [367, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", false]], "gs::objectmanager::hasobject (c++ function)": [[367, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", false]], "gs::objectmanager::putobject (c++ function)": [[367, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", false]], "gs::objectmanager::removeobject (c++ function)": [[367, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", false]], "gs::parallelpropertyworker (c++ class)": [[367, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", false]], "gs::parallelpropertyworker::context_t (c++ type)": [[367, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", false]], "gs::parallelpropertyworker::finalize (c++ function)": [[367, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", false]], "gs::parallelpropertyworker::fragment_t (c++ type)": [[367, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", false]], "gs::parallelpropertyworker::getcontext (c++ function)": [[367, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", false]], "gs::parallelpropertyworker::init (c++ function)": [[367, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", false]], "gs::parallelpropertyworker::message_manager_t (c++ type)": [[367, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", false]], "gs::parallelpropertyworker::output (c++ function)": [[367, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", false]], "gs::parallelpropertyworker::parallelpropertyworker (c++ function)": [[367, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", false]], "gs::parallelpropertyworker::query (c++ function)": [[367, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", false]], "gs::parallelpropertyworker::~parallelpropertyworker (c++ function)": [[367, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", false]], "gs::propertyappbase (c++ class)": [[367, "_CPPv4I00EN2gs15PropertyAppBaseE", false]], "gs::propertyappbase::inceval (c++ function)": [[367, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", false]], "gs::propertyappbase::load_strategy (c++ member)": [[367, "_CPPv4N2gs15PropertyAppBase13load_strategyE", false]], "gs::propertyappbase::message_manager_t (c++ type)": [[367, "_CPPv4N2gs15PropertyAppBase17message_manager_tE", false]], "gs::propertyappbase::message_strategy (c++ member)": [[367, "_CPPv4N2gs15PropertyAppBase16message_strategyE", false]], "gs::propertyappbase::need_split_edges (c++ member)": [[367, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE", false]], "gs::propertyappbase::peval (c++ function)": [[367, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", false]], "gs::propertyappbase::propertyappbase (c++ function)": [[367, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv", false]], "gs::propertyappbase::~propertyappbase (c++ function)": [[367, "_CPPv4N2gs15PropertyAppBaseD0Ev", false]], "gs::propertyautoappbase (c++ class)": [[367, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", false]], "gs::propertyautoappbase::inceval (c++ function)": [[367, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", false]], "gs::propertyautoappbase::load_strategy (c++ member)": [[367, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE", false]], "gs::propertyautoappbase::message_strategy (c++ member)": [[367, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE", false]], "gs::propertyautoappbase::need_split_edges (c++ member)": [[367, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE", false]], "gs::propertyautoappbase::peval (c++ function)": [[367, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", false]], "gs::propertyautoappbase::propertyautoappbase (c++ function)": [[367, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv", false]], "gs::propertyautoappbase::~propertyautoappbase (c++ function)": [[367, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev", false]], "gs::propertyautoworker (c++ class)": [[367, "_CPPv4I0EN2gs18PropertyAutoWorkerE", false]], "gs::propertyautoworker::context_t (c++ type)": [[367, "_CPPv4N2gs18PropertyAutoWorker9context_tE", false]], "gs::propertyautoworker::finalize (c++ function)": [[367, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", false]], "gs::propertyautoworker::fragment_t (c++ type)": [[367, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", false]], "gs::propertyautoworker::getcontext (c++ function)": [[367, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", false]], "gs::propertyautoworker::init (c++ function)": [[367, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", false]], "gs::propertyautoworker::message_manager_t (c++ type)": [[367, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", false]], "gs::propertyautoworker::output (c++ function)": [[367, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", false]], "gs::propertyautoworker::propertyautoworker (c++ function)": [[367, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", false]], "gs::propertyautoworker::query (c++ function)": [[367, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", false]], "gs::propertyautoworker::~propertyautoworker (c++ function)": [[367, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", false]], "gs::rpc::analyticalserver (c++ class)": [[367, "_CPPv4N2gs3rpc16AnalyticalServerE", false]], "gs::rpc::analyticalserver::analyticalserver (c++ function)": [[367, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", false]], "gs::rpc::analyticalserver::startserver (c++ function)": [[367, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv", false]], "gs::rpc::analyticalserver::stopserver (c++ function)": [[367, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv", false]], "gs::tensorcontext (c++ class)": [[367, "_CPPv4I00EN2gs13TensorContextE", false]], "gs::tensorcontext::assign (c++ function)": [[367, "_CPPv4N2gs13TensorContext6assignERK6data_t", false], [367, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", false]], "gs::tensorcontext::data_t (c++ type)": [[367, "_CPPv4N2gs13TensorContext6data_tE", false]], "gs::tensorcontext::fragment (c++ function)": [[367, "_CPPv4N2gs13TensorContext8fragmentEv", false]], "gs::tensorcontext::set_shape (c++ function)": [[367, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", false]], "gs::tensorcontext::shape (c++ function)": [[367, "_CPPv4NK2gs13TensorContext5shapeEv", false]], "gs::tensorcontext::tensor (c++ function)": [[367, "_CPPv4N2gs13TensorContext6tensorEv", false]], "gs::tensorcontext::tensorcontext (c++ function)": [[367, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", false]], "gs::tensorcontextwrapper (c++ class)": [[367, "_CPPv4I000EN2gs20TensorContextWrapperE", false]], "gs::tensorcontextwrapper::context_type (c++ function)": [[367, "_CPPv4N2gs20TensorContextWrapper12context_typeEv", false]], "gs::tensorcontextwrapper::fragment_wrapper (c++ function)": [[367, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv", false]], "gs::tensorcontextwrapper::tensorcontextwrapper (c++ function)": [[367, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", false]], "gs::tensorcontextwrapper::toarrowarrays (c++ function)": [[367, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", false]], "gs::tensorcontextwrapper::todataframe (c++ function)": [[367, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", false]], "gs::tensorcontextwrapper::tondarray (c++ function)": [[367, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", false]], "gs::tensorcontextwrapper::tovineyarddataframe (c++ function)": [[367, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", false]], "gs::tensorcontextwrapper::tovineyardtensor (c++ function)": [[367, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", false]], "gs::vertexdatacontextwrapper (c++ class)": [[367, "_CPPv4I00EN2gs24VertexDataContextWrapperE", false]], "gs::vertexdatacontextwrapper::context_type (c++ function)": [[367, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv", false]], "gs::vertexdatacontextwrapper::fragment_wrapper (c++ function)": [[367, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv", false]], "gs::vertexdatacontextwrapper::toarrowarrays (c++ function)": [[367, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", false]], "gs::vertexdatacontextwrapper::todataframe (c++ function)": [[367, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", false]], "gs::vertexdatacontextwrapper::tondarray (c++ function)": [[367, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", false]], "gs::vertexdatacontextwrapper::tovineyarddataframe (c++ function)": [[367, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", false]], "gs::vertexdatacontextwrapper::tovineyardtensor (c++ function)": [[367, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", false]], "gs::vertexdatacontextwrapper::vertexdatacontextwrapper (c++ function)": [[367, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", false]], "gs::vertexpropertycontext (c++ class)": [[367, "_CPPv4I0EN2gs21VertexPropertyContextE", false]], "gs::vertexpropertycontext::add_column (c++ function)": [[367, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", false]], "gs::vertexpropertycontext::fragment (c++ function)": [[367, "_CPPv4N2gs21VertexPropertyContext8fragmentEv", false]], "gs::vertexpropertycontext::fragment_t (c++ type)": [[367, "_CPPv4N2gs21VertexPropertyContext10fragment_tE", false]], "gs::vertexpropertycontext::get_column (c++ function)": [[367, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", false], [367, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", false]], "gs::vertexpropertycontext::get_typed_column (c++ function)": [[367, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", false], [367, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", false]], "gs::vertexpropertycontext::oid_t (c++ type)": [[367, "_CPPv4N2gs21VertexPropertyContext5oid_tE", false]], "gs::vertexpropertycontext::prop_id_t (c++ type)": [[367, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE", false]], "gs::vertexpropertycontext::properties_map (c++ function)": [[367, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv", false]], "gs::vertexpropertycontext::vertex_properties (c++ function)": [[367, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv", false]], "gs::vertexpropertycontext::vertex_t (c++ type)": [[367, "_CPPv4N2gs21VertexPropertyContext8vertex_tE", false]], "gs::vertexpropertycontext::vertexpropertycontext (c++ function)": [[367, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", false]], "gs_interactive.client.driver": [[306, "module-gs_interactive.client.driver", false]], "gs_interactive.client.result": [[310, "module-gs_interactive.client.result", false]], "gs_interactive.client.session": [[311, "module-0", false], [311, "module-gs_interactive.client.session", false]], "gs_interactive.client.status": [[312, "module-gs_interactive.client.status", false]], "gs_interactive.client.utils": [[307, "module-0", false], [307, "module-gs_interactive.client.utils", false]], "has_default_session() (in module graphscope)": [[422, "graphscope.has_default_session", false]], "has_edge() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.has_edge", false]], "has_edge() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.has_edge", false]], "has_node() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.has_node", false]], "has_node() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.has_node", false]], "has_path() (in module graphscope.nx.builtin)": [[442, "graphscope.nx.builtin.has_path", false]], "has_predecessor() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.has_predecessor", false]], "has_successor() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.has_successor", false]], "havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[511, "graphscope.nx.generators.degree_seq.havel_hakimi_graph", false]], "heawood_graph() (in module graphscope.nx.generators.small)": [[550, "graphscope.nx.generators.small.heawood_graph", false]], "hits()": [[0, "hits", false]], "hits() (in module graphscope)": [[368, "graphscope.hits", false]], "hits() (in module graphscope.nx.builtin)": [[442, "graphscope.nx.builtin.hits", false]], "hkn_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[529, "graphscope.nx.generators.harary_graph.hkn_harary_graph", false]], "hnm_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[530, "graphscope.nx.generators.harary_graph.hnm_harary_graph", false]], "house_graph() (in module graphscope.nx.generators.small)": [[551, "graphscope.nx.generators.small.house_graph", false]], "house_x_graph() (in module graphscope.nx.generators.small)": [[552, "graphscope.nx.generators.small.house_x_graph", false]], "icosahedral_graph() (in module graphscope.nx.generators.small)": [[553, "graphscope.nx.generators.small.icosahedral_graph", false]], "in_degree (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.in_degree", false]], "in_degree_centrality() (in module graphscope.nx.builtin)": [[442, "graphscope.nx.builtin.in_degree_centrality", false]], "in_edges (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.in_edges", false]], "induced_subgraph() (in module graphscope.nx.classes.function)": [[456, "graphscope.nx.classes.function.induced_subgraph", false]], "info (graphscope.session property)": [[584, "graphscope.Session.info", false]], "info() (in module graphscope.nx.classes.function)": [[457, "graphscope.nx.classes.function.info", false]], "interactive() (graphscope.session method)": [[584, "graphscope.Session.interactive", false]], "interactivequery (class in graphscope.interactive.query)": [[440, "graphscope.interactive.query.InteractiveQuery", false]], "is_compatible() (graphscope.analytical.app.javaapp method)": [[368, "graphscope.analytical.app.JavaApp.is_compatible", false]], "is_compatible() (graphscope.framework.app.appassets method)": [[368, "graphscope.framework.app.AppAssets.is_compatible", false]], "is_directed() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.is_directed", false]], "is_directed() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.is_directed", false]], "is_directed() (in module graphscope.nx.classes.function)": [[458, "graphscope.nx.classes.function.is_directed", false]], "is_empty() (gs_interactive.client.utils.decoder method)": [[307, "gs_interactive.client.utils.Decoder.is_empty", false]], "is_empty() (in module graphscope.nx.classes.function)": [[459, "graphscope.nx.classes.function.is_empty", false]], "is_error() (gs_interactive.client.result.result method)": [[310, "gs_interactive.client.result.Result.is_error", false]], "is_error() (gs_interactive.client.status.status method)": [[312, "gs_interactive.client.status.Status.is_error", false]], "is_frozen() (in module graphscope.nx.classes.function)": [[460, "graphscope.nx.classes.function.is_frozen", false]], "is_multigraph() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.is_multigraph", false]], "is_multigraph() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.is_multigraph", false]], "is_negatively_weighted() (in module graphscope.nx.classes.function)": [[461, "graphscope.nx.classes.function.is_negatively_weighted", false]], "is_ok() (gs_interactive.client.result.result method)": [[310, "gs_interactive.client.result.Result.is_ok", false]], "is_ok() (gs_interactive.client.status.status method)": [[312, "gs_interactive.client.status.Status.is_ok", false]], "is_simple_path() (in module graphscope)": [[368, "graphscope.is_simple_path", false]], "is_valid_directed_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[535, "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", false]], "is_valid_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[536, "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", false]], "is_weighted() (in module graphscope.nx.classes.function)": [[462, "graphscope.nx.classes.function.is_weighted", false]], "javaapp (class in graphscope.analytical.app)": [[368, "graphscope.analytical.app.JavaApp", false]], "joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[537, "graphscope.nx.generators.joint_degree_seq.joint_degree_graph", false]], "k_core() (in module graphscope)": [[368, "graphscope.k_core", false]], "k_core() (in module graphscope.nx.builtin)": [[442, "graphscope.nx.builtin.k_core", false]], "k_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[532, "graphscope.nx.generators.intersection.k_random_intersection_graph", false]], "k_shell() (in module graphscope)": [[368, "graphscope.k_shell", false]], "karate_club_graph() (in module graphscope.nx.generators.social)": [[567, "graphscope.nx.generators.social.karate_club_graph", false]], "katz_centrality()": [[0, "katz_centrality", false]], "katz_centrality() (in module graphscope)": [[368, "graphscope.katz_centrality", false]], "katz_centrality() (in module graphscope.nx.builtin)": [[442, "graphscope.nx.builtin.katz_centrality", false]], "key (graphscope.framework.app.app property)": [[368, "graphscope.framework.app.App.key", false]], "key (graphscope.framework.graph.graph property)": [[439, "graphscope.framework.graph.Graph.key", false]], "key (graphscope.framework.operation.operation property)": [[416, "graphscope.framework.operation.Operation.key", false]], "key (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.key", false]], "key (graphscope.nx.graph property)": [[577, "graphscope.nx.Graph.key", false]], "kkore()": [[0, "kkore", false]], "krackhardt_kite_graph() (in module graphscope.nx.generators.small)": [[554, "graphscope.nx.generators.small.krackhardt_kite_graph", false]], "kshell()": [[0, "kshell", false]], "labeledvertexdatacontextdagnode (class in graphscope.framework.context)": [[369, "graphscope.framework.context.LabeledVertexDataContextDAGNode", false]], "labeledvertexpropertycontextdagnode (class in graphscope.framework.context)": [[369, "graphscope.framework.context.LabeledVertexPropertyContextDAGNode", false]], "ladder_graph() (in module graphscope.nx.generators.classic)": [[488, "graphscope.nx.generators.classic.ladder_graph", false]], "lcc()": [[0, "id2", false]], "lcf_graph() (in module graphscope.nx.generators.small)": [[542, "graphscope.nx.generators.small.LCF_graph", false]], "les_miserables_graph() (in module graphscope.nx.generators.social)": [[568, "graphscope.nx.generators.social.les_miserables_graph", false]], "lfr_benchmark_graph() (in module graphscope.nx.generators.community)": [[496, "graphscope.nx.generators.community.LFR_benchmark_graph", false]], "list_graphs() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.list_graphs", false]], "list_jobs() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.list_jobs", false]], "list_procedures() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.list_procedures", false]], "load_app() (in module graphscope.framework.app)": [[376, "graphscope.framework.app.load_app", false]], "load_from() (graphscope.framework.graph.graph class method)": [[439, "graphscope.framework.graph.Graph.load_from", false]], "load_from() (graphscope.session method)": [[584, "graphscope.Session.load_from", false]], "load_from() (in module graphscope.framework.graph_builder)": [[439, "graphscope.framework.graph_builder.load_from", false]], "loaded() (graphscope.framework.graph.graph method)": [[439, "graphscope.framework.graph.Graph.loaded", false]], "loader (class in graphscope.framework.loader)": [[439, "graphscope.framework.loader.Loader", false]], "lollipop_graph() (in module graphscope.nx.generators.classic)": [[489, "graphscope.nx.generators.classic.lollipop_graph", false]], "louvain() (in module graphscope)": [[368, "graphscope.louvain", false]], "lpa()": [[0, "lpa", false]], "lpa() (in module graphscope)": [[368, "graphscope.lpa", false]], "lpa_u2i() (in module graphscope)": [[368, "graphscope.lpa_u2i", false]], "make_small_graph() (in module graphscope.nx.generators.small)": [[555, "graphscope.nx.generators.small.make_small_graph", false]], "margulis_gabber_galil_graph() (in module graphscope.nx.generators.expanders)": [[522, "graphscope.nx.generators.expanders.margulis_gabber_galil_graph", false]], "modify_edges() (in module graphscope.framework.dag_utils)": [[397, "graphscope.framework.dag_utils.modify_edges", false]], "modify_vertices() (in module graphscope.framework.dag_utils)": [[398, "graphscope.framework.dag_utils.modify_vertices", false]], "module": [[306, "module-gs_interactive.client.driver", false], [307, "module-0", false], [307, "module-gs_interactive.client.utils", false], [310, "module-gs_interactive.client.result", false], [311, "module-0", false], [311, "module-gs_interactive.client.session", false], [312, "module-gs_interactive.client.status", false], [443, "module-graphscope.nx.classes.function", false], [576, "module-graphscope.nx.generators.atlas", false], [576, "module-graphscope.nx.generators.classic", false], [576, "module-graphscope.nx.generators.community", false], [576, "module-graphscope.nx.generators.degree_seq", false], [576, "module-graphscope.nx.generators.directed", false], [576, "module-graphscope.nx.generators.duplication", false], [576, "module-graphscope.nx.generators.ego", false], [576, "module-graphscope.nx.generators.expanders", false], [576, "module-graphscope.nx.generators.geometric", false], [576, "module-graphscope.nx.generators.harary_graph", false], [576, "module-graphscope.nx.generators.intersection", false], [576, "module-graphscope.nx.generators.joint_degree_seq", false], [576, "module-graphscope.nx.generators.mycielski", false], [576, "module-graphscope.nx.generators.nonisomorphic_trees", false], [576, "module-graphscope.nx.generators.small", false], [576, "module-graphscope.nx.generators.social", false], [576, "module-graphscope.nx.generators.spectral_graph_forge", false], [576, "module-graphscope.nx.generators.sudoku", false], [576, "module-graphscope.nx.generators.trees", false], [576, "module-graphscope.nx.generators.triads", false], [576, "module-networkx.generators.internet_as_graphs", false], [576, "module-networkx.generators.stochastic", false], [581, "module-graphscope.framework.dag_utils", false]], "moebius_kantor_graph() (in module graphscope.nx.generators.small)": [[556, "graphscope.nx.generators.small.moebius_kantor_graph", false]], "mycielski_graph() (in module graphscope.nx.generators.mycielski)": [[538, "graphscope.nx.generators.mycielski.mycielski_graph", false]], "mycielskian() (in module graphscope.nx.generators.mycielski)": [[539, "graphscope.nx.generators.mycielski.mycielskian", false]], "name (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.name", false]], "name (graphscope.nx.graph property)": [[577, "graphscope.nx.Graph.name", false]], "nbunch_iter() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.nbunch_iter", false]], "nbunch_iter() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.nbunch_iter", false]], "neighbors() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.neighbors", false]], "neighbors() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.neighbors", false]], "neighbors() (in module graphscope.nx.classes.function)": [[463, "graphscope.nx.classes.function.neighbors", false]], "networkx.generators.internet_as_graphs": [[576, "module-networkx.generators.internet_as_graphs", false]], "networkx.generators.stochastic": [[576, "module-networkx.generators.stochastic", false]], "node_attr_dict_factory (graphscope.nx.digraph attribute)": [[577, "graphscope.nx.DiGraph.node_attr_dict_factory", false]], "node_attr_dict_factory (graphscope.nx.graph attribute)": [[577, "graphscope.nx.Graph.node_attr_dict_factory", false]], "node_dict_factory (graphscope.nx.digraph attribute)": [[577, "graphscope.nx.DiGraph.node_dict_factory", false]], "node_dict_factory (graphscope.nx.graph attribute)": [[577, "graphscope.nx.Graph.node_dict_factory", false]], "nodes (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.nodes", false]], "nodes (graphscope.nx.graph property)": [[577, "graphscope.nx.Graph.nodes", false]], "nodes() (in module graphscope.nx.classes.function)": [[464, "graphscope.nx.classes.function.nodes", false]], "nodes_with_selfloops() (in module graphscope.nx.classes.function)": [[465, "graphscope.nx.classes.function.nodes_with_selfloops", false]], "non_edges() (in module graphscope.nx.classes.function)": [[466, "graphscope.nx.classes.function.non_edges", false]], "non_neighbors() (in module graphscope.nx.classes.function)": [[467, "graphscope.nx.classes.function.non_neighbors", false]], "nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[540, "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", false]], "null_graph() (in module graphscope.nx.generators.classic)": [[490, "graphscope.nx.generators.classic.null_graph", false]], "number_of_edges() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.number_of_edges", false]], "number_of_edges() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.number_of_edges", false]], "number_of_edges() (in module graphscope.nx.classes.function)": [[468, "graphscope.nx.classes.function.number_of_edges", false]], "number_of_nodes() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.number_of_nodes", false]], "number_of_nodes() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.number_of_nodes", false]], "number_of_nodes() (in module graphscope.nx.classes.function)": [[469, "graphscope.nx.classes.function.number_of_nodes", false]], "number_of_nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[541, "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", false]], "number_of_selfloops() (in module graphscope.nx.classes.function)": [[470, "graphscope.nx.classes.function.number_of_selfloops", false]], "numeric_assortativity_coefficient() (in module graphscope)": [[368, "graphscope.numeric_assortativity_coefficient", false]], "object_id (graphscope.interactive.query.interactivequery property)": [[440, "graphscope.interactive.query.InteractiveQuery.object_id", false]], "octahedral_graph() (in module graphscope.nx.generators.small)": [[557, "graphscope.nx.generators.small.octahedral_graph", false]], "ok() (gs_interactive.client.result.result static method)": [[310, "gs_interactive.client.result.Result.ok", false]], "ok() (gs_interactive.client.status.status static method)": [[312, "gs_interactive.client.status.Status.ok", false]], "op (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.op", false]], "op (graphscope.nx.graph property)": [[577, "graphscope.nx.Graph.op", false]], "operation (class in graphscope.framework.operation)": [[581, "graphscope.framework.operation.Operation", false]], "order() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.order", false]], "order() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.order", false]], "out_degree (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.out_degree", false]], "out_degree_centrality() (in module graphscope.nx.builtin)": [[442, "graphscope.nx.builtin.out_degree_centrality", false]], "out_edges (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.out_edges", false]], "output() (in module graphscope.framework.dag_utils)": [[399, "graphscope.framework.dag_utils.output", false]], "pagerank()": [[0, "id3", false]], "pagerank() (in module graphscope)": [[368, "graphscope.pagerank", false]], "pagerank_nx() (in module graphscope)": [[368, "graphscope.pagerank_nx", false]], "paley_graph() (in module graphscope.nx.generators.expanders)": [[523, "graphscope.nx.generators.expanders.paley_graph", false]], "pappus_graph() (in module graphscope.nx.generators.small)": [[558, "graphscope.nx.generators.small.pappus_graph", false]], "partial_duplication_graph() (in module graphscope.nx.generators.duplication)": [[519, "graphscope.nx.generators.duplication.partial_duplication_graph", false]], "path_graph() (in module graphscope.nx.generators.classic)": [[491, "graphscope.nx.generators.classic.path_graph", false]], "petersen_graph() (in module graphscope.nx.generators.small)": [[559, "graphscope.nx.generators.small.petersen_graph", false]], "planted_partition_graph() (in module graphscope.nx.generators.community)": [[500, "graphscope.nx.generators.community.planted_partition_graph", false]], "pred (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.pred", false]], "predecessors() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.predecessors", false]], "prefix_tree() (in module graphscope.nx.generators.trees)": [[571, "graphscope.nx.generators.trees.prefix_tree", false]], "project() (graphscope.framework.graph.graph method)": [[439, "graphscope.framework.graph.Graph.project", false]], "project() (graphscope.framework.graph.graphdagnode method)": [[439, "graphscope.framework.graph.GraphDAGNode.project", false]], "project_arrow_property_graph() (in module graphscope.framework.dag_utils)": [[400, "graphscope.framework.dag_utils.project_arrow_property_graph", false]], "project_to_simple() (in module graphscope.framework.dag_utils)": [[401, "graphscope.framework.dag_utils.project_to_simple", false]], "put_byte() (gs_interactive.client.utils.encoder method)": [[307, "gs_interactive.client.utils.Encoder.put_byte", false]], "put_bytes() (gs_interactive.client.utils.encoder method)": [[307, "gs_interactive.client.utils.Encoder.put_bytes", false]], "put_double() (gs_interactive.client.utils.encoder method)": [[307, "gs_interactive.client.utils.Encoder.put_double", false]], "put_int() (gs_interactive.client.utils.encoder method)": [[307, "gs_interactive.client.utils.Encoder.put_int", false]], "put_long() (gs_interactive.client.utils.encoder method)": [[307, "gs_interactive.client.utils.Encoder.put_long", false]], "put_string() (gs_interactive.client.utils.encoder method)": [[307, "gs_interactive.client.utils.Encoder.put_string", false]], "random_degree_sequence_graph() (in module graphscope.nx.generators.degree_seq)": [[512, "graphscope.nx.generators.degree_seq.random_degree_sequence_graph", false]], "random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[525, "graphscope.nx.generators.geometric.random_geometric_graph", false]], "random_internet_as_graph() (in module networkx.generators.internet_as_graphs)": [[574, "networkx.generators.internet_as_graphs.random_internet_as_graph", false]], "random_k_out_graph() (in module graphscope.nx.generators.directed)": [[516, "graphscope.nx.generators.directed.random_k_out_graph", false]], "random_partition_graph() (in module graphscope.nx.generators.community)": [[501, "graphscope.nx.generators.community.random_partition_graph", false]], "random_tree() (in module graphscope.nx.generators.trees)": [[572, "graphscope.nx.generators.trees.random_tree", false]], "read_adjlist() (in module graphscope.nx)": [[579, "graphscope.nx.read_adjlist", false]], "read_edgelist() (in module graphscope.nx)": [[579, "graphscope.nx.read_edgelist", false]], "read_endpoints_from_env() (gs_interactive.client.driver.driver method)": [[306, "gs_interactive.client.driver.Driver.read_endpoints_from_env", false]], "relaxed_caveman_graph() (in module graphscope.nx.generators.community)": [[502, "graphscope.nx.generators.community.relaxed_caveman_graph", false]], "remove_edge() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.remove_edge", false]], "remove_edge() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.remove_edge", false]], "remove_edges_from() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.remove_edges_from", false]], "remove_edges_from() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.remove_edges_from", false]], "remove_node() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.remove_node", false]], "remove_node() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.remove_node", false]], "remove_nodes_from() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.remove_nodes_from", false]], "remove_nodes_from() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.remove_nodes_from", false]], "report_graph() (in module graphscope.framework.dag_utils)": [[402, "graphscope.framework.dag_utils.report_graph", false]], "restart_service() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.restart_service", false]], "restore_from_pvc() (graphscope.session method)": [[584, "graphscope.Session.restore_from_pvc", false]], "result (class in gs_interactive.client.result)": [[310, "gs_interactive.client.result.Result", false]], "resultdagnode (class in graphscope.framework.context)": [[369, "graphscope.framework.context.ResultDAGNode", false]], "reverse() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.reverse", false]], "ring_of_cliques() (in module graphscope.nx.generators.community)": [[503, "graphscope.nx.generators.community.ring_of_cliques", false]], "run_app() (in module graphscope.framework.dag_utils)": [[403, "graphscope.framework.dag_utils.run_app", false]], "run_fetches() (graphscope.session method)": [[584, "graphscope.Session.run_fetches", false]], "sampling_path()": [[0, "sampling_path", false]], "save_to() (graphscope.framework.graph.graph method)": [[439, "graphscope.framework.graph.Graph.save_to", false]], "scale_free_graph() (in module graphscope.nx.generators.directed)": [[517, "graphscope.nx.generators.directed.scale_free_graph", false]], "schema (graphscope.framework.graph.graph property)": [[439, "graphscope.framework.graph.Graph.schema", false]], "schema (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.schema", false]], "schema (graphscope.nx.graph property)": [[577, "graphscope.nx.Graph.schema", false]], "schema_path (graphscope.framework.graph.graph property)": [[439, "graphscope.framework.graph.Graph.schema_path", false]], "sedgewick_maze_graph() (in module graphscope.nx.generators.small)": [[560, "graphscope.nx.generators.small.sedgewick_maze_graph", false]], "selfloop_edges() (in module graphscope.nx.classes.function)": [[471, "graphscope.nx.classes.function.selfloop_edges", false]], "server_internal_error() (gs_interactive.client.status.status static method)": [[312, "gs_interactive.client.status.Status.server_internal_error", false]], "session (class in graphscope)": [[584, "graphscope.Session", false]], "session (class in gs_interactive.client.session)": [[311, "gs_interactive.client.session.Session", false]], "session (graphscope.interactive.query.interactivequery property)": [[440, "graphscope.interactive.query.InteractiveQuery.session", false]], "session (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.session", false]], "session (graphscope.nx.graph property)": [[577, "graphscope.nx.Graph.session", false]], "session (in module graphscope)": [[423, "graphscope.session", false]], "session() (gs_interactive.client.driver.driver method)": [[306, "gs_interactive.client.driver.Driver.session", false]], "session_id (graphscope.framework.graph.graph property)": [[439, "graphscope.framework.graph.Graph.session_id", false]], "session_id (graphscope.interactive.query.interactivequery property)": [[440, "graphscope.interactive.query.InteractiveQuery.session_id", false]], "session_id (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.session_id", false]], "session_id (graphscope.nx.graph property)": [[577, "graphscope.nx.Graph.session_id", false]], "set_edge_data() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.set_edge_data", false]], "set_edge_data() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.set_edge_data", false]], "set_node_data() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.set_node_data", false]], "set_node_data() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.set_node_data", false]], "set_option() (in module graphscope)": [[424, "graphscope.set_option", false]], "signature (graphscope.framework.app.app property)": [[368, "graphscope.framework.app.App.signature", false]], "signature (graphscope.framework.app.appassets property)": [[368, "graphscope.framework.app.AppAssets.signature", false]], "signature (graphscope.framework.operation.operation property)": [[417, "graphscope.framework.operation.Operation.signature", false]], "signature (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.signature", false]], "signature (graphscope.nx.graph property)": [[577, "graphscope.nx.Graph.signature", false]], "signature() (graphscope.analytical.app.javaapp method)": [[368, "graphscope.analytical.app.JavaApp.signature", false]], "size() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.size", false]], "size() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.size", false]], "soft_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[526, "graphscope.nx.generators.geometric.soft_random_geometric_graph", false]], "spectral_graph_forge() (in module graphscope.nx.generators.spectral_graph_forge)": [[569, "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", false]], "sssp()": [[0, "sssp", false]], "sssp() (in module graphscope)": [[368, "graphscope.sssp", false]], "star_graph() (in module graphscope.nx.generators.classic)": [[492, "graphscope.nx.generators.classic.star_graph", false]], "start_service() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.start_service", false]], "status (class in gs_interactive.client.status)": [[312, "gs_interactive.client.status.Status", false]], "stochastic_block_model() (in module graphscope.nx.generators.community)": [[504, "graphscope.nx.generators.community.stochastic_block_model", false]], "stochastic_graph() (in module networkx.generators.stochastic)": [[575, "networkx.generators.stochastic.stochastic_graph", false]], "stop_service() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.stop_service", false]], "store_to_pvc() (graphscope.session method)": [[584, "graphscope.Session.store_to_pvc", false]], "subgraph() (graphscope.interactive.query.interactivequery method)": [[440, "graphscope.interactive.query.InteractiveQuery.subgraph", false]], "subgraph() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.subgraph", false]], "subgraph() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.subgraph", false]], "subgraph() (in module graphscope.nx.classes.function)": [[472, "graphscope.nx.classes.function.subgraph", false]], "submit() (graphscope.interactive.query.interactivequery method)": [[440, "graphscope.interactive.query.InteractiveQuery.submit", false]], "succ (graphscope.nx.digraph property)": [[577, "graphscope.nx.DiGraph.succ", false]], "successors() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.successors", false]], "sudoku_graph() (in module graphscope.nx.generators.sudoku)": [[570, "graphscope.nx.generators.sudoku.sudoku_graph", false]], "tensorcontextdagnode (class in graphscope.framework.context)": [[369, "graphscope.framework.context.TensorContextDAGNode", false]], "tetrahedral_graph() (in module graphscope.nx.generators.small)": [[561, "graphscope.nx.generators.small.tetrahedral_graph", false]], "thresholded_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[527, "graphscope.nx.generators.geometric.thresholded_random_geometric_graph", false]], "to_data_sink() (in module graphscope.framework.dag_utils)": [[404, "graphscope.framework.dag_utils.to_data_sink", false]], "to_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[369, "graphscope.framework.context.BaseContextDAGNode.to_dataframe", false]], "to_dataframe() (graphscope.framework.graph.graph method)": [[439, "graphscope.framework.graph.Graph.to_dataframe", false]], "to_directed() (graphscope.framework.graph.graph method)": [[439, "graphscope.framework.graph.Graph.to_directed", false]], "to_directed() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.to_directed", false]], "to_directed() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.to_directed", false]], "to_directed() (in module graphscope.framework.dag_utils)": [[405, "graphscope.framework.dag_utils.to_directed", false]], "to_directed() (in module graphscope.nx.classes.function)": [[473, "graphscope.nx.classes.function.to_directed", false]], "to_numpy() (graphscope.framework.context.basecontextdagnode method)": [[369, "graphscope.framework.context.BaseContextDAGNode.to_numpy", false]], "to_numpy() (graphscope.framework.graph.graph method)": [[439, "graphscope.framework.graph.Graph.to_numpy", false]], "to_undirected() (graphscope.framework.graph.graph method)": [[439, "graphscope.framework.graph.Graph.to_undirected", false]], "to_undirected() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.to_undirected", false]], "to_undirected() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.to_undirected", false]], "to_undirected() (in module graphscope.framework.dag_utils)": [[406, "graphscope.framework.dag_utils.to_undirected", false]], "to_undirected() (in module graphscope.nx.classes.function)": [[474, "graphscope.nx.classes.function.to_undirected", false]], "to_undirected_class() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.to_undirected_class", false]], "to_undirected_class() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.to_undirected_class", false]], "to_vineyard_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[369, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_dataframe", false]], "to_vineyard_dataframe() (in module graphscope.framework.dag_utils)": [[407, "graphscope.framework.dag_utils.to_vineyard_dataframe", false]], "to_vineyard_tensor() (graphscope.framework.context.basecontextdagnode method)": [[369, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_tensor", false]], "to_vineyard_tensor() (in module graphscope.framework.dag_utils)": [[408, "graphscope.framework.dag_utils.to_vineyard_tensor", false]], "traversal_source() (graphscope.interactive.query.interactivequery method)": [[440, "graphscope.interactive.query.InteractiveQuery.traversal_source", false]], "triad_graph() (in module graphscope.nx.generators.triads)": [[573, "graphscope.nx.generators.triads.triad_graph", false]], "triangles() (in module graphscope)": [[368, "graphscope.triangles", false]], "triangles() (in module graphscope.nx.builtin)": [[442, "graphscope.nx.builtin.triangles", false]], "trivial_graph() (in module graphscope.nx.generators.classic)": [[493, "graphscope.nx.generators.classic.trivial_graph", false]], "truncated_cube_graph() (in module graphscope.nx.generators.small)": [[562, "graphscope.nx.generators.small.truncated_cube_graph", false]], "truncated_tetrahedron_graph() (in module graphscope.nx.generators.small)": [[563, "graphscope.nx.generators.small.truncated_tetrahedron_graph", false]], "try_upload_files() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.try_upload_files", false]], "turan_graph() (in module graphscope.nx.generators.classic)": [[494, "graphscope.nx.generators.classic.turan_graph", false]], "tutte_graph() (in module graphscope.nx.generators.small)": [[564, "graphscope.nx.generators.small.tutte_graph", false]], "type (graphscope.framework.app.appassets property)": [[368, "graphscope.framework.app.AppAssets.type", false]], "uniform_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[533, "graphscope.nx.generators.intersection.uniform_random_intersection_graph", false]], "unload_app() (in module graphscope.framework.dag_utils)": [[409, "graphscope.framework.dag_utils.unload_app", false]], "unload_context() (in module graphscope.framework.dag_utils)": [[410, "graphscope.framework.dag_utils.unload_context", false]], "unload_graph() (in module graphscope.framework.dag_utils)": [[411, "graphscope.framework.dag_utils.unload_graph", false]], "update() (graphscope.nx.digraph method)": [[577, "graphscope.nx.DiGraph.update", false]], "update() (graphscope.nx.graph method)": [[577, "graphscope.nx.Graph.update", false]], "update_edge() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.update_edge", false]], "update_edge_type() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.update_edge_type", false]], "update_procedure() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.update_procedure", false]], "update_vertex() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.update_vertex", false]], "update_vertex_type() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.update_vertex_type", false]], "upload_and_replace_input_inplace() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.upload_and_replace_input_inplace", false]], "upload_file() (gs_interactive.client.session.defaultsession method)": [[311, "gs_interactive.client.session.DefaultSession.upload_file", false]], "v() (graphscope.learning.graph.graph method)": [[441, "graphscope.learning.graph.Graph.V", false]], "vertex (in module graphscope)": [[374, "graphscope.Vertex", false]], "vertexdatacontextdagnode (class in graphscope.framework.context)": [[369, "graphscope.framework.context.VertexDataContextDAGNode", false]], "vertexpropertycontextdagnode (class in graphscope.framework.context)": [[369, "graphscope.framework.context.VertexPropertyContextDAGNode", false]], "vineyard_id (graphscope.framework.graph.graph property)": [[439, "graphscope.framework.graph.Graph.vineyard_id", false]], "voterank()": [[0, "id4", false]], "voterank() (in module graphscope)": [[368, "graphscope.voterank", false]], "waxman_graph() (in module graphscope.nx.generators.geometric)": [[528, "graphscope.nx.generators.geometric.waxman_graph", false]], "wcc()": [[0, "id5", false]], "wcc() (in module graphscope)": [[368, "graphscope.wcc", false]], "wheel_graph() (in module graphscope.nx.generators.classic)": [[495, "graphscope.nx.generators.classic.wheel_graph", false]], "windmill_graph() (in module graphscope.nx.generators.community)": [[505, "graphscope.nx.generators.community.windmill_graph", false]]}, "objects": {"": [[367, 0, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase"], [367, 1, 1, "_CPPv4N2gs7AppBase7AppBaseEv", "gs::AppBase::AppBase"], [367, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::CONTEXT_T"], [367, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::FRAG_T"], [367, 1, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval"], [367, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::context"], [367, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::graph"], [367, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::messages"], [367, 1, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval"], [367, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::context"], [367, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::graph"], [367, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::messages"], [367, 4, 1, "_CPPv4N2gs7AppBase13load_strategyE", "gs::AppBase::load_strategy"], [367, 5, 1, "_CPPv4N2gs7AppBase17message_manager_tE", "gs::AppBase::message_manager_t"], [367, 4, 1, "_CPPv4N2gs7AppBase16message_strategyE", "gs::AppBase::message_strategy"], [367, 4, 1, "_CPPv4N2gs7AppBase16need_split_edgesE", "gs::AppBase::need_split_edges"], [367, 1, 1, "_CPPv4N2gs7AppBaseD0Ev", "gs::AppBase::~AppBase"], [367, 0, 1, "_CPPv4N2gs8AppEntryE", "gs::AppEntry"], [367, 1, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry"], [367, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::id"], [367, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::lib_path"], [367, 1, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker"], [367, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::comm_spec"], [367, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::fragment"], [367, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::spec"], [367, 1, 1, "_CPPv4N2gs8AppEntry4InitEv", "gs::AppEntry::Init"], [367, 1, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query"], [367, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::context_key"], [367, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::frag_wrapper"], [367, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::query_args"], [367, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::worker_handler"], [367, 0, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt"], [367, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::FunctionType"], [367, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::index"], [367, 0, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum"], [367, 2, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum::FunctionType"], [367, 0, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker"], [367, 2, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker::T"], [367, 0, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::frag_id"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::label_id"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::frag_id"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::label_id"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment::frag_id"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup::frag_id"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::compact_edges"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::directed"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::efiles"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::generate_eid"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::graph_info"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::retain_oid"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::use_perfect_hash"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::vfiles"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::extend_type"], [367, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::frag_id"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv", "gs::ArrowFragmentLoader::LoadEdgeTables"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv", "gs::ArrowFragmentLoader::LoadFragment"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv", "gs::ArrowFragmentLoader::LoadFragmentAsFragmentGroup"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv", "gs::ArrowFragmentLoader::LoadVertexEdgeTables"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv", "gs::ArrowFragmentLoader::LoadVertexTables"], [367, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::OID_T"], [367, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VERTEX_MAP_T"], [367, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VID_T"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv", "gs::ArrowFragmentLoader::initPartitioner"], [367, 1, 1, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev", "gs::ArrowFragmentLoader::~ArrowFragmentLoader"], [367, 0, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment"], [367, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::COMPACT"], [367, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct"], [367, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct::meta"], [367, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv", "gs::ArrowProjectedFragment::Create"], [367, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::EDATA_T"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv", "gs::ArrowProjectedFragment::GetEdgeNum"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv", "gs::ArrowProjectedFragment::GetInEdgeNum"], [367, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [367, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [367, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [367, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [367, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [367, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [367, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::src_fid"], [367, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [367, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [367, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv", "gs::ArrowProjectedFragment::GetIncomingEdgeNum"], [367, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList"], [367, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::COMPACT_"], [367, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::v"], [367, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList"], [367, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::COMPACT_"], [367, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::oid"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv", "gs::ArrowProjectedFragment::GetInnerVerticesNum"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv", "gs::ArrowProjectedFragment::GetOutEdgeNum"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::oid"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv", "gs::ArrowProjectedFragment::GetOuterVerticesNum"], [367, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [367, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [367, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [367, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [367, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [367, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [367, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::dst_fid"], [367, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [367, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [367, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv", "gs::ArrowProjectedFragment::GetOutgoingEdgeNum"], [367, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList"], [367, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::COMPACT_"], [367, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::v"], [367, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList"], [367, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::COMPACT_"], [367, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv", "gs::ArrowProjectedFragment::GetTotalVerticesNum"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::oid"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::v"], [367, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv", "gs::ArrowProjectedFragment::GetVerticesNum"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid::gid"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::gid"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment11IEDestsSizeEv", "gs::ArrowProjectedFragment::IEDestsSize"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12IOEDestsSizeEv", "gs::ArrowProjectedFragment::IOEDestsSize"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::gid"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv", "gs::ArrowProjectedFragment::InnerVertices"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices::fid"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment11OEDestsSizeEv", "gs::ArrowProjectedFragment::OEDestsSize"], [367, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::OID_T"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::gid"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::gid"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv", "gs::ArrowProjectedFragment::OuterVertices"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices::fid"], [367, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp"], [367, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::comm_spec"], [367, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::conf"], [367, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project"], [367, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_label"], [367, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_prop"], [367, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::fragment"], [367, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_label"], [367, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_prop"], [367, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VDATA_T"], [367, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VERTEX_MAP_T"], [367, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VID_T"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid"], [367, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid::v"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv", "gs::ArrowProjectedFragment::Vertices"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE", "gs::ArrowProjectedFragment::adj_list_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE", "gs::ArrowProjectedFragment::compact_adj_list_t"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv", "gs::ArrowProjectedFragment::compact_edges"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE", "gs::ArrowProjectedFragment::compact_nbr_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE", "gs::ArrowProjectedFragment::const_adj_list_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE", "gs::ArrowProjectedFragment::const_compact_adj_list_t"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv", "gs::ArrowProjectedFragment::directed"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE", "gs::ArrowProjectedFragment::edata_t"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv", "gs::ArrowProjectedFragment::edge_label"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv", "gs::ArrowProjectedFragment::edge_prop_id"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE", "gs::ArrowProjectedFragment::eid_array_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE", "gs::ArrowProjectedFragment::eid_t"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv", "gs::ArrowProjectedFragment::fid"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv", "gs::ArrowProjectedFragment::fnum"], [367, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv", "gs::ArrowProjectedFragment::get_arrow_fragment"], [367, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv", "gs::ArrowProjectedFragment::get_edata_array_accessor"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_begin_ptr"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_end_ptr"], [367, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr"], [367, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr::COMPACT_"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_begin_ptr"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_end_ptr"], [367, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr"], [367, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr::COMPACT_"], [367, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv", "gs::ArrowProjectedFragment::get_vdata_array_accessor"], [367, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t"], [367, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t::DATA_T"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE", "gs::ArrowProjectedFragment::inner_vertices_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE", "gs::ArrowProjectedFragment::internal_oid_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE", "gs::ArrowProjectedFragment::label_id_t"], [367, 4, 1, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE", "gs::ArrowProjectedFragment::load_strategy"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv", "gs::ArrowProjectedFragment::local_vertex_map"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE", "gs::ArrowProjectedFragment::nbr_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE", "gs::ArrowProjectedFragment::nbr_unit_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE", "gs::ArrowProjectedFragment::oid_t"], [367, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t"], [367, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t::DATA_T"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE", "gs::ArrowProjectedFragment::outer_vertices_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE", "gs::ArrowProjectedFragment::prop_id_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE", "gs::ArrowProjectedFragment::property_graph_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE", "gs::ArrowProjectedFragment::property_vertex_map_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE", "gs::ArrowProjectedFragment::sub_vertices_t"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv", "gs::ArrowProjectedFragment::use_perfect_hash"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE", "gs::ArrowProjectedFragment::vdata_t"], [367, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t"], [367, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t::DATA_T"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv", "gs::ArrowProjectedFragment::vertex_label"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv", "gs::ArrowProjectedFragment::vertex_map_id"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE", "gs::ArrowProjectedFragment::vertex_map_t"], [367, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv", "gs::ArrowProjectedFragment::vertex_prop_id"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE", "gs::ArrowProjectedFragment::vertex_range_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE", "gs::ArrowProjectedFragment::vertex_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE", "gs::ArrowProjectedFragment::vertices_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE", "gs::ArrowProjectedFragment::vid_array_t"], [367, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE", "gs::ArrowProjectedFragment::vid_t"], [367, 1, 1, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev", "gs::ArrowProjectedFragment::~ArrowProjectedFragment"], [367, 0, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap"], [367, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct"], [367, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct::meta"], [367, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv", "gs::ArrowProjectedVertexMap::Create"], [367, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid"], [367, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid::gid"], [367, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [367, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [367, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::fid"], [367, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [367, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [367, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [367, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [367, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize"], [367, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize::fid"], [367, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid"], [367, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid::gid"], [367, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid"], [367, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid::lid"], [367, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid"], [367, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::gid"], [367, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::oid"], [367, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv", "gs::ArrowProjectedVertexMap::GetTotalVerticesNum"], [367, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::OID_T"], [367, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid"], [367, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid::offset"], [367, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project"], [367, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::v_label"], [367, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::vm"], [367, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VERTEX_MAP_T"], [367, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VID_T"], [367, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv", "gs::ArrowProjectedVertexMap::use_perfect_hash"], [367, 0, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder"], [367, 2, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder::CTX_T"], [367, 0, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker"], [367, 2, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker::APP_T"], [367, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker"], [367, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::app"], [367, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::graph"], [367, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv", "gs::DefaultPropertyWorker::Finalize"], [367, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv", "gs::DefaultPropertyWorker::GetContext"], [367, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init"], [367, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::comm_spec"], [367, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::pe_spec"], [367, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output"], [367, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output::os"], [367, 1, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query"], [367, 2, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::Args"], [367, 3, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::args"], [367, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker9context_tE", "gs::DefaultPropertyWorker::context_t"], [367, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE", "gs::DefaultPropertyWorker::fragment_t"], [367, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE", "gs::DefaultPropertyWorker::message_manager_t"], [367, 1, 1, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev", "gs::DefaultPropertyWorker::~DefaultPropertyWorker"], [367, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [367, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [367, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [367, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [367, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [367, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [367, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [367, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [367, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [367, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [367, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [367, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [367, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [367, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [367, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [367, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [367, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [367, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [367, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [367, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [367, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [367, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [367, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [367, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [367, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [367, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [367, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [367, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [367, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [367, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [367, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [367, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [367, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [367, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [367, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [367, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [367, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [367, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [367, 0, 1, "_CPPv4N2gs14DispatchResultE", "gs::DispatchResult"], [367, 6, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicyE", "gs::DispatchResult::AggregatePolicy"], [367, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::AggregatePolicy::kConcat"], [367, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::AggregatePolicy::kMergeGraphDef"], [367, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::AggregatePolicy::kPickFirst"], [367, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmpty"], [367, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmptyGraphDef"], [367, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::AggregatePolicy::kRequireConsistent"], [367, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult"], [367, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEv", "gs::DispatchResult::DispatchResult"], [367, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::error_code"], [367, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::worker_id"], [367, 1, 1, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv", "gs::DispatchResult::aggregate_policy"], [367, 1, 1, "_CPPv4NK2gs14DispatchResult4dataEv", "gs::DispatchResult::data"], [367, 1, 1, "_CPPv4NK2gs14DispatchResult10error_codeEv", "gs::DispatchResult::error_code"], [367, 1, 1, "_CPPv4N2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [367, 1, 1, "_CPPv4NK2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [367, 1, 1, "_CPPv4NK2gs14DispatchResult14has_large_dataEv", "gs::DispatchResult::has_large_data"], [367, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::kConcat"], [367, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::kMergeGraphDef"], [367, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::kPickFirst"], [367, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::kPickFirstNonEmpty"], [367, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::kPickFirstNonEmptyGraphDef"], [367, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::kRequireConsistent"], [367, 1, 1, "_CPPv4N2gs14DispatchResult7messageEv", "gs::DispatchResult::message"], [367, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data"], [367, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data"], [367, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::arc"], [367, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::data"], [367, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [367, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [367, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [367, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [367, 1, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error"], [367, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::error_code"], [367, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::message"], [367, 1, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def"], [367, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::graph_def"], [367, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::policy"], [367, 1, 1, "_CPPv4NK2gs14DispatchResult9worker_idEv", "gs::DispatchResult::worker_id"], [367, 0, 1, "_CPPv4N2gs10DispatcherE", "gs::Dispatcher"], [367, 1, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch"], [367, 3, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch::cmd"], [367, 1, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher"], [367, 3, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher::comm_spec"], [367, 1, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand"], [367, 3, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand::cmd"], [367, 1, 1, "_CPPv4N2gs10Dispatcher5StartEv", "gs::Dispatcher::Start"], [367, 1, 1, "_CPPv4N2gs10Dispatcher4StopEv", "gs::Dispatcher::Stop"], [367, 1, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe"], [367, 3, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe::subscriber"], [367, 0, 1, "_CPPv4N2gs12EngineConfigE", "gs::EngineConfig"], [367, 1, 1, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv", "gs::EngineConfig::ToJsonString"], [367, 4, 1, "_CPPv4N2gs12EngineConfig15enable_java_sdkE", "gs::EngineConfig::enable_java_sdk"], [367, 4, 1, "_CPPv4N2gs12EngineConfig8networkxE", "gs::EngineConfig::networkx"], [367, 4, 1, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE", "gs::EngineConfig::vineyard_rpc_endpoint"], [367, 4, 1, "_CPPv4N2gs12EngineConfig15vineyard_socketE", "gs::EngineConfig::vineyard_socket"], [367, 0, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper"], [367, 2, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper::FRAG_T"], [367, 0, 1, "_CPPv4N2gs8GSObjectE", "gs::GSObject"], [367, 1, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject"], [367, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::id"], [367, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::type"], [367, 1, 1, "_CPPv4NK2gs8GSObject8ToStringEv", "gs::GSObject::ToString"], [367, 1, 1, "_CPPv4NK2gs8GSObject2idEv", "gs::GSObject::id"], [367, 1, 1, "_CPPv4NK2gs8GSObject4typeEv", "gs::GSObject::type"], [367, 1, 1, "_CPPv4N2gs8GSObjectD0Ev", "gs::GSObject::~GSObject"], [367, 0, 1, "_CPPv4N2gs11GrapeEngineE", "gs::GrapeEngine"], [367, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine"], [367, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine"], [367, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine::dag_file"], [367, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::host"], [367, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::port"], [367, 1, 1, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv", "gs::GrapeEngine::RunDAGFile"], [367, 1, 1, "_CPPv4N2gs11GrapeEngine5StartEv", "gs::GrapeEngine::Start"], [367, 1, 1, "_CPPv4N2gs11GrapeEngine4StopEv", "gs::GrapeEngine::Stop"], [367, 0, 1, "_CPPv4N2gs13GrapeInstanceE", "gs::GrapeInstance"], [367, 1, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance"], [367, 3, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance::comm_spec"], [367, 1, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init"], [367, 3, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init::vineyard_socket"], [367, 1, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive"], [367, 3, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive::cmd"], [367, 0, 1, "_CPPv4N2gs13ObjectManagerE", "gs::ObjectManager"], [367, 1, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject"], [367, 1, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject"], [367, 2, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::T"], [367, 3, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [367, 3, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [367, 1, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject"], [367, 3, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject::id"], [367, 1, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject"], [367, 3, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject::obj"], [367, 1, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject"], [367, 3, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject::id"], [367, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [367, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [367, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [367, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [367, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [367, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [367, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [367, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [367, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [367, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [367, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [367, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [367, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [367, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [367, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [367, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [367, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [367, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [367, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [367, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [367, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [367, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [367, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [367, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [367, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [367, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [367, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [367, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [367, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [367, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [367, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [367, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [367, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [367, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [367, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [367, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [367, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [367, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [367, 0, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase"], [367, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::CONTEXT_T"], [367, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::FRAG_T"], [367, 1, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval"], [367, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::context"], [367, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::graph"], [367, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::messages"], [367, 1, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval"], [367, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::context"], [367, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::graph"], [367, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::messages"], [367, 1, 1, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv", "gs::PropertyAppBase::PropertyAppBase"], [367, 4, 1, "_CPPv4N2gs15PropertyAppBase13load_strategyE", "gs::PropertyAppBase::load_strategy"], [367, 5, 1, "_CPPv4N2gs15PropertyAppBase17message_manager_tE", "gs::PropertyAppBase::message_manager_t"], [367, 4, 1, "_CPPv4N2gs15PropertyAppBase16message_strategyE", "gs::PropertyAppBase::message_strategy"], [367, 4, 1, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE", "gs::PropertyAppBase::need_split_edges"], [367, 1, 1, "_CPPv4N2gs15PropertyAppBaseD0Ev", "gs::PropertyAppBase::~PropertyAppBase"], [367, 0, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase"], [367, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::CONTEXT_T"], [367, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::FRAG_T"], [367, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval"], [367, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::context"], [367, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::graph"], [367, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval"], [367, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::context"], [367, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::graph"], [367, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv", "gs::PropertyAutoAppBase::PropertyAutoAppBase"], [367, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE", "gs::PropertyAutoAppBase::load_strategy"], [367, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE", "gs::PropertyAutoAppBase::message_strategy"], [367, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE", "gs::PropertyAutoAppBase::need_split_edges"], [367, 1, 1, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev", "gs::PropertyAutoAppBase::~PropertyAutoAppBase"], [367, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [367, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [367, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [367, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [367, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [367, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [367, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [367, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [367, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [367, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [367, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [367, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [367, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [367, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [367, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [367, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [367, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [367, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [367, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [367, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [367, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [367, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [367, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [367, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [367, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [367, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [367, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [367, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [367, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [367, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [367, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [367, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [367, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [367, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [367, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [367, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [367, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [367, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [367, 0, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext"], [367, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::DATA_T"], [367, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::FRAG_T"], [367, 1, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext"], [367, 3, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext::fragment"], [367, 1, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign"], [367, 1, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign"], [367, 3, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign::data"], [367, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::data"], [367, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::shape"], [367, 5, 1, "_CPPv4N2gs13TensorContext6data_tE", "gs::TensorContext::data_t"], [367, 1, 1, "_CPPv4N2gs13TensorContext8fragmentEv", "gs::TensorContext::fragment"], [367, 1, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape"], [367, 3, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape::shape"], [367, 1, 1, "_CPPv4NK2gs13TensorContext5shapeEv", "gs::TensorContext::shape"], [367, 1, 1, "_CPPv4N2gs13TensorContext6tensorEv", "gs::TensorContext::tensor"], [367, 0, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper"], [367, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::DATA_T"], [367, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::FRAG_T"], [367, 1, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper"], [367, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::ctx"], [367, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::frag_wrapper"], [367, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::id"], [367, 1, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays"], [367, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::comm_spec"], [367, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::selectors"], [367, 1, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe"], [367, 3, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe::comm_spec"], [367, 1, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray"], [367, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::axis"], [367, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::comm_spec"], [367, 1, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe"], [367, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::client"], [367, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::comm_spec"], [367, 1, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor"], [367, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::axis"], [367, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::client"], [367, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::comm_spec"], [367, 1, 1, "_CPPv4N2gs20TensorContextWrapper12context_typeEv", "gs::TensorContextWrapper::context_type"], [367, 1, 1, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv", "gs::TensorContextWrapper::fragment_wrapper"], [367, 0, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper"], [367, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::DATA_T"], [367, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::FRAG_T"], [367, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::comm_spec"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::selectors"], [367, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::comm_spec"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::range"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::selectors"], [367, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::comm_spec"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::range"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::selector"], [367, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::client"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::comm_spec"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::range"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::selectors"], [367, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::client"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::comm_spec"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::range"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::selector"], [367, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::ctx"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::frag_wrapper"], [367, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::id"], [367, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv", "gs::VertexDataContextWrapper::context_type"], [367, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv", "gs::VertexDataContextWrapper::fragment_wrapper"], [367, 0, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext"], [367, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext::FRAG_T"], [367, 1, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext"], [367, 3, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext::fragment"], [367, 1, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column"], [367, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::name"], [367, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::type"], [367, 1, 1, "_CPPv4N2gs21VertexPropertyContext8fragmentEv", "gs::VertexPropertyContext::fragment"], [367, 5, 1, "_CPPv4N2gs21VertexPropertyContext10fragment_tE", "gs::VertexPropertyContext::fragment_t"], [367, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column"], [367, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column"], [367, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column::index"], [367, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column::name"], [367, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column"], [367, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column"], [367, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [367, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [367, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::index"], [367, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::name"], [367, 5, 1, "_CPPv4N2gs21VertexPropertyContext5oid_tE", "gs::VertexPropertyContext::oid_t"], [367, 5, 1, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE", "gs::VertexPropertyContext::prop_id_t"], [367, 1, 1, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv", "gs::VertexPropertyContext::properties_map"], [367, 1, 1, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv", "gs::VertexPropertyContext::vertex_properties"], [367, 5, 1, "_CPPv4N2gs21VertexPropertyContext8vertex_tE", "gs::VertexPropertyContext::vertex_t"], [367, 0, 1, "_CPPv4N2gs3rpc16AnalyticalServerE", "gs::rpc::AnalyticalServer"], [367, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer"], [367, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::dispatcher"], [367, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::host"], [367, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::port"], [367, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv", "gs::rpc::AnalyticalServer::StartServer"], [367, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv", "gs::rpc::AnalyticalServer::StopServer"], [0, 8, 1, "", "all_pairs_shortest_path_length"], [0, 8, 1, "", "attribute_assortativity"], [0, 8, 1, "", "average_degree_connectivity"], [0, 8, 1, "", "betweenness_centrality"], [0, 8, 1, "", "bfs"], [0, 8, 1, "id0", "cdlp"], [0, 8, 1, "", "closeness_centrality"], [0, 8, 1, "id1", "clustering"], [0, 8, 1, "", "degree_assortativity_coefficient"], [0, 8, 1, "", "degree_centrality"], [0, 8, 1, "", "dfs"], [0, 8, 1, "", "eigenvector_centrality"], [0, 8, 1, "", "hits"], [0, 8, 1, "", "katz_centrality"], [0, 8, 1, "", "kkore"], [0, 8, 1, "", "kshell"], [0, 8, 1, "id2", "lcc"], [0, 8, 1, "", "lpa"], [0, 8, 1, "id3", "pagerank"], [0, 8, 1, "", "sampling_path"], [0, 8, 1, "", "sssp"], [0, 8, 1, "id4", "voterank"], [0, 8, 1, "id5", "wcc"]], "graphscope": [[584, 9, 1, "", "Session"], [374, 12, 1, "", "Vertex"], [368, 8, 1, "", "attribute_assortativity_coefficient"], [368, 8, 1, "", "average_degree_connectivity"], [368, 8, 1, "", "average_shortest_path_length"], [368, 8, 1, "", "avg_clustering"], [368, 8, 1, "", "bfs"], [368, 8, 1, "", "cdlp"], [368, 8, 1, "", "clustering"], [375, 8, 1, "", "declare"], [368, 8, 1, "", "degree_assortativity_coefficient"], [368, 8, 1, "", "degree_centrality"], [368, 8, 1, "", "eigenvector_centrality"], [418, 8, 1, "", "g"], [419, 8, 1, "", "get_default_session"], [420, 8, 1, "", "graphlearn"], [421, 8, 1, "", "gremlin"], [422, 8, 1, "", "has_default_session"], [368, 8, 1, "", "hits"], [368, 8, 1, "", "is_simple_path"], [368, 8, 1, "", "k_core"], [368, 8, 1, "", "k_shell"], [368, 8, 1, "", "katz_centrality"], [368, 8, 1, "", "louvain"], [368, 8, 1, "", "lpa"], [368, 8, 1, "", "lpa_u2i"], [368, 8, 1, "", "numeric_assortativity_coefficient"], [368, 8, 1, "", "pagerank"], [368, 8, 1, "", "pagerank_nx"], [423, 14, 1, "", "session"], [424, 8, 1, "", "set_option"], [368, 8, 1, "", "sssp"], [368, 8, 1, "", "triangles"], [368, 8, 1, "", "voterank"], [368, 8, 1, "", "wcc"]], "graphscope.Session": [[584, 10, 1, "", "__enter__"], [584, 10, 1, "", "__exit__"], [584, 10, 1, "", "__init__"], [584, 10, 1, "", "add_lib"], [584, 10, 1, "", "as_default"], [584, 10, 1, "", "close"], [584, 10, 1, "", "connected"], [584, 11, 1, "", "engine_config"], [584, 10, 1, "", "g"], [584, 10, 1, "", "get_config"], [584, 10, 1, "", "get_vineyard_object_mapping_table"], [584, 10, 1, "", "graphlearn"], [584, 11, 1, "", "info"], [584, 10, 1, "", "interactive"], [584, 10, 1, "", "load_from"], [584, 10, 1, "", "restore_from_pvc"], [584, 10, 1, "", "run_fetches"], [584, 10, 1, "", "store_to_pvc"]], "graphscope.analytical.app": [[368, 9, 1, "", "JavaApp"]], "graphscope.analytical.app.JavaApp": [[368, 10, 1, "", "__call__"], [368, 10, 1, "", "__init__"], [368, 10, 1, "", "is_compatible"], [368, 10, 1, "", "signature"]], "graphscope.framework": [[581, 13, 0, "-", "dag_utils"]], "graphscope.framework.app": [[368, 9, 1, "", "App"], [368, 9, 1, "", "AppAssets"], [368, 9, 1, "", "AppDAGNode"], [376, 8, 1, "", "load_app"]], "graphscope.framework.app.App": [[368, 10, 1, "", "__del__"], [368, 10, 1, "", "__init__"], [368, 11, 1, "", "key"], [368, 11, 1, "", "signature"]], "graphscope.framework.app.AppAssets": [[368, 10, 1, "", "__init__"], [368, 11, 1, "", "algo"], [368, 11, 1, "", "context_type"], [368, 11, 1, "", "gar"], [368, 10, 1, "", "is_compatible"], [368, 11, 1, "", "signature"], [368, 11, 1, "", "type"]], "graphscope.framework.context": [[369, 9, 1, "", "BaseContextDAGNode"], [369, 9, 1, "", "Context"], [369, 9, 1, "", "DynamicVertexDataContext"], [369, 9, 1, "", "LabeledVertexDataContextDAGNode"], [369, 9, 1, "", "LabeledVertexPropertyContextDAGNode"], [369, 9, 1, "", "ResultDAGNode"], [369, 9, 1, "", "TensorContextDAGNode"], [369, 9, 1, "", "VertexDataContextDAGNode"], [369, 9, 1, "", "VertexPropertyContextDAGNode"]], "graphscope.framework.context.BaseContextDAGNode": [[369, 10, 1, "", "to_dataframe"], [369, 10, 1, "", "to_numpy"], [369, 10, 1, "", "to_vineyard_dataframe"], [369, 10, 1, "", "to_vineyard_tensor"]], "graphscope.framework.dag_utils": [[377, 8, 1, "", "add_column"], [378, 8, 1, "", "add_labels_to_graph"], [379, 8, 1, "", "arrow_to_dynamic"], [380, 8, 1, "", "bind_app"], [381, 8, 1, "", "clear_edges"], [382, 8, 1, "", "clear_graph"], [383, 8, 1, "", "context_to_dataframe"], [384, 8, 1, "", "context_to_numpy"], [385, 8, 1, "", "copy_graph"], [386, 8, 1, "", "create_app"], [387, 8, 1, "", "create_graph"], [388, 8, 1, "", "create_graph_view"], [389, 8, 1, "", "create_loader"], [390, 8, 1, "", "create_subgraph"], [391, 8, 1, "", "create_unload_op"], [392, 8, 1, "", "dynamic_to_arrow"], [393, 8, 1, "", "get_context_data"], [394, 8, 1, "", "graph_to_dataframe"], [395, 8, 1, "", "graph_to_numpy"], [396, 8, 1, "", "gremlin_to_subgraph"], [397, 8, 1, "", "modify_edges"], [398, 8, 1, "", "modify_vertices"], [399, 8, 1, "", "output"], [400, 8, 1, "", "project_arrow_property_graph"], [401, 8, 1, "", "project_to_simple"], [402, 8, 1, "", "report_graph"], [403, 8, 1, "", "run_app"], [404, 8, 1, "", "to_data_sink"], [405, 8, 1, "", "to_directed"], [406, 8, 1, "", "to_undirected"], [407, 8, 1, "", "to_vineyard_dataframe"], [408, 8, 1, "", "to_vineyard_tensor"], [409, 8, 1, "", "unload_app"], [410, 8, 1, "", "unload_context"], [411, 8, 1, "", "unload_graph"]], "graphscope.framework.graph": [[439, 9, 1, "", "Graph"], [439, 9, 1, "", "GraphDAGNode"]], "graphscope.framework.graph.Graph": [[439, 10, 1, "", "__init__"], [439, 10, 1, "", "add_column"], [439, 10, 1, "", "add_edges"], [439, 10, 1, "", "add_vertices"], [439, 10, 1, "", "consolidate_columns"], [439, 10, 1, "", "detach"], [439, 11, 1, "", "key"], [439, 10, 1, "", "load_from"], [439, 10, 1, "", "loaded"], [439, 10, 1, "", "project"], [439, 10, 1, "", "save_to"], [439, 11, 1, "", "schema"], [439, 11, 1, "", "schema_path"], [439, 11, 1, "", "session_id"], [439, 10, 1, "", "to_dataframe"], [439, 10, 1, "", "to_directed"], [439, 10, 1, "", "to_numpy"], [439, 10, 1, "", "to_undirected"], [439, 11, 1, "", "vineyard_id"]], "graphscope.framework.graph.GraphDAGNode": [[439, 10, 1, "", "__init__"], [439, 10, 1, "", "add_column"], [439, 10, 1, "", "add_edges"], [439, 10, 1, "", "add_vertices"], [439, 10, 1, "", "consolidate_columns"], [439, 10, 1, "", "project"]], "graphscope.framework.graph_builder": [[439, 8, 1, "", "load_from"]], "graphscope.framework.loader": [[439, 9, 1, "", "Loader"]], "graphscope.framework.loader.Loader": [[439, 10, 1, "", "__init__"]], "graphscope.framework.operation": [[581, 9, 1, "", "Operation"]], "graphscope.framework.operation.Operation": [[412, 10, 1, "", "__init__"], [413, 10, 1, "", "as_op_def"], [414, 10, 1, "", "eval"], [415, 11, 1, "", "evaluated"], [416, 11, 1, "", "key"], [417, 11, 1, "", "signature"]], "graphscope.interactive.query": [[440, 9, 1, "", "InteractiveQuery"]], "graphscope.interactive.query.InteractiveQuery": [[440, 10, 1, "", "__init__"], [440, 10, 1, "", "close"], [440, 11, 1, "", "cypher_driver"], [440, 11, 1, "", "cypher_url"], [440, 10, 1, "", "execute"], [440, 11, 1, "", "graph_url"], [440, 11, 1, "", "gremlin_client"], [440, 11, 1, "", "gremlin_url"], [440, 11, 1, "", "object_id"], [440, 11, 1, "", "session"], [440, 11, 1, "", "session_id"], [440, 10, 1, "", "subgraph"], [440, 10, 1, "", "submit"], [440, 10, 1, "", "traversal_source"]], "graphscope.learning.graph": [[441, 9, 1, "", "Graph"]], "graphscope.learning.graph.Graph": [[441, 10, 1, "", "E"], [441, 10, 1, "", "V"], [441, 10, 1, "", "__init__"], [441, 10, 1, "", "get_handle"]], "graphscope.nx": [[577, 9, 1, "", "DiGraph"], [577, 9, 1, "", "Graph"], [579, 8, 1, "", "read_adjlist"], [579, 8, 1, "", "read_edgelist"]], "graphscope.nx.DiGraph": [[577, 10, 1, "", "__contains__"], [577, 10, 1, "", "__getitem__"], [577, 10, 1, "", "__init__"], [577, 10, 1, "", "__iter__"], [577, 10, 1, "", "__len__"], [577, 10, 1, "", "add_edge"], [577, 10, 1, "", "add_edges_from"], [577, 10, 1, "", "add_node"], [577, 10, 1, "", "add_nodes_from"], [577, 10, 1, "", "add_weighted_edges_from"], [577, 11, 1, "", "adj"], [577, 10, 1, "", "adjacency"], [577, 14, 1, "", "adjlist_inner_dict_factory"], [577, 14, 1, "", "adjlist_outer_dict_factory"], [577, 10, 1, "", "clear"], [577, 10, 1, "", "clear_edges"], [577, 10, 1, "", "copy"], [577, 11, 1, "", "degree"], [577, 14, 1, "", "edge_attr_dict_factory"], [577, 10, 1, "", "edge_subgraph"], [577, 11, 1, "", "edges"], [577, 10, 1, "", "get_edge_data"], [577, 14, 1, "", "graph_attr_dict_factory"], [577, 14, 1, "", "graph_cache_factory"], [577, 11, 1, "", "graph_type"], [577, 10, 1, "", "has_edge"], [577, 10, 1, "", "has_node"], [577, 10, 1, "", "has_predecessor"], [577, 10, 1, "", "has_successor"], [577, 11, 1, "", "in_degree"], [577, 11, 1, "", "in_edges"], [577, 10, 1, "", "is_directed"], [577, 10, 1, "", "is_multigraph"], [577, 11, 1, "", "key"], [577, 11, 1, "", "name"], [577, 10, 1, "", "nbunch_iter"], [577, 10, 1, "", "neighbors"], [577, 14, 1, "", "node_attr_dict_factory"], [577, 14, 1, "", "node_dict_factory"], [577, 11, 1, "", "nodes"], [577, 10, 1, "", "number_of_edges"], [577, 10, 1, "", "number_of_nodes"], [577, 11, 1, "", "op"], [577, 10, 1, "", "order"], [577, 11, 1, "", "out_degree"], [577, 11, 1, "", "out_edges"], [577, 11, 1, "", "pred"], [577, 10, 1, "", "predecessors"], [577, 10, 1, "", "remove_edge"], [577, 10, 1, "", "remove_edges_from"], [577, 10, 1, "", "remove_node"], [577, 10, 1, "", "remove_nodes_from"], [577, 10, 1, "", "reverse"], [577, 11, 1, "", "schema"], [577, 11, 1, "", "session"], [577, 11, 1, "", "session_id"], [577, 10, 1, "", "set_edge_data"], [577, 10, 1, "", "set_node_data"], [577, 11, 1, "", "signature"], [577, 10, 1, "", "size"], [577, 10, 1, "", "subgraph"], [577, 11, 1, "", "succ"], [577, 10, 1, "", "successors"], [577, 10, 1, "", "to_directed"], [577, 10, 1, "", "to_undirected"], [577, 10, 1, "", "to_undirected_class"], [577, 10, 1, "", "update"]], "graphscope.nx.Graph": [[577, 10, 1, "", "__contains__"], [577, 10, 1, "", "__getitem__"], [580, 8, 1, "", "__init__"], [577, 10, 1, "", "__iter__"], [577, 10, 1, "", "__len__"], [580, 8, 1, "", "_convert_arrow_to_dynamic"], [577, 10, 1, "", "add_edge"], [577, 10, 1, "", "add_edges_from"], [577, 10, 1, "", "add_node"], [577, 10, 1, "", "add_nodes_from"], [577, 10, 1, "", "add_weighted_edges_from"], [577, 11, 1, "", "adj"], [577, 10, 1, "", "adjacency"], [577, 14, 1, "", "adjlist_inner_dict_factory"], [577, 14, 1, "", "adjlist_outer_dict_factory"], [577, 10, 1, "", "clear"], [577, 10, 1, "", "clear_edges"], [577, 10, 1, "", "copy"], [577, 11, 1, "", "degree"], [577, 14, 1, "", "edge_attr_dict_factory"], [577, 10, 1, "", "edge_subgraph"], [577, 11, 1, "", "edges"], [577, 10, 1, "", "get_edge_data"], [577, 14, 1, "", "graph_attr_dict_factory"], [577, 14, 1, "", "graph_cache_factory"], [577, 11, 1, "", "graph_type"], [577, 10, 1, "", "has_edge"], [577, 10, 1, "", "has_node"], [577, 10, 1, "", "is_directed"], [577, 10, 1, "", "is_multigraph"], [577, 11, 1, "", "key"], [577, 11, 1, "", "name"], [577, 10, 1, "", "nbunch_iter"], [577, 10, 1, "", "neighbors"], [577, 14, 1, "", "node_attr_dict_factory"], [577, 14, 1, "", "node_dict_factory"], [577, 11, 1, "", "nodes"], [577, 10, 1, "", "number_of_edges"], [577, 10, 1, "", "number_of_nodes"], [577, 11, 1, "", "op"], [577, 10, 1, "", "order"], [577, 10, 1, "", "remove_edge"], [577, 10, 1, "", "remove_edges_from"], [577, 10, 1, "", "remove_node"], [577, 10, 1, "", "remove_nodes_from"], [577, 11, 1, "", "schema"], [577, 11, 1, "", "session"], [577, 11, 1, "", "session_id"], [577, 10, 1, "", "set_edge_data"], [577, 10, 1, "", "set_node_data"], [577, 11, 1, "", "signature"], [577, 10, 1, "", "size"], [577, 10, 1, "", "subgraph"], [577, 10, 1, "", "to_directed"], [577, 10, 1, "", "to_undirected"], [577, 10, 1, "", "to_undirected_class"], [577, 10, 1, "", "update"]], "graphscope.nx.builtin": [[442, 8, 1, "", "average_clustering"], [442, 8, 1, "", "average_shortest_path_length"], [442, 8, 1, "", "bfs_edges"], [442, 8, 1, "", "clustering"], [442, 8, 1, "", "degree_centrality"], [442, 8, 1, "", "eigenvector_centrality"], [442, 8, 1, "", "has_path"], [442, 8, 1, "", "hits"], [442, 8, 1, "", "in_degree_centrality"], [442, 8, 1, "", "k_core"], [442, 8, 1, "", "katz_centrality"], [442, 8, 1, "", "out_degree_centrality"], [442, 8, 1, "", "triangles"]], "graphscope.nx.classes": [[443, 13, 0, "-", "function"]], "graphscope.nx.classes.function": [[444, 8, 1, "", "add_cycle"], [445, 8, 1, "", "add_path"], [446, 8, 1, "", "add_star"], [447, 8, 1, "", "all_neighbors"], [448, 8, 1, "", "common_neighbors"], [449, 8, 1, "", "create_empty_copy"], [450, 8, 1, "", "degree"], [451, 8, 1, "", "degree_histogram"], [452, 8, 1, "", "density"], [453, 8, 1, "", "edge_subgraph"], [454, 8, 1, "", "edges"], [455, 8, 1, "", "freeze"], [456, 8, 1, "", "induced_subgraph"], [457, 8, 1, "", "info"], [458, 8, 1, "", "is_directed"], [459, 8, 1, "", "is_empty"], [460, 8, 1, "", "is_frozen"], [461, 8, 1, "", "is_negatively_weighted"], [462, 8, 1, "", "is_weighted"], [463, 8, 1, "", "neighbors"], [464, 8, 1, "", "nodes"], [465, 8, 1, "", "nodes_with_selfloops"], [466, 8, 1, "", "non_edges"], [467, 8, 1, "", "non_neighbors"], [468, 8, 1, "", "number_of_edges"], [469, 8, 1, "", "number_of_nodes"], [470, 8, 1, "", "number_of_selfloops"], [471, 8, 1, "", "selfloop_edges"], [472, 8, 1, "", "subgraph"], [473, 8, 1, "", "to_directed"], [474, 8, 1, "", "to_undirected"]], "graphscope.nx.generators": [[576, 13, 0, "-", "atlas"], [576, 13, 0, "-", "classic"], [576, 13, 0, "-", "community"], [576, 13, 0, "-", "degree_seq"], [576, 13, 0, "-", "directed"], [576, 13, 0, "-", "duplication"], [576, 13, 0, "-", "ego"], [576, 13, 0, "-", "expanders"], [576, 13, 0, "-", "geometric"], [576, 13, 0, "-", "harary_graph"], [576, 13, 0, "-", "intersection"], [576, 13, 0, "-", "joint_degree_seq"], [576, 13, 0, "-", "mycielski"], [576, 13, 0, "-", "nonisomorphic_trees"], [576, 13, 0, "-", "small"], [576, 13, 0, "-", "social"], [576, 13, 0, "-", "spectral_graph_forge"], [576, 13, 0, "-", "sudoku"], [576, 13, 0, "-", "trees"], [576, 13, 0, "-", "triads"]], "graphscope.nx.generators.atlas": [[475, 8, 1, "", "graph_atlas"], [476, 8, 1, "", "graph_atlas_g"]], "graphscope.nx.generators.classic": [[477, 8, 1, "", "balanced_tree"], [478, 8, 1, "", "barbell_graph"], [479, 8, 1, "", "binomial_tree"], [480, 8, 1, "", "circulant_graph"], [481, 8, 1, "", "circular_ladder_graph"], [482, 8, 1, "", "complete_graph"], [483, 8, 1, "", "complete_multipartite_graph"], [484, 8, 1, "", "cycle_graph"], [485, 8, 1, "", "dorogovtsev_goltsev_mendes_graph"], [486, 8, 1, "", "empty_graph"], [487, 8, 1, "", "full_rary_tree"], [488, 8, 1, "", "ladder_graph"], [489, 8, 1, "", "lollipop_graph"], [490, 8, 1, "", "null_graph"], [491, 8, 1, "", "path_graph"], [492, 8, 1, "", "star_graph"], [493, 8, 1, "", "trivial_graph"], [494, 8, 1, "", "turan_graph"], [495, 8, 1, "", "wheel_graph"]], "graphscope.nx.generators.community": [[496, 8, 1, "", "LFR_benchmark_graph"], [497, 8, 1, "", "caveman_graph"], [498, 8, 1, "", "connected_caveman_graph"], [499, 8, 1, "", "gaussian_random_partition_graph"], [500, 8, 1, "", "planted_partition_graph"], [501, 8, 1, "", "random_partition_graph"], [502, 8, 1, "", "relaxed_caveman_graph"], [503, 8, 1, "", "ring_of_cliques"], [504, 8, 1, "", "stochastic_block_model"], [505, 8, 1, "", "windmill_graph"]], "graphscope.nx.generators.degree_seq": [[506, 8, 1, "", "configuration_model"], [507, 8, 1, "", "degree_sequence_tree"], [508, 8, 1, "", "directed_configuration_model"], [509, 8, 1, "", "directed_havel_hakimi_graph"], [510, 8, 1, "", "expected_degree_graph"], [511, 8, 1, "", "havel_hakimi_graph"], [512, 8, 1, "", "random_degree_sequence_graph"]], "graphscope.nx.generators.directed": [[513, 8, 1, "", "gn_graph"], [514, 8, 1, "", "gnc_graph"], [515, 8, 1, "", "gnr_graph"], [516, 8, 1, "", "random_k_out_graph"], [517, 8, 1, "", "scale_free_graph"]], "graphscope.nx.generators.duplication": [[518, 8, 1, "", "duplication_divergence_graph"], [519, 8, 1, "", "partial_duplication_graph"]], "graphscope.nx.generators.ego": [[520, 8, 1, "", "ego_graph"]], "graphscope.nx.generators.expanders": [[521, 8, 1, "", "chordal_cycle_graph"], [522, 8, 1, "", "margulis_gabber_galil_graph"], [523, 8, 1, "", "paley_graph"]], "graphscope.nx.generators.geometric": [[524, 8, 1, "", "geographical_threshold_graph"], [525, 8, 1, "", "random_geometric_graph"], [526, 8, 1, "", "soft_random_geometric_graph"], [527, 8, 1, "", "thresholded_random_geometric_graph"], [528, 8, 1, "", "waxman_graph"]], "graphscope.nx.generators.harary_graph": [[529, 8, 1, "", "hkn_harary_graph"], [530, 8, 1, "", "hnm_harary_graph"]], "graphscope.nx.generators.intersection": [[531, 8, 1, "", "general_random_intersection_graph"], [532, 8, 1, "", "k_random_intersection_graph"], [533, 8, 1, "", "uniform_random_intersection_graph"]], "graphscope.nx.generators.joint_degree_seq": [[534, 8, 1, "", "directed_joint_degree_graph"], [535, 8, 1, "", "is_valid_directed_joint_degree"], [536, 8, 1, "", "is_valid_joint_degree"], [537, 8, 1, "", "joint_degree_graph"]], "graphscope.nx.generators.mycielski": [[538, 8, 1, "", "mycielski_graph"], [539, 8, 1, "", "mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees": [[540, 8, 1, "", "nonisomorphic_trees"], [541, 8, 1, "", "number_of_nonisomorphic_trees"]], "graphscope.nx.generators.small": [[542, 8, 1, "", "LCF_graph"], [543, 8, 1, "", "bull_graph"], [544, 8, 1, "", "chvatal_graph"], [545, 8, 1, "", "cubical_graph"], [546, 8, 1, "", "desargues_graph"], [547, 8, 1, "", "diamond_graph"], [548, 8, 1, "", "dodecahedral_graph"], [549, 8, 1, "", "frucht_graph"], [550, 8, 1, "", "heawood_graph"], [551, 8, 1, "", "house_graph"], [552, 8, 1, "", "house_x_graph"], [553, 8, 1, "", "icosahedral_graph"], [554, 8, 1, "", "krackhardt_kite_graph"], [555, 8, 1, "", "make_small_graph"], [556, 8, 1, "", "moebius_kantor_graph"], [557, 8, 1, "", "octahedral_graph"], [558, 8, 1, "", "pappus_graph"], [559, 8, 1, "", "petersen_graph"], [560, 8, 1, "", "sedgewick_maze_graph"], [561, 8, 1, "", "tetrahedral_graph"], [562, 8, 1, "", "truncated_cube_graph"], [563, 8, 1, "", "truncated_tetrahedron_graph"], [564, 8, 1, "", "tutte_graph"]], "graphscope.nx.generators.social": [[565, 8, 1, "", "davis_southern_women_graph"], [566, 8, 1, "", "florentine_families_graph"], [567, 8, 1, "", "karate_club_graph"], [568, 8, 1, "", "les_miserables_graph"]], "graphscope.nx.generators.spectral_graph_forge": [[569, 8, 1, "", "spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[570, 8, 1, "", "sudoku_graph"]], "graphscope.nx.generators.trees": [[571, 8, 1, "", "prefix_tree"], [572, 8, 1, "", "random_tree"]], "graphscope.nx.generators.triads": [[573, 8, 1, "", "triad_graph"]], "gs_interactive.client": [[306, 13, 0, "-", "driver"], [310, 13, 0, "-", "result"], [311, 13, 0, "module-0", "session"], [312, 13, 0, "-", "status"], [307, 13, 0, "module-0", "utils"]], "gs_interactive.client.driver": [[306, 9, 1, "", "Driver"]], "gs_interactive.client.driver.Driver": [[306, 10, 1, "", "__init__"], [306, 10, 1, "", "close"], [306, 10, 1, "", "getDefaultSession"], [306, 10, 1, "", "getNeo4jEndpoint"], [306, 10, 1, "", "getNeo4jSession"], [306, 10, 1, "", "read_endpoints_from_env"], [306, 10, 1, "", "session"]], "gs_interactive.client.result": [[310, 9, 1, "", "Result"]], "gs_interactive.client.result.Result": [[310, 10, 1, "", "__init__"], [310, 10, 1, "", "error"], [310, 10, 1, "", "from_exception"], [310, 10, 1, "", "from_response"], [310, 10, 1, "", "get_status"], [310, 10, 1, "", "get_status_message"], [310, 10, 1, "", "get_value"], [310, 10, 1, "", "is_error"], [310, 10, 1, "", "is_ok"], [310, 10, 1, "", "ok"]], "gs_interactive.client.session": [[311, 9, 1, "", "DefaultSession"], [311, 9, 1, "", "Session"]], "gs_interactive.client.session.DefaultSession": [[311, 10, 1, "", "__init__"], [311, 10, 1, "", "add_edge"], [311, 10, 1, "", "add_vertex"], [311, 10, 1, "", "bulk_loading"], [311, 10, 1, "", "call_procedure"], [311, 10, 1, "", "call_procedure_current"], [311, 10, 1, "", "call_procedure_current_raw"], [311, 10, 1, "", "call_procedure_raw"], [311, 10, 1, "", "cancel_job"], [311, 10, 1, "", "create_edge_type"], [311, 10, 1, "", "create_graph"], [311, 10, 1, "", "create_procedure"], [311, 10, 1, "", "create_vertex_type"], [311, 10, 1, "", "delete_edge"], [311, 10, 1, "", "delete_edge_type"], [311, 10, 1, "", "delete_graph"], [311, 10, 1, "", "delete_procedure"], [311, 10, 1, "", "delete_vertex"], [311, 10, 1, "", "delete_vertex_type"], [311, 10, 1, "", "ensure_param_str"], [311, 10, 1, "", "get_edge"], [311, 10, 1, "", "get_graph_meta"], [311, 10, 1, "", "get_graph_schema"], [311, 10, 1, "", "get_graph_statistics"], [311, 10, 1, "", "get_job"], [311, 10, 1, "", "get_procedure"], [311, 10, 1, "", "get_service_status"], [311, 10, 1, "", "get_snapshot_status"], [311, 10, 1, "", "get_vertex"], [311, 10, 1, "", "list_graphs"], [311, 10, 1, "", "list_jobs"], [311, 10, 1, "", "list_procedures"], [311, 10, 1, "", "restart_service"], [311, 10, 1, "", "start_service"], [311, 10, 1, "", "stop_service"], [311, 10, 1, "", "try_upload_files"], [311, 10, 1, "", "update_edge"], [311, 10, 1, "", "update_edge_type"], [311, 10, 1, "", "update_procedure"], [311, 10, 1, "", "update_vertex"], [311, 10, 1, "", "update_vertex_type"], [311, 10, 1, "", "upload_and_replace_input_inplace"], [311, 10, 1, "", "upload_file"]], "gs_interactive.client.status": [[312, 9, 1, "", "Status"]], "gs_interactive.client.status.Status": [[312, 10, 1, "", "__init__"], [312, 10, 1, "", "from_exception"], [312, 10, 1, "", "from_response"], [312, 10, 1, "", "get_code"], [312, 11, 1, "", "get_message"], [312, 10, 1, "", "is_error"], [312, 10, 1, "", "is_ok"], [312, 10, 1, "", "ok"], [312, 10, 1, "", "server_internal_error"]], "gs_interactive.client.utils": [[307, 9, 1, "", "Decoder"], [307, 9, 1, "", "Encoder"]], "gs_interactive.client.utils.Decoder": [[307, 10, 1, "", "__init__"], [307, 10, 1, "", "get_byte"], [307, 10, 1, "", "get_bytes"], [307, 10, 1, "", "get_double"], [307, 10, 1, "", "get_int"], [307, 10, 1, "", "get_long"], [307, 10, 1, "", "get_string"], [307, 10, 1, "", "is_empty"]], "gs_interactive.client.utils.Encoder": [[307, 10, 1, "", "__init__"], [307, 10, 1, "", "get_bytes"], [307, 10, 1, "", "put_byte"], [307, 10, 1, "", "put_bytes"], [307, 10, 1, "", "put_double"], [307, 10, 1, "", "put_int"], [307, 10, 1, "", "put_long"], [307, 10, 1, "", "put_string"]], "networkx.generators": [[576, 13, 0, "-", "internet_as_graphs"], [576, 13, 0, "-", "stochastic"]], "networkx.generators.internet_as_graphs": [[574, 8, 1, "", "random_internet_as_graph"]], "networkx.generators.stochastic": [[575, 8, 1, "", "stochastic_graph"]]}, "objnames": {"0": ["cpp", "class", "C++ class"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["cpp", "functionParam", "C++ function parameter"], "4": ["cpp", "member", "C++ member"], "5": ["cpp", "type", "C++ type"], "6": ["cpp", "enum", "C++ enum"], "7": ["cpp", "enumerator", "C++ enumerator"], "8": ["py", "function", "Python function"], "9": ["py", "class", "Python class"], "10": ["py", "method", "Python method"], "11": ["py", "property", "Python property"], "12": ["py", "data", "Python data"], "13": ["py", "module", "Python module"], "14": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "cpp:class", "1": "cpp:function", "2": "cpp:templateParam", "3": "cpp:functionParam", "4": "cpp:member", "5": "cpp:type", "6": "cpp:enum", "7": "cpp:enumerator", "8": "py:function", "9": "py:class", "10": "py:method", "11": "py:property", "12": "py:data", "13": "py:module", "14": "py:attribute"}, "terms": {"": [4, 6, 9, 13, 14, 15, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 33, 35, 37, 38, 41, 45, 46, 47, 67, 75, 94, 95, 106, 110, 121, 128, 129, 130, 131, 134, 154, 181, 191, 209, 216, 244, 272, 281, 299, 309, 314, 315, 318, 319, 322, 328, 329, 331, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 346, 347, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 365, 368, 378, 394, 395, 412, 425, 427, 429, 431, 434, 436, 438, 439, 442, 478, 489, 496, 499, 501, 504, 508, 511, 513, 514, 515, 531, 539, 540, 541, 564, 567, 569, 577, 583, 584, 586, 588, 589, 590, 591, 608, 609], "0": [0, 9, 10, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 35, 45, 46, 126, 128, 129, 130, 134, 154, 173, 216, 263, 308, 314, 315, 317, 319, 322, 325, 328, 329, 331, 332, 333, 334, 338, 341, 343, 347, 349, 350, 352, 353, 354, 355, 356, 358, 365, 367, 368, 369, 370, 384, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 442, 444, 445, 446, 448, 452, 453, 456, 457, 461, 471, 475, 476, 478, 479, 480, 481, 483, 486, 488, 489, 491, 492, 493, 495, 496, 499, 500, 501, 502, 504, 505, 506, 508, 509, 512, 515, 517, 524, 525, 526, 527, 528, 534, 535, 539, 542, 555, 560, 569, 571, 572, 577, 579, 580, 584, 586, 589, 590, 591, 592, 598, 600, 602, 603, 604, 605, 607, 608, 609, 610], "00": [131, 328, 343], "000": [131, 329, 343, 365], "0000": [28, 325, 343], "00000": 590, "000000": 131, "00001": 590, "00002": 590, "0001": 352, "000112": 476, "001": 354, "001111": 476, "003": 573, "009": 512, "01": [131, 343, 349, 353, 355, 358, 368, 426, 442, 501, 604], "0112143": 485, "0118": 365, "012": 573, "01715": 569, "01t00": 343, "02": [47, 68, 343, 504], "021c": 573, "021d": 573, "021u": 573, "022": 504, "024": 365, "026107": 442, "026118": 508, "026126": 368, "027105": 442, "02t20": 343, "03": [343, 365, 598], "030c": 573, "030t": 573, "0310049": 442, "036108": 524, "036118": 514, "038": 343, "03d": [354, 355], "03t09": 343, "03t18": 343, "04": [32, 134, 322, 329, 332, 343, 365, 432, 601, 603, 607], "046110": 496, "04f": 354, "05": [27, 504, 517], "051": 504, "0549": 365, "05882353": 437, "06": [368, 442], "0612": [500, 501, 502], "061911": 518, "065103": 442, "066123": [513, 515], "07": [343, 352, 365, 496, 504], "073": 365, "07t07": 343, "08": [325, 365, 442], "0802": 442, "08t02": 343, "09": [343, 365], "0906": [500, 501, 502], "097545": 426, "0a20240115": 354, "0c9a96": 365, "0d": 341, "0e": 442, "0f": 341, "0x7f3c50708160": 312, "1": [0, 4, 6, 7, 9, 10, 13, 14, 15, 17, 19, 20, 22, 23, 24, 28, 30, 31, 33, 34, 35, 37, 45, 46, 126, 128, 130, 131, 134, 154, 173, 181, 184, 191, 209, 216, 244, 263, 274, 281, 299, 308, 311, 314, 315, 317, 319, 320, 325, 328, 329, 330, 331, 332, 333, 338, 339, 341, 343, 347, 349, 350, 352, 353, 354, 355, 356, 358, 361, 362, 365, 368, 369, 425, 428, 430, 431, 432, 434, 439, 440, 441, 442, 444, 445, 446, 448, 452, 453, 456, 461, 462, 465, 470, 471, 475, 477, 478, 479, 480, 481, 483, 487, 488, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 579, 580, 584, 589, 591, 592, 598, 600, 604, 605, 607, 608, 609, 610], "10": [0, 13, 15, 16, 17, 20, 27, 31, 128, 131, 134, 315, 322, 324, 325, 330, 335, 339, 341, 343, 349, 350, 352, 353, 354, 355, 358, 365, 368, 426, 427, 428, 430, 431, 437, 439, 442, 444, 445, 446, 480, 486, 496, 499, 501, 510, 511, 512, 513, 515, 519, 524, 528, 532, 548, 554, 559, 572, 577, 584, 588, 598, 600, 604, 608], "100": [12, 34, 134, 336, 343, 349, 352, 353, 358, 368, 437, 442, 499, 506, 510, 517, 526, 577, 584, 590, 604, 608], "1000": [134, 216, 341, 368, 427, 442, 574, 577, 590], "10000": [128, 132, 134, 216, 308, 317, 319, 574], "1000000000": [18, 368, 600], "10001": [128, 132, 426, 427, 428, 430], "10002": [426, 427, 428, 430], "10003": [426, 427, 428, 430], "10004": [427, 428], "10008": 368, "1001": [322, 590], "1007": [442, 476, 512], "1008": 476, "1008806316530991636": 343, "101": [134, 368, 606], "1012": 476, "102": [134, 437, 573], "1024": [329, 331, 341, 588], "10240m": 602, "1028": 526, "1029": 531, "103": 134, "1030792152809": 343, "1033": 437, "103482": 437, "103515": 437, "104": 134, "1040": 531, "105": [134, 365, 497, 498], "106": 134, "1061127": 437, "107": [368, 530], "10815": 368, "109": 504, "10g": [23, 602], "10m": 598, "11": [20, 27, 30, 31, 32, 47, 68, 134, 329, 332, 343, 349, 365, 368, 426, 427, 428, 430, 444, 445, 446, 482, 577, 598], "110": 577, "1106406": 437, "111": 27, "111223": 476, "111d": 573, "111u": 573, "112222": 476, "11234": 331, "1142": [529, 530, 576], "1145": 442, "1146": [529, 530, 576], "115": 510, "1155": 519, "116": 500, "1170": 442, "1182": 442, "11th": 499, "12": [10, 20, 32, 209, 299, 322, 332, 343, 365, 368, 426, 427, 428, 430, 432, 444, 445, 446, 482, 544, 545, 549, 553, 557, 563, 601, 603, 607, 608], "120c": 573, "120d": 573, "120u": 573, "121": 365, "1213": 476, "1225": 341, "123": [154, 244, 263, 426], "1234": 331, "123456": [339, 347, 362, 590], "124": 426, "1244456": 476, "1244555": 476, "125": [20, 426, 510, 521], "1250": 574, "126": [365, 510], "1261": 574, "127": [45, 126, 216, 308, 315, 317, 319, 328, 331, 365, 590], "128": [349, 352, 353, 354, 355, 358, 437, 604], "1287230400000": 337, "129": [365, 532], "13": [31, 35, 343, 365, 426, 427, 428, 430, 482, 523], "130": [358, 604], "1311": 516, "132": [517, 532], "134313148716225": 343, "13623": 328, "137": [365, 504], "139": 517, "13a": 328, "14": [343, 365, 427, 428, 430, 482, 542, 550, 562, 577], "140": [437, 500], "141": 365, "1415": [19, 20], "1433": [425, 437, 609], "144115188075855872": 343, "144115188075855941": 343, "144115188075856168": 343, "144115188075858086": 343, "144115188075858700": 343, "144115188075858708": 343, "144115188075858813": 343, "144115188075858879": 343, "144115188075858881": 343, "144115188075858884": 343, "144115188075860619": 343, "144115188075860870": 343, "144115188075860911": 343, "144115188075860919": 343, "144115188075861043": 343, "144115188075861858": 343, "144115188075862429": 343, "145": 510, "15": [13, 322, 343, 352, 353, 355, 365, 427, 428, 430, 431, 537, 559, 570, 577, 584], "150": 365, "15334625083466732": 598, "15393162789707": 343, "155": 365, "156": 533, "16": [27, 31, 329, 331, 339, 343, 365, 425, 427, 428, 430, 432, 533, 556, 570, 609], "1617": 528, "162": 365, "1622": 528, "1649": 365, "167": 506, "168": 365, "169": 442, "1695": 365, "16gb": 365, "16mb": 438, "16xlarg": 365, "17": [325, 343, 365, 427, 428, 430, 600], "170e7d3": 365, "172": [27, 365], "174": [500, 501, 502], "175": 343, "176": [365, 533], "178": 365, "17t11": 325, "17t14": 325, "18": [322, 332, 343, 365, 427, 428, 430, 439, 442, 500, 549, 554, 558, 560, 563, 569, 588, 600, 603, 607], "180": 318, "1801": 569, "1859": 365, "19": [17, 22, 23, 32, 132, 315, 317, 322, 335, 343, 365, 427, 428, 430, 598, 603, 607], "190376": 343, "190836": 519, "193": 365, "1941": 565, "1953": 442, "1962": [511, 529, 530, 576], "1970": 131, "1973": [509, 511], "1977": 567, "19791209300479": 343, "198": 365, "1983": 504, "1986": [442, 566], "1988": 528, "1990": 554, "1993": 568, "1994": 521, "1995": 533, "1998": [475, 476], "1999": [442, 497, 498], "1e": [368, 437, 442, 496], "1e9": 368, "1f": 343, "1gb": [128, 355], "1gi": 33, "1l": 341, "2": [0, 6, 9, 10, 13, 14, 17, 18, 19, 20, 22, 23, 28, 31, 33, 34, 37, 45, 130, 131, 134, 154, 173, 175, 184, 216, 244, 263, 308, 311, 320, 328, 329, 330, 331, 332, 333, 338, 341, 343, 347, 349, 350, 352, 353, 354, 355, 356, 358, 361, 362, 365, 368, 369, 425, 428, 429, 430, 431, 432, 434, 439, 442, 444, 445, 446, 448, 456, 457, 461, 462, 465, 470, 471, 478, 479, 480, 483, 488, 489, 494, 496, 498, 500, 502, 503, 504, 506, 507, 508, 510, 511, 512, 516, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 544, 546, 548, 549, 550, 554, 555, 557, 559, 560, 562, 569, 570, 571, 572, 577, 579, 580, 584, 588, 589, 591, 592, 600, 601, 602, 604, 605, 608, 609, 610], "20": [12, 13, 27, 29, 32, 34, 329, 332, 341, 343, 346, 365, 368, 369, 427, 428, 430, 439, 496, 524, 525, 546, 548, 577, 590, 600, 601, 607, 608], "200": [47, 67, 75, 94, 95, 106, 110, 121, 134, 154, 173, 175, 181, 184, 191, 209, 244, 263, 265, 272, 274, 281, 299, 343, 425, 583, 593, 609], "2000": 533, "20000": 128, "20001": [427, 428, 430], "20003": [427, 428, 430], "20004": [427, 428, 430], "2001": [487, 500, 508, 513, 515, 523, 532], "2002": 510, "2003": [368, 442, 499, 506, 517, 525], "2004": [368, 531], "2005": [442, 518, 524], "2005k": 514, "2007": [442, 524, 570], "2008": [368, 496, 519], "2009": [530, 570], "201": [365, 573], "2010": [24, 365, 368, 442, 502, 569, 574], "2011": [325, 343, 510], "2012": [343, 536], "2013": [516, 536], "2014": [358, 442, 604], "2016": 526, "2017": [3, 12, 14, 34, 357, 534, 535, 600], "2019": [131, 570], "2020": [358, 604], "2021": [9, 359], "20210611151923": 590, "2021\u5f55\u7528": 606, "2023": [27, 47, 68, 598], "209": 524, "21": [27, 31, 47, 68, 325, 343, 365, 368, 427, 428, 430, 550, 590], "210": [325, 365, 573], "21009d6": 365, "2139": 365, "2147483647": [329, 590], "215": [365, 566], "215340": 426, "216": 524, "216172782113783808": 343, "216172782113783809": 343, "216172782113783810": 343, "216172782113783811": 343, "216172782113783812": 343, "216172782113783813": 343, "216172782113783814": 343, "216172782113783815": 343, "216172782113783816": 343, "216172782113783817": 343, "216172782113783819": 343, "216172782113783826": 343, "216172782113783836": 343, "216172782113783844": 343, "216172782113783864": 343, "216172782113783875": 343, "216172782113783882": 343, "216172782113783901": 343, "216172782113783910": 343, "216172782113783931": 343, "216172782113783932": 343, "216172782113783933": 343, "216172782113783935": 343, "216172782113783938": 343, "216172782113783956": 343, "216172782113783962": 343, "216172782113783971": 343, "216172782113783980": 343, "216172782113784011": 343, "216172782113784018": 343, "216172782113784038": 343, "216172782113784047": 343, "216172782113784057": 343, "216172782113784065": 343, "216172782113784068": 343, "216172782113784082": 343, "216172782113784091": 343, "216172782113784092": 343, "216172782113784100": 343, "216172782113784104": 343, "216172782113784105": 343, "216172782113784107": 343, "216172782113784108": 343, "216172782113784116": 343, "216172782113784122": 343, "216172782113784144": 343, "216172782113784153": 343, "216172782113784154": 343, "216172782113784161": 343, "216172782113784162": 343, "216172782113784167": 343, "216172782113784169": 343, "216172782113784171": 343, "216172782113784192": 343, "216172782113784193": 343, "216172782113784199": 343, "216172782113784207": 343, "216172782113784235": 343, "216172782113784242": 343, "216172782113784247": 343, "216172782113784250": 343, "216172782113784251": 343, "216172782113784252": 343, "216172782113784263": 343, "216172782113784267": 343, "216172782113784279": 343, "216172782113784291": 343, "216172782113784305": 343, "216172782113784315": 343, "216172782113784318": 343, "216172782113784328": 343, "216172782113784331": 343, "216172782113784333": 343, "216172782113784361": 343, "216172782113784363": 343, "216172782113784368": 343, "216172782113784374": 343, "216172782113784375": 343, "216172782113784376": 343, "216172782113784381": 343, "216172782113784400": 343, "216172782113784401": 343, "216172782113784403": 343, "216172782113784405": 343, "216172782113784431": 343, "216172782113784439": 343, "216172782113784473": 343, "216172782113784481": 343, "216172782113784483": 343, "216172782113784491": 343, "216172782113784498": 343, "216172782113784532": 343, "216172782113784537": 343, "216172782113784538": 343, "216172782113784555": 343, "216172782113784587": 343, "216172782113784593": 343, "216172782113784597": 343, "216172782113784598": 343, "216172782113784601": 343, "216172782113784613": 343, "216172782113784623": 343, "216172782113784629": 343, "216172782113784642": 343, "216172782113784657": 343, "216172782113784673": 343, "216172782113784688": 343, "216172782113784692": 343, "216172782113784693": 343, "216172782113784700": 343, "216172782113784707": 343, "216172782113784708": 343, "216172782113784709": 343, "216172782113784710": 343, "22": [134, 343, 365, 427, 428, 430, 439, 570, 588], "225": [487, 577], "22731319746904674": 30, "228": [343, 365], "229": 365, "23": [343, 427, 428, 430], "2307": 554, "233": [154, 244], "2339": 365, "23452": 603, "235": 365, "2393394": 554, "24": [31, 209, 299, 329, 343, 365, 427, 428, 430, 544, 562, 570], "24189255811275": 343, "245": 504, "25": [336, 343, 349, 353, 358, 365, 427, 428, 430, 499, 501, 504, 523, 570, 604], "250": 496, "251": 343, "2512": 442, "2529816": 570, "253": 328, "256": [128, 349, 353, 354, 355, 358, 365, 506, 566, 590, 604], "256gi": 27, "256mb": 354, "256mi": 584, "26": [325, 341, 343, 354, 365, 427, 428, 430, 526], "261": 365, "266": 328, "27": [339, 341, 343, 365, 427, 428, 430, 558], "2742": 365, "274877907299": 325, "274877907301": 325, "274877907302": 325, "28": [27, 341, 343, 347, 362, 365, 427, 428, 430, 574], "2822": 343, "283": 365, "288230376151711744": 343, "288230376151711797": 343, "288230376151711799": 343, "288230376151712472": 343, "288230376151712984": 343, "28t23": 343, "29": [341, 343, 427, 428, 430], "296": 365, "2d": [525, 526, 527, 577, 580], "2deg": 442, "2f": 442, "2g": 23, "2k": [534, 535], "2l": 341, "2m": [452, 530], "2n": 539, "2pm": [20, 577], "2r": 494, "2x": 363, "3": [2, 6, 9, 10, 13, 14, 17, 19, 20, 22, 23, 27, 30, 31, 32, 34, 37, 41, 46, 128, 131, 132, 154, 216, 244, 308, 311, 317, 320, 322, 325, 329, 330, 331, 332, 333, 338, 339, 341, 342, 343, 347, 350, 354, 355, 358, 362, 365, 368, 369, 428, 429, 430, 431, 434, 439, 440, 442, 444, 445, 446, 448, 453, 457, 461, 462, 478, 480, 483, 486, 492, 496, 497, 498, 500, 501, 502, 504, 508, 511, 512, 516, 517, 521, 523, 534, 535, 537, 539, 542, 545, 550, 554, 555, 558, 561, 564, 566, 569, 570, 571, 572, 577, 579, 580, 589, 592, 601, 604, 607, 608], "30": [47, 68, 343, 365, 427, 428, 430, 501, 546, 548, 553, 590, 608], "300": [504, 573], "3000": 332, "3000000": [128, 331, 332, 590], "30001": [427, 428, 430], "30002": [427, 428, 430], "30003": [427, 428, 430], "3029": 365, "306": 365, "31": [22, 23, 317, 325, 356, 427, 428, 430, 610], "31336": 437, "3142": 531, "316": 336, "319": 365, "32": [27, 339, 341, 365, 427, 428, 430, 438, 442, 588], "3201": 365, "324133": 442, "324140": 442, "32985348833887": 343, "32a": 328, "33": [30, 318, 341, 427, 428, 430, 567, 570], "3333336": 476, "3333444": 476, "334": [343, 365], "33403": 343, "33411": 343, "33d": 598, "34": [341, 343, 365, 427, 428, 430, 570], "342": [554, 577], "344": 343, "347": 365, "348": 504, "349": [349, 353, 358, 604], "35": [328, 341, 343, 365, 427, 428, 430, 437, 504, 554, 570], "3501": 365, "35mb": 333, "36": [343, 365, 427, 428, 430, 482, 562, 570, 602], "3600": 365, "360287970189640007": 343, "360287970189640008": 343, "360287970189640009": 343, "360287970189640010": 343, "360287970189640135": 343, "360287970189640462": 343, "360287970189645858": 343, "360287970189700805": 343, "360287970189718653": 343, "360287970189718655": 343, "362519": 426, "3638": 328, "3669": 328, "367": 365, "369": 554, "37": [343, 365, 427, 428, 430, 442, 570, 602], "370": 544, "37164": 343, "3747": 368, "375": 20, "3752": 368, "38": [343, 365, 427, 428, 430, 570, 602], "38416": 343, "389": 365, "39": [365, 427, 428, 430, 442, 570, 600, 602], "3a": 328, "3k": 343, "3nx6k7ph": 584, "3rd": 560, "3\u548c3": 608, "4": [6, 9, 10, 13, 17, 19, 20, 22, 27, 31, 128, 134, 154, 244, 307, 311, 314, 315, 320, 322, 330, 331, 333, 335, 338, 339, 341, 342, 343, 354, 355, 358, 365, 376, 425, 427, 428, 430, 431, 432, 442, 448, 453, 455, 456, 461, 462, 480, 482, 483, 492, 500, 503, 505, 512, 521, 523, 528, 537, 544, 547, 548, 554, 555, 561, 563, 570, 571, 572, 577, 579, 580, 584, 589, 590, 591, 592, 593, 600, 603, 604, 608], "40": [6, 15, 365, 427, 428, 430, 504, 570], "400": [67, 94, 95, 106, 110, 134, 154, 173, 181, 209, 244, 263, 272, 299, 583], "40000": 134, "403": 134, "404": [134, 154, 173, 181, 209, 244, 263, 272, 299], "405": 504, "409": [134, 154, 209, 244, 299], "4096": 588, "4096m": [4, 32, 41, 331, 348], "41": [343, 365, 427, 428, 430, 517, 570], "414": 343, "42": [37, 343, 365, 427, 428, 430, 500, 502, 512, 570], "425": 365, "43": [343, 427, 428, 430, 442, 544, 570, 600], "4307": [358, 604], "432": 343, "432345564227567616": 343, "432345564227569033": 343, "432345564227569357": 343, "432345564227570524": 343, "432345564227579434": 343, "432345564227582847": 343, "432345564227583365": 343, "43rd": 600, "44": [27, 365, 427, 428, 430, 570], "4409": 128, "449": 343, "45": [365, 427, 428, 430, 506], "450": 504, "452": 567, "453": 332, "454": [343, 365], "46": [427, 428, 430, 442, 564], "467": 365, "4676": 328, "47": [343, 354, 355, 365, 427, 428, 430], "473": 567, "48": [131, 325, 365, 427, 428, 430, 529, 530, 576], "483": 365, "486": [500, 501, 502], "49": [31, 343, 365, 427, 428, 430], "493": [497, 498], "496": 511, "4f": [354, 355], "4g": 348, "4gi": 584, "4mb": 130, "4mi": 584, "4\u7248\u672c\u517c\u5bb9\u7684": 608, "5": [10, 13, 19, 20, 31, 128, 134, 311, 322, 331, 333, 338, 341, 343, 349, 350, 352, 353, 354, 355, 358, 361, 365, 425, 428, 430, 431, 432, 434, 437, 442, 448, 453, 455, 461, 480, 483, 496, 500, 501, 502, 504, 505, 513, 515, 522, 523, 524, 525, 527, 528, 542, 543, 545, 546, 547, 548, 550, 551, 554, 556, 558, 560, 561, 567, 572, 577, 583, 584, 590, 592, 598, 603, 604, 608], "50": [343, 365, 524, 526, 527], "500": [37, 47, 67, 75, 94, 95, 106, 110, 121, 134, 154, 173, 181, 184, 191, 209, 244, 263, 272, 274, 281, 299, 496], "5000": [506, 590], "503": [173, 263], "5036": 365, "504403158265495552": 343, "504403158265495553": 343, "504403158265495554": 343, "504403158265495555": 343, "504403158265495556": 343, "504403158265495557": 343, "504403158265495558": 343, "504403158265495559": 343, "504403158265495560": 343, "504403158265495561": 343, "504403158265495562": 343, "504403158265495563": 343, "504403158265495564": 343, "504403158265495565": 343, "504403158265495566": 343, "504403158265495567": 343, "504403158265495568": 343, "504403158265495569": 343, "504403158265495570": 343, "504403158265495571": 343, "504403158265495572": 343, "504403158265495573": 343, "504403158265495574": 343, "504403158265495575": 343, "504403158265495576": 343, "504403158265495577": 343, "504403158265495578": 343, "504403158265495579": 343, "504403158265495580": 343, "504403158265495581": 343, "504403158265495582": 343, "504403158265495583": 343, "504403158265495584": 343, "504403158265495585": 343, "504403158265495586": 343, "504403158265495587": 343, "504403158265495588": 343, "504403158265495589": 343, "504403158265495590": 343, "504403158265495591": 343, "504403158265495592": 343, "504403158265495593": 343, "504403158265495594": 343, "504403158265495595": 343, "504403158265495596": 343, "504403158265495597": 343, "504403158265495598": 343, "504403158265495599": 343, "504403158265495600": 343, "504403158265495601": 343, "504403158265495602": 343, "504403158265495603": 343, "504403158265495604": 343, "504403158265495605": 343, "504403158265495606": 343, "504403158265495607": 343, "504403158265495608": 343, "504403158265495609": 343, "504403158265495610": 343, "504403158265495611": 343, "504403158265495612": 343, "504403158265495613": 343, "504403158265495614": 343, "504403158265495615": 343, "504403158265495616": 343, "504403158265495617": 343, "504403158265495618": 343, "504403158265495619": 343, "504403158265495620": 343, "504403158265495621": 343, "504403158265495622": 343, "504403158265496227": 343, "506": 511, "51": [365, 570], "512": [355, 431], "5122": 328, "512mi": 584, "52": [343, 570], "521": 365, "527": [497, 498], "53": [343, 365, 570], "54": [343, 365, 517, 570], "54336": 343, "55": [365, 476], "55555": 590, "5593": 365, "56": [47, 68, 343, 365, 476, 570], "560": 365, "567": 365, "57": 365, "570": 325, "576460752303435306": 343, "58": 512, "59": [325, 365], "59465": 343, "5961": 516, "5c": 328, "5ce160": 365, "5db59987f": 30, "5gi": 584, "5k": 536, "5pm": [20, 577], "6": [4, 10, 17, 18, 22, 31, 154, 244, 325, 332, 333, 341, 342, 343, 358, 365, 368, 426, 431, 437, 442, 461, 480, 509, 510, 511, 528, 542, 544, 550, 551, 554, 557, 561, 562, 570, 572, 577, 590, 592, 600, 603, 604, 608], "60": [365, 442, 570, 590], "600": [322, 365, 584, 603], "60001": 28, "604": 442, "60403": 365, "607c8e": 343, "60801": 365, "61": 365, "613": 328, "618475290625": 325, "618475290626": 325, "62": 365, "62586": 369, "63": [365, 513, 515], "633": 343, "63800": 28, "64": [332, 342, 350, 430, 431, 508, 588, 608], "6451": 365, "647": 365, "65": 365, "658": 365, "66": 365, "6619": 365, "67": [27, 365, 368], "6732": 510, "68": 365, "69": [365, 564, 570], "690": 343, "6946": 365, "6dd67c65fc": 598, "7": [2, 10, 20, 23, 27, 30, 31, 32, 46, 216, 322, 332, 341, 343, 365, 426, 432, 437, 444, 445, 457, 480, 542, 548, 550, 554, 555, 558, 560, 572, 577, 590, 592, 603, 607, 608], "70": [6, 15, 608], "7068": 328, "7077": 23, "708": 570, "71": [365, 442, 514, 518, 524], "713792": 442, "714": [20, 577], "717": 570, "72": 365, "720": 442, "72057594037927936": 343, "72057594037927939": 341, "72057594037927941": 341, "72057594037927973": 343, "72057594037927978": 343, "72057594037927979": 343, "72057594037927980": 343, "72057594037927981": 343, "72057594037927982": 343, "72057594037928092": 343, "72057594037928132": 343, "72057594037928134": 343, "72057594037928266": 343, "72057594037928495": 343, "72057594037928674": 343, "72057594037929052": 343, "72057594037929053": 343, "72057594037929055": 343, "72057594037929057": 343, "72057594037929060": 343, "72057594037929182": 343, "72057594037929246": 343, "72057594037929248": 343, "72057594037929365": 343, "72057594037929386": 343, "72057594037929419": 343, "72057594037929421": 343, "72057594037929431": 343, "72057594037929434": 343, "72057594037929437": 343, "72057594037929446": 343, "72057594037929447": 343, "72057594037929449": 343, "72057594037929450": 343, "72057594037929451": 343, "72057594037929452": 343, "72057594037929510": 343, "72057594037929517": 343, "72057594037929518": 343, "72057594037929519": 343, "72057594037929560": 343, "72057594037929583": 343, "72057594037929739": 343, "72057594037929961": 343, "72057594037929965": 343, "72057594037930242": 343, "72057594037930248": 343, "72057594037930250": 343, "72057594037930313": 343, "72057594037930366": 343, "72057594037930430": 343, "72057594037930526": 343, "72057594037930529": 343, "72057594037930532": 343, "72057594037930535": 343, "72057594037930536": 343, "72057594037930546": 343, "72057594037930685": 343, "72057594037930861": 343, "72057594037930870": 343, "72057594037930958": 343, "72057594037930963": 343, "72057594037930976": 343, "72057594037931240": 343, "72057594037931247": 343, "72057594037931256": 343, "72057594037931259": 343, "72057594037931260": 343, "72057594037931262": 343, "72057594037931266": 343, "72057594037931304": 343, "72057594037931349": 343, "72057594037931358": 343, "72057594037931366": 343, "72057594037931542": 343, "72057594037931543": 343, "72057594037931544": 343, "72057594037931545": 343, "72057594037931546": 343, "72057594037931547": 343, "72057594037931549": 343, "72057594037931550": 343, "72057594037931552": 343, "72057594037931554": 343, "72057594037931557": 343, "72057594037931560": 343, "72057594037931566": 343, "72057594037931574": 343, "72057594037931575": 343, "72057594037932114": 343, "72057594037932339": 343, "72057594037932389": 343, "72057594037932433": 343, "72057594037932435": 343, "72057594037932438": 343, "72057594037932440": 343, "72057594037932441": 343, "72057594037932473": 343, "72057594037932474": 343, "72057594037932479": 343, "72057594037932481": 343, "72057594037932482": 343, "72057594037932485": 343, "72057594037932489": 343, "72057594037932494": 343, "72057594037932501": 343, "72057594037932503": 343, "72057594037932505": 343, "72057594037932509": 343, "72057594037932511": 343, "72057594037932639": 343, "72057594037932878": 343, "72057594037932885": 343, "72057594037932886": 343, "72057594037932888": 343, "72057594037932976": 343, "72057594037933324": 343, "72057594037933861": 343, "72057594037934114": 343, "72057594037934231": 343, "72057594037934294": 343, "72057594037934297": 343, "72057594037934300": 343, "72057594037934302": 343, "72057594037934303": 343, "72057594037934308": 343, "72057594037934313": 343, "72057594037934315": 343, "72057594037934319": 343, "72057594037934380": 343, "72057594037934384": 343, "72057594037934547": 343, "72057594037934803": 343, "72057594037934804": 343, "72057594037934811": 343, "72057594037934813": 343, "72057594037934816": 343, "72057594037934821": 343, "72057594037934822": 343, "72057594037934823": 343, "72057594037934828": 343, "72057594037934829": 343, "72057594037934835": 343, "72057594037934837": 343, "72057594037934975": 343, "72057594037934976": 343, "72057594037934977": 343, "72057594037935005": 343, "72057594037935014": 343, "72057594037935015": 343, "72057594037935020": 343, "72057594037935032": 343, "72057594037935038": 343, "72057594037935045": 343, "72057594037935046": 343, "72057594037935146": 343, "72057594037935147": 343, "72057594037935148": 343, "72057594037935152": 343, "72057594037935157": 343, "72057594037935163": 343, "72057594037935166": 343, "72057594037935658": 343, "72057594037935660": 343, "72057594037935664": 343, "72057594037935670": 343, "72057594037935671": 343, "72057594037935672": 343, "72057594037935673": 343, "72057594037935674": 343, "72057594037935678": 343, "72057594037935679": 343, "72057594037935682": 343, "72057594037935683": 343, "72057594037935685": 343, "72057594037935686": 343, "72057594037935702": 343, "72057594037935703": 343, "72057594037935707": 343, "72057594037935708": 343, "72057594037935710": 343, "72057594037935711": 343, "72057594037935713": 343, "72057594037935714": 343, "72057594037935719": 343, "72057594037935720": 343, "72057594037935722": 343, "72057594037935724": 343, "72057594037935729": 343, "72057594037935730": 343, "72057594037935731": 343, "72057594037935734": 343, "72057594037935864": 343, "72057594037935879": 343, "72057594037936036": 343, "729": 341, "73": [343, 365, 523], "73m": 30, "74": [31, 365, 568], "75": [20, 343, 349, 352, 353, 358, 365, 442, 500, 501, 502, 504, 584, 604], "755": 322, "755914248304": 343, "76": 442, "7677": 365, "7687": [128, 132, 134, 216, 308, 317, 318, 319, 328, 329, 331, 335, 336], "7688": [128, 132], "777": [322, 365, 603], "7772": 365, "7777": [128, 132, 134, 216, 308, 317, 319], "7778": [128, 132], "78": [365, 496, 570], "787074": 343, "79": [365, 509, 511], "79b44f7b58": 598, "7br": 4, "7pp": 570, "8": [13, 20, 31, 32, 33, 35, 37, 46, 132, 134, 209, 216, 299, 307, 308, 317, 322, 329, 332, 336, 341, 343, 346, 349, 365, 368, 426, 480, 503, 522, 545, 554, 556, 562, 566, 572, 574, 577, 579, 590, 592, 603, 608], "80": [330, 365, 556], "807": 365, "8080": [45, 126, 128, 132, 315, 334, 590], "8081": [128, 132], "81": 570, "810": 570, "8101": 343, "8182": [134, 328, 329, 331, 342], "82": [31, 365], "824633725045": 343, "824633725780": 343, "8248": 343, "829": 365, "83": 365, "84": 365, "841": 341, "842": 365, "8443": 27, "85": [349, 352, 353, 358, 365, 368, 584, 604], "86": 365, "860": 512, "8603": 328, "8618": 365, "86400000": 134, "864691128455136658": 343, "8666": 365, "87": [318, 365, 568], "870": 365, "87299": 365, "88": [365, 509, 511], "89": 365, "893353201782": 343, "8g": [322, 354], "8gi": 354, "8x": 365, "8xlarg": 365, "9": [10, 31, 154, 244, 329, 332, 333, 341, 343, 358, 426, 442, 480, 482, 528, 546, 554, 567, 572, 607], "90": [324, 365], "9000": [356, 590, 610], "9001": 354, "9002": 354, "9003": 354, "9004": 354, "910": 512, "9134": 365, "92": [6, 442], "933091": 426, "9340": 512, "9345": 365, "93kantor_graph": 556, "94": 343, "9600": 28, "961": 325, "9676": 365, "97": 365, "98": 365, "986": 526, "99": [530, 608], "997163552113975": 33, "997255889378630": 33, "9997": 354, "9998": 354, "9999": 354, "9_0": 365, "9_1": 365, "9_2": 365, "9a": 328, "9bd8951e7da": 360, "9m46": 598, "9m53": 598, "A": [0, 6, 7, 9, 10, 24, 27, 28, 29, 37, 47, 128, 130, 131, 134, 263, 272, 307, 310, 314, 316, 319, 320, 325, 331, 334, 335, 337, 342, 343, 347, 349, 356, 357, 359, 360, 361, 362, 365, 367, 368, 369, 370, 377, 378, 380, 381, 382, 385, 388, 390, 397, 398, 402, 403, 412, 429, 430, 431, 434, 436, 439, 440, 441, 442, 444, 445, 446, 448, 449, 451, 453, 455, 456, 457, 459, 460, 461, 462, 465, 470, 471, 472, 475, 476, 477, 479, 480, 482, 486, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 512, 516, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 543, 545, 554, 565, 569, 570, 571, 572, 574, 575, 577, 579, 584, 588, 589, 590, 591, 592], "AND": [333, 337, 341, 358, 370], "AS": [337, 339, 574, 578], "And": [16, 18, 23, 29, 31, 36, 38, 325, 330, 332, 343, 356, 365, 368, 369, 430, 435, 580, 583, 584, 590], "As": [0, 7, 12, 13, 15, 16, 18, 20, 22, 24, 27, 38, 126, 128, 315, 318, 322, 330, 332, 333, 337, 343, 349, 350, 357, 361, 425, 427, 433, 434, 435, 506, 588, 589], "At": [6, 12, 14, 15, 20, 34, 37, 45, 216, 330, 342, 343, 426, 436, 590, 592], "BY": [337, 339], "Be": 333, "But": [17, 329, 343, 356, 364, 372, 577, 583], "By": [6, 13, 17, 20, 30, 36, 45, 128, 130, 132, 315, 317, 322, 325, 328, 333, 339, 341, 343, 344, 349, 356, 360, 362, 363, 426, 427, 442, 577, 586, 589, 597, 598], "For": [2, 4, 6, 9, 10, 12, 15, 16, 17, 20, 22, 29, 30, 35, 37, 41, 44, 45, 126, 128, 129, 131, 132, 133, 134, 184, 216, 274, 308, 311, 314, 315, 317, 318, 319, 322, 325, 328, 329, 330, 333, 337, 339, 341, 343, 346, 347, 350, 352, 356, 357, 358, 360, 361, 362, 368, 370, 376, 425, 426, 427, 428, 431, 433, 435, 437, 439, 442, 454, 475, 478, 480, 483, 506, 508, 510, 511, 516, 519, 520, 524, 525, 526, 527, 528, 539, 542, 571, 577, 581, 583, 584, 590, 592, 593, 598], "IN": [341, 359], "If": [0, 2, 4, 6, 7, 8, 13, 14, 15, 17, 20, 23, 27, 29, 30, 32, 33, 36, 37, 46, 126, 129, 130, 131, 134, 152, 184, 216, 242, 274, 281, 306, 308, 311, 314, 315, 317, 319, 322, 328, 329, 331, 332, 333, 336, 339, 341, 343, 349, 356, 358, 364, 368, 369, 372, 424, 426, 427, 431, 432, 435, 436, 438, 439, 440, 441, 442, 447, 448, 450, 457, 461, 462, 471, 472, 477, 478, 479, 480, 482, 483, 484, 486, 487, 489, 491, 492, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 534, 537, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 569, 572, 573, 575, 577, 579, 580, 583, 584, 586, 589, 590, 591, 597, 598], "In": [1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 28, 29, 32, 34, 37, 38, 45, 126, 128, 129, 130, 131, 134, 216, 308, 314, 316, 317, 318, 319, 322, 325, 327, 329, 330, 331, 332, 333, 336, 337, 339, 341, 342, 343, 345, 346, 347, 350, 352, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 368, 369, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 437, 438, 439, 442, 499, 528, 531, 534, 535, 537, 577, 580, 583, 586, 589, 590, 592, 594, 597], "It": [0, 2, 4, 6, 9, 10, 11, 12, 13, 15, 16, 24, 27, 29, 34, 36, 37, 41, 43, 130, 131, 134, 310, 311, 312, 318, 319, 322, 325, 328, 329, 330, 332, 333, 334, 336, 337, 339, 341, 342, 343, 346, 347, 353, 356, 358, 359, 360, 361, 362, 363, 364, 367, 368, 372, 418, 425, 426, 427, 431, 433, 435, 439, 440, 442, 446, 501, 505, 529, 530, 534, 537, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 558, 561, 563, 564, 569, 577, 584, 588, 589, 590, 591, 597, 598], "Its": [318, 320, 322, 359, 556, 589], "NOT": [337, 341, 589], "No": [47, 67, 75, 94, 95, 106, 110, 121, 130, 154, 173, 175, 181, 184, 191, 209, 244, 263, 265, 272, 274, 281, 299, 322, 341, 577], "Not": [47, 67, 75, 94, 95, 106, 110, 154, 173, 175, 181, 191, 209, 244, 263, 265, 272, 281, 299, 318, 577, 590], "ON": 31, "OR": [337, 339, 341, 370, 577], "On": [6, 27, 30, 37, 318, 330, 339, 341, 368, 511, 574, 589], "One": [20, 330, 337, 357, 361, 362, 363, 364, 368, 429, 431, 508, 517, 571], "Or": [15, 17, 19, 22, 29, 36, 41, 132, 134, 319, 336, 343, 356, 584, 600, 610], "Such": [6, 13, 316, 361, 364, 399, 404, 536, 545], "TO": 39, "That": [0, 27, 368, 436, 494, 537, 580, 592], "The": [0, 1, 2, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 27, 29, 31, 32, 34, 36, 37, 38, 41, 42, 43, 45, 46, 47, 67, 75, 94, 95, 106, 110, 121, 128, 129, 130, 131, 132, 134, 136, 143, 152, 153, 154, 166, 173, 175, 181, 184, 209, 216, 226, 233, 242, 243, 244, 256, 263, 265, 272, 274, 299, 306, 308, 309, 311, 314, 315, 317, 319, 320, 322, 328, 329, 331, 332, 333, 334, 336, 337, 338, 339, 341, 343, 344, 345, 346, 347, 349, 350, 352, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 378, 396, 397, 398, 401, 409, 411, 412, 419, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 439, 440, 441, 442, 446, 447, 451, 452, 453, 456, 457, 459, 461, 462, 467, 470, 475, 476, 477, 478, 479, 480, 483, 486, 489, 492, 494, 495, 496, 498, 499, 501, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 576, 577, 579, 580, 583, 584, 586, 589, 590, 591, 592, 593, 594, 597, 598, 600], "Their": 528, "Then": [2, 9, 14, 15, 16, 17, 19, 22, 23, 27, 29, 30, 33, 46, 134, 216, 308, 314, 319, 325, 329, 330, 335, 342, 343, 350, 352, 356, 357, 358, 425, 431, 571, 586, 590, 592], "There": [9, 10, 12, 34, 37, 38, 129, 322, 329, 330, 343, 358, 360, 361, 362, 368, 427, 430, 431, 433, 577, 583, 584, 589, 590], "These": [1, 4, 9, 15, 20, 24, 130, 131, 132, 318, 319, 329, 337, 347, 356, 357, 358, 360, 361, 362, 363, 431, 437, 589, 597], "To": [2, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 34, 36, 37, 45, 128, 129, 130, 132, 134, 216, 263, 308, 314, 315, 317, 318, 319, 322, 325, 329, 330, 333, 334, 343, 345, 346, 347, 348, 350, 352, 353, 356, 357, 358, 362, 364, 365, 368, 372, 425, 426, 427, 429, 431, 432, 433, 435, 437, 442, 455, 506, 508, 513, 515, 524, 527, 567, 571, 577, 579, 583, 584, 586, 589, 590, 593, 594, 597, 598], "WITH": [337, 341], "Will": 577, "With": [0, 4, 12, 19, 24, 34, 41, 216, 306, 308, 314, 328, 331, 339, 341, 343, 346, 351, 352, 357, 358, 359, 515, 588, 597], "_": [13, 30, 37, 335, 341, 356, 368, 439, 442, 577, 580, 600, 603, 605, 610], "__": [341, 342, 343, 358, 431, 604, 608], "__call__": 368, "__class__": 577, "__contains__": 577, "__del__": 368, "__enter__": 584, "__exit__": 584, "__getitem__": 577, "__init__": [306, 307, 310, 311, 312, 368, 425, 432, 439, 440, 441, 577, 578, 580, 584, 609], "__iter__": 577, "__len__": 577, "__main__": [354, 437], "__name__": [354, 437], "__next__": 428, "__src_vl": 589, "_adj_list": 589, "_build": 367, "_char": [163, 200], "_convert_arrow_to_dynam": [578, 580], "_e": [356, 439, 586, 610], "_encod": [425, 609], "_fetch_rang": [356, 610], "_initiate_upload": [356, 610], "_layer": 437, "_list_arrai": 589, "_list_iter": 589, "_p": 586, "_positive_sampl": [425, 609], "_project_to_simpl": [13, 16, 17, 22], "_receptive_fn": [425, 609], "_sample_se": [425, 609], "_src_vl": 589, "_success": 590, "_supervised_loss": [425, 609], "_upload_chunk": [356, 610], "a038f97": 365, "a1n_graph": 557, "a1tal_graph": 544, "a9": 442, "a_": 442, "a_k": 513, "aaa": 608, "aarch64": 349, "ab": [442, 500, 501, 502, 516, 524, 528, 569, 571], "abc": 486, "abi": 32, "abil": [6, 12, 34, 336, 339, 343, 350, 357, 590], "abl": [9, 24, 27, 216, 308, 329, 359, 430, 534, 589, 590], "about": [4, 7, 12, 14, 17, 30, 34, 37, 38, 46, 154, 175, 209, 314, 317, 329, 331, 332, 343, 344, 348, 349, 357, 362, 363, 367, 368, 431, 435, 436, 583, 584, 588, 593, 600], "abov": [4, 6, 7, 9, 13, 14, 15, 16, 19, 22, 27, 30, 32, 33, 129, 216, 311, 314, 325, 328, 329, 332, 339, 341, 343, 345, 349, 356, 360, 361, 425, 426, 427, 431, 435, 480, 496, 516, 539, 573, 583, 590, 592, 594, 598], "abovement": 14, "absenc": 333, "absolut": 13, "abstract": [6, 43, 325, 346, 350, 353, 357, 358, 359, 425, 426, 433, 435, 436, 591], "abstractbufferedfil": 610, "abstractbufferfil": 356, "abstractfilesystem": [356, 610], "acad": [529, 530, 576], "academ": [333, 353, 358, 604], "acc": 355, "acceler": [4, 27, 333, 589], "accept": [9, 47, 67, 75, 94, 95, 106, 110, 121, 154, 173, 175, 181, 184, 191, 209, 244, 263, 265, 272, 274, 281, 299, 442, 524, 528, 590, 591], "access": [4, 6, 12, 14, 27, 29, 30, 31, 38, 128, 132, 314, 316, 318, 319, 320, 322, 328, 329, 331, 336, 341, 342, 343, 347, 350, 356, 357, 359, 360, 361, 362, 426, 427, 428, 429, 430, 431, 436, 437, 439, 577, 580, 584, 586, 588, 589, 590, 591, 598, 610], "accessmod": 33, "accessor": 341, "accident": 37, "accommod": [328, 364, 590], "accompani": 341, "accomplish": [353, 358, 496], "accord": [12, 19, 36, 45, 322, 328, 329, 330, 336, 341, 343, 347, 356, 357, 361, 362, 367, 429, 431, 435, 496, 504, 516, 517, 586, 590], "accordingli": [360, 417], "account": [330, 361, 575, 608], "accumul": [24, 314, 350, 571], "accur": [14, 333, 336], "accuraci": [134, 333, 354, 355, 362], "achiev": [9, 12, 20, 24, 27, 34, 318, 343, 357, 360, 365, 586], "acid": [318, 363], "ack": 346, "acm": [442, 517, 568, 600], "acquir": [322, 335, 342], "acronym": 37, "across": [10, 14, 34, 35, 36, 317, 318, 334, 339, 354, 357, 359, 360, 364, 589, 591], "act": [328, 341, 425, 574, 577, 597, 609], "act_func": [349, 353, 358, 604], "acted_in": [129, 333], "action": 37, "activ": [6, 9, 23, 24, 30, 281, 314, 319, 332, 333, 352, 358, 362, 437, 584, 590], "actor": [0, 134, 343, 357, 554], "actual": [22, 23, 28, 125, 126, 127, 129, 131, 216, 308, 313, 315, 331, 333, 339, 341, 343, 350, 371, 373, 430, 528, 577, 580, 588, 598], "actual_degre": 506, "actual_edge_num": 321, "acut": 359, "acycl": [6, 359, 571], "ad": [4, 6, 9, 13, 15, 17, 19, 29, 37, 263, 311, 328, 333, 337, 346, 347, 362, 364, 365, 376, 377, 427, 439, 444, 445, 455, 513, 514, 515, 517, 571, 577, 586, 608, 610], "adam": [354, 355], "adamoptim": [349, 352, 353, 358, 437, 604], "adapt": [6, 22, 128, 314, 318, 330, 333, 362, 364, 365, 592, 593], "adaptor": 399, "add": [6, 15, 19, 20, 23, 29, 33, 37, 154, 209, 216, 244, 263, 299, 308, 309, 311, 315, 322, 328, 337, 341, 343, 356, 358, 367, 370, 377, 378, 387, 426, 437, 439, 444, 445, 446, 496, 503, 516, 534, 537, 539, 555, 577, 580, 584, 589, 590, 601, 604, 605, 610], "add_argu": [352, 354], "add_column": [33, 358, 367, 439, 600, 604, 605], "add_cycl": [445, 446], "add_edg": [19, 20, 263, 311, 325, 336, 356, 439, 455, 461, 462, 465, 470, 471, 577, 580, 604, 605, 610], "add_edges_from": [19, 20, 461, 577], "add_label": 581, "add_lib": [17, 22, 584], "add_n": 437, "add_nod": [19, 20, 577, 580], "add_nodes_from": [19, 20, 577], "add_path": [444, 446, 577], "add_star": [444, 445], "add_vertex": [263, 311, 590], "add_vertic": [13, 325, 336, 356, 439, 577, 580, 581, 604, 605, 610], "add_weighted_edges_from": [20, 461, 577], "addargumentsitem": 184, "addcolumn": 367, "addcontactpoint": 342, "adddatatoexistedelabel": 367, "adddatatoexistedvlabel": 367, "addedg": [216, 309], "addedgerespons": 154, "addit": [1, 4, 6, 9, 10, 12, 15, 18, 20, 24, 32, 34, 37, 128, 129, 134, 216, 317, 319, 325, 330, 331, 332, 333, 337, 339, 341, 343, 345, 346, 347, 350, 356, 359, 365, 387, 403, 426, 427, 428, 429, 439, 571, 577, 590, 594], "addition": [9, 12, 14, 36, 131, 333, 336, 337, 347, 353, 357, 359, 361, 364, 433, 442, 589, 590, 598], "addlabelstofrag": 367, "addlabelstofragmentasfragmentgroup": 367, "addpropertiesitem": [154, 209], "addr": [2, 29, 370, 584], "address": [2, 9, 14, 17, 23, 31, 317, 322, 333, 339, 354, 357, 362, 590, 608], "addvertex": [216, 309], "addvertexrequestitem": 209, "addvertexrespons": 209, "adher": [14, 35, 131, 334, 589], "adj": [20, 370, 442, 577], "adj_dict": 577, "adj_it": 577, "adj_list": 589, "adj_list_t": [321, 367], "adj_lsit": 589, "adjac": [0, 10, 16, 20, 24, 341, 343, 362, 368, 428, 433, 442, 465, 498, 522, 540, 555, 569, 570, 577, 578, 589], "adjacency_spectrum": 442, "adjacencylist": 555, "adjanc": 540, "adjedgeattr": 577, "adjlist": [17, 367, 370, 588, 600], "adjlist_inner_dict_factori": 577, "adjlist_outer_dict_factori": 577, "adjlistdict": 577, "adjust": [9, 12, 128, 322, 339], "admin": [128, 132, 133, 134, 281, 306, 311, 317, 318, 333, 439, 590], "admin_endpoint": 306, "admin_port": 134, "admin_uri": 311, "administr": [315, 554], "adminservic": [128, 133], "adopt": [9, 128, 318, 333, 364, 429, 590], "adv": 574, "advanc": [6, 7, 15, 45, 330, 333, 349, 350, 359, 523], "advantag": [2, 330, 333, 346, 356, 363, 364, 593], "advis": 339, "aeb": [550, 559], "affect": [9, 13, 30, 36, 37, 577], "affili": [496, 604], "aforement": [2, 308, 356, 360, 362, 426, 431, 590], "after": [4, 6, 9, 14, 15, 17, 18, 20, 22, 24, 29, 32, 33, 34, 45, 126, 129, 216, 306, 308, 314, 315, 325, 333, 334, 336, 339, 341, 347, 359, 360, 362, 368, 369, 370, 380, 425, 426, 427, 428, 435, 436, 437, 442, 539, 550, 569, 577, 581, 583, 584, 586, 589, 590, 591, 598, 600], "afterward": [308, 590], "ag": [30, 33, 45, 129, 130, 131, 173, 209, 216, 263, 272, 299, 308, 330, 339, 341, 343, 347, 362, 425, 426, 439, 583, 590, 598, 608, 609], "again": [24, 322, 341, 356, 592, 597], "against": [4, 14, 37, 331, 368, 559], "age_cnt": 339, "age_sum": 339, "agent": 39, "agg_typ": 352, "aggr_typ": 370, "aggreg": [9, 330, 337, 344, 362, 370, 425, 431, 433, 437, 589, 608], "aggregate_fn": 437, "aggregate_polici": 367, "aggregatefunc": 341, "aggregatepolici": 367, "agnost": 589, "agreement": 574, "ahead": [134, 359, 586], "ai": 429, "aim": [0, 22, 128, 318, 343, 353, 359, 360, 361, 362, 364], "aka": 592, "aki": 531, "akin": 134, "al": [368, 574], "al_sz": 589, "alan": 510, "albeit": 131, "album": 343, "aldou": [478, 489], "alert": [46, 47], "alert_nam": 82, "alert_typ": 47, "alert_type_exampl": 47, "alertapi": 46, "algebra": [330, 566], "algo": [15, 16, 17, 22, 23, 368, 376], "algor": 500, "algorithm": [3, 4, 7, 8, 12, 13, 14, 20, 24, 30, 128, 319, 322, 325, 330, 333, 345, 347, 350, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 372, 427, 430, 431, 433, 439, 487, 496, 499, 500, 508, 509, 510, 511, 512, 516, 517, 518, 519, 524, 529, 530, 533, 534, 536, 537, 560, 569, 574, 577, 578, 580, 582, 583, 593], "algorithmica": 512, "alia": [423, 425, 431, 577, 584, 609], "alias": 341, "alibaba": [4, 17, 22, 23, 29, 31, 32, 36, 46, 129, 132, 134, 154, 173, 175, 181, 184, 191, 209, 216, 308, 314, 331, 333, 334, 346, 357, 359, 362, 363, 372, 432, 435, 600, 602, 610], "alibabacloud": 365, "alibabacloud_cs20151215": 601, "alibabacloud_ecs20140526": 601, "alibabacloud_vpc20160428": 601, "alic": 590, "align": [54, 128, 129, 130, 131, 142, 232, 315, 330, 341, 350, 361, 425, 428, 429, 528, 589], "aliv": 30, "aliyun": [7, 27, 32, 332, 348, 349, 365, 584, 601], "aliyunc": [4, 23, 27, 29, 31, 32, 41, 45, 129, 134, 331, 333, 348, 354, 356, 432, 590, 601, 602, 610], "all": [4, 6, 9, 10, 12, 13, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 35, 37, 45, 46, 47, 67, 75, 94, 95, 106, 110, 121, 126, 128, 130, 131, 134, 154, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 274, 281, 299, 308, 309, 311, 315, 317, 318, 319, 322, 328, 329, 330, 332, 333, 337, 339, 341, 342, 343, 348, 350, 352, 354, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 370, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 442, 446, 447, 449, 450, 454, 456, 471, 472, 476, 477, 480, 482, 483, 487, 496, 505, 514, 520, 534, 535, 537, 539, 563, 571, 572, 575, 577, 584, 588, 589, 590, 593, 598], "all_pairs_shortest_path": 19, "all_pairs_shortest_path_length": [0, 34], "all_v": [341, 343, 608], "all_v_": 341, "alloc": [128, 322, 339, 348, 352], "allon": 524, "allow": [6, 11, 12, 20, 22, 24, 27, 30, 36, 43, 128, 129, 131, 134, 216, 308, 309, 315, 317, 318, 319, 325, 328, 329, 330, 333, 336, 337, 339, 341, 343, 344, 345, 346, 350, 356, 357, 358, 360, 361, 362, 363, 364, 426, 431, 501, 506, 508, 511, 516, 519, 524, 569, 577, 586, 589, 594, 597], "allow_cast": [99, 270], "allowcast": 179, "almost": [6, 22, 343, 512, 589], "alon": [36, 330, 339, 597], "along": [0, 6, 10, 20, 24, 31, 334, 339, 341, 347, 370, 427, 431, 437, 571, 577, 590, 591], "alpha": [0, 343, 368, 442, 516, 517, 528, 569], "alphabet": [369, 583], "alreadi": [2, 8, 20, 23, 24, 27, 29, 30, 36, 37, 41, 126, 154, 209, 244, 299, 315, 325, 331, 333, 343, 350, 356, 358, 425, 575, 577, 610], "already_exist": 134, "also": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 19, 20, 22, 23, 27, 29, 30, 32, 34, 36, 37, 38, 45, 128, 129, 130, 131, 133, 134, 216, 308, 314, 315, 316, 317, 318, 319, 322, 325, 328, 329, 330, 333, 336, 339, 341, 343, 346, 349, 351, 352, 357, 358, 359, 360, 362, 364, 365, 367, 368, 370, 372, 425, 426, 427, 429, 432, 433, 434, 437, 439, 440, 442, 477, 496, 521, 523, 524, 528, 547, 552, 557, 569, 571, 575, 577, 580, 583, 584, 586, 588, 589, 590, 593, 594, 600], "alter": [341, 577], "altern": [4, 131, 333, 334, 337, 505, 524, 528, 577, 589, 590], "although": [9, 12, 14, 22, 34, 134, 184, 216, 274, 308, 325, 333, 358, 372, 476, 589, 590], "alwai": [6, 45, 343, 352, 369, 473, 474, 513, 515, 534, 537, 571, 589, 597], "am": 570, "amd": 433, "amd64": [45, 132], "amer": [497, 498], "american": 442, "amin": 512, "among": [9, 131, 134, 311, 328, 330, 343, 357, 364, 367, 436, 442, 571], "amount": [325, 342, 348, 362, 429, 431, 433], "amplifi": 359, "an": [0, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 27, 29, 30, 31, 32, 34, 37, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 184, 216, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 307, 308, 310, 311, 312, 314, 315, 318, 320, 322, 325, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 367, 368, 369, 372, 376, 379, 380, 381, 382, 383, 384, 386, 387, 389, 392, 394, 395, 396, 397, 398, 399, 402, 403, 404, 407, 408, 409, 411, 412, 420, 425, 426, 427, 429, 430, 431, 433, 434, 436, 437, 439, 441, 442, 453, 454, 459, 464, 465, 471, 472, 474, 475, 476, 478, 481, 482, 483, 484, 486, 487, 489, 491, 492, 495, 497, 498, 506, 508, 509, 510, 512, 513, 516, 517, 518, 519, 523, 524, 525, 526, 527, 528, 533, 534, 535, 536, 537, 538, 542, 544, 550, 555, 559, 562, 563, 567, 569, 570, 571, 572, 574, 575, 577, 580, 581, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 597], "anaconda": [322, 603], "analog": 368, "analysi": [2, 7, 8, 11, 13, 330, 333, 342, 343, 346, 356, 362, 363, 365, 366, 368, 530], "analyst": 357, "analyt": [0, 1, 5, 8, 12, 14, 15, 16, 17, 18, 23, 27, 32, 36, 37, 38, 41, 322, 343, 345, 359, 361, 363, 364, 366, 370, 372, 375, 380, 439, 577, 582, 590, 593, 594, 600], "analytical_engin": [4, 15, 17, 31, 36, 372, 600], "analyticalserv": 367, "analyz": [0, 7, 13, 19, 27, 328, 342, 357, 358, 360, 361, 363, 431, 589], "andr": 554, "andrea": 496, "andrew": 487, "ani": [0, 2, 4, 17, 19, 20, 22, 24, 27, 30, 33, 34, 36, 37, 38, 45, 47, 75, 94, 95, 106, 128, 129, 134, 175, 184, 191, 216, 263, 265, 274, 281, 308, 311, 314, 329, 330, 332, 334, 337, 339, 341, 342, 343, 356, 357, 358, 360, 361, 364, 366, 367, 369, 378, 385, 429, 440, 441, 442, 453, 457, 472, 496, 501, 503, 506, 508, 524, 526, 528, 577, 580, 583, 589, 597], "ann": 510, "annal": 526, "annot": 311, "annual": 517, "anonym": [431, 569], "anoth": [6, 9, 10, 20, 36, 131, 317, 330, 341, 343, 356, 357, 358, 362, 370, 506, 539, 577, 589, 592, 593], "answer": [14, 34, 37, 322, 336, 357, 590], "anthropolog": 567, "anti": [128, 337, 357, 361, 364], "antlr_gremlin_calcit": [134, 329], "antlr_gremlin_travers": 329, "antoni": 524, "antrun": 372, "anymor": 33, "anyth": 343, "anywher": 328, "aosp": 35, "apach": [7, 17, 22, 23, 31, 327, 333, 339, 342, 345, 346, 357, 358, 361, 588, 594, 600, 602, 606], "apart": [314, 356, 524], "api": [4, 8, 15, 16, 18, 22, 24, 30, 34, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 133, 134, 184, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 314, 317, 320, 325, 327, 333, 338, 346, 357, 363, 366, 372, 378, 425, 427, 429, 430, 431, 435, 441, 577, 584, 588, 589, 590, 591, 600, 611], "api_cli": [46, 47, 67, 75, 94, 95, 106, 110, 121, 584], "api_inst": [46, 47, 67, 75, 94, 95, 106, 110, 121], "api_kei": 336, "api_respons": [46, 47, 67, 75, 94, 95, 106, 110, 121, 590], "api_response_with_cod": 225, "api_response_with_code_dict": 225, "api_response_with_code_form_dict": 225, "api_response_with_code_inst": 225, "apicli": [46, 47, 67, 75, 94, 95, 106, 110, 121, 184, 584], "apiexcept": [46, 47, 67, 75, 94, 95, 106, 110, 121, 184, 310, 312], "apirespons": [310, 312], "apiresponsewithcod": [216, 309], "apiserv": 317, "apivers": [27, 33, 354], "apoc": 333, "app": [4, 15, 16, 17, 18, 33, 132, 314, 369, 370, 372, 377, 380, 403, 409, 412, 426, 439, 582, 583, 589, 600], "app_asset": [368, 380, 386], "app_bas": 314, "app_class_nam": 600, "app_cont": 314, "app_nod": 368, "app_path": 314, "app_t": 367, "app_test": 4, "app_util": 314, "appasset": [15, 18, 375, 376, 380, 582, 600], "appbas": 367, "appdagnod": [368, 403, 409], "appear": [322, 330, 343, 368, 482, 484, 486, 489, 491, 518, 519, 577, 603], "append": [321, 343, 352, 353, 354, 355, 358, 370, 425, 436, 437, 508, 571, 604, 609], "appentri": 367, "appfilecont": 314, "appfilepath": 314, "appfram": 367, "appl": [32, 322, 332, 577, 601, 603, 607], "appli": [0, 6, 9, 10, 12, 13, 24, 27, 33, 134, 319, 329, 330, 333, 341, 345, 347, 357, 358, 360, 364, 519, 526, 542, 569, 586, 589, 590, 592, 594], "applic": [0, 1, 4, 6, 8, 10, 11, 13, 14, 24, 34, 39, 47, 67, 75, 94, 95, 106, 110, 121, 154, 173, 175, 181, 191, 209, 216, 244, 263, 265, 272, 281, 299, 308, 316, 317, 318, 322, 329, 330, 333, 334, 335, 342, 344, 346, 347, 359, 360, 361, 362, 365, 367, 368, 370, 380, 429, 508, 532, 588, 598], "approach": [37, 128, 318, 333, 336, 339, 346, 347, 357, 359, 361, 362, 430, 506, 519, 574, 589], "appropri": [9, 27, 41, 130, 131, 330, 333, 334, 347, 357, 362, 425], "approv": 37, "approxim": [6, 333, 496, 569], "app\u7684\u7c7b\u7684\u5168\u540d": 600, "apt": [32, 432], "ar": [0, 1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 37, 38, 46, 47, 67, 75, 94, 95, 106, 110, 121, 128, 129, 130, 131, 132, 134, 154, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 274, 281, 299, 306, 308, 309, 311, 314, 316, 317, 318, 319, 322, 325, 328, 329, 330, 331, 333, 334, 336, 337, 339, 341, 342, 343, 346, 347, 348, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 372, 375, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 442, 451, 452, 453, 466, 467, 472, 476, 477, 478, 480, 481, 482, 483, 484, 486, 487, 488, 489, 491, 492, 495, 496, 499, 500, 501, 502, 504, 505, 506, 508, 509, 510, 511, 512, 516, 520, 522, 523, 524, 525, 526, 527, 528, 532, 534, 536, 538, 539, 542, 560, 569, 570, 571, 572, 573, 577, 580, 583, 584, 586, 588, 589, 590, 591, 593, 597, 598, 610], "arallel": 359, "arbitrari": [6, 341, 343, 359, 429, 504, 508, 524, 525, 526, 527, 577, 580, 590, 608], "arboresc": 571, "arc": 367, "arch": 45, "archimedean": [562, 563], "architectur": [3, 9, 45, 126, 128, 134, 317, 318, 334, 357, 362, 368], "archiv": [23, 357, 588, 608], "area": [9, 15, 318, 336, 528, 574], "arg": [15, 154, 173, 175, 181, 184, 191, 209, 216, 314, 334, 352, 354, 367, 368, 369, 370, 403, 421, 428, 429, 430, 431, 434, 437, 441, 584], "argmax": [349, 353, 354, 355, 358, 604], "argpars": [352, 354], "argsnum": 367, "argsunpack": 367, "argtypeat": 367, "argument": [13, 23, 30, 134, 183, 273, 274, 341, 343, 350, 354, 356, 442, 444, 445, 446, 475, 483, 513, 520, 524, 525, 526, 527, 528, 555, 577, 580, 583, 584, 591, 600], "argumentpars": [352, 354], "argv": 437, "ari": [477, 487], "aric": [510, 524], "aris": [134, 545], "arithmet": [330, 341, 343], "ark": 341, "arm": [32, 134], "arm64": [132, 317], "around": [343, 440], "arrai": [13, 17, 154, 209, 307, 321, 337, 347, 356, 362, 367, 368, 369, 428, 429, 431, 434, 437, 577, 580, 592, 600], "arrang": 431, "array_": [356, 610], "array_v": [356, 610], "arraylist": 154, "arraytyp": [321, 367], "arriv": 357, "arrow": [31, 130, 321, 367, 379, 392, 439, 580], "arrow_projected_fragment_impl": 367, "arrow_properti": [15, 30, 379, 580], "arrowflattenfrag": 13, "arrowfrag": [13, 16, 367, 591], "arrowfragmentappend": 367, "arrowfragmentgroup": 591, "arrowfragmentload": 367, "arrowprojectedfrag": [13, 15, 16, 367, 376], "arrowprojectedfragmentbas": 367, "arrowprojectedvertexmap": 367, "arrowprojectfrag": 13, "arrowproperti": [377, 439], "arrowvertexmap": 367, "art": [34, 346, 360, 363, 365], "artial": 359, "articlerank": 6, "artifact": [4, 17, 23, 29, 36, 331, 333, 348], "artifactid": [17, 23, 216, 333, 600], "arxiv": [354, 355, 442, 485, 500, 501, 502, 516, 569], "as_default": [418, 584], "as_str": 586, "as_view": [20, 473, 474, 577], "asc": [341, 343], "ascend": [341, 343], "ask": [37, 327], "aslist": [154, 209], "aspect": [330, 343, 364], "assembl": [14, 34, 330, 359, 360, 367, 439], "assembli": [36, 331, 334], "assert": [154, 209, 244, 263, 265, 272, 274, 281, 299, 308, 314, 342, 368, 589, 590], "assess": [328, 362, 437, 554], "asset": 368, "assign": [0, 7, 9, 15, 18, 20, 36, 37, 134, 319, 329, 339, 348, 356, 358, 360, 362, 367, 368, 370, 442, 496, 504, 506, 508, 510, 524, 527, 532, 577, 580, 583, 586, 589, 590, 610], "assist": [308, 331, 338, 360], "associ": [4, 6, 9, 29, 129, 131, 333, 337, 341, 362, 511, 523, 569, 571, 577, 584, 589, 590], "assort": 368, "assum": [8, 23, 27, 30, 308, 314, 329, 340, 343, 351, 358, 426, 439, 475, 536, 575, 577, 584, 588, 589, 604], "assumpt": 589, "ast": 590, "astext": 334, "asymmetr": 359, "asynchron": 347, "at_user_id": [56, 83], "atla": 578, "atlasview": 577, "atom": [31, 590], "atomic_min": 14, "attach": [20, 367, 426, 513, 516], "attain": 37, "attempt": [184, 274, 325, 329, 360, 361, 364, 577], "attent": [325, 362, 431], "attenu": [0, 442], "attr": [397, 398, 412, 431, 444, 445, 446, 577, 580], "attr_delimit": [425, 426, 427, 609], "attr_typ": [425, 426, 427, 437, 609], "attract": 325, "attrdict": 577, "attribut": [15, 19, 131, 339, 350, 353, 358, 360, 362, 367, 368, 401, 412, 427, 428, 430, 433, 437, 438, 441, 442, 444, 445, 446, 461, 462, 471, 483, 496, 501, 520, 524, 525, 526, 527, 528, 531, 532, 533, 567, 569, 571, 574, 575, 577, 578, 580, 586], "attribute_assort": [0, 34], "attribute_assortativity_coeffici": [368, 600], "attrnam": [471, 608], "attrvalu": [412, 439, 608], "atyp": 427, "audit": 343, "auth": [331, 335, 442, 590], "authent": [216, 309, 331, 335, 363, 590], "author": [0, 27, 44, 133, 353, 358, 368, 442, 496, 584, 604], "author_affiliated_with_institut": 604, "author_writes_pap": 604, "authorit": 442, "auto": [6, 14, 16, 34, 314, 321, 343, 370, 586, 589, 591], "auto_reus": 437, "autoconf": 432, "autom": [9, 29, 359], "automak": 432, "automat": [6, 9, 12, 14, 34, 46, 128, 130, 318, 328, 329, 330, 333, 335, 339, 342, 346, 356, 357, 360, 361, 362, 364, 369, 437, 439, 577, 590, 592, 593, 610], "automorph": [476, 549], "autonom": [128, 574, 576], "autopct": 343, "auttenu": 368, "auxiliari": [6, 15, 16, 343], "avail": [17, 23, 29, 30, 41, 129, 130, 216, 263, 308, 316, 317, 325, 333, 334, 336, 337, 339, 342, 350, 356, 359, 365, 368, 424, 437, 525, 526, 527, 577, 584, 586, 589, 600], "averag": [337, 341, 353, 358, 368, 442, 496], "average_clust": [442, 578], "average_degre": 496, "average_degree_assort": 34, "average_degree_connect": [0, 368, 600], "average_shortest_path_length": [368, 442, 578, 600], "avg": [328, 337, 341, 442], "avg_clust": [368, 600], "avg_scor": 439, "avoid": [4, 13, 339, 342, 589, 590], "aw": [346, 365, 601], "awai": 343, "await": 37, "awar": [12, 37, 128, 322, 329, 333, 341, 359], "award": [343, 600], "awk": 329, "awkward": 6, "ax": 442, "axi": [343, 367, 368, 369, 384, 408, 437, 583], "b": [4, 17, 18, 22, 37, 134, 333, 337, 341, 343, 431, 486, 504, 517, 523, 524, 528, 533, 534, 535, 537, 565, 573, 577, 600, 608], "b2": 31, "b6biu": 556, "back": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 343, 346, 352, 435, 589, 597], "backend": [9, 27, 29, 334, 346, 349, 354, 357, 358, 362, 439, 577, 584, 591, 604], "background": [12, 324], "backtrack": 0, "backup": [584, 590], "backward": [354, 355, 362, 431, 528, 584], "bad": [67, 94, 95, 106, 110, 154, 181, 209, 244, 272, 299, 333], "badrequest": [173, 263], "bag": 437, "balanc": [12, 427, 477], "baldesi": 569, "baoyu": 336, "bar": 577, "barbel": [478, 489], "bareregist": 367, "barrat": 368, "barrier": [333, 354], "barth\u00e9lemi": 368, "base": [0, 4, 6, 9, 11, 12, 13, 14, 18, 32, 34, 46, 128, 130, 131, 133, 134, 314, 318, 325, 328, 329, 330, 331, 333, 334, 336, 339, 341, 343, 346, 350, 357, 358, 359, 360, 361, 362, 365, 367, 368, 369, 391, 397, 425, 427, 429, 431, 432, 433, 442, 513, 552, 567, 577, 589, 590, 594, 600, 609], "base64": [334, 441], "base64str": 334, "base_edge_typ": [48, 226], "base_edge_type_dict": [48, 226], "base_edge_type_form_dict": 226, "base_edge_type_from_dict": 48, "base_edge_type_inst": [48, 226], "base_edge_type_vertex_type_pair_relations_inn": [49, 227], "base_edge_type_vertex_type_pair_relations_inner_dict": [49, 227], "base_edge_type_vertex_type_pair_relations_inner_form_dict": 227, "base_edge_type_vertex_type_pair_relations_inner_from_dict": 49, "base_edge_type_vertex_type_pair_relations_inner_inst": [49, 227], "base_edge_type_vertex_type_pair_relations_inner_x_csr_param": [50, 228], "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_dict": [50, 228], "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_form_dict": 228, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_from_dict": 50, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_inst": [50, 228], "base_property_meta": [51, 229], "base_property_meta_dict": [51, 229], "base_property_meta_form_dict": 229, "base_property_meta_from_dict": 51, "base_property_meta_inst": [51, 229], "base_vertex_typ": [52, 230], "base_vertex_type_dict": [52, 230], "base_vertex_type_form_dict": 230, "base_vertex_type_from_dict": 52, "base_vertex_type_inst": [52, 230], "base_vertex_type_x_csr_param": [53, 231], "base_vertex_type_x_csr_params_dict": [53, 231], "base_vertex_type_x_csr_params_form_dict": 231, "base_vertex_type_x_csr_params_from_dict": 53, "base_vertex_type_x_csr_params_inst": [53, 231], "basecontextdagnod": [369, 439], "basedir": 333, "baseedgetyp": [46, 216, 309], "baseedgetypevertextypepairrelationsinn": [46, 48, 59, 85, 136, 143, 166, 216, 226, 233, 256, 263, 309, 590], "baseedgetypevertextypepairrelationsinnerxcsrparam": [46, 49, 137, 216, 227, 309], "basel": 521, "basepropertymeta": [46, 216, 309], "basevertextyp": [46, 216, 309], "basevertextypexcsrparam": [46, 52, 66, 93, 140, 150, 172, 216, 230, 240, 262, 309], "bash": [31, 134, 333, 341, 354, 590, 598, 602], "basic": [13, 16, 20, 45, 129, 130, 134, 333, 361, 425, 428, 433, 435, 436, 437, 496, 506, 511, 583], "batagelj": 442, "batch": [9, 12, 19, 47, 67, 130, 331, 342, 347, 350, 354, 355, 359, 362, 425, 428, 430, 431, 433, 435, 437, 441, 590, 609], "batch_siz": [130, 350, 352, 354, 355, 425, 429, 430, 431, 434, 437, 593, 609], "batchgraph": 347, "bayati": 512, "bc": 483, "becaus": [4, 37, 330, 336, 339, 343, 362, 425, 428, 442, 572, 589, 590], "becom": [24, 325, 343, 350, 577, 589, 590], "been": [12, 17, 23, 24, 28, 29, 33, 37, 45, 134, 216, 308, 314, 319, 322, 328, 330, 331, 332, 333, 336, 341, 343, 345, 347, 357, 359, 360, 361, 362, 364, 368, 417, 429, 431, 439, 440, 442, 496, 519, 569, 581, 594], "befor": [0, 4, 17, 22, 23, 27, 29, 30, 37, 126, 128, 129, 131, 134, 308, 314, 315, 319, 333, 336, 341, 343, 350, 352, 367, 368, 372, 425, 431, 438, 477, 479, 480, 482, 484, 487, 489, 491, 492, 495, 506, 508, 509, 511, 513, 514, 515, 521, 522, 523, 529, 530, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 572, 579, 584, 586, 589, 590, 592], "beforehand": 30, "begin": [4, 15, 16, 30, 134, 216, 308, 311, 321, 325, 336, 337, 340, 343, 358, 369, 370, 516, 583, 589], "beginn": [37, 361], "behav": 577, "behavior": [24, 128, 134, 341, 343, 356, 370, 584], "behind": [34, 352, 589, 592, 597, 598], "beij": [23, 29, 31, 347, 362, 426, 590, 601], "being": [0, 128, 131, 134, 333, 339, 350, 361, 439, 476, 506, 586, 589, 591], "bell": 478, "bellman": [360, 442], "belong": [343, 362, 368, 369, 370, 439, 567, 570, 577, 583, 590], "belongs_to": 608, "below": [9, 10, 12, 20, 34, 35, 36, 37, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 128, 130, 134, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 328, 333, 334, 341, 350, 357, 358, 360, 361, 362, 365, 426, 429, 431, 434, 437, 476, 506, 508, 542, 577, 584, 590], "bench": [328, 333], "benchark": 328, "benchmark": [4, 34, 318, 327, 339, 343, 346, 360, 362, 364, 496], "benefit": [128, 342, 356, 360, 589], "bernoulli": 569, "besid": [6, 10, 38, 333, 337, 436, 437, 590], "best": [0, 16, 314, 357, 359, 361, 364, 365, 368, 577, 600], "beta": [0, 368, 442, 517, 528], "better": [3, 8, 12, 20, 24, 29, 34, 329, 330, 333, 343, 345, 362, 364, 584, 590, 594], "between": [4, 6, 9, 10, 12, 13, 18, 19, 45, 131, 134, 308, 319, 322, 327, 328, 330, 333, 337, 343, 344, 347, 360, 362, 367, 368, 426, 427, 429, 431, 437, 442, 499, 500, 501, 504, 510, 516, 517, 519, 523, 524, 525, 526, 528, 531, 533, 534, 535, 537, 542, 572, 574, 577, 589, 590, 597], "betweenness_centr": [0, 34, 442], "beverlei": 554, "beyond": [6, 24, 359, 363, 537], "bf": [0, 15, 17, 34, 365, 368, 600], "bf02289026": 442, "bfs_edg": [442, 578], "bfs_type": 15, "bfsflash": 15, "bfstest": 23, "bgp": 574, "bi": [328, 343, 360, 363], "bi_queri": 328, "bia": 517, "bias": [333, 341], "biconnect": 6, "bidirect": 574, "big": [3, 6, 12, 37, 345, 359, 594], "bigcup": 539, "bigint": 426, "biject": [368, 572], "billion": [357, 360, 364], "bin": [23, 31, 134, 328, 331, 332, 333, 334, 342, 343, 357, 358, 451, 590, 598, 602, 608], "binari": [4, 15, 27, 31, 134, 328, 362], "bind": [45, 67, 126, 368, 589], "bind_datasource_in_batch": 46, "bind_sssp1": 592, "bind_sssp2": 592, "binder": 341, "binlog": 586, "binomi": 479, "bioinformat": 362, "biologi": 362, "bipartit": [366, 425, 427, 483, 531, 532, 533, 565, 609], "bipartitegraphsag": [606, 611], "birkhaus": 487, "birkh\u00e4us": 521, "birthdai": [339, 356, 610], "bit": [15, 332, 337, 341, 343, 588], "bitnami": [322, 603], "bitopr": 337, "bitwis": 341, "bl": 367, "black": [35, 602], "blob": [30, 322, 600], "block": [9, 317, 322, 330, 339, 428, 504, 590], "block_siz": 130, "blockmodel": 504, "blog": 527, "blondel": 368, "blue": [20, 426, 577], "boast": 318, "bob": 590, "bodi": [134, 184, 274, 334, 431, 435, 543], "bodyhandl": 334, "bodypublish": 334, "boesch": 530, "bohan": 600, "boilerpl": 589, "bold": [19, 365], "bolder": 361, "bolloba": 523, "bollob\u00e1": 517, "bolt": [306, 315, 318, 331, 334, 335, 336, 361, 590], "bolt_connector": [134, 318], "bolt_port": 284, "boltport": 194, "bonacich": 442, "bonato": 524, "bonomi": 343, "book": 476, "bool": [0, 6, 14, 15, 20, 48, 51, 56, 57, 59, 63, 75, 83, 84, 85, 89, 92, 95, 99, 165, 180, 228, 260, 270, 280, 284, 288, 307, 312, 314, 321, 337, 356, 367, 368, 370, 414, 422, 439, 442, 449, 459, 461, 462, 471, 500, 510, 516, 520, 536, 577, 579, 584, 589, 610], "boolean": [138, 170, 179, 190, 194, 198, 337, 341, 356, 368, 370, 427, 431, 442, 461, 462, 499, 501, 504, 535, 575, 588], "boost": [31, 128, 346, 357, 367], "boost_1_74_0": 31, "bootstrap": 31, "border": 361, "borg": 517, "bori": 516, "born": 129, "borrow": 589, "boston": 487, "both": [0, 2, 10, 12, 13, 18, 19, 20, 32, 34, 128, 130, 131, 132, 134, 181, 216, 308, 315, 319, 328, 329, 332, 333, 334, 339, 347, 353, 356, 357, 358, 359, 360, 361, 362, 368, 370, 425, 426, 427, 439, 440, 441, 456, 465, 470, 471, 476, 496, 520, 523, 528, 534, 537, 584, 586, 588, 589, 590, 592, 593, 607, 608], "both_in_out": 439, "both_out_in": [131, 138], "bother": 17, "bothv": 608, "boto3": 601, "bottom": [36, 487], "bought": 426, "bound": [23, 131, 181, 216, 272, 308, 339, 341, 343, 361, 403, 496, 584, 589, 592], "bound_app": [369, 386], "bound_graph": [92, 260], "boundari": 589, "boundgraph": 170, "box": [0, 359, 570], "br": 341, "bracket": 577, "bradonji\u0107": 524, "branch": [0, 4, 134, 337, 343, 431, 477, 487, 608], "brand": 499, "breadth": [6, 368, 442], "break": [18, 37, 216, 308, 318, 342, 437, 600], "breakdown": [315, 320], "breiger": 566, "brew": 322, "bridg": [6, 327, 359], "bridgeless": 559, "brief": [37, 314, 324, 334], "briefli": [330, 362], "bring": [6, 41, 333], "broad": [6, 359], "broadcast": [6, 367, 589], "broader": 589, "broccoli": 37, "browser": [38, 343], "browser_count": 343, "browser_list": 343, "browsers_us": 343, "browserus": [325, 343, 356, 610], "bruce_le": 343, "brutal": 322, "bsp": [6, 15], "bucket": [356, 584, 600], "bucket_s": 426, "buffer": [4, 436], "buffer_s": [354, 355], "bug": 134, "bui": [350, 357, 428, 429, 430, 431, 434, 437], "build": [15, 31, 35, 37, 44, 46, 130, 132, 133, 216, 322, 330, 333, 336, 342, 346, 347, 356, 359, 367, 368, 378, 380, 427, 431, 433, 435, 436, 439, 525, 526, 527, 569, 584, 586, 597, 602, 609], "build_csr_in_mem": [130, 280], "build_doc": 134, "build_odps_fragment_load": 134, "build_proto": 308, "build_test": 134, "buildcsrinmem": 190, "builder": [23, 321, 330, 483], "buildertyp": 321, "buildgartfrag": 586, "buildx": 132, "built": [1, 3, 4, 8, 9, 12, 15, 18, 20, 22, 32, 34, 36, 41, 126, 134, 314, 315, 318, 319, 322, 328, 331, 332, 333, 336, 337, 343, 357, 358, 362, 363, 365, 366, 425, 433, 439, 513, 514, 515, 586, 588, 590, 594], "builtin": [15, 19, 20, 126, 315, 320, 578, 580, 582], "bulk": [6, 15, 45, 129, 130, 173, 175, 216, 263, 308, 311], "bulk_load": [134, 263, 265, 308, 311], "bulk_load_fil": 134, "bulk_load_request": [263, 265, 308], "bulkload": [175, 216, 308, 309], "bull": 543, "bunch": [4, 41, 364, 367], "bundl": [30, 584], "burden": [9, 15, 427], "burstabl": 584, "busi": [41, 128, 328, 330, 343, 347, 356, 357, 358, 364], "butt": [534, 535, 569], "butterfli": 343, "button": [37, 336], "buyer": [357, 361], "by_ord": 430, "byte": [184, 307, 311, 314, 334, 337, 368, 376, 436], "byte_arrai": [307, 337], "bytearrai": [121, 307], "bytesio": [368, 376], "bz2": 579, "c": [1, 6, 8, 12, 14, 17, 18, 31, 34, 38, 133, 134, 181, 216, 308, 315, 316, 318, 319, 320, 333, 334, 337, 341, 343, 346, 347, 354, 357, 359, 360, 367, 368, 369, 372, 375, 387, 399, 427, 431, 435, 437, 442, 475, 476, 486, 506, 517, 530, 531, 534, 535, 569, 571, 573, 574, 577, 589, 592, 598, 600, 602, 608], "c3": [544, 556, 557], "c8g1": 365, "c_4": 555, "c_n": 484, "c_u": 442, "c_v": 442, "ca": 27, "cach": [34, 333, 347, 354, 360, 364, 577], "cage": 550, "calcit": [128, 329, 333], "calcul": [33, 319, 330, 341, 343, 368, 370, 428, 442, 496, 528], "call": [4, 6, 12, 13, 16, 17, 19, 24, 46, 47, 67, 75, 94, 95, 106, 110, 121, 132, 133, 184, 216, 274, 308, 311, 317, 318, 322, 333, 337, 339, 341, 343, 350, 367, 370, 425, 427, 431, 434, 435, 440, 472, 486, 487, 517, 528, 557, 569, 577, 580, 584, 589, 590], "call_procedur": [274, 311], "call_procedure_curr": [274, 311], "call_procedure_current_raw": 311, "call_procedure_raw": [311, 314], "callabl": 314, "caller": 589, "callprocedur": [216, 309, 314], "callprocedureoncurrentgraph": [216, 309], "callprocedureraw": 314, "cambridg": 523, "can": [0, 1, 2, 4, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 45, 46, 126, 128, 129, 130, 131, 132, 133, 134, 181, 184, 216, 272, 274, 281, 306, 308, 311, 314, 315, 316, 317, 318, 319, 322, 325, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 345, 346, 347, 348, 350, 352, 356, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 372, 376, 378, 402, 403, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 442, 451, 452, 455, 459, 480, 483, 496, 497, 498, 505, 506, 508, 524, 525, 526, 527, 534, 538, 539, 546, 548, 550, 555, 558, 563, 564, 569, 571, 577, 580, 581, 583, 584, 586, 588, 589, 590, 591, 592, 594, 597, 598, 600], "cancel": [9, 95, 175, 177, 265, 311], "cancel_job": [265, 311], "canceljob": [216, 309], "candid": [431, 434], "cannot": [4, 27, 30, 134, 322, 333, 341, 343, 347, 362, 364, 367, 368, 372, 427, 439, 496, 535, 536, 583, 584, 590, 592, 603], "cao": 600, "cap": 608, "capabl": [2, 6, 11, 16, 20, 134, 318, 333, 337, 338, 341, 344, 357, 359, 361, 364, 577], "capac": [24, 33, 331, 577, 584], "capit": 337, "captur": [12, 362], "cardin": 333, "care": [12, 34, 314, 343, 435, 436, 589], "carefulli": 362, "carlo": 343, "carol": 554, "carri": 347, "carsten": 519, "case": [2, 4, 6, 8, 10, 13, 14, 15, 18, 27, 37, 41, 45, 134, 311, 322, 325, 329, 330, 333, 334, 337, 339, 341, 343, 350, 356, 361, 365, 370, 426, 427, 431, 433, 435, 438, 442, 496, 504, 510, 534, 545, 561, 583, 584, 588, 589, 590, 594, 597], "case1": 343, "case2": 343, "case3": 343, "case4": 343, "case_bas": 437, "cast": [314, 349, 353, 356, 358, 437, 589, 604], "cat": [33, 45, 354, 355, 590, 598], "catch": [216, 314, 590], "categor": [131, 134, 318, 350], "categori": [216, 309, 337, 341, 347, 349, 350, 358, 362, 437], "categorical_attrs_desc": [425, 609], "cater": [29, 357], "caus": [9, 14, 22, 32, 37, 322, 342, 349, 362, 427, 433, 439, 476], "caveman": [497, 498, 502], "caveman_graph": 498, "cbo": [330, 333], "cc": [9, 314, 589, 605], "ccc": 33, "cd": [4, 17, 22, 29, 31, 32, 35, 36, 45, 132, 134, 216, 315, 328, 331, 333, 334, 335, 342, 372, 432, 435, 437, 590, 597, 598, 600, 602, 608], "cdlp": [365, 368, 600], "ceil": 529, "cell": [352, 570], "center": [6, 343, 492, 495, 520], "cento": [31, 32, 322, 332, 365, 603, 607], "central": [6, 15, 43, 325, 346, 347, 358, 359, 362, 363, 368, 431, 442, 554, 589], "centrality_typ": [0, 368], "centric": [3, 6, 9, 12, 14, 15, 17, 18, 22, 34, 345, 346, 357, 359, 360, 594], "certain": [10, 24, 110, 325, 341, 356, 364, 426, 427, 431, 434, 439, 589, 590], "certif": 27, "chain": 519, "challeng": [6, 9, 308, 319, 324, 357, 589, 590], "chamber": 336, "chang": [4, 9, 11, 12, 14, 20, 23, 33, 34, 36, 45, 126, 128, 134, 314, 315, 343, 357, 361, 362, 364, 365, 368, 385, 417, 426, 439, 442, 455, 577, 584, 590], "channel": [14, 16, 37], "chao": 600, "chapter": [426, 427, 429, 523, 560], "char": [79, 113, 130, 131, 253, 290, 436, 439, 589], "charact": [30, 130, 568, 573, 579], "character": [131, 429], "characterist": [9, 333, 339, 350, 357, 362, 425, 430], "charg": 367, "chart": [29, 322, 329, 331, 343, 590, 601, 603], "chay": 517, "check": [0, 6, 12, 17, 27, 29, 30, 32, 33, 34, 35, 37, 38, 43, 129, 130, 263, 314, 320, 322, 329, 330, 333, 336, 341, 343, 350, 352, 360, 361, 368, 435, 439, 442, 535, 536, 577, 584, 589, 590, 598, 603, 604], "check_format": 35, "checkout": [14, 37, 432], "chemic": 362, "chen": 343, "chicago": 565, "child": [370, 479, 571], "children": [477, 487, 571], "chile": 343, "china": 343, "chines": 37, "chip": [332, 607], "chive": 359, "chmod": [322, 342, 603], "choic": [362, 589, 590], "choos": [4, 6, 12, 22, 34, 41, 131, 329, 330, 333, 341, 343, 346, 347, 357, 362, 425, 426, 516, 517, 555], "chord": [521, 535], "chordal": 521, "chore": 37, "chose": [352, 353], "chosen": [6, 506, 513, 514, 515, 516, 517, 528, 532, 572], "chromat": [539, 570], "chrome": [325, 343], "chrono": 31, "chung": [510, 524], "chunk": [321, 412, 439, 588], "chv": 544, "chvatalgraph": 544, "chv\u00e1tal": 544, "ci": 37, "ci_n": 480, "cindi": [209, 299], "circul": [36, 480], "circular": [429, 431, 481], "circumst": 431, "citat": [351, 353, 354, 355, 358, 366, 437, 604], "cite": [349, 352, 353, 358, 604], "cites": 442, "citi": [343, 347, 360, 362], "citizen": 337, "cl_n": 481, "claim": [329, 559, 589, 590], "claimnam": 584, "clang": [32, 35, 332, 602], "clariti": [134, 337], "class": [2, 4, 9, 15, 17, 18, 20, 22, 23, 46, 47, 67, 75, 94, 95, 106, 110, 121, 134, 154, 173, 175, 181, 184, 191, 209, 216, 309, 314, 334, 337, 343, 350, 353, 356, 358, 362, 367, 368, 369, 370, 375, 425, 426, 439, 440, 441, 442, 486, 555, 577, 581, 584, 589, 590, 591, 600, 609], "class_nam": [15, 16, 376], "class_num": [349, 353, 358, 425, 604, 609], "classic": [18, 350, 430, 578], "classif": [347, 351, 358, 362, 366, 425, 426, 437], "classifi": [23, 347, 349, 353, 358, 362, 437, 600], "classmethod": 439, "classnam": [342, 608], "classtag": 23, "claus": [128, 318, 338], "clean": [17, 32, 134, 216, 325, 328, 332, 333, 334, 336, 358, 372, 435, 589], "clear": [20, 37, 333, 341, 343, 381, 382, 477, 479, 480, 482, 484, 486, 487, 489, 491, 492, 495, 506, 508, 509, 511, 513, 514, 515, 517, 521, 522, 523, 529, 530, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 572, 577, 579], "clear_edg": 577, "clearli": [347, 362], "clearquerycach": 333, "click": [17, 36, 37, 333, 350, 427, 428, 431, 601], "click_edg": 428, "click_v": 427, "client": [2, 17, 22, 23, 29, 33, 38, 41, 45, 46, 47, 67, 75, 94, 95, 106, 110, 121, 154, 173, 175, 181, 191, 209, 216, 244, 263, 265, 272, 299, 306, 307, 308, 310, 311, 312, 314, 315, 319, 321, 328, 330, 334, 342, 344, 346, 352, 355, 367, 368, 437, 584, 586, 588, 589, 590, 591, 600, 602, 607], "client_count": [427, 437], "client_folder_path": 354, "client_group_nam": 354, "client_kwarg": [356, 610], "client_rank": [354, 355], "client\u4e2dquery\u8fd4\u56de\u7684context": 600, "client\u6765\u63d0\u4ea4\u8fd0\u884cjar\u5305": 600, "cliqu": [0, 6, 333, 343, 357, 360, 497, 498, 502, 503, 505, 519], "clique_s": 503, "clone": [4, 17, 22, 29, 30, 31, 32, 36, 37, 132, 134, 216, 331, 336, 372, 432, 590, 602], "close": [2, 6, 27, 29, 30, 33, 43, 306, 320, 342, 350, 352, 357, 368, 427, 437, 440, 579, 584, 590, 604], "closeness_centr": [0, 34], "cloud": [322, 363, 364, 590], "club": 567, "cluster": [2, 6, 7, 10, 14, 15, 17, 18, 19, 20, 22, 23, 29, 34, 75, 322, 325, 327, 331, 335, 342, 343, 346, 349, 351, 356, 357, 358, 359, 360, 361, 362, 363, 368, 427, 437, 442, 499, 578, 584, 590, 591, 598, 600, 607], "cluster_info": 27, "cluster_typ": [17, 22, 103, 104, 336, 356, 368, 369, 584, 588, 600, 610], "cmake": [4, 31, 32, 36, 133, 322, 432], "cmake_extra_opt": 368, "cmake_prefix_path": 322, "cmakelist": 4, "cmd": [30, 367, 584], "cn": [4, 23, 27, 29, 31, 32, 41, 45, 129, 134, 331, 333, 348, 354, 356, 432, 590, 601, 602, 610], "cnbor": 448, "cncf": 359, "co": [6, 23, 325, 358, 426, 604], "coappear": 568, "coars": 364, "cocktail": 557, "code": [4, 6, 8, 14, 15, 16, 18, 29, 31, 32, 34, 36, 44, 45, 47, 67, 75, 78, 94, 95, 106, 110, 121, 126, 133, 135, 154, 173, 175, 181, 184, 191, 209, 216, 225, 244, 263, 265, 272, 274, 281, 299, 308, 312, 314, 316, 317, 318, 319, 320, 327, 328, 330, 331, 333, 334, 336, 337, 343, 348, 357, 358, 359, 364, 365, 367, 368, 370, 375, 425, 426, 427, 428, 431, 432, 437, 496, 538, 581, 589, 590, 592, 597], "codebas": [16, 35, 44, 133], "codegen": [15, 46, 134, 330], "codegen_error": 134, "coeffici": [6, 19, 368, 442], "cognit": 554, "cohen": 533, "coher": 442, "coincid": 9, "col": [356, 610], "col_0": [356, 610], "col_1": [356, 610], "col_nam": 130, "cold": 336, "cole": 527, "collabor": [36, 357, 589], "collect": [14, 34, 42, 46, 47, 333, 337, 341, 342, 343, 361, 362, 363, 437, 577], "collect_featur": [354, 355], "collect_outer_vertic": 321, "collected_ovgids_": 321, "collectiveresult": [184, 274, 311], "colleg": 14, "color": [6, 19, 20, 343, 577], "colour": 559, "column": [13, 18, 33, 45, 54, 129, 131, 142, 157, 158, 173, 216, 232, 247, 248, 263, 308, 320, 321, 325, 330, 334, 339, 347, 356, 358, 362, 367, 369, 370, 377, 426, 436, 439, 570, 586, 590, 591, 600, 604, 610], "column_map": [45, 54, 76, 124, 129, 130, 173, 216, 232, 246, 263, 302, 308], "column_mapping_column": 55, "column_mapping_column_dict": 55, "column_mapping_column_from_dict": 55, "column_mapping_column_inst": 55, "column_mapping_dict": [54, 232], "column_mapping_form_dict": 232, "column_mapping_from_dict": 54, "column_mapping_inst": [54, 232], "column_nam": [369, 583], "column_typ": 329, "columnar": 590, "columnidx": 590, "columnmap": [46, 76, 124, 156, 212, 216, 246, 302, 309], "columnmappingcolumn": [46, 54], "com": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 36, 41, 45, 46, 129, 132, 134, 154, 173, 175, 181, 184, 191, 209, 216, 299, 308, 314, 331, 332, 333, 334, 336, 348, 349, 354, 356, 359, 360, 365, 368, 372, 432, 435, 442, 529, 538, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 557, 562, 584, 589, 590, 600, 601, 602, 603, 610], "combin": [6, 14, 18, 34, 131, 327, 330, 333, 343, 346, 357, 358, 361, 425, 426, 427, 431, 577, 584, 593, 600], "combinator": [510, 570], "combinatori": 568, "combinechunk": 321, "come": [330, 336, 339, 343, 346, 356, 358, 359, 362, 363, 365, 428, 543, 580], "comm_spec": [367, 586, 589, 591], "comma": [47, 426], "command": [2, 4, 7, 16, 23, 27, 29, 30, 31, 32, 35, 36, 41, 45, 126, 128, 129, 132, 134, 308, 317, 322, 327, 331, 333, 334, 348, 349, 354, 367, 426, 590, 591, 598], "commanddetail": 367, "comment": [29, 37, 325, 333, 336, 337, 343, 356, 426, 577, 579, 580, 588, 605, 610], "comment_0_0": [356, 605, 610], "comment_cont": 343, "comment_length": 343, "comment_replyof_com": 325, "comment_replyof_comment_0_0": [356, 605, 610], "commerc": [9, 357, 360], "commerci": 574, "commit": [4, 134, 314, 365, 586], "commnet": 9, "commod": 427, "common": [2, 6, 12, 15, 30, 154, 173, 175, 181, 191, 209, 314, 330, 336, 343, 347, 350, 356, 357, 359, 360, 361, 362, 364, 425, 426, 433, 434, 448, 569, 571, 577, 588, 589, 598], "commonli": [6, 128, 319, 328, 333, 337, 341, 346, 350, 356], "commspec": [367, 586, 589, 591], "commun": [0, 4, 6, 8, 9, 12, 15, 16, 18, 24, 27, 346, 357, 358, 359, 360, 363, 367, 368, 372, 427, 435, 528, 569, 574, 578, 588, 597], "commut": 6, "compact": [13, 367, 439], "compact_": 367, "compact_adj_list_t": 367, "compact_edg": [13, 367, 418, 439, 584], "compact_nbr_t": 367, "compactadjlist": 367, "compactnbr": 367, "compani": [10, 589], "compar": [4, 19, 330, 333, 337, 339, 341, 343, 360, 365, 367, 368, 428, 496, 583], "comparison": [9, 19, 328, 337, 341, 343, 346, 364, 365, 369], "compat": [3, 7, 12, 13, 15, 19, 20, 23, 32, 34, 134, 317, 322, 325, 329, 332, 333, 337, 344, 346, 347, 349, 350, 351, 352, 353, 358, 362, 363, 366, 368, 433, 440, 583, 584, 586, 588, 604], "compatible_graph": [15, 16, 376], "compens": 9, "competitor": 365, "compil": [4, 15, 31, 32, 34, 128, 133, 314, 318, 319, 320, 322, 329, 330, 331, 333, 334, 337, 342, 357, 368, 380, 589, 590, 592, 598], "compileplan": 334, "compiler_config_path": 334, "complaint": 20, "complelet": 308, "complet": [0, 14, 31, 33, 34, 132, 216, 308, 330, 333, 334, 336, 339, 343, 356, 359, 425, 427, 431, 452, 477, 478, 480, 482, 483, 489, 494, 503, 534, 537, 561, 577, 590], "complete_bipartite_graph": 483, "complete_graph": [442, 448, 577], "complex": [2, 4, 6, 12, 22, 34, 37, 43, 128, 129, 216, 308, 318, 319, 325, 328, 330, 331, 333, 339, 340, 341, 346, 347, 356, 357, 359, 360, 361, 362, 363, 364, 368, 428, 442, 506, 510, 525, 526, 527, 589], "compli": [337, 431], "complic": [320, 325, 330, 343, 369], "compon": [0, 4, 6, 12, 19, 29, 32, 34, 38, 41, 75, 131, 134, 322, 332, 333, 334, 357, 359, 360, 361, 367, 368, 442, 510, 524, 583, 589, 590], "component_belong_to": 100, "component_exampl": 75, "component_typ": 131, "compos": [36, 38, 134, 347, 350, 358, 360, 364], "composit": [341, 343], "comprehens": [129, 216, 318, 328, 333, 357, 363, 365, 366], "compress": [12, 13, 358, 368, 426, 542], "compris": [41, 129, 134, 337, 339, 353, 357, 430], "compromis": 590, "comput": [0, 3, 4, 6, 9, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 31, 34, 37, 128, 316, 318, 330, 331, 333, 341, 343, 346, 347, 350, 358, 359, 360, 361, 362, 363, 364, 367, 368, 370, 429, 430, 433, 435, 442, 523, 526, 527, 531, 536, 545, 568, 569, 581, 584, 590, 591, 600], "compute_engin": [128, 134], "conceiv": [337, 524], "concentr": [346, 364, 481], "concept": [3, 134, 359, 362, 425, 426], "conceptu": 24, "concern": [37, 357, 364, 589], "concis": [37, 339, 361, 440], "conclud": 425, "conclus": 343, "concret": [339, 368, 369, 439], "concurr": [128, 318, 320, 339, 357, 427], "cond": [15, 485], "conda": 602, "condariuc": 343, "condit": [6, 9, 14, 24, 27, 38, 128, 330, 333, 343, 350, 359, 361, 365, 496, 525, 526, 527, 535, 536, 589], "conditions_descript": [57, 84], "condon": 500, "conduc": 429, "conduct": [6, 15, 343, 365, 431], "conduit": 358, "conf": [23, 331, 333, 334, 342, 367, 590, 608], "conf1": [356, 610], "confer": [333, 349, 358, 429, 600], "confid": 343, "config": [23, 27, 28, 31, 45, 46, 73, 95, 128, 129, 306, 328, 329, 331, 333, 334, 342, 354, 402, 412, 424, 425, 438, 441, 581, 584, 586, 590, 591, 608, 609], "config_fil": 584, "config_str": 586, "configmap": [28, 354], "configpath": 334, "configur": [4, 15, 16, 17, 23, 27, 31, 35, 37, 38, 39, 45, 46, 47, 67, 75, 94, 95, 106, 110, 121, 129, 131, 134, 184, 216, 306, 308, 315, 317, 318, 320, 322, 331, 341, 342, 343, 352, 356, 357, 367, 368, 379, 380, 386, 387, 392, 417, 436, 437, 439, 496, 506, 508, 584, 586, 591, 597], "configuration_model": [508, 509, 512], "confirm": [37, 333], "conflict": [23, 332, 343, 349, 439, 567, 590], "confus": [343, 525, 526, 527], "conjectur": 564, "conjunct": 337, "conn": 590, "connect": [2, 6, 15, 17, 19, 20, 27, 37, 41, 43, 45, 131, 133, 154, 173, 175, 181, 184, 191, 209, 309, 314, 317, 318, 319, 320, 322, 328, 329, 330, 338, 341, 343, 344, 346, 350, 352, 356, 357, 358, 359, 360, 362, 368, 369, 370, 426, 427, 429, 431, 434, 440, 442, 446, 463, 478, 480, 482, 484, 488, 489, 491, 492, 494, 495, 496, 498, 499, 500, 501, 503, 505, 510, 511, 516, 517, 519, 524, 526, 527, 528, 529, 530, 531, 533, 542, 552, 553, 555, 557, 559, 576, 577, 584, 591, 592, 600, 608], "connected_caveman_graph": [497, 503], "connected_compon": [19, 442], "connector": [315, 318, 335, 343], "conquer": 340, "consecut": 13, "consequ": [14, 128, 357, 360], "consid": [10, 15, 18, 27, 37, 308, 333, 343, 350, 360, 368, 369, 426, 427, 442, 506, 569, 586, 589], "consider": [0, 339, 356, 442, 499], "consist": [12, 13, 20, 24, 30, 34, 35, 36, 43, 131, 134, 330, 334, 339, 341, 343, 346, 347, 350, 359, 360, 362, 364, 365, 367, 368, 370, 428, 429, 431, 433, 479, 480, 481, 492, 495, 503, 549, 571, 584, 586, 588, 589, 590, 591], "consol": [38, 329, 331, 336, 344, 346, 356, 361, 440, 590, 606], "console\u4ee5\u8fde\u63a5graphscope\u7684\u6b65\u9aa4": 608, "console\u4f9d\u8d56\u7684java\u8fd0\u884c\u65f6\u73af\u5883": 608, "consolid": [439, 591, 598], "consolidate_column": 439, "const": [14, 15, 16, 314, 321, 334, 367, 370, 435, 436, 589, 591], "const_adj_list_t": 367, "const_compact_adj_list_t": 367, "constant": [506, 608], "constantli": 9, "constexpr": [16, 367], "constitu": 360, "constitut": [6, 353, 356], "constraint": [318, 333, 334, 337, 343, 344, 361], "construct": [19, 134, 306, 310, 311, 312, 318, 320, 334, 343, 347, 350, 356, 357, 358, 359, 367, 418, 425, 426, 427, 428, 429, 439, 440, 444, 445, 485, 506, 508, 509, 511, 517, 521, 522, 523, 531, 534, 535, 536, 537, 539, 555, 559, 563, 569, 571, 584, 588, 591], "constructor": [27, 334, 356, 477, 479, 480, 482, 484, 486, 487, 489, 491, 492, 495, 506, 508, 509, 511, 513, 514, 515, 517, 521, 522, 523, 529, 530, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 572, 579], "consult": [129, 132], "consum": [9, 322, 333, 362, 433, 436], "consumpt": 322, "contact": [314, 322], "contain": [0, 2, 4, 6, 8, 17, 20, 23, 27, 32, 37, 38, 126, 129, 130, 133, 310, 311, 312, 317, 319, 322, 325, 329, 330, 333, 334, 337, 340, 341, 343, 347, 350, 351, 354, 356, 357, 358, 360, 362, 364, 365, 367, 370, 372, 425, 426, 429, 431, 434, 435, 436, 437, 439, 442, 444, 445, 446, 453, 456, 457, 472, 482, 483, 484, 486, 489, 504, 529, 530, 534, 535, 577, 580, 581, 584, 588, 589, 590, 598, 602, 608], "containerof": 343, "containskei": [17, 600], "content": [16, 47, 67, 75, 94, 95, 106, 110, 121, 131, 154, 173, 175, 181, 184, 191, 209, 244, 263, 265, 272, 274, 281, 299, 314, 325, 333, 334, 343, 353, 356, 358, 442, 574, 588, 610], "context": [6, 15, 17, 18, 20, 27, 31, 46, 47, 67, 75, 94, 95, 106, 110, 121, 126, 129, 131, 315, 319, 334, 339, 359, 361, 368, 370, 375, 376, 377, 383, 384, 399, 404, 407, 408, 410, 419, 422, 435, 439, 442, 567, 582, 584, 589, 597, 600], "context_info": 27, "context_kei": 367, "context_nod": 369, "context_t": [14, 15, 16, 367], "context_typ": [16, 367, 368, 376], "contextbas": 367, "contextdagnod": 369, "contextdatatyp": 367, "contextwrapp": 367, "continu": [2, 6, 15, 16, 20, 27, 134, 281, 329, 330, 333, 342, 343, 346, 347, 357, 358, 362, 365, 425, 496, 534, 537, 589, 590, 591], "contract": 505, "contrari": 6, "contribut": [0, 4, 327, 589], "contributor": [37, 570], "control": [2, 6, 27, 38, 45, 356, 357, 359, 367, 442, 577, 589, 590], "conv": [347, 350, 362], "conv_lay": [425, 609], "conveni": [6, 29, 308, 322, 329, 336, 343, 347, 359, 431, 575, 577, 590], "convent": [14, 37, 322, 510, 536, 598], "converg": [0, 6, 9, 14, 17, 24, 319, 362, 365, 368, 442], "convers": [339, 425, 426, 586], "convert": [15, 20, 23, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 134, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 308, 314, 319, 334, 337, 347, 368, 383, 384, 394, 395, 407, 408, 425, 426, 433, 437, 497, 498, 555, 572, 577, 579, 580, 586, 590], "converttoarrowtyp": [321, 367], "convolut": [362, 433], "coo": [356, 588, 610], "coolmath": 562, "cooper": [128, 425, 439], "coordin": [4, 15, 27, 29, 35, 37, 38, 41, 44, 128, 132, 315, 317, 327, 332, 352, 367, 439, 489, 584, 590, 597, 598, 601, 602, 604], "coordinator_port": 317, "cope": [12, 34], "copi": [27, 29, 30, 317, 329, 357, 359, 364, 385, 442, 449, 453, 455, 456, 514, 520, 575, 577, 580, 588, 589, 590, 591, 592], "copy_typ": 385, "cora": [425, 437, 609], "cora\u7684\u7279\u5f81\u5df2\u7ecf\u662f\u5904\u7406\u8fc7\u7684\u5411\u91cf\u683c\u5f0f\u4e86": 609, "core": [4, 6, 12, 34, 37, 45, 128, 322, 330, 332, 339, 357, 358, 359, 368, 372, 437, 442, 584, 604], "core_numb": 442, "cornel": 442, "corner": 36, "correct": [4, 6, 14, 37, 38, 319, 328, 330, 336, 431, 439, 442, 589], "correctli": [23, 37, 314, 319, 322, 346, 442, 590], "correl": [359, 442], "correspond": [9, 10, 13, 15, 17, 18, 37, 41, 45, 128, 134, 328, 330, 333, 334, 336, 339, 341, 343, 346, 350, 356, 361, 364, 368, 402, 425, 426, 427, 428, 430, 431, 435, 439, 442, 475, 476, 506, 508, 509, 510, 511, 512, 524, 570, 571, 573, 577, 579, 580, 586, 590, 598], "correspondingli": [329, 350, 534, 537], "cost": [34, 330, 333, 343, 357, 361, 442, 590], "costa": 343, "costantini": 442, "costli": [9, 339], "could": [2, 4, 6, 9, 15, 22, 27, 28, 29, 31, 32, 36, 38, 41, 126, 128, 131, 134, 181, 184, 216, 274, 308, 314, 315, 317, 328, 329, 331, 332, 339, 341, 346, 348, 356, 366, 368, 420, 427, 429, 430, 439, 505, 588, 589, 590, 591], "council": [339, 365], "count": [0, 6, 33, 181, 214, 215, 216, 272, 304, 305, 308, 314, 319, 328, 330, 332, 333, 334, 337, 339, 342, 343, 350, 358, 360, 367, 368, 429, 430, 434, 435, 438, 442, 452, 510, 577, 590, 604, 608], "count1": 343, "count2": 343, "count_vertic": 314, "count_zero": 442, "counter": [16, 343], "counterexampl": [559, 564], "counterpart": [9, 346, 359], "countri": 343, "country1": 343, "country2": 343, "country_count": 343, "country_top100_forums_dict": 343, "countvertic": 314, "coupl": [41, 359, 364, 557, 586], "cover": [0, 6, 15, 41, 350], "coxet": 542, "cp": [134, 329, 331, 334, 574, 589], "cp27": 432, "cp27mu": 432, "cpp": [31, 134, 147, 170, 198, 314], "cpp_flash": 15, "cpp_pie": [16, 368, 376], "cpp_pregel": 368, "cpplint": 35, "cppstoredprocedur": [181, 184, 274], "cpu": [27, 75, 128, 134, 322, 329, 354, 355, 432, 584, 593, 603], "cpu_usag": [90, 98, 100], "craft": 318, "crashloopbackoff": [322, 603], "creat": [2, 9, 10, 12, 13, 16, 17, 19, 23, 27, 29, 30, 31, 34, 38, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 130, 132, 133, 134, 154, 173, 181, 184, 209, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 318, 320, 322, 329, 331, 332, 334, 336, 341, 342, 343, 354, 356, 357, 358, 361, 362, 367, 368, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 396, 397, 398, 402, 405, 406, 412, 418, 419, 420, 429, 431, 434, 436, 439, 440, 455, 477, 479, 480, 482, 483, 484, 486, 487, 489, 491, 492, 494, 495, 496, 498, 499, 501, 504, 506, 508, 509, 511, 512, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 529, 530, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 571, 572, 577, 579, 580, 581, 584, 591, 592, 593, 598, 600, 603], "create_alert_receiv": 46, "create_alert_receiver_request": [46, 47, 56], "create_alert_receiver_request_dict": 56, "create_alert_receiver_request_from_dict": 56, "create_alert_receiver_request_inst": 56, "create_alert_rule_request": [47, 57], "create_alert_rule_request_dict": 57, "create_alert_rule_request_from_dict": 57, "create_alert_rule_request_inst": 57, "create_dataloading_job_respons": [58, 95], "create_dataloading_job_response_dict": 58, "create_dataloading_job_response_from_dict": 58, "create_dataloading_job_response_inst": 58, "create_edge_typ": [46, 59, 233, 263, 311, 590], "create_edge_type_dict": [59, 233], "create_edge_type_form_dict": 233, "create_edge_type_from_dict": 59, "create_edge_type_inst": [59, 233], "create_graph": [46, 263, 272, 308, 311, 590], "create_graph_request": [60, 94, 234, 263, 272, 308, 590], "create_graph_request_dict": [60, 234], "create_graph_request_form_dict": 234, "create_graph_request_from_dict": 60, "create_graph_request_inst": [60, 234], "create_graph_respons": [61, 94, 235], "create_graph_response_dict": [61, 235], "create_graph_response_form_dict": 235, "create_graph_response_from_dict": 61, "create_graph_response_inst": [61, 235], "create_graph_schema_request": [62, 94, 236], "create_graph_schema_request_dict": [62, 236], "create_graph_schema_request_form_dict": 236, "create_graph_schema_request_from_dict": 62, "create_graph_schema_request_inst": [62, 236], "create_proc_request": [272, 308, 314], "create_procedur": [272, 308, 311, 314], "create_procedure_request": [237, 272], "create_procedure_request_dict": 237, "create_procedure_request_form_dict": 237, "create_procedure_request_inst": 237, "create_procedure_respons": 238, "create_procedure_response_dict": 238, "create_procedure_response_form_dict": 238, "create_procedure_response_inst": 238, "create_property_meta": [63, 239], "create_property_meta_dict": [63, 239], "create_property_meta_form_dict": 239, "create_property_meta_from_dict": 63, "create_property_meta_inst": [63, 239], "create_stored_proc_request": [64, 110], "create_stored_proc_request_dict": 64, "create_stored_proc_request_from_dict": 64, "create_stored_proc_request_inst": 64, "create_stored_proc_respons": [65, 110], "create_stored_proc_response_dict": 65, "create_stored_proc_response_from_dict": 65, "create_stored_proc_response_inst": 65, "create_stored_procedur": 46, "create_us": [19, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 506, 507, 508, 509, 511, 513, 514, 515, 517, 521, 522, 523, 529, 530, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 572, 579], "create_vertex_typ": [46, 66, 240, 263, 311, 590], "create_vertex_type_dict": [66, 240], "create_vertex_type_form_dict": 240, "create_vertex_type_from_dict": 66, "create_vertex_type_inst": [66, 240], "createalertreceiverrequest": [46, 47], "createalertrulerequest": [46, 47], "createapp": 314, "createdataloadingjobrespons": [46, 95], "createedgetyp": [46, 62, 94, 146, 216, 236, 309, 311, 590], "createfficontext": [17, 600], "creategraph": [216, 308, 309, 590], "creategraphrequest": [46, 94, 173, 216, 263, 272, 308, 309, 311, 590], "creategraphrespons": [46, 94, 173, 216, 263, 309, 311], "creategraphschemarequest": [46, 60, 94, 144, 216, 234, 309], "createparamet": 334, "createprocedur": [216, 309, 314], "createprocedurerequest": [144, 181, 216, 234, 272, 308, 309, 311, 314], "createprocedurerespons": [181, 216, 272, 309, 311, 314], "createproceduretest": 314, "createpropertymeta": [46, 59, 66, 143, 150, 216, 233, 240, 263, 309, 590], "createstoredprocrequest": [46, 60, 110], "createstoredprocrespons": [46, 110], "createvertextyp": [46, 62, 94, 146, 216, 236, 309, 311, 590], "creatework": 367, "creation": [184, 274, 346, 427, 501], "creation_tim": [86, 100, 103, 257, 260], "creationd": [325, 341, 343, 356, 588, 605, 610], "creationtim": [167, 170], "critic": [6, 13, 128, 347, 368], "cross": [10, 339, 372, 552], "crt": 27, "crucial": [128, 131, 134, 357], "cs224w": 360, "csc": [9, 588], "csr": [9, 13, 130, 321, 439, 588, 591], "csr\u7ed3\u6784\u7684column": 321, "csr\u7ed3\u6784\u7684row": 321, "cst": 27, "csv": [45, 129, 173, 216, 263, 308, 320, 325, 329, 333, 336, 356, 439, 577, 580, 588, 590, 591, 604, 605, 610], "ctmqb": 598, "ctrl": 36, "ctrue": 6, "ctruee": 15, "ctruev": 15, "ctx": [14, 17, 22, 367, 588, 600], "ctx_t": 367, "ctxwrapperbuild": 367, "cube": [525, 526, 527, 545, 562], "cubic": [542, 545, 546, 549, 550, 556, 558, 559, 564], "cuda": [4, 365], "cumul": 566, "cur_dist": [18, 600], "cur_gid": 321, "cur_id": 321, "cur_list": 321, "cur_list_length": 321, "cur_map": 321, "cur_path": 437, "curiou": 343, "curl": [31, 342], "curr_modifi": 14, "current": [2, 7, 11, 12, 13, 16, 17, 22, 27, 29, 32, 37, 38, 45, 106, 126, 128, 129, 130, 131, 134, 184, 191, 216, 274, 281, 308, 309, 311, 315, 318, 319, 322, 325, 328, 329, 330, 333, 334, 337, 339, 341, 343, 346, 350, 352, 354, 356, 358, 360, 361, 363, 368, 370, 419, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 439, 440, 569, 572, 577, 584, 589, 590, 597, 600, 607], "current_ctx": 354, "current_timestamp": 590, "currenttimemilli": [339, 590, 608], "currrent": 439, "cursor": 431, "curv": [325, 360], "custom": [2, 3, 4, 7, 8, 22, 29, 35, 36, 45, 126, 130, 131, 216, 308, 314, 315, 317, 318, 319, 320, 328, 330, 337, 346, 350, 356, 357, 360, 362, 363, 425, 426, 429, 431, 433, 434, 435, 524, 526, 527, 574, 590, 594], "custom_constant_queri": 328, "custom_queri": 328, "cut": [6, 12, 24, 562], "cutoff": 0, "cxx": 31, "cycl": [6, 359, 361, 364, 367, 444, 480, 481, 484, 495, 517, 521, 542, 544, 560, 564], "cyclic": [6, 333, 357, 359, 361, 484], "cypher": [108, 128, 129, 132, 133, 134, 147, 170, 181, 198, 272, 306, 314, 319, 320, 328, 329, 330, 331, 332, 333, 334, 336, 338, 357, 358, 359, 363, 364, 440, 584], "cypher_driv": 440, "cypher_endpoint": 306, "cypher_invalid_result": 334, "cypher_invalid_syntax": 334, "cypher_queri": 328, "cypher_query_str": 334, "cypher_sent": 336, "cypher_url": 440, "cypherapp": 314, "cypherport": 329, "cypherstoredprocedur": [181, 184, 274], "cython": [18, 34, 322, 403, 582, 600], "cython_pi": 368, "cython_pregel": 368, "czf": 31, "d": [6, 9, 15, 17, 19, 20, 134, 329, 333, 334, 343, 368, 429, 431, 434, 437, 442, 452, 497, 498, 506, 508, 509, 511, 512, 513, 515, 520, 524, 525, 526, 527, 528, 531, 568, 577, 579, 584], "d34": [356, 610], "d_m": 512, "dag": [359, 368, 369, 387, 439, 577, 581, 584], "dag_fil": 367, "dag_nod": 369, "dagfil": 367, "dai": [2, 20, 131, 343, 577, 580, 588], "damp": 0, "damping_factor": 319, "danger": 20, "dangl": 584, "dangling_timeout_second": 584, "darrow_build_benchmark": 31, "darrow_build_exampl": 31, "darrow_build_integr": 31, "darrow_build_shar": 31, "darrow_build_stat": 31, "darrow_build_test": 31, "darrow_build_util": 31, "darrow_comput": 31, "darrow_csv": 31, "darrow_enable_timing_test": 31, "darrow_filesystem": 31, "darrow_fuzz": 31, "darrow_ipc": 31, "darrow_jemalloc": 31, "darrow_with_utf8proc": 31, "data": [0, 2, 3, 4, 6, 9, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 27, 30, 31, 33, 34, 67, 95, 121, 126, 128, 133, 134, 263, 307, 315, 316, 318, 320, 322, 327, 328, 330, 331, 334, 336, 338, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 375, 377, 383, 384, 389, 394, 395, 399, 407, 408, 425, 427, 428, 429, 430, 431, 435, 439, 449, 455, 471, 472, 487, 504, 520, 539, 569, 577, 579, 580, 583, 584, 586, 589, 591, 592, 594, 600, 601, 603, 604, 609], "data_dictionari": 577, "data_import_config": 257, "data_load": 590, "data_output": 590, "data_path": [329, 591], "data_sourc": [130, 277, 308, 311], "data_t": 367, "data_update_tim": [86, 257], "databas": [128, 133, 134, 316, 322, 328, 330, 333, 337, 338, 341, 343, 357, 359, 361, 363, 365, 590, 600], "datadict": [471, 577], "datafil": [356, 610], "dataflow": [357, 359], "datafram": [325, 356, 369, 383, 394, 404, 407, 439, 577, 600, 610], "datagen": 365, "dataimportconfig": 167, "dataload": [46, 95, 173, 175, 216, 263, 265, 309, 354, 355], "dataloading_job_config": [68, 95], "dataloading_job_config_dict": 68, "dataloading_job_config_edges_inn": 69, "dataloading_job_config_edges_inner_dict": 69, "dataloading_job_config_edges_inner_from_dict": 69, "dataloading_job_config_edges_inner_inst": 69, "dataloading_job_config_from_dict": 68, "dataloading_job_config_inst": 68, "dataloading_job_config_loading_config": 70, "dataloading_job_config_loading_config_dict": 70, "dataloading_job_config_loading_config_format": 71, "dataloading_job_config_loading_config_format_dict": 71, "dataloading_job_config_loading_config_format_from_dict": 71, "dataloading_job_config_loading_config_format_inst": 71, "dataloading_job_config_loading_config_from_dict": 70, "dataloading_job_config_loading_config_inst": 70, "dataloading_job_config_vertices_inn": 72, "dataloading_job_config_vertices_inner_dict": 72, "dataloading_job_config_vertices_inner_from_dict": 72, "dataloading_job_config_vertices_inner_inst": 72, "dataloading_mr_job_config": [73, 95], "dataloading_mr_job_config_dict": 73, "dataloading_mr_job_config_from_dict": 73, "dataloading_mr_job_config_inst": 73, "dataloadingjobconfig": [46, 95], "dataloadingjobconfigedgesinn": [46, 68], "dataloadingjobconfigloadingconfig": [46, 68], "dataloadingjobconfigloadingconfigformat": [46, 70], "dataloadingjobconfigverticesinn": [46, 68], "dataloadingmrjobconfig": [46, 95], "dataourc": 129, "dataset": [2, 4, 7, 15, 16, 17, 18, 19, 20, 22, 23, 27, 33, 129, 322, 325, 332, 333, 338, 343, 349, 352, 353, 354, 355, 358, 362, 365, 368, 369, 425, 431, 437, 584, 588, 590, 600, 602, 604, 608, 610], "dataset_download_retri": 424, "dataset_fold": [425, 609], "dataset_nam": [354, 355], "datasourc": [45, 46, 67, 129, 187, 356, 610], "datasourceapi": 46, "datatyp": 367, "dataupdatetim": 167, "datavalu": 471, "date": [37, 131, 337, 343, 588, 589, 590], "date32": [74, 115, 131, 151, 202, 241, 292], "date_format": 131, "date_tim": [31, 131], "date_time_format": 131, "date_typ": [74, 241], "date_type_dict": [74, 241], "date_type_form_dict": 241, "date_type_from_dict": 74, "date_type_inst": [74, 241], "datetim": 337, "datetyp": [46, 216, 309], "daughter_in_law_of_grandson_of": 336, "davi": 565, "david": [343, 478, 489, 554], "db": [314, 328, 333], "dbl_max": 9, "dbm": [333, 364], "dbuild_shared_lib": 31, "dbuild_test": 31, "dbuild_vineyard_python_bind": 31, "dbuild_vineyard_test": 31, "dcmake_cxx_flag": 31, "dcmake_install_prefix": 31, "dcmake_prefix_path": 31, "dd": 577, "dd_graph": 130, "ddict": 577, "ddl": 318, "de": [341, 352], "deal": [339, 356, 360, 429], "debian": 134, "debug": [322, 354, 426, 431, 584, 590, 598], "dec": 570, "decid": [9, 427, 524], "declar": [18, 216, 306, 308, 317, 330, 341, 343, 346, 361, 364, 427, 600], "declin": 128, "decod": [133, 216, 309, 334, 425, 426, 427, 437, 609], "decomposit": [6, 333, 358, 442], "decor": [18, 600], "decoupl": [330, 357, 364], "decreas": [427, 506, 508], "dedic": [12, 128], "deduc": [9, 439, 610], "deduct": 9, "dedup": 608, "dedupl": 330, "deduplabel": 341, "deep": [325, 350, 357, 425, 430, 431, 433, 453, 456, 565, 577], "deepcopi": 577, "deeper": [130, 333], "deepwalk": [346, 425, 609], "def": [15, 18, 23, 308, 335, 349, 352, 353, 354, 355, 356, 358, 375, 425, 427, 428, 429, 430, 431, 434, 437, 483, 590, 600, 604, 605, 609, 610], "default": [0, 6, 13, 15, 20, 23, 28, 29, 30, 32, 36, 41, 45, 46, 47, 67, 75, 94, 95, 106, 110, 121, 128, 130, 131, 132, 134, 154, 209, 216, 306, 308, 311, 314, 315, 317, 318, 319, 322, 325, 328, 329, 331, 332, 333, 334, 339, 341, 343, 349, 352, 354, 356, 365, 367, 368, 369, 370, 387, 396, 418, 419, 422, 426, 427, 431, 438, 439, 441, 442, 444, 445, 446, 449, 471, 473, 474, 477, 479, 480, 482, 484, 486, 487, 489, 491, 492, 495, 496, 499, 500, 501, 502, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 537, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 569, 570, 572, 574, 575, 577, 579, 580, 584, 586, 588, 590, 597, 598, 610], "default_databas": 333, "default_graph": 134, "default_label": [577, 580], "default_listen_address": 134, "default_memory_pool": 321, "default_neighbor_id": 429, "default_valu": [51, 63, 89], "defaultappbas": 600, "defaultcontextbas": 600, "defaultmessagemanag": 367, "defaultparallelenginespec": 367, "defaultpropertyappbas": 600, "defaultpropertycontextbas": 600, "defaultpropertywork": 367, "defaultsess": 216, "defaultwork": 367, "defer": 333, "defin": [0, 4, 6, 10, 12, 13, 18, 20, 24, 27, 42, 45, 46, 47, 67, 75, 94, 95, 106, 110, 121, 129, 130, 131, 133, 134, 154, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 274, 281, 299, 308, 318, 320, 322, 328, 329, 333, 334, 336, 337, 339, 341, 343, 346, 349, 352, 356, 357, 358, 359, 361, 367, 368, 372, 387, 425, 426, 429, 431, 434, 436, 437, 442, 479, 501, 503, 526, 583, 584, 588, 589, 590, 604], "define_str": 426, "definefv": 15, "definemap": 15, "definemapv": 15, "definit": [129, 134, 341, 357, 442, 523, 524, 526], "deg": [442, 496, 510, 577], "deg_by_loc": 402, "deg_by_nod": 402, "deg_sequ": [506, 507, 508, 509, 511], "degener": 439, "degeneraci": 6, "degrad": [22, 364], "degre": [16, 19, 20, 321, 325, 343, 350, 368, 370, 428, 429, 434, 442, 451, 476, 477, 496, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 522, 534, 535, 536, 537, 571, 577, 578, 590], "degree_assort": 34, "degree_assortativity_coeffici": [0, 368, 600], "degree_centr": [0, 34, 325, 368, 442, 578, 600], "degree_seq": 534, "degree_threshold": 368, "degree_vec": 321, "degreeview": 577, "del": [354, 355, 439, 577], "delai": [128, 592], "delet": [2, 9, 27, 29, 30, 33, 46, 47, 67, 94, 95, 110, 133, 154, 173, 175, 181, 209, 244, 263, 265, 272, 299, 309, 311, 314, 320, 322, 397, 436, 584, 586, 603], "delete_alert_message_in_batch": 46, "delete_alert_receiver_by_id": 46, "delete_alert_rule_by_id": 46, "delete_edg": 311, "delete_edge_request": [242, 244, 311], "delete_edge_request_dict": 242, "delete_edge_request_form_dict": 242, "delete_edge_request_inst": 242, "delete_edge_typ": [263, 311], "delete_edge_type_by_nam": 46, "delete_edge_type_request": 263, "delete_graph": [263, 308, 311, 590], "delete_graph_by_id": 46, "delete_job_by_id": 46, "delete_procedur": [272, 311], "delete_schedul": 95, "delete_stored_procedure_by_id": 46, "delete_vertex": 311, "delete_vertex_request": [243, 299, 311], "delete_vertex_request_dict": 243, "delete_vertex_request_form_dict": 243, "delete_vertex_request_inst": 243, "delete_vertex_typ": [263, 311], "delete_vertex_type_by_nam": 46, "deleteapp": 314, "deleteedg": [154, 309], "deleteedgerequest": [244, 311], "deleteedgetyp": 309, "deletegraph": [216, 309], "deletegraphrespons": 216, "deleteprocedur": [216, 309], "deleter": [173, 181], "deletevertex": [209, 309], "deletevertexrequest": [299, 311], "deletevertextyp": 309, "deletework": 367, "delimit": [45, 129, 130, 329, 333, 439, 579, 591, 605], "delin": 131, "deliv": [9, 608], "deliveri": 360, "delta": [9, 12, 13, 33, 37, 368, 439], "delta_in": 517, "delta_out": 517, "delv": 130, "demand": [12, 318, 330, 360, 589, 590, 594], "demo": [17, 22, 23, 45, 332, 372, 584, 590, 598, 600], "demonstr": [6, 16, 129, 314, 329, 330, 333, 334, 346, 351, 353, 357, 358, 360, 362, 364, 369, 425, 437, 439, 584, 589, 590], "denable_java_sdk": 31, "deni": [322, 376, 603], "denot": [9, 131, 316, 318, 319, 341, 343, 430, 505], "dens": [6, 347, 360, 362, 428, 437], "dense_shap": 428, "densest": 6, "densiti": [504, 506, 524, 526], "dentryfil": 426, "dep": [32, 35, 133, 597, 601, 602], "depend": [4, 13, 17, 22, 27, 30, 35, 36, 37, 41, 45, 133, 216, 317, 322, 328, 331, 333, 334, 335, 336, 342, 343, 348, 349, 359, 362, 368, 431, 499, 504, 590, 597, 600], "deploi": [2, 15, 33, 37, 45, 126, 216, 308, 314, 315, 319, 320, 322, 327, 328, 330, 331, 332, 335, 342, 346, 349, 357, 359, 364, 427, 584, 586, 591, 597], "deploy": [7, 29, 30, 33, 46, 75, 128, 317, 320, 322, 325, 331, 343, 357, 363, 427, 437, 584, 590], "deploy_graphscope_on_self_managed_k8": 29, "deploy_mod": 284, "deploymentapi": 46, "deploymod": 194, "deprec": [75, 439, 457, 555], "depth": [4, 126, 134, 315, 331, 337, 358, 425, 437, 442, 609], "depth_limit": 442, "depth_to_encod": 437, "deregist": 584, "deriv": [3, 12, 34, 358, 361, 367, 369, 439, 442, 586], "desargu": 546, "desargues_graph": 542, "desarguesgraph": 546, "desc": [129, 319, 334, 341, 343], "descend": [343, 571], "describ": [6, 27, 36, 37, 38, 44, 45, 131, 132, 134, 314, 322, 329, 331, 343, 347, 348, 357, 361, 362, 369, 426, 429, 431, 436, 437, 476, 480, 496, 497, 498, 501, 506, 508, 509, 534, 535, 548, 555, 557, 571, 573, 574, 585, 588, 589, 590, 598, 603], "descript": [37, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 311, 314, 319, 329, 330, 334, 337, 341, 350, 354, 356, 426, 429, 434, 435, 439, 534, 542, 590], "deseri": [314, 589], "design": [1, 4, 6, 7, 12, 13, 15, 18, 27, 128, 130, 131, 308, 314, 318, 320, 325, 327, 332, 339, 343, 349, 350, 351, 352, 359, 361, 362, 363, 364, 367, 425, 427, 433, 442, 577, 590], "desir": [131, 319, 339, 439, 496, 518, 538, 540, 541], "desktop": [27, 590, 604], "dest": 427, "destin": [14, 33, 77, 129, 130, 131, 152, 157, 160, 187, 242, 247, 250, 277, 329, 336, 337, 343, 347, 356, 358, 367, 369, 385, 426, 427, 428, 430, 431, 437, 439, 441, 583, 588, 589, 590, 610], "destination_vertex": [45, 49, 69, 77, 129, 130, 131, 173, 216, 227, 250, 263, 272, 305, 308, 590], "destination_vertex_map": [45, 76, 129, 130, 173, 216, 246, 263, 308], "destination_vertex_typ": [67, 94, 311], "destination_vertex_type_exampl": [67, 94], "destination_vertex_type_nam": 263, "destinationvertex": [137, 160, 215], "destinationvertexmap": 156, "destlist": 367, "destroi": [43, 320, 597], "detach": 439, "detail": [2, 4, 6, 7, 9, 12, 13, 14, 17, 20, 27, 29, 30, 33, 34, 38, 39, 45, 46, 96, 126, 128, 129, 130, 131, 132, 134, 177, 216, 267, 308, 310, 314, 315, 318, 322, 324, 328, 329, 334, 337, 341, 343, 346, 349, 350, 356, 360, 362, 364, 367, 368, 369, 418, 420, 424, 426, 427, 429, 430, 433, 434, 435, 437, 534, 577, 584, 588, 590, 593, 594], "detect": [0, 6, 8, 9, 346, 357, 358, 360, 361, 363, 364, 368, 496, 500, 501, 502], "determin": [4, 37, 128, 134, 330, 333, 334, 341, 343, 347, 350, 356, 360, 361, 367, 368, 427, 431, 522, 525, 526, 527, 584], "determinist": [365, 370, 584, 590], "dev": [35, 43, 44, 133, 320, 327, 354, 601, 602], "devcontain": 36, "develop": [6, 8, 9, 11, 12, 14, 24, 29, 34, 37, 43, 128, 216, 308, 315, 318, 320, 325, 330, 331, 333, 338, 339, 343, 344, 345, 346, 347, 348, 357, 360, 361, 362, 364, 372, 429, 431, 432, 433, 435, 496, 589, 597], "deviat": [525, 526, 527], "devic": [354, 355, 365], "device_id": 354, "devis": 319, "devtoolset": 31, "df": [0, 34, 588], "df_e": [325, 356, 610], "df_result": 600, "df_v": [325, 356, 600, 610], "df_vd": 600, "df_yyyy_mm_dd": 131, "dg": [20, 346, 362], "dgl": 364, "dgrpc_backwards_compatibility_mod": 31, "dgrpc_build_csharp_ext": 31, "dgrpc_build_grpc_csharp_plugin": 31, "dgrpc_build_grpc_node_plugin": 31, "dgrpc_build_grpc_objective_c_plugin": 31, "dgrpc_build_grpc_php_plugin": 31, "dgrpc_build_grpc_python_plugin": 31, "dgrpc_build_grpc_ruby_plugin": 31, "dgrpc_build_test": 31, "dgrpc_instal": 31, "dgrpc_protobuf_provid": 31, "dgrpc_ssl_provid": 31, "dgrpc_zlib_provid": 31, "dgv": 20, "di": 15, "diagnost": 38, "diagon": [536, 552], "diamet": 6, "diamond": [6, 547], "diamondgraph": 547, "dian": 554, "dict": [19, 20, 27, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 308, 368, 369, 396, 404, 424, 427, 428, 431, 439, 440, 524, 525, 526, 527, 534, 535, 555, 577, 583, 584, 590], "dictionali": [308, 590], "dictionari": [20, 306, 316, 368, 412, 442, 524, 525, 526, 527, 534, 535, 536, 537, 577, 579, 588], "did": [322, 437], "didn": [356, 365], "diff": 35, "differ": [2, 6, 9, 10, 12, 13, 15, 17, 18, 20, 23, 27, 30, 34, 35, 36, 37, 41, 128, 130, 134, 308, 314, 317, 319, 325, 328, 329, 330, 333, 336, 341, 343, 344, 346, 347, 350, 356, 357, 358, 359, 360, 361, 362, 364, 365, 368, 387, 425, 426, 427, 428, 429, 430, 431, 433, 434, 436, 496, 500, 501, 502, 524, 527, 534, 554, 569, 577, 582, 584, 586, 588, 589, 590, 591, 592, 593, 594, 597], "differenti": 339, "difficult": [325, 426, 436, 590], "digraph": [20, 439, 444, 454, 456, 461, 462, 465, 470, 471, 482, 499, 500, 501, 504, 508, 509, 511, 513, 514, 515, 516, 520, 571, 572, 573, 575, 578, 579, 580], "dijkstra": [14, 18, 360, 442, 600], "dim": [352, 354, 355, 524, 525, 526, 527], "dimens": [347, 349, 352, 353, 358, 362, 426, 524, 525, 526, 527, 569, 604], "dimension": [347, 353, 358, 362, 426, 428, 429], "din": 508, "dingtalk": [322, 603], "dir": [31, 311, 328, 590], "direct": [0, 9, 10, 15, 48, 59, 85, 129, 131, 329, 333, 343, 347, 350, 353, 356, 358, 359, 362, 367, 368, 388, 418, 425, 427, 431, 434, 437, 439, 442, 447, 452, 458, 473, 484, 497, 498, 499, 500, 501, 504, 508, 509, 511, 520, 521, 522, 523, 534, 535, 544, 571, 575, 577, 578, 580, 584, 588, 589, 591, 605, 609, 610], "directed_": 321, "directed_random": 508, "direction": 356, "directli": [8, 12, 20, 24, 30, 32, 34, 36, 37, 38, 46, 184, 274, 314, 317, 318, 325, 333, 336, 337, 339, 341, 343, 345, 347, 350, 356, 362, 367, 426, 429, 431, 432, 433, 434, 569, 577, 580, 584, 590, 594], "directori": [4, 22, 27, 30, 31, 32, 33, 36, 38, 45, 128, 129, 134, 322, 328, 333, 334, 336, 342, 346, 367, 371, 373, 425, 436, 439, 584, 588, 597, 598, 601, 603, 604], "dirnam": 437, "disabl": [6, 31, 134, 331, 336, 365, 584, 590], "disable_v2_behavior": [349, 352, 353, 358, 604], "disaggreg": [7, 36], "disallow": 518, "discern": 442, "disclaim": 589, "disconnect": [29, 126, 315, 442, 518, 519, 534, 537, 584, 597], "discourag": 37, "discov": 360, "discoveri": [360, 362, 584, 590], "discret": [2, 347, 362, 425, 496, 509, 511, 517, 521, 532], "discuss": [20, 128, 314, 322, 343, 442, 589, 603], "disjoint": [494, 505, 543], "disjunct": 337, "disk": [27, 129, 318, 322, 329, 357, 590], "disk_usag": 98, "dispatch": [6, 34, 357, 367], "dispatchresult": 367, "displai": [15, 317, 333, 342, 426], "disregard": 130, "disrupt": 333, "dissect": 130, "dissimilar": 0, "dissoci": 359, "dist": [15, 17, 315, 328, 335, 368, 369, 432, 435, 524, 526, 528, 584, 600, 608], "dist_0": 600, "distanc": [0, 7, 15, 17, 18, 358, 368, 442, 477, 516, 520, 524, 525, 526, 527, 528, 546, 558, 600], "distant": 442, "distil": 6, "distinct": [2, 128, 333, 337, 341, 357, 358, 361, 482, 544, 570, 589], "distinguish": [343, 357, 425, 426, 427, 589], "distneighborload": [354, 355], "distribut": [6, 10, 11, 12, 14, 15, 18, 20, 22, 23, 24, 27, 32, 34, 134, 318, 322, 327, 329, 330, 332, 333, 338, 339, 341, 344, 346, 347, 350, 351, 352, 354, 355, 357, 359, 360, 362, 363, 364, 368, 372, 425, 428, 430, 434, 436, 437, 441, 496, 499, 506, 508, 517, 524, 525, 526, 527, 528, 536, 590, 591], "distributeddataparallel": 354, "distributedli": [356, 427, 433, 435, 436, 437], "distv": [14, 18, 600], "div": [349, 353, 358, 604], "dive": 13, "diverg": [518, 578], "divers": [6, 10, 12, 34, 131, 327, 330, 334, 359, 360, 426, 586], "diversifi": 357, "divid": [10, 216, 309, 337, 341, 343, 347, 357, 368, 426, 429, 433, 434, 442, 588], "divis": [337, 341], "djikstra": 442, "djna": 331, "dl": 431, "dlcdn": 342, "dlopen": 31, "dmaven": 372, "dnetworkx": 31, "do": [6, 15, 16, 18, 20, 29, 30, 31, 33, 35, 37, 41, 46, 173, 263, 322, 328, 329, 330, 331, 333, 336, 337, 339, 343, 356, 367, 368, 369, 386, 402, 427, 439, 496, 508, 520, 524, 534, 537, 555, 571, 577, 580, 583, 584, 588, 589, 590, 594, 597], "doc": [7, 16, 17, 30, 37, 45, 46, 126, 127, 313, 358, 359, 367, 371, 373, 439, 526, 607], "docker": [4, 27, 32, 33, 36, 38, 41, 45, 126, 133, 317, 320, 322, 331, 346, 590, 597, 601, 604, 606, 607], "dockerfil": [134, 346, 432], "docket": 591, "document": [2, 10, 27, 29, 33, 35, 36, 38, 43, 44, 45, 132, 133, 134, 308, 314, 315, 319, 320, 322, 331, 333, 336, 337, 338, 341, 342, 344, 346, 348, 362, 368, 425, 426, 432, 584, 585, 590], "dodecahedr": 548, "dodecahedral_graph": 542, "dodecahedralgraph": 548, "dodecahedron": 548, "doe": [6, 11, 12, 13, 20, 34, 37, 47, 75, 94, 95, 106, 134, 175, 191, 263, 265, 281, 317, 318, 333, 341, 350, 356, 359, 361, 364, 428, 431, 436, 442, 461, 462, 504, 506, 508, 523, 534, 577, 579, 584, 589], "doesn": [2, 13, 29, 32, 37, 38, 41, 314, 329, 341, 343, 372, 431, 506, 508, 510, 577, 583, 592], "doi": [442, 512, 519, 554], "dom": 343, "domain": [12, 336, 357, 362, 524, 525, 526, 527, 528], "domin": [6, 442, 589], "don": [8, 17, 23, 30, 33, 36, 37, 322, 329, 343, 378, 471, 577, 590], "donati": 343, "done": [24, 130, 347, 350, 426, 437, 442, 539, 591], "dongz": 37, "dopenssl_root_dir": 31, "dorogovtsev": 485, "dorothea": 499, "doubl": [0, 9, 14, 16, 18, 33, 130, 154, 165, 180, 307, 321, 337, 339, 341, 356, 365, 370, 426, 436, 547, 571, 588, 592, 600, 608, 610], "double_quot": 130, "dout": 508, "dovroli": 574, "down": [330, 333, 355, 494], "download": [4, 7, 17, 19, 22, 23, 27, 29, 30, 32, 35, 36, 39, 129, 216, 308, 332, 333, 335, 338, 342, 348, 349, 356, 365, 432, 437, 602], "downstream": [358, 431], "downward": 571, "doxygen": 367, "doxygenclass": 367, "dozen": 13, "dramat": 24, "drastic": 17, "draw": [19, 318, 343, 524, 527], "drawn": [499, 527], "dream": 336, "drg": 559, "driven": [362, 569, 589], "driver": [23, 27, 154, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 299, 308, 309, 314, 319, 338, 342, 356, 404, 439, 590, 608], "driver_remote_connect": 342, "driverremoteconnect": 342, "driver\u7684\u5b9e\u73b0\u65b9\u5f0f": 610, "drop": [24, 37, 322], "drop_out": 352, "dropout": [349, 352, 353, 358, 437, 604], "drug": 362, "ds1": [356, 610], "ds2": [356, 610], "ds3": [356, 610], "dscript": 426, "dskip": 334, "dskiptest": [17, 134, 334, 372], "dst": [17, 18, 30, 154, 216, 244, 309, 311, 325, 339, 350, 356, 369, 425, 428, 439, 441, 583, 586, 589, 600, 609, 610], "dst_1hop": 431, "dst_ego": 352, "dst_emb": 352, "dst_fid": 367, "dst_field": [336, 356, 439, 605], "dst_id": [130, 426, 427, 428, 430, 431, 437, 441], "dst_label": [242, 244, 245, 251, 311, 329, 333, 356, 439, 580, 584, 590, 591, 604, 605], "dst_list": 321, "dst_list_ptr": 321, "dst_node": 428, "dst_primary_key_valu": [242, 244, 245, 251, 311, 590], "dst_type": 428, "dst_type_nam": 263, "dst_user_id": 130, "dst_vp": 589, "dst_vp_dt": 589, "dst_vpt": 589, "dst_vtype": 589, "dst_vtypes_num": 589, "dstlabel": [152, 154, 155, 161, 590], "dstpkcolmap": 590, "dstprimarykeyvalu": [152, 154, 155, 161], "dt_bool": [131, 165, 180], "dt_doubl": [45, 129, 131, 165, 173, 180, 216, 263, 272, 308, 590], "dt_float": [131, 165, 180], "dt_signed_int32": [45, 129, 131, 165, 173, 180, 216, 263, 272, 274, 308, 590], "dt_signed_int64": [45, 129, 131, 165, 173, 180, 216, 263, 272, 308, 334, 590], "dt_string": [165, 180], "dt_unknown": 334, "dt_unsigned_int32": [131, 165, 180], "dt_unsigned_int64": [131, 165, 180], "dtabl": 426, "dtf_yyyy_mm_dd_hh_mm_ss_sss": 131, "dtype": 441, "dual": 6, "dualiti": 566, "due": [9, 128, 134, 322, 333, 357, 364, 431], "dummi": 9, "dump": [33, 368, 404], "duplic": [341, 343, 504, 506, 508, 577, 578], "durat": [329, 337, 341], "dure": [0, 6, 9, 13, 24, 128, 134, 322, 332, 333, 334, 341, 343, 359, 360, 362, 367, 426, 431, 496, 584, 586, 590, 591, 592, 593], "dynam": [6, 12, 34, 314, 316, 318, 330, 346, 357, 359, 360, 362, 368, 379, 392, 497, 498, 580, 586, 590], "dynamic_pointer_cast": [321, 591], "dynamic_properti": [15, 392, 580], "dynamic_vertex_data": 368, "dynamicprojectedfrag": 16, "dynamicvertexdatacontext": 369, "e": [2, 4, 6, 9, 10, 12, 13, 14, 17, 18, 19, 20, 22, 23, 32, 34, 37, 46, 47, 67, 75, 94, 95, 106, 110, 121, 129, 130, 131, 181, 216, 272, 314, 321, 325, 328, 331, 333, 337, 339, 343, 345, 346, 349, 350, 352, 356, 357, 358, 359, 360, 361, 362, 364, 365, 368, 369, 378, 427, 428, 429, 430, 431, 434, 437, 439, 440, 441, 442, 478, 496, 506, 508, 510, 511, 513, 514, 515, 518, 523, 524, 531, 532, 533, 534, 537, 539, 555, 560, 566, 568, 577, 579, 580, 583, 584, 586, 588, 589, 591, 593, 594, 600, 604, 607, 608, 610], "e1": 343, "e2": [41, 556], "e88669": 442, "e_label": [321, 367], "e_label_id": [18, 600], "e_label_num": [18, 321, 591, 600], "e_prop": [22, 367, 401], "each": [0, 6, 9, 10, 12, 13, 14, 15, 16, 19, 20, 24, 30, 34, 35, 36, 38, 41, 128, 129, 130, 131, 134, 173, 216, 263, 308, 311, 319, 328, 329, 330, 333, 334, 339, 341, 342, 343, 347, 349, 350, 352, 353, 356, 357, 358, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 416, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 439, 442, 451, 453, 471, 472, 477, 481, 483, 488, 494, 496, 498, 499, 500, 502, 503, 505, 506, 508, 509, 511, 516, 519, 521, 524, 525, 526, 527, 528, 531, 532, 534, 536, 537, 542, 545, 557, 562, 567, 571, 573, 574, 575, 577, 583, 584, 586, 588, 589, 590, 591, 594, 598], "eager": [37, 368, 369, 418, 420, 439, 584], "earli": 359, "earlier": [343, 528, 590], "eas": [9, 12, 34, 332, 334, 362, 364, 365], "easi": [6, 7, 12, 36, 126, 318, 325, 329, 330, 332, 333, 335, 342, 343, 344, 346, 349, 350, 356, 357, 358, 359, 363, 426, 431, 435, 597], "easier": [4, 32, 36, 37, 43, 341, 359, 360, 361, 431, 584], "easiest": 329, "easili": [4, 12, 20, 22, 23, 24, 27, 29, 30, 34, 132, 314, 322, 329, 332, 343, 346, 357, 358, 359, 361, 362, 364, 431, 433, 589], "east": [356, 610], "eattr": [20, 577], "ebunch": [20, 577], "ebunch_to_add": 577, "ec": 365, "echo": [29, 31], "eco": 8, "ecosystem": [12, 315, 327, 332, 345, 346, 361, 364, 594], "ecut": 593, "ed": [15, 23, 510, 524, 531, 554, 560], "edata_arrays_": 321, "edata_t": 367, "edeg": 431, "edg": [0, 6, 7, 9, 12, 13, 15, 17, 18, 19, 22, 24, 30, 33, 37, 45, 46, 67, 68, 77, 94, 129, 131, 136, 143, 152, 154, 160, 166, 173, 216, 226, 233, 242, 244, 250, 256, 263, 308, 309, 311, 318, 321, 329, 330, 333, 336, 337, 339, 341, 347, 349, 350, 352, 353, 354, 355, 357, 358, 360, 361, 362, 364, 367, 368, 369, 370, 381, 382, 385, 390, 397, 401, 402, 420, 425, 426, 427, 428, 429, 430, 431, 433, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 449, 452, 453, 455, 456, 457, 459, 461, 462, 465, 466, 468, 470, 471, 472, 476, 478, 479, 480, 481, 482, 483, 486, 488, 489, 490, 493, 494, 496, 498, 501, 502, 504, 506, 507, 508, 510, 512, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 567, 571, 574, 575, 576, 577, 578, 580, 583, 584, 586, 588, 590, 591, 592, 600, 604, 605, 609], "edge_attr_dict_factori": 577, "edge_build": 321, "edge_collect": 400, "edge_config": 586, "edge_config_str": 586, "edge_data": [245, 402, 592], "edge_data_dict": 245, "edge_data_form_dict": 245, "edge_data_inst": 245, "edge_data_t": 591, "edge_decod": [426, 437], "edge_dict": 577, "edge_dir": [354, 355], "edge_dst": [430, 441], "edge_dst_": 321, "edge_id": 13, "edge_ind": 577, "edge_index": [347, 350, 354, 355], "edge_it": 586, "edge_label": [13, 242, 244, 245, 251, 311, 319, 333, 336, 367, 370, 584, 590], "edge_label_id": 370, "edge_label_nam": 370, "edge_label_num": [18, 370, 586, 591, 600], "edge_label_num_": 321, "edge_map": [45, 76, 105, 129, 130, 173, 216, 246, 263, 276, 308, 311], "edge_mapping_destination_vertex_mappings_inn": 247, "edge_mapping_destination_vertex_mappings_inner_dict": 247, "edge_mapping_destination_vertex_mappings_inner_form_dict": 247, "edge_mapping_destination_vertex_mappings_inner_inst": 247, "edge_mapping_dict": [76, 246], "edge_mapping_form_dict": 246, "edge_mapping_from_dict": 76, "edge_mapping_inst": [76, 246], "edge_mapping_source_vertex_mappings_inn": 248, "edge_mapping_source_vertex_mappings_inner_column": 249, "edge_mapping_source_vertex_mappings_inner_column_dict": 249, "edge_mapping_source_vertex_mappings_inner_column_form_dict": 249, "edge_mapping_source_vertex_mappings_inner_column_inst": 249, "edge_mapping_source_vertex_mappings_inner_dict": 248, "edge_mapping_source_vertex_mappings_inner_form_dict": 248, "edge_mapping_source_vertex_mappings_inner_inst": 248, "edge_mapping_type_triplet": [77, 250], "edge_mapping_type_triplet_dict": [77, 250], "edge_mapping_type_triplet_form_dict": 250, "edge_mapping_type_triplet_from_dict": 77, "edge_mapping_type_triplet_inst": [77, 250], "edge_num": [321, 402, 604, 608], "edge_offset": 321, "edge_prop_id": 367, "edge_properti": 370, "edge_property_id": 370, "edge_property_nam": 370, "edge_property_num": 370, "edge_request": [244, 251, 301, 311, 590], "edge_request_dict": 251, "edge_request_form_dict": 251, "edge_request_inst": 251, "edge_sampl": [350, 430, 434], "edge_sourc": 426, "edge_src": [430, 441], "edge_src_": 321, "edge_statist": 252, "edge_statistics_dict": 252, "edge_statistics_form_dict": 252, "edge_statistics_inst": 252, "edge_storage_strategi": [50, 131, 228], "edge_subgraph": 577, "edge_t": [321, 426, 437], "edge_table_index": 13, "edge_table_with_self_loop": [425, 609], "edge_tables_": [13, 321], "edge_tables_columns_": 321, "edge_typ": [13, 45, 62, 87, 129, 131, 173, 216, 236, 258, 263, 272, 308, 349, 352, 353, 358, 425, 427, 428, 429, 430, 431, 434, 437, 441, 589, 590, 604, 609], "edge_type_nam": [263, 589], "edge_type_request": 263, "edge_type_statist": 259, "edge_weight": [350, 429, 431], "edgeapi": [216, 309], "edgecut": 589, "edgedata": [154, 216, 244, 309], "edgedataview": 577, "edgeexpans": 330, "edgeid": 341, "edgeinputformat": 22, "edgeit": 471, "edgelabel": [152, 154, 155, 161, 341, 389], "edgelist": [20, 555, 579], "edgemap": [6, 15, 46, 105, 186, 216, 276, 309], "edgemapdens": 6, "edgemappingdestinationvertexmappingsinn": [156, 216, 246, 309], "edgemappingsourcevertexmappingsinn": [156, 216, 246, 309], "edgemappingsourcevertexmappingsinnercolumn": [142, 157, 158, 216, 232, 247, 248, 309], "edgemappingtypetriplet": [46, 76, 156, 216, 246, 309], "edgemapspars": 6, "edgerequest": [154, 211, 216, 244, 301, 309, 311, 590], "edgerequest3": 154, "edgerequest4": 154, "edges_set": 336, "edges_sets_": 336, "edgesampl": 430, "edgeset": 6, "edgestatist": [169, 216, 259, 309], "edgestoragestrategi": 138, "edgetyp": [146, 168, 579], "edgetypestatist": 169, "edgeview": 577, "edit": [36, 37, 45, 336, 523, 560, 597], "edu": 442, "ee": 332, "effect": [9, 36, 37, 45, 318, 325, 333, 341, 342, 350, 357, 362, 429, 508, 577, 590], "effici": [6, 9, 12, 13, 16, 18, 23, 34, 131, 314, 318, 319, 322, 325, 327, 333, 334, 336, 339, 342, 343, 346, 347, 350, 356, 357, 358, 359, 360, 361, 362, 363, 364, 372, 429, 431, 433, 510, 531, 588, 589, 591, 593], "effort": [0, 34, 318, 341, 365, 589], "effortlessli": 358, "efil": [367, 591], "efilepath": 23, "eformat": [22, 439], "ego": [347, 362, 433, 578, 609], "ego_flow": [425, 609], "egoflow": [425, 433, 609], "egograph": [350, 362, 425, 433, 609], "egographsag": [349, 352, 358, 604], "egosag": 352, "egosagesuperviseddataload": [349, 353, 358, 604], "egosageunsuperviseddataload": 352, "egotensor": [425, 433, 609], "eid": [33, 321, 336, 439], "eid_array_t": 367, "eid_t": [321, 367], "eid_typ": 367, "eigenstructur": 569, "eigenvalu": [442, 522], "eigenvector": [6, 368, 442, 569], "eigenvector_centr": [0, 34, 368, 442, 578, 600], "eigenvector_centrality_numpi": 442, "either": [2, 13, 30, 34, 130, 134, 314, 315, 319, 322, 328, 329, 333, 339, 342, 343, 350, 368, 427, 431, 439, 440, 480, 483, 496, 523, 534, 567, 577, 591], "ek": 346, "ekei": 471, "elabel": [586, 591], "elabor": [337, 364], "elast": [363, 590], "elat": 359, "elect": 0, "electron": [532, 570], "eleg": [322, 325], "element": [9, 13, 131, 337, 341, 343, 360, 367, 426, 429, 431, 439, 442, 472, 504, 549, 571, 583, 584, 589], "elementid": [337, 341], "eli": 343, "elif": [308, 437], "elimin": [2, 6, 14, 427], "elmokashfi": 574, "els": [14, 16, 18, 154, 173, 175, 181, 184, 191, 209, 216, 308, 321, 343, 427, 437, 439, 535, 589, 590, 600], "emb": [343, 425, 609], "embed": [325, 347, 353, 358, 362, 426, 433], "embedd": 333, "embrac": 361, "emit": [341, 343, 425, 428, 431, 437, 609], "emphas": [318, 320, 364], "empir": 364, "emplac": 321, "emploi": [12, 24, 34, 134, 333, 339, 353, 359, 360], "empow": [338, 344, 361], "empti": [2, 19, 29, 41, 184, 274, 307, 314, 321, 328, 333, 334, 341, 343, 356, 368, 370, 459, 483, 486, 516, 517, 555, 571, 577, 580, 590], "empty_graph": [449, 490], "empty_result": 334, "emptydir": 354, "en": [343, 360, 368, 539, 543, 544, 545, 546, 548, 549, 550, 556, 557, 558, 559, 561, 562, 563, 564], "enabl": [0, 1, 4, 6, 13, 15, 17, 18, 23, 31, 56, 57, 83, 84, 128, 133, 170, 198, 260, 288, 317, 318, 319, 322, 328, 333, 334, 342, 343, 347, 352, 353, 357, 358, 359, 361, 362, 363, 364, 365, 367, 436, 442, 577, 584, 589, 590, 593, 594, 598], "enable_if": 367, "enable_java_sdk": 367, "enabled_engin": [2, 424, 584], "encapsul": [27, 216, 308, 319, 346, 347, 425, 431, 584], "encod": [9, 13, 133, 216, 309, 334, 337, 339, 368, 426, 431, 437, 439, 441, 579, 609], "encode_fn": [431, 437], "encompass": [131, 335, 342, 353], "encount": [2, 32, 37, 126, 134, 308, 314, 318, 322, 360, 378, 590], "encourag": [4, 6, 15, 24, 37], "encrypt": 363, "encyclopedia": 570, "end": [15, 16, 321, 325, 328, 337, 341, 343, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 364, 369, 370, 431, 436, 442, 456, 465, 470, 471, 484, 496, 579, 583, 589, 594], "end2end": 331, "end_tim": [47, 96, 267], "end_time_exampl": 47, "end_v": [341, 343, 608], "enddat": 343, "endian": 307, "endif": 589, "endingwith": [341, 608], "endnod": 337, "endpoint": [0, 9, 10, 27, 28, 29, 44, 45, 47, 75, 94, 95, 106, 126, 134, 175, 185, 191, 209, 216, 263, 265, 275, 281, 299, 306, 308, 315, 317, 318, 328, 329, 331, 333, 335, 337, 338, 341, 342, 352, 356, 358, 367, 431, 440, 442, 584, 586, 590, 597, 600, 608, 610], "endswith": 341, "endtim": 177, "endv": [339, 343, 361, 608], "enforc": [35, 334], "engag": [37, 317, 357, 358], "engin": [0, 1, 2, 5, 8, 16, 17, 23, 27, 28, 30, 32, 38, 41, 43, 45, 103, 133, 308, 316, 318, 322, 325, 328, 329, 330, 331, 334, 336, 339, 340, 343, 347, 351, 352, 356, 358, 359, 360, 361, 362, 364, 368, 372, 380, 396, 420, 425, 433, 439, 440, 441, 577, 583, 584, 586, 590, 591, 592, 593, 603, 604], "engine_config": [134, 584], "engine_unavail": 334, "engineconfig": 367, "enhanc": [3, 4, 9, 318, 319, 328, 333, 334, 339, 341, 358], "enjoi": 364, "enlarg": 438, "enorm": 589, "enough": [9, 350, 426, 429, 496, 584, 588], "ensur": [4, 6, 9, 32, 35, 36, 37, 128, 130, 132, 134, 308, 311, 317, 318, 319, 330, 333, 337, 339, 358, 364, 584, 590], "ensure_param_str": 311, "enter": [4, 46, 47, 67, 75, 94, 95, 106, 110, 121, 330, 342], "enterpris": 322, "entir": [2, 9, 34, 318, 330, 358, 362, 431, 442, 577], "entiti": [320, 339, 343, 353, 358, 362, 426], "entr": 332, "entranc": [27, 134, 431], "entri": [43, 306, 330, 333, 334, 341, 343, 350, 352, 441, 442, 489, 506, 508, 509, 534, 536, 537, 555, 597], "entrypoint": [36, 597, 604], "enum": 367, "enum_type_wrapp": 312, "enumer": [354, 355, 367], "enumtypewrapp": 312, "env": [23, 322, 332, 354, 358, 432], "environ": [4, 11, 19, 20, 23, 24, 27, 29, 33, 37, 38, 39, 44, 133, 216, 306, 308, 314, 317, 319, 322, 325, 327, 332, 333, 338, 346, 352, 358, 359, 366, 368, 372, 432, 436, 442, 584, 589, 590, 591, 597, 598, 603], "eof": [33, 45], "epoch": [349, 350, 352, 353, 354, 355, 358, 425, 430, 588, 604, 609], "epsilon": 319, "eq": [341, 343, 361, 368, 608], "equal": [0, 10, 154, 209, 319, 322, 337, 341, 343, 349, 353, 356, 358, 442, 494, 496, 527, 532, 570, 604], "equat": 442, "equilater": 563, "equip": [9, 333, 345, 346, 359, 365, 594], "equival": [2, 20, 322, 337, 339, 341, 343, 431, 496, 533, 577], "erd\u0151": [525, 526, 527], "eric": 529, "err": 455, "error": [0, 2, 32, 36, 37, 38, 46, 47, 67, 75, 83, 94, 95, 106, 110, 121, 128, 133, 154, 173, 181, 184, 191, 209, 244, 263, 272, 274, 281, 299, 310, 312, 322, 327, 330, 332, 333, 334, 367, 368, 431, 435, 442, 476, 577, 590], "error_cod": 367, "error_dict": 78, "error_from_dict": 78, "error_inst": 78, "escap": 130, "escape_char": 130, "especi": [9, 314, 356], "essenti": [32, 130, 131, 314, 319, 322, 337, 341, 346, 361, 363], "establish": [134, 315, 317, 325, 590], "establish_d": 439, "estim": [0, 330, 333, 343, 360, 361, 437, 442], "estimatorspec": 437, "et": [368, 574], "etabl": 321, "etable\u5148\u6309\u7167\u8fb9\u6807\u7b7e": 321, "etc": [0, 6, 7, 15, 29, 325, 328, 330, 339, 347, 350, 356, 358, 359, 362, 365, 369, 425, 428, 429, 430, 433, 444, 456, 465, 470, 471, 577, 579, 590], "etcd": [30, 322, 329, 584, 586, 601], "etcd0": 30, "etcd01": 584, "etcd02": 584, "etcd03": 584, "etcd_addr": 584, "etcd_client": 586, "etcd_endpoint": 586, "etcd_replica": 30, "etcd\u7b49\u7ec4\u4ef6\u5931\u8d25\u800c\u5bfc\u81f4graphscope\u542f\u52a8\u5931\u8d25": 603, "etext": 489, "etriev": 359, "etyp": 589, "euclidean": [524, 525, 526, 527, 528], "europ": 499, "euxo": 31, "eval": [354, 355, 581], "evalu": [0, 6, 14, 15, 16, 18, 37, 328, 333, 346, 358, 359, 362, 365, 367, 368, 369, 380, 403, 412, 414, 418, 420, 439, 584, 594, 608], "even": [6, 8, 20, 128, 330, 336, 343, 359, 360, 433, 439, 442, 506, 516, 534, 536, 537, 577, 589], "event": [38, 496], "ever": [325, 350], "everi": [2, 6, 23, 128, 131, 134, 341, 343, 350, 362, 367, 431, 442, 444, 445, 446, 461, 462, 480, 494, 557, 564, 577, 583, 589], "everyon": 37, "everyth": [7, 349, 358, 589], "evid": 333, "evolut": 533, "evolv": [350, 357, 590], "exact": [361, 506, 508, 604], "exactli": [343, 347, 361, 368, 442, 487, 496, 510, 555, 583, 590], "examin": [130, 358], "exampl": [2, 7, 10, 15, 16, 18, 19, 20, 27, 31, 37, 41, 128, 129, 131, 134, 216, 308, 314, 317, 319, 325, 327, 328, 329, 332, 333, 336, 337, 339, 342, 343, 344, 346, 347, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 368, 369, 375, 376, 418, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 440, 442, 444, 445, 446, 448, 453, 455, 456, 461, 462, 465, 470, 471, 476, 478, 480, 482, 483, 486, 489, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 512, 513, 515, 517, 520, 524, 525, 526, 527, 528, 534, 537, 542, 567, 569, 570, 571, 572, 575, 577, 579, 580, 581, 583, 584, 588, 589, 590, 591, 592, 597, 598, 600, 604, 609], "example_db": 328, "exc_tb": 584, "exc_typ": 584, "exc_valu": 584, "exce": [356, 535, 536], "exceed": 334, "exceededmaxiter": 496, "excel": [333, 363], "except": [22, 46, 47, 67, 75, 94, 95, 106, 110, 121, 134, 216, 308, 310, 311, 312, 314, 318, 322, 334, 342, 349, 352, 353, 356, 358, 363, 430, 437, 455, 472, 476, 487, 496, 506, 508, 557, 577, 584, 589, 604], "excess": [318, 333], "exchang": [6, 14], "exclud": 361, "exclus": [128, 131, 337], "exec": [38, 598], "execut": [4, 6, 9, 12, 14, 15, 17, 23, 24, 27, 29, 41, 46, 126, 128, 129, 131, 134, 216, 308, 309, 315, 316, 317, 318, 319, 325, 328, 329, 330, 331, 332, 333, 334, 338, 341, 343, 346, 358, 359, 361, 362, 367, 368, 369, 396, 431, 435, 439, 440, 442, 537, 581, 584, 586, 590, 592, 598, 600, 604, 608], "execute_queri": 335, "executetimem": 328, "executor": [23, 35, 38, 329, 331, 357, 440, 598], "exemplifi": [328, 590], "exhaust": 577, "exist": [0, 2, 4, 6, 8, 9, 10, 12, 14, 15, 20, 34, 37, 128, 154, 209, 244, 299, 314, 325, 327, 337, 341, 347, 356, 357, 359, 360, 361, 362, 364, 368, 370, 376, 378, 422, 424, 426, 429, 431, 435, 436, 439, 442, 461, 462, 466, 508, 517, 531, 575, 577, 584, 586, 588, 590], "exit": [184, 314, 334, 342, 354, 368, 608], "exp": [526, 528], "expand": [19, 318, 330, 333, 343, 344, 429, 431, 578], "expand_factor": [350, 429, 434], "expandgetvfusionrul": 333, "expandinto": 333, "expandus": [27, 601, 604], "expandvar": [19, 22], "expans": [318, 333, 361, 362, 434, 608], "expansion\u8bed\u6cd5\u7cd6\u5b9e\u73b0": 608, "expect": [27, 34, 37, 314, 322, 328, 356, 372, 506, 508, 510, 580, 584], "expected_result": 328, "expens": 476, "experi": [23, 32, 37, 128, 319, 325, 330, 333, 346, 360, 362, 364, 365, 499], "experienc": [14, 361], "experiment": [536, 584], "expert": 9, "explain": [38, 333, 343, 426, 584, 589, 608], "explan": [45, 131, 318, 333, 334, 368, 429], "explicit": [16, 367, 521, 577, 584], "explicitli": [4, 13, 333, 367, 427, 496, 584, 590], "exploit": [359, 586], "explor": [0, 17, 43, 130, 317, 320, 325, 331, 333, 341, 343, 357, 358, 361, 589], "expon": 496, "exponenti": [337, 341, 343, 362, 524, 526, 527], "export": [2, 4, 23, 29, 31, 33, 39, 45, 134, 216, 308, 314, 317, 319, 322, 331, 348, 588, 590, 603], "expos": [29, 317, 328, 334, 339, 345, 429, 440, 584, 594], "expovari": [524, 527], "expr": [339, 341, 343, 608], "express": [14, 15, 24, 330, 333, 337, 338, 339, 350, 359, 361, 369, 426, 428, 431, 528, 577, 608], "extend": [4, 9, 17, 23, 318, 333, 339, 341, 342, 343, 364, 369, 426, 434, 435, 523, 589, 600], "extend_typ": 367, "extendintersectrul": 333, "extendlabeldata": 367, "extens": [1, 4, 6, 27, 36, 130, 330, 332, 333, 334, 337, 350, 357, 426], "extent": [0, 6], "extern": [33, 37, 314, 350, 357, 584, 590], "extra": [13, 37, 263, 322, 329, 331, 442, 538, 603], "extra_conf": [356, 610], "extract": [0, 335, 337, 341, 356, 357, 358, 359, 368, 376, 440, 584, 586, 590], "extran": 2, "extrem": [12, 27, 357, 433, 478, 489, 589], "f": [6, 20, 33, 45, 129, 314, 319, 329, 331, 349, 354, 355, 358, 431, 442, 529, 530, 576, 590, 598, 604], "f0": 439, "f1": [334, 362, 439], "f_": 10, "f_q": 523, "face": [24, 31, 330, 343, 360, 562, 563], "facilit": [4, 20, 319, 328, 331, 333, 341, 346, 347, 350, 362, 426, 589, 590], "fact": [37, 330, 336, 534, 537], "factor": [0, 13, 328, 331, 333, 343, 368, 442, 477, 487, 509, 511, 589], "fagiolo": 442, "fail": [2, 37, 134, 154, 173, 175, 177, 181, 184, 191, 209, 216, 274, 308, 310, 312, 314, 322, 330, 333, 341, 362, 442, 577, 590], "failov": [134, 346, 364], "failur": [37, 134, 364], "fair": 365, "fairli": [13, 332], "fall": 6, "fallback": 584, "fals": [0, 13, 15, 17, 18, 19, 20, 130, 134, 314, 329, 336, 341, 354, 355, 356, 367, 368, 370, 418, 425, 426, 427, 431, 437, 439, 441, 442, 455, 459, 461, 462, 471, 473, 474, 499, 500, 501, 504, 510, 520, 535, 577, 580, 584, 588, 590, 600, 609], "famili": [429, 442, 480, 538, 566], "familiar": [8, 14, 16, 29, 330], "famou": [22, 23, 576], "fan": [510, 524, 600], "faq": 344, "far": [0, 129, 357, 426], "fashion": [12, 20], "fast": [0, 9, 20, 330, 333, 368, 435], "faster": [22, 442], "fastffi": [12, 372], "fastgcn": [433, 609], "fat": 17, "fatal": 128, "faust": 0, "favor": 333, "faye_wong": 343, "fb": 365, "fd": [399, 404, 600], "feasibl": [333, 347, 362], "feat": 37, "feat_": [349, 352, 353, 354, 355, 358, 604], "featur": [3, 6, 9, 12, 23, 32, 34, 216, 308, 309, 319, 320, 328, 337, 345, 347, 349, 352, 353, 357, 358, 361, 362, 363, 364, 367, 372, 425, 426, 433, 437, 439, 577, 584, 589, 594, 604, 609], "feature1": 426, "feature2": 426, "feature3": 426, "feature_column": 437, "feature_encod": [425, 609], "features_column": 437, "features_num": [349, 352, 353, 358, 425, 604, 609], "februari": 502, "fed": [346, 358, 362], "feed": [357, 420, 425, 428, 431, 437, 441, 584, 609], "feedback": [37, 325], "feel": [20, 37, 314, 322], "femal": 343, "female_count": 343, "fernando": 554, "fetch": [9, 15, 17, 584, 590, 600], "few": [6, 29, 314, 318, 322, 329, 333, 359, 589], "fewer": 2, "ffi": 589, "fg": [20, 591], "fh": 579, "fi": 437, "fid": [321, 367, 370, 402, 586], "fid_": 321, "fid_t": [321, 367], "field": [11, 27, 30, 33, 38, 128, 129, 131, 134, 314, 319, 329, 333, 334, 350, 352, 353, 356, 358, 429, 433, 437, 439, 523, 584, 590, 601, 604], "field_of_studi": [358, 604], "fieldinfo": 311, "fieldpath": 354, "fieldref": 354, "figur": [4, 6, 9, 12, 24, 27, 30, 34, 330, 336, 343, 347, 350, 358, 360, 361, 362, 427, 429, 560, 586], "figure1": 428, "file": [4, 15, 17, 22, 23, 28, 29, 35, 37, 38, 39, 45, 46, 121, 128, 129, 131, 134, 188, 216, 308, 311, 314, 315, 318, 319, 320, 322, 327, 328, 329, 331, 333, 334, 336, 356, 367, 368, 376, 399, 425, 426, 432, 437, 439, 475, 476, 527, 577, 579, 584, 586, 590, 591, 597, 598, 600, 610], "file1": 311, "file2": 311, "file_path": [120, 296], "filed1": 329, "filed2": 329, "filenam": [579, 590], "filenotfounderror": 376, "filepath": [23, 206], "files_to_format": 35, "filestorag": [121, 311], "filesystem": [31, 426], "filetyp": 439, "fileutil": 334, "filippo": 496, "fill": [328, 438, 478, 489, 499, 533], "filter": [6, 15, 23, 128, 330, 333, 344, 356, 361, 368, 369, 569, 583, 589, 608], "filterintojoinrul": [128, 134, 333], "filtermatchrul": [128, 134, 333], "filterpushdown": 333, "final": [6, 9, 13, 14, 17, 19, 24, 173, 216, 308, 328, 330, 336, 343, 347, 352, 357, 361, 367, 425, 431, 433, 519, 539, 577, 590, 591], "financi": 357, "find": [0, 4, 8, 9, 17, 22, 31, 32, 36, 37, 41, 45, 46, 129, 314, 317, 319, 322, 325, 327, 331, 333, 339, 341, 343, 352, 356, 358, 360, 361, 365, 367, 376, 424, 442, 447, 466, 467, 496, 584, 589, 590, 597], "finish": [27, 129, 216, 321, 342, 352, 370, 427, 430, 590], "finit": [508, 510, 523], "firefox": 343, "firewal": 317, "first": [6, 13, 14, 15, 16, 17, 19, 20, 24, 29, 35, 37, 45, 126, 129, 130, 134, 173, 184, 216, 307, 308, 314, 315, 319, 322, 325, 330, 331, 332, 333, 335, 337, 339, 341, 342, 343, 347, 351, 352, 356, 358, 359, 361, 362, 368, 369, 425, 426, 431, 433, 435, 439, 442, 446, 476, 492, 495, 504, 517, 520, 531, 532, 533, 534, 535, 538, 571, 576, 577, 580, 583, 584, 586, 589, 590, 591, 592], "firstli": [330, 339, 343, 356, 364], "firstnam": [343, 356, 588, 605, 610], "fission": 567, "fist": 325, "fit": [27, 318, 325, 329, 351, 352, 372], "five": [216, 309], "fix": [0, 6, 131, 317, 341, 343, 347, 349, 362, 417, 569, 590, 592], "fixed_char": [79, 131, 253], "fixed_char_char": [80, 254], "fixed_char_char_dict": [80, 254], "fixed_char_char_form_dict": 254, "fixed_char_char_from_dict": 80, "fixed_char_char_inst": [80, 254], "fixed_char_dict": [79, 253], "fixed_char_form_dict": 253, "fixed_char_from_dict": 79, "fixed_char_inst": [79, 253], "fixed_length": [80, 131, 254], "fixedchar": [46, 216, 309], "fixedcharchar": [46, 79, 113, 163, 200, 216, 253, 290, 309], "fixedlength": 164, "fixedsizebinaryarrai": 321, "fixm": 23, "fixpoint": 14, "flag": [426, 427], "flake8": 35, "flash": [1, 3, 8, 12, 357], "flash_bf": 15, "flashappbas": 15, "flashglobaldatacontext": 15, "flashvertexdatacontext": 15, "flashwar": 6, "flat": 341, "flatmap": 608, "flatten": [4, 13, 354], "flatten_edge_tables_columns_": 321, "fledg": [4, 12, 357], "flex": [43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 129, 134, 216, 308, 313, 314, 318, 320, 337, 597], "flex_data_dir": 134, "flexbuild": [132, 597], "flexibl": [6, 12, 13, 23, 128, 131, 333, 334, 338, 343, 346, 357, 358, 359, 584, 588], "flexibli": [346, 357, 362, 364], "float": [20, 91, 98, 165, 180, 307, 337, 339, 341, 352, 356, 365, 368, 425, 426, 427, 428, 436, 437, 438, 442, 496, 499, 500, 501, 502, 504, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 531, 532, 533, 569, 577, 579, 584, 588, 592, 608, 609, 610], "float32": [349, 353, 354, 355, 358, 428, 437, 604], "float64": 437, "float_attr": [350, 428, 429, 430, 434, 437], "floor": 530, "florentin": 566, "flow": [6, 359, 360, 425, 567], "floyd": 442, "fluid": 6, "flush": 322, "fly": [32, 318, 358], "fmt": 35, "fnum": [367, 370], "fnum_": 321, "focu": [6, 41, 134, 333, 357, 361, 364, 435], "focus": [37, 333, 343, 357, 363, 365, 431, 569, 590], "foewa": 431, "fold": [337, 589, 608], "folder": [31, 38, 45, 134, 354, 356, 589], "follow": [0, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 43, 45, 46, 126, 128, 129, 130, 131, 132, 134, 216, 308, 314, 315, 317, 319, 320, 322, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 368, 369, 372, 376, 425, 426, 427, 428, 429, 431, 434, 435, 437, 439, 441, 476, 496, 506, 510, 516, 519, 529, 530, 536, 539, 560, 573, 577, 584, 586, 588, 589, 590, 591, 593, 594, 597, 598], "font_weight": 19, "foo": [20, 577], "foovalu": 577, "forbid": 308, "forc": [16, 37, 356, 597], "forcecontinu": [16, 17, 600], "forcibli": 322, "ford": [360, 442], "foreach": [14, 16], "foreign": [12, 589], "forest": 6, "forest_str": 572, "forg": 569, "fork": [4, 132, 134], "form": [6, 20, 121, 330, 338, 339, 341, 343, 347, 350, 361, 362, 368, 425, 427, 428, 431, 478, 498, 528, 543, 545, 548, 551, 555, 577, 583], "format": [12, 13, 20, 22, 34, 35, 45, 47, 68, 70, 129, 130, 131, 184, 187, 274, 277, 308, 325, 327, 333, 334, 337, 343, 347, 354, 356, 362, 363, 365, 368, 396, 403, 425, 428, 431, 433, 436, 437, 439, 440, 577, 579, 584, 586, 602], "former": [13, 360], "formula": 0, "forth": 322, "fortun": [12, 20, 129, 314, 325], "fortunato": [496, 500, 501, 502], "forum": 343, "forward": [38, 318, 347, 349, 350, 352, 353, 358, 362, 431, 590, 604], "foster": 368, "found": [0, 4, 9, 16, 17, 18, 36, 134, 154, 173, 181, 209, 244, 263, 272, 299, 314, 322, 328, 329, 334, 342, 343, 347, 348, 359, 365, 418, 438, 496, 538, 539, 575, 577, 584, 588, 589, 590, 594], "foundat": [12, 320, 357], "four": [6, 9, 12, 20, 353, 358, 359, 367, 425, 428, 437, 524, 528, 589], "fourteenth": 517, "fpermiss": 31, "fpic": 31, "frac": [368, 442, 452, 510], "fraction": [0, 368, 442, 496], "frag": [14, 17, 18, 321, 375, 586, 591, 600], "frag_id": [367, 586, 591], "frag_t": [15, 16, 367], "frag_wrapp": 367, "fragment": [4, 10, 12, 13, 14, 16, 17, 18, 321, 330, 360, 362, 370, 402, 439, 440, 586, 591, 594, 600], "fragment_group_id": [589, 591], "fragment_id": 13, "fragment_t": [14, 15, 16, 367], "fragment_wrapp": 367, "fragmentloc": 591, "fragmentwrapp": 367, "fragment\u603b\u6570": 321, "frame": [4, 362], "framework": [6, 9, 15, 16, 17, 18, 22, 23, 24, 322, 327, 330, 344, 347, 350, 356, 357, 359, 360, 361, 362, 363, 364, 368, 369, 418, 429, 431, 433, 435, 439, 440, 581, 584, 586, 588, 600, 605, 610], "frank": 576, "fraud": [357, 364], "fraudul": 357, "free": [2, 9, 37, 314, 322, 334, 350, 364, 517, 524, 534, 537, 539, 570, 576, 584], "freedom": 12, "freeli": [12, 24], "freez": [460, 578], "frequenc": [57, 84, 451], "frequent": [319, 327, 357, 360, 590], "fresh": [577, 586], "fridai": [20, 577, 580], "friendli": [11, 12, 37, 327, 333, 346, 360, 362, 363, 364], "friendship": 131, "friendster": 365, "friez": 510, "frobeniu": 442, "from": [0, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 18, 22, 23, 24, 27, 29, 30, 34, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 154, 175, 209, 216, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 347, 348, 349, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 376, 396, 397, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 445, 456, 475, 477, 482, 484, 486, 489, 496, 499, 503, 504, 505, 506, 508, 511, 516, 517, 519, 520, 524, 525, 526, 527, 528, 529, 536, 543, 552, 564, 569, 571, 572, 576, 577, 579, 580, 583, 584, 588, 589, 591, 597, 600, 604, 605, 608, 610], "from_cach": 75, "from_dict": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 308, 590], "from_dict_of_list": 555, "from_edgelist": 555, "from_except": [310, 312], "from_gener": [431, 437], "from_json": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305], "from_neigh": 437, "from_numpi": 592, "from_prufer_sequ": 572, "from_respons": [310, 312], "from_self": 437, "fromjson": [173, 216], "frontend": [38, 39, 103, 134, 329, 331, 332, 334, 335, 342, 590, 598], "frontend_cypher_endpoint": 440, "frontend_gremlin_endpoint": 440, "frontendquerypersecondlimit": 329, "frozen": [455, 460], "frozen_graph": 455, "frozenset": [496, 579], "frucht": [542, 549], "fruchtgraph": 549, "fsspec": [356, 610], "fulfil": [6, 15, 18, 318, 359], "full": [0, 4, 12, 16, 17, 18, 22, 34, 130, 216, 308, 314, 339, 346, 347, 350, 357, 362, 364, 368, 425, 428, 429, 431, 487, 590, 594, 600, 609], "full_graph_mod": [425, 609], "full_jar_path": [368, 600], "fulli": [4, 128, 130, 347, 350, 361, 368, 378, 519, 589, 600], "func": 431, "function": [2, 4, 6, 9, 12, 14, 16, 17, 19, 20, 24, 34, 36, 43, 126, 128, 131, 134, 314, 317, 318, 322, 333, 336, 337, 339, 341, 342, 343, 347, 356, 357, 359, 362, 364, 367, 431, 435, 442, 475, 476, 483, 486, 506, 508, 513, 524, 525, 526, 527, 528, 536, 572, 575, 576, 577, 578, 579, 582, 588, 589, 594, 597, 600], "functiontyp": 367, "fundament": [6, 9, 131, 330, 359], "further": [3, 6, 10, 14, 20, 27, 30, 34, 318, 325, 328, 331, 337, 339, 341, 343, 358, 359, 369, 427, 439, 440, 455, 586, 589], "furthermor": [9, 328, 342, 343, 346, 357, 364], "fusion": 333, "futur": [18, 128, 131, 134, 216, 309, 318, 328, 337, 341, 343, 356], "fw": 15, "fw_t": 15, "g": [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 28, 29, 32, 33, 34, 37, 41, 45, 47, 129, 131, 134, 216, 314, 325, 328, 331, 332, 336, 337, 339, 341, 342, 343, 345, 346, 348, 349, 350, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 367, 368, 369, 376, 420, 425, 427, 428, 429, 430, 431, 432, 434, 435, 437, 439, 440, 442, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 476, 477, 479, 480, 482, 483, 486, 487, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 512, 513, 515, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 533, 534, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 569, 570, 574, 575, 577, 579, 580, 583, 584, 586, 588, 589, 590, 591, 593, 594, 598, 600, 603, 604, 605, 607, 608, 609, 610], "g1": [19, 439, 581, 592, 593], "g2": [19, 439, 577, 581, 592, 593], "g_res_typ": 15, "g_to_add_to": [444, 445, 446], "ga": 12, "gabber": 522, "gae": [0, 3, 10, 12, 14, 15, 28, 32, 34, 322, 327, 345, 346, 357, 360, 364, 365, 366, 372, 396, 440, 601, 602], "gae_endpoint": 28, "gae_java": 373, "gaertler": 499, "gaia": [134, 328, 357, 608], "gaia_executor": 331, "gain": [13, 37], "galaxi": 359, "galil": 522, "gamma": 517, "gap": 327, "gar": [18, 368, 376, 600], "gardner": 565, "gart": 327, "gart_blob_m": 586, "gart_schema_p": 586, "gartfrag": 586, "garth": 554, "gat": [346, 362, 425, 433, 609], "gather": [24, 328, 584], "gather\u64cd\u4f5c": 321, "gat\u7b49\u6a21\u578b": 609, "gat\u7b49\u7b97\u6cd5\u90fd\u662f\u8fd9\u79cd\u5b9e\u73b0\u601d\u8def": 609, "gauss": [525, 526, 527], "gaussian": [499, 525, 526, 527], "gaussian_random_partition_graph": 504, "gb": 365, "gcc": [332, 365, 607], "gcn": [9, 346, 350, 362, 366, 425, 429, 433, 437, 604, 606, 609, 611], "gcnconv": [425, 609], "gcn\u6a21\u578b\u7ee7\u627f\u81ea\u57fa\u672c\u7684\u5b66\u4e60\u6a21\u578b\u7c7b": 609, "gcn\u6bcf\u4e2a\u8282\u70b9\u91c7\u6837\u5168\u90e8\u90bb\u5c45": 609, "ge": [524, 528], "gear": 590, "geminigraph": [364, 365], "gen": [357, 431], "gen1": 431, "gen2": 431, "gen_code_from_plan": 134, "gen_label": [349, 352, 353, 358, 420, 584, 604], "gen_test_data": 437, "gender": [343, 356, 610], "gener": [6, 9, 13, 14, 17, 27, 34, 41, 45, 46, 82, 83, 125, 127, 131, 134, 216, 310, 313, 314, 319, 325, 327, 330, 333, 334, 338, 339, 341, 343, 347, 350, 356, 357, 358, 359, 360, 362, 368, 377, 425, 426, 427, 431, 437, 439, 441, 442, 577, 578, 582, 584, 586, 588, 589, 590, 591, 592, 598], "generate_directed_csr": 321, "generate_eid": [18, 329, 356, 367, 418, 439, 584, 591, 600, 610], "generate_local_id_list": 321, "generated_eid": 13, "generateid": 321, "generatortyp": [431, 441], "genetic_algorithm": 437, "geograph": [524, 527], "geometr": [442, 564, 578], "get": [2, 4, 6, 12, 16, 18, 19, 20, 27, 29, 30, 31, 32, 33, 34, 38, 41, 43, 44, 45, 47, 67, 75, 94, 95, 106, 110, 132, 133, 154, 173, 175, 181, 191, 209, 244, 263, 265, 272, 281, 299, 306, 307, 309, 310, 311, 312, 318, 320, 322, 327, 329, 330, 331, 337, 343, 347, 350, 356, 361, 363, 366, 368, 369, 370, 388, 425, 428, 429, 430, 431, 434, 439, 440, 441, 442, 475, 496, 567, 577, 583, 584, 586, 589, 590, 594, 597, 598, 600, 603, 604], "get_aggregated_valu": 370, "get_alert_message_respons": [47, 82], "get_alert_message_response_dict": 82, "get_alert_message_response_from_dict": 82, "get_alert_message_response_inst": 82, "get_alert_receiver_respons": [47, 83], "get_alert_receiver_response_dict": 83, "get_alert_receiver_response_from_dict": 83, "get_alert_receiver_response_inst": 83, "get_alert_rule_respons": [47, 84], "get_alert_rule_response_dict": 84, "get_alert_rule_response_from_dict": 84, "get_alert_rule_response_inst": 84, "get_arrow_frag": 367, "get_byt": [307, 314], "get_cod": 312, "get_column": 367, "get_config": [18, 370, 584, 600], "get_context": 354, "get_data": [14, 321], "get_dataloading_job_config": 46, "get_datasource_by_id": 46, "get_deployment_info": 46, "get_deployment_pod_log": 46, "get_deployment_resource_usag": 46, "get_deployment_statu": 46, "get_doubl": [307, 370], "get_edata_array_accessor": 367, "get_edg": [311, 428], "get_edge_data": 577, "get_edge_label_by_id": 370, "get_edge_label_id_by_nam": 370, "get_edge_property_by_id": 370, "get_edge_property_id_by_nam": 370, "get_edge_typ": [85, 256], "get_edge_type_dict": [85, 256], "get_edge_type_form_dict": 256, "get_edge_type_from_dict": 85, "get_edge_type_inst": [85, 256], "get_global_step": 437, "get_graph": 263, "get_graph_by_id": 46, "get_graph_meta": [263, 311], "get_graph_respons": [86, 94, 257], "get_graph_response_dict": [86, 257], "get_graph_response_form_dict": 257, "get_graph_response_from_dict": 86, "get_graph_response_inst": [86, 257], "get_graph_schema": [263, 311], "get_graph_schema_respons": [87, 94, 258], "get_graph_schema_response_dict": [87, 258], "get_graph_schema_response_form_dict": 258, "get_graph_schema_response_from_dict": 87, "get_graph_schema_response_inst": [87, 258], "get_graph_statist": [263, 311], "get_graph_statistics_respons": 259, "get_graph_statistics_response_dict": 259, "get_graph_statistics_response_form_dict": 259, "get_graph_statistics_response_inst": 259, "get_handl": 441, "get_ie_offsets_begin_ptr": 367, "get_ie_offsets_end_ptr": 367, "get_in_edges_ptr": 367, "get_incoming_edg": 370, "get_indegre": 370, "get_inner_nod": [18, 370, 600], "get_inner_nodes_num": 370, "get_int": [18, 307, 314, 370, 600], "get_job": [265, 308, 311], "get_job_by_id": 46, "get_long": 307, "get_messag": 312, "get_neighbor": 14, "get_next": [431, 437], "get_nod": [370, 428], "get_node_fid": 370, "get_node_id": 370, "get_node_valu": [18, 370, 600], "get_nodes_num": 370, "get_oe_offsets_begin_ptr": 367, "get_oe_offsets_end_ptr": 367, "get_out_edges_ptr": 367, "get_outdegre": 370, "get_outer_nod": 370, "get_outer_nodes_num": 370, "get_outgoing_edg": [18, 370, 600], "get_partitioned_graph_by_object_id": 589, "get_pod_log_respons": [75, 88], "get_pod_log_response_dict": 88, "get_pod_log_response_from_dict": 88, "get_pod_log_response_inst": 88, "get_procedur": [272, 311], "get_procedure_respons": 260, "get_procedure_response_dict": 260, "get_procedure_response_form_dict": 260, "get_procedure_response_inst": 260, "get_property_meta": [89, 261], "get_property_meta_dict": [89, 261], "get_property_meta_form_dict": 261, "get_property_meta_from_dict": 89, "get_property_meta_inst": [89, 261], "get_resource_usage_respons": [75, 90], "get_resource_usage_response_dict": 90, "get_resource_usage_response_from_dict": 90, "get_resource_usage_response_inst": 90, "get_schema_by_id": 46, "get_service_statu": [281, 311], "get_service_status_by_id": 46, "get_shap": 437, "get_snapshot_statu": [263, 311, 590], "get_statu": 310, "get_status_messag": 310, "get_storage_usag": 46, "get_storage_usage_respons": [75, 91], "get_storage_usage_response_dict": 91, "get_storage_usage_response_from_dict": 91, "get_storage_usage_response_inst": 91, "get_stored_proc_respons": [92, 110], "get_stored_proc_response_dict": 92, "get_stored_proc_response_from_dict": 92, "get_stored_proc_response_inst": 92, "get_stored_procedure_by_id": 46, "get_str": [307, 314, 370], "get_topologi": 428, "get_total_nodes_num": 370, "get_total_vertices_num": 370, "get_typed_column": 367, "get_valu": [244, 263, 265, 272, 274, 281, 299, 308, 310, 590], "get_vari": 437, "get_vdata_array_accessor": 367, "get_vertex": 311, "get_vertex_label_by_id": 370, "get_vertex_label_id": 314, "get_vertex_label_id_by_nam": 370, "get_vertex_property_by_id": 370, "get_vertex_property_id_by_nam": 370, "get_vertex_typ": [93, 262], "get_vertex_type_dict": [93, 262], "get_vertex_type_form_dict": 262, "get_vertex_type_from_dict": 93, "get_vertex_type_inst": [93, 262], "get_vineyard_object_mapping_t": 584, "getalertmessagerespons": [46, 47], "getalertreceiverrespons": [46, 47], "getalertrulerespons": [46, 47], "getallgraph": 173, "getcontext": 367, "getdata": [321, 367], "getdecod": 334, "getdefaultsess": 306, "getedg": [216, 309], "getedgenum": [367, 591], "getedgerespons": 154, "getedgetyp": [46, 87, 168, 216, 258, 309], "getfid": 321, "getfidfromgid": 367, "getfiles": 436, "getfragid": 367, "getgid": 367, "getgraphid": [173, 216], "getgraphmeta": [216, 309], "getgraphrespons": [46, 94, 173, 194, 216, 263, 284, 309, 311], "getgraphresponseresult": 173, "getgraphschema": [216, 309], "getgraphschemarespons": [46, 86, 94, 167, 173, 216, 257, 263, 309, 311], "getgraphstatist": 309, "getgraphstatisticsrespons": [173, 216, 263, 309, 311], "getgremlincli": [216, 590], "getid": 367, "getincomingadjlist": [16, 321, 367], "getincomingedgenum": 367, "getincominginnervertexadjlist": 367, "getincomingoutervertexadjlist": 367, "getinedgenum": [367, 591], "getinnervertex": [14, 367], "getinnervertexgid": 367, "getinnervertexid": 367, "getinnervertexinternalid": 367, "getinnervertexs": [321, 367], "getinnerverticesnum": 367, "getinteg": [17, 600], "getinternalid": 367, "getjobbyid": [216, 309], "getjobid": [173, 216], "getjobr": 175, "getjobsr": 175, "getjobstatu": [175, 216, 308], "getlabelid": 321, "getlidfromgid": 367, "getlocalindegre": 367, "getlocaloutdegre": 367, "getnam": [154, 209], "getneo4jendpoint": 306, "getneo4jsess": [216, 306, 308, 319, 590], "getobject": [367, 591], "getoffset": 321, "getoffsetfromlid": 367, "getoid": 367, "getopt": 437, "getoutedgeiter": 24, "getoutedgenum": [367, 591], "getoutervertex": 367, "getoutervertexgid": 367, "getoutervertexid": 367, "getoutervertexinternalid": 367, "getouterverticesnum": 367, "getoutgoingadjlist": [14, 16, 17, 321, 367, 586, 600], "getoutgoingedgenum": 367, "getoutgoinginnervertexadjlist": 367, "getoutgoingoutervertexadjlist": 367, "getphysicalplan": 334, "getpodlogrespons": [46, 75], "getprocedur": [216, 309], "getprocedurerespons": [167, 181, 216, 257, 272, 309, 311], "getproperti": 154, "getpropertymeta": [46, 85, 93, 166, 172, 216, 256, 262, 309], "getr": [173, 175, 181], "getreadtransact": 314, "getrecordcount": 436, "getresourceusagerespons": [46, 75], "getresultschemayaml": 334, "getschema": 173, "getservicestatu": [216, 309], "getsnapshotstatu": 309, "getstatu": 216, "getstatusmessag": [154, 173, 175, 181, 184, 191, 209, 216, 314], "getstorageusagerespons": [46, 75], "getstoredprocrespons": [46, 86, 110], "getting_start": [8, 317, 340, 351], "gettingstart": [216, 318], "gettotalnodesnum": 591, "gettotalverticesnum": 367, "getv": [6, 330, 333], "getvalu": [24, 154, 173, 175, 181, 184, 191, 209, 216, 314, 321], "getvertex": [216, 309, 367], "getvertexmap": 367, "getvertexnum": 314, "getvertexrespons": 209, "getvertextyp": [46, 87, 168, 216, 258, 309], "getverticesnum": 367, "getview": 321, "gflag": 31, "giant": 524, "gid": [321, 367, 402], "gid2oid": 367, "gid2vertex": 367, "gid_list": 321, "gid\u5217\u548cdst": 321, "gid\u5217\u67e5\u8be2\u51fa\u672cfragment\u6240\u6709\u7684\u5916\u90e8\u70b9": 321, "gid\u5230lid\u6620\u5c04": 321, "gid\u5230lid\u8f6c\u6362\u51fd\u6570": 321, "gid\u7f16\u7801": 321, "gie": [2, 32, 33, 327, 328, 337, 343, 346, 356, 357, 361, 364, 365, 366, 396, 584, 590, 601, 602, 611], "gie_test_hom": 331, "gie\u4ee5\u5fe0\u5b9e\u4fdd\u7559gremlin\u7f16\u7a0b\u6a21\u578b\u4e3a\u8bbe\u8ba1\u76ee\u6807": 608, "gie\u652f\u6301apach": 608, "gie\u901a\u8fc7tinkerpop\u63d0\u4f9b\u7684": 608, "gift": 608, "gin": [9, 362], "giraph": [4, 7, 8, 12, 17, 23, 24, 345, 364, 594], "giraph_sssp": 22, "girth": 550, "git": [4, 17, 22, 29, 30, 31, 32, 35, 36, 37, 46, 132, 134, 216, 331, 336, 372, 435, 589, 602], "git_repo_id": 46, "git_user_id": 46, "github": [4, 22, 29, 30, 31, 32, 35, 36, 45, 46, 129, 132, 134, 216, 308, 331, 336, 359, 360, 368, 372, 432, 435, 527, 584, 589, 600, 602, 610], "github_workspac": 134, "githubusercont": [19, 22, 23, 129, 308], "give": [7, 12, 13, 31, 34, 130, 181, 332, 343, 349, 356, 365, 431, 439, 504, 524, 544, 576, 577], "given": [0, 7, 9, 13, 14, 20, 34, 128, 130, 184, 216, 274, 308, 318, 320, 325, 329, 330, 331, 333, 341, 342, 343, 350, 356, 358, 361, 362, 364, 368, 429, 431, 434, 437, 439, 441, 476, 483, 494, 506, 507, 508, 509, 510, 511, 512, 520, 528, 529, 530, 534, 535, 536, 537, 541, 569, 572, 573, 576, 577, 583, 584, 588, 589, 592, 593], "gjoka": [534, 535, 536, 537], "gl": [327, 350, 363, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 438], "gl_torch_graph": 354, "gle": [2, 32, 327, 346, 349, 350, 351, 357, 362, 364, 366, 601, 602, 609], "gle\u5f15\u64ce\u6765\u5b8c\u6210\u56fe\u5206\u6790\u4efb\u52a1": 611, "glimps": 128, "global": [15, 24, 129, 330, 339, 341, 343, 362, 418, 439, 569, 584, 591, 597, 608], "global_step": 437, "globalvertexmap": 13, "glog": 31, "glog_v": 134, "glogu": 330, "gloo": 354, "glossari": [37, 320, 327, 570], "glt": [354, 355], "glt_graph": [354, 355], "gltorchgraph": 354, "gl\u6ce8\u91cd\u53ef\u79fb\u690d\u548c\u53ef\u6269\u5c55": 609, "gn": [513, 576], "gn4mb": 598, "gn6v": 365, "gnc": 514, "gnn": [325, 327, 347, 349, 350, 353, 357, 358, 363, 364, 425, 429, 430, 431, 433, 434, 584, 606, 609], "gnns\u9700\u8981\u805a\u5408\u90bb\u5c45\u4fe1\u606f": 609, "gnp_random_graph": [504, 531, 532, 533], "gnr": 515, "go": [13, 348, 437, 504, 557, 590], "goal": [23, 318, 320, 330, 337, 347, 359, 362, 589], "godehardt": 532, "goe": 589, "goltsev": 485, "good": 37, "googl": [24, 35, 312, 360, 602], "gopt": [327, 334], "got": [173, 175, 181, 263], "gpt": 336, "gpu": [4, 359, 432], "gql": [318, 330, 333, 357, 364], "gra": 359, "grade": 365, "gradient": 362, "gradl": 216, "gradual": 4, "grain": 364, "grammar": 37, "grant": [322, 574], "granular": 589, "grape": [3, 4, 15, 16, 22, 23, 34, 327, 345, 357, 363, 367, 376, 586, 589, 591, 592, 593, 594, 600, 606], "grape_engin": [4, 38, 402, 598], "grapeengin": 367, "grapegraph": 23, "grapegraphimpl": 23, "grapeinst": 367, "graph": [0, 1, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 22, 23, 24, 27, 29, 36, 37, 38, 46, 67, 94, 95, 106, 110, 126, 128, 133, 154, 173, 175, 181, 184, 191, 194, 209, 244, 263, 265, 272, 274, 281, 284, 299, 309, 311, 315, 316, 319, 320, 322, 328, 329, 330, 331, 332, 335, 337, 338, 341, 342, 344, 345, 349, 351, 359, 363, 366, 367, 368, 369, 370, 377, 378, 379, 380, 381, 382, 385, 387, 388, 390, 392, 394, 395, 396, 397, 398, 400, 401, 402, 403, 405, 406, 411, 418, 420, 426, 432, 435, 436, 440, 442, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 578, 581, 582, 583, 584, 593, 594, 597, 600, 604, 605, 606, 608, 609, 610], "graph1": 605, "graph2": 605, "graph500": 365, "graph_algo": 129, "graph_atla": 476, "graph_atlas_g": 475, "graph_attr_dict_factori": 577, "graph_build": 439, "graph_cache_factori": 577, "graph_data": 315, "graph_data_dir": 128, "graph_db": [134, 314], "graph_db_sess": 314, "graph_def": 367, "graph_descript": 555, "graph_id": [45, 46, 61, 67, 94, 95, 106, 107, 109, 110, 154, 173, 175, 181, 184, 209, 216, 235, 244, 263, 264, 265, 272, 274, 281, 286, 287, 299, 308, 309, 311, 314, 584, 590], "graph_id_exampl": [67, 94, 95, 106, 110], "graph_identifi": 597, "graph_info": 367, "graph_meta": 134, "graph_nam": [308, 331], "graph_nod": 439, "graph_object": 426, "graph_object_cn": 437, "graph_schema_yaml": 334, "graph_service_registry_record": 264, "graph_service_registry_record_dict": 264, "graph_service_registry_record_form_dict": 264, "graph_service_registry_record_inst": 264, "graph_statistic_json": 334, "graph_travers": 342, "graph_typ": [387, 577], "graph_url": [342, 440, 590, 608], "graph_util": 389, "graphalgebraphys": 334, "graphalyt": [4, 364], "graphapi": 46, "graphar": [327, 439], "graphar_edge_chunk_s": [439, 588], "graphar_file_typ": [439, 588], "graphar_graph_nam": [439, 588], "graphar_store_in_loc": [439, 588], "graphar_vertex_chunk_s": [439, 588], "graphbas": 568, "graphbuildersdk": 333, "graphcomput": [327, 608], "graphdagnod": [368, 380, 394, 395, 411, 418, 420, 439, 440, 584], "graphdatabas": 335, "graphdb": [134, 314], "graphdbsess": 314, "graphdefpb": 367, "graphic": [506, 508, 511, 512], "graphid": [33, 145, 154, 173, 174, 181, 184, 191, 196, 197, 209, 216, 263, 314, 584], "graphlearn": [36, 38, 347, 349, 352, 353, 354, 358, 425, 426, 427, 431, 432, 437, 438, 441, 584, 598, 604, 609], "graphlearn_torch": [354, 355], "graphmanagementapi": [175, 216, 309], "graphnam": 341, "graphplan": 334, "graphplann": 334, "graphplannerservic": 334, "graphplannerwrapp": 334, "graphsag": [9, 346, 350, 354, 358, 362, 366, 425, 429, 431, 433, 437, 606, 609, 611], "graphsaint": 433, "graphsaint\u7b49": 609, "graphschema": [439, 577], "graphscop": [0, 1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 18, 24, 33, 34, 35, 37, 38, 39, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 154, 173, 175, 181, 184, 191, 209, 216, 308, 315, 316, 317, 318, 319, 321, 322, 324, 328, 329, 331, 333, 334, 335, 336, 340, 341, 342, 343, 345, 346, 348, 351, 352, 353, 354, 355, 356, 358, 359, 361, 365, 366, 368, 369, 372, 439, 440, 441, 442, 577, 579, 580, 581, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 597, 600, 601, 603, 604, 605, 608, 610, 611], "graphscope_bucket": [356, 610], "graphscope_clformat": 35, "graphscope_cpplint": 35, "graphscope_env": [601, 602], "graphscope_hom": [4, 23, 602], "graphscope_repo": 600, "graphscope_sess": [22, 439], "graphscope_typ": 375, "graphscopeserv": 367, "graphscopetyp": 375, "graphscope\u4e2d\u7684\u56fe\u5b66\u4e60\u5f15\u64ce": 609, "graphscope\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u8fd9\u4e9b\u793a\u4f8b\u7b97\u6cd5": 600, "graphscope\u6267\u884c": 608, "graphscope\u652f\u6301gremlin\u8bed\u8a00\u4e2d\u7684\u5927\u90e8\u5206\u67e5\u8be2\u7b97\u5b50": 603, "graphscope\u6682\u65f6\u4e0d\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 608, "graphscope\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce": 608, "graphtraversalsourc": 440, "graphtyp": [387, 577, 586, 591], "graphx": [4, 7, 8, 12, 17, 24, 345, 364, 594], "grasp": 361, "grassberg": 368, "great": [17, 23, 37, 590], "greater": [30, 33, 319, 337, 341, 368, 427, 442, 496, 527, 584, 589], "greatli": [426, 427, 589], "green": [19, 20, 36, 37], "grei": 426, "gremlin": [7, 29, 33, 108, 134, 216, 322, 325, 328, 329, 330, 331, 332, 333, 334, 340, 344, 347, 350, 357, 358, 359, 363, 364, 366, 396, 431, 440, 584, 598, 603, 604, 606, 611], "gremlin_cli": [440, 590], "gremlin_connector": 134, "gremlin_endpoint": [306, 342], "gremlin_invalid_result": 334, "gremlin_invalid_syntax": 334, "gremlin_port": [284, 590], "gremlin_python": [342, 590], "gremlin_queri": 343, "gremlin_script": [396, 440], "gremlin_script_language_nam": 134, "gremlin_url": 440, "gremlincli": 216, "gremlinport": [194, 329], "gremlinpython": [342, 590], "gremlinscriptlanguagenam": 329, "gremlin\u5141\u8bb8\u7528\u6237\u5728\u5c5e\u6027\u56fe\u6a21\u578b\u4e0a\u5b9a\u4e49\u7279\u8bbe": 608, "gremlin\u517c\u5bb9\u6027": 606, "gremlin\u7f16\u7a0b\u5165\u95e8": 606, "gremlin\u8bed\u8a00\u4e30\u5bcc\u7075\u6d3b\u7684\u8868\u8fbe\u80fd\u529b\u4e3b\u8981\u6765\u81ea\u4e8e\u5b83\u5bf9": 608, "grep": 329, "grid": [343, 570], "grin": [12, 327], "grin_": 589, "grin_adjacent_list": 589, "grin_assume_all_vertex_property_local_complet": 589, "grin_assume_by_type_all_vertex_property_local_complet": 589, "grin_assume_by_type_master_vertex_property_local_complet": 589, "grin_assume_master_vertex_property_local_complet": 589, "grin_datatyp": 589, "grin_deserialize_to_vertex_ref": 589, "grin_direct": 589, "grin_edg": 589, "grin_edge_list": 589, "grin_edge_typ": 589, "grin_enable_": 589, "grin_enable_vertex_list_arrai": 589, "grin_enable_vertex_list_iter": 589, "grin_equal_edge_typ": 589, "grin_frag": 589, "grin_get_adjacent_list": 589, "grin_get_adjacent_list_s": 589, "grin_get_dst_types_from_edge_typ": 589, "grin_get_edge_from_adjacent_list": 589, "grin_get_edge_typ": 589, "grin_get_edge_type_by_nam": 589, "grin_get_local_graph_from_partit": 589, "grin_get_local_partition_list": 589, "grin_get_master_partition_from_vertex_ref": 589, "grin_get_neighbor_from_adjacent_list": 589, "grin_get_next_vertex_list_it": 589, "grin_get_partition_from_list": 589, "grin_get_partition_list_s": 589, "grin_get_src_types_from_edge_typ": 589, "grin_get_value_from_vertex_property_t": 589, "grin_get_vertex_from_it": 589, "grin_get_vertex_from_list": 589, "grin_get_vertex_from_vertex_ref": 589, "grin_get_vertex_list": 589, "grin_get_vertex_list_begin": 589, "grin_get_vertex_list_s": 589, "grin_get_vertex_properties_by_nam": 589, "grin_get_vertex_property_by_nam": 589, "grin_get_vertex_property_data_typ": 589, "grin_get_vertex_property_table_by_typ": 589, "grin_get_vertex_ref_for_vertex": 589, "grin_get_vertex_type_by_nam": 589, "grin_get_vertex_type_from_list": 589, "grin_get_vertex_type_list_s": 589, "grin_graph": 589, "grin_is_vertex_list_end": 589, "grin_null_vertex_properti": 589, "grin_partit": 589, "grin_partition_list": 589, "grin_partitioned_graph": 589, "grin_select_edge_type_for_adjacent_list": 589, "grin_select_master_for_vertex_list": 589, "grin_select_type_for_vertex_list": 589, "grin_serialize_vertex_ref": 589, "grin_trait_select_edge_type_for_adjacent_list": 589, "grin_vertex": 589, "grin_vertex_list": 589, "grin_vertex_list_iter": 589, "grin_vertex_properti": 589, "grin_vertex_property_list": 589, "grin_vertex_property_t": 589, "grin_vertex_ref": 589, "grin_vertex_typ": 589, "grin_vertex_type_list": 589, "groot": [75, 309, 327, 339, 357, 364], "grootclient": 590, "grootclientbuild": 590, "groovi": 339, "ground": [4, 362], "group": [0, 2, 318, 322, 330, 354, 356, 358, 360, 361, 367, 433, 439, 500, 501, 502, 504, 521, 549, 567, 588, 590, 608, 610], "group_for_teacher_stud": 439, "group_id": 439, "group_mast": 354, "group_nam": 439, "groupbi": 608, "groupby\u591a\u4e2akei": 608, "groupby\u591a\u4e2avalu": 608, "groupcount": [339, 608], "groupid": [17, 23, 216, 333, 600], "grout": 365, "grow": [24, 318, 325, 333, 346, 357, 496, 506, 513, 514, 515, 576, 589], "grown": [20, 486, 519, 577], "growth": [514, 574], "grpah": 561, "grpc": [27, 28, 31, 108, 322, 367, 601, 603], "grpc_python_build_system_openssl": [322, 603], "grpcio": [322, 603], "gryomessageserializerv1d0": [342, 608], "gs_conf": [15, 16, 376], "gs_data": 600, "gs_data_typ": [81, 255], "gs_data_type_dict": [81, 255], "gs_data_type_form_dict": 255, "gs_data_type_from_dict": 81, "gs_data_type_inst": [81, 255], "gs_interact": [225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 319, 590], "gs_interactive_default_graph": [126, 314, 315, 319], "gs_interactive_hiactor": 334, "gs_jar": 23, "gs_nx": 19, "gs_test_dir": [4, 22, 33, 134], "gscoordin": [15, 28, 36, 45], "gsctl": [32, 41, 43, 129, 132, 133, 134, 308, 315, 317, 319, 320, 327, 331, 348, 590, 601, 602], "gsdatatyp": [46, 51, 63, 89, 99, 117, 139, 149, 171, 179, 184, 204, 216, 229, 239, 261, 263, 270, 274, 294, 309, 590], "gsl": [346, 347, 357, 427, 428, 429, 430, 434, 441], "gsobject": 367, "gssparksess": 23, "gssubmitjar": 23, "gstest": [4, 19, 22, 23, 30, 134, 600, 602], "gsvertexarrai": [17, 600], "gt": [341, 343, 608], "gte": [341, 343, 358, 604, 608], "guarante": [14, 130, 134, 329, 350, 364, 426, 434, 442, 512, 577], "guardian": 359, "guid": [4, 7, 9, 16, 27, 29, 32, 37, 41, 43, 45, 126, 129, 130, 216, 315, 317, 318, 319, 320, 327, 329, 332, 333, 334, 336, 338, 341, 342, 344, 349, 352, 353, 358, 372, 604], "guidanc": 342, "guidelin": [35, 37, 318], "guliyev": 343, "gulp": 37, "gun": 333, "gunrock": 365, "gv": 368, "gz": [23, 31, 328, 333, 334, 579, 590], "h": [6, 9, 15, 16, 20, 36, 41, 314, 334, 347, 348, 365, 376, 442, 453, 456, 477, 504, 508, 524, 569, 576, 577, 589, 601, 606], "h_": [529, 530], "h_neighbor_vec": 437, "h_self_vec": 437, "ha": [0, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 17, 23, 28, 29, 31, 34, 37, 41, 131, 152, 216, 242, 308, 314, 318, 319, 322, 325, 328, 330, 331, 332, 333, 336, 337, 339, 340, 343, 347, 350, 351, 352, 356, 357, 358, 359, 361, 362, 363, 364, 367, 368, 369, 370, 372, 417, 425, 426, 427, 428, 429, 431, 434, 435, 436, 437, 439, 440, 442, 459, 461, 462, 465, 470, 471, 477, 492, 494, 496, 507, 511, 516, 524, 525, 526, 527, 528, 534, 537, 543, 544, 548, 549, 553, 559, 561, 564, 567, 569, 571, 575, 577, 581, 583, 584, 590, 592, 594, 604, 605, 608], "hadoop": [22, 590], "hagberg": [510, 524], "hakimi": 511, "half": [13, 439], "hall": 343, "halt": [24, 361, 370, 516], "hamiltonian": [542, 544, 549, 550, 553, 558, 564], "han": 512, "hand": [6, 30, 33, 330, 339, 341, 557], "handl": [3, 6, 8, 9, 11, 12, 20, 27, 34, 37, 128, 131, 134, 318, 320, 329, 330, 333, 339, 342, 343, 346, 357, 359, 360, 361, 362, 369, 399, 426, 438, 441, 577, 579, 589, 590], "handler": [359, 584], "handshak": 557, "hangzhou": [129, 356, 426, 610], "hao": 343, "happen": [435, 589, 592], "happi": 322, "har": [308, 309], "harari": [529, 530, 578], "hararygraph": 529, "hard": [314, 325, 341, 351, 352, 538, 589], "hardwar": [362, 593], "harmon": 6, "has_child": 370, "has_edg": [402, 577], "has_large_data": 367, "has_nod": [402, 577], "has_par": 370, "has_path": [442, 578], "has_predecessor": 577, "has_successor": 577, "has_vertex_label": 314, "hascreat": 343, "hash": [134, 426, 439], "hashabl": [20, 457, 472, 534, 577, 579], "hashmap": [13, 321, 439], "hashmapbuild": 321, "hasid": 339, "hasinterest": 343, "haslabel": [33, 325, 332, 339, 343, 358, 608], "hasmemb": 343, "hasmoder": 343, "hasn": [37, 343], "hasnext": 342, "hasobject": 367, "hasstep": 339, "hastag": 343, "hastop": 604, "hastyp": 343, "hat": 442, "have": [0, 2, 4, 6, 8, 9, 11, 12, 13, 15, 19, 20, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 45, 126, 129, 131, 132, 134, 216, 308, 314, 315, 317, 319, 322, 325, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 341, 343, 345, 346, 348, 350, 356, 357, 358, 360, 361, 362, 364, 368, 369, 372, 376, 425, 426, 427, 428, 429, 431, 432, 434, 435, 437, 439, 442, 452, 456, 459, 471, 477, 482, 487, 496, 506, 507, 508, 510, 516, 519, 534, 535, 537, 553, 557, 571, 577, 583, 584, 588, 589, 590, 592, 594, 597, 598, 604], "havel": 511, "havelabel": 343, "haven": [36, 308, 317, 343], "hdf": [329, 356, 404, 436, 439, 590, 600, 610], "head": [325, 329, 336, 341, 343], "header": [130, 329, 334, 439, 589, 590], "header_row": [45, 129, 130, 329, 439, 591], "head\u8282\u70b9\u7684a\u5c5e\u6027\u662f\u6574\u6570\u6570\u7ec4\u7c7b\u578b": 608, "head\u8282\u70b9\u7684number\u548cage\u5c5e\u6027\u90fd\u662f\u6574\u578b": 608, "head\u8282\u70b9\u7684number\u5c5e\u6027\u662f\u6574\u578b": 608, "heartbeat": 584, "heather": 554, "heavi": 128, "heavili": 4, "heawood": [542, 550], "heawood_graph": 542, "heawoodgraph": 550, "height": 477, "hello": 577, "helm": [320, 322, 327, 329, 590, 601, 603], "help": [6, 9, 12, 13, 16, 17, 32, 37, 38, 45, 126, 315, 319, 336, 339, 341, 343, 354, 356, 360, 361, 435, 439, 589, 591, 597, 601], "helper": [4, 597], "henc": [1, 2, 10, 32, 356, 451, 574, 577, 590], "her": 557, "here": [0, 4, 10, 14, 16, 17, 18, 20, 23, 27, 33, 36, 37, 38, 41, 42, 45, 128, 129, 131, 134, 154, 209, 314, 317, 322, 328, 329, 330, 331, 333, 334, 336, 337, 339, 341, 342, 343, 346, 348, 349, 352, 353, 356, 362, 365, 368, 426, 427, 431, 434, 436, 437, 439, 442, 496, 508, 523, 524, 526, 535, 555, 577, 580, 588, 589, 590, 604], "hereaft": [332, 343, 358], "herzberg": 570, "heterogen": [350, 353, 358, 360, 362, 426, 427, 428, 429, 431], "heurist": [361, 504], "hexagon": 563, "hi": [557, 567, 576], "hiactor": [128, 134, 357], "hidden": [325, 359, 360, 362, 425, 609], "hidden_channel": [354, 355], "hidden_dim": [349, 352, 353, 358, 425, 437, 604, 609], "hide": [6, 325], "hierarch": 485, "hierarchi": [128, 130], "high": [0, 6, 9, 318, 320, 325, 330, 333, 339, 343, 356, 359, 360, 362, 363, 364, 365, 433, 511, 542, 584, 586], "higher": [330, 333, 363, 442, 452, 516, 590], "highest": [0, 343, 511], "highli": [0, 4, 12, 34, 338, 343, 346, 359, 360, 588], "highlight": [318, 328, 337, 357, 361], "himself": 314, "hinder": 333, "hist": [343, 451], "histogram": 343, "histori": [175, 265, 341, 343, 361], "hit": [0, 34, 36, 368, 369, 442, 578, 583, 600], "hits_algorithm": 368, "hive": 588, "hk": 348, "hkn_harary_graph": 530, "hnm_harary_graph": 529, "ho2": 351, "hoc": 608, "hold": [0, 10, 20, 341, 367, 368, 369, 370, 396, 404, 427, 439, 442, 577, 583], "holist": [333, 359], "holland": 504, "home": [17, 22, 23, 28, 38, 130, 322, 325, 356, 367, 432, 433, 435, 436, 438, 439, 442, 486, 597, 598, 600, 602, 610], "home_of": 608, "homepag": 29, "homogen": [7, 347, 356, 358, 362, 427], "hongkong": [4, 27, 32, 41, 45, 134, 331, 333, 348, 354, 590, 602], "hood": 356, "hook": 37, "hop": [14, 319, 330, 339, 341, 343, 346, 347, 350, 357, 361, 362, 425, 429, 431, 433, 434, 435, 437], "hope": [330, 343, 590], "hopefulli": 372, "hopkin": 533, "hops_num": [349, 353, 358, 425, 604, 609], "horn": 510, "host": [7, 15, 17, 22, 23, 27, 28, 32, 45, 46, 47, 67, 75, 94, 95, 102, 106, 110, 121, 126, 128, 130, 209, 299, 306, 317, 325, 331, 332, 336, 342, 349, 356, 365, 367, 368, 369, 580, 584, 588, 600, 608, 610], "hostip": 29, "hostnam": [322, 603], "hostpath": [27, 30, 33, 329, 584, 601, 604], "hot": 336, "hous": [134, 357, 551, 552], "housegraph": [551, 552], "how": [0, 2, 4, 8, 9, 12, 13, 14, 16, 20, 27, 30, 33, 34, 36, 38, 44, 45, 126, 130, 131, 132, 134, 154, 175, 209, 314, 315, 318, 319, 322, 324, 325, 327, 329, 331, 333, 334, 336, 340, 341, 342, 343, 344, 345, 351, 352, 353, 354, 355, 357, 358, 360, 361, 362, 364, 366, 369, 372, 380, 426, 427, 431, 433, 584, 585, 588, 589, 590, 591, 593, 594, 604], "howev": [2, 6, 9, 11, 13, 15, 20, 24, 30, 37, 128, 131, 134, 308, 315, 318, 322, 325, 329, 330, 332, 333, 336, 337, 339, 341, 343, 347, 356, 357, 362, 364, 426, 427, 428, 433, 442, 506, 577, 589, 590], "hqp": [108, 134], "hqps_admin_test": 134, "hqps_db": 134, "hqps_port": 284, "hqpsport": 194, "hse": 442, "html": [368, 442, 526, 529, 538, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 557, 559], "http": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 36, 45, 46, 126, 128, 129, 132, 134, 216, 306, 308, 309, 315, 317, 319, 322, 331, 332, 334, 335, 336, 338, 342, 349, 352, 353, 358, 359, 360, 368, 372, 432, 435, 442, 496, 500, 501, 502, 516, 519, 526, 527, 529, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 561, 562, 563, 564, 569, 584, 589, 590, 600, 601, 602, 603, 604, 607, 608, 610], "http_port": 45, "http_server": 134, "http_servic": [128, 134], "httpclient": 334, "httpd": 134, "httpport": 590, "httprequest": 334, "httprespons": 334, "hub": [0, 29, 368, 369, 442, 495, 583], "huge": [362, 592], "huge_pag": 365, "hundr": [13, 506, 517], "hybrid": [330, 589, 590], "hypercub": 545, "hyperlink": [6, 368, 442], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 45, 46, 47, 67, 75, 94, 95, 106, 110, 121, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 143, 166, 173, 181, 184, 209, 216, 226, 233, 256, 263, 272, 274, 281, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 364, 365, 367, 368, 369, 370, 371, 372, 373, 376, 378, 402, 412, 414, 418, 419, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 447, 448, 450, 452, 454, 456, 457, 458, 459, 460, 461, 462, 471, 472, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 492, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 597, 598, 600, 603, 604, 608, 609, 610], "i2i": [350, 429, 431], "i_featur": [352, 353], "ic": 328, "icalp": 531, "icde2023": 359, "icolumn": 367, "icon": 36, "icontextwrapp": 367, "icosahedr": 553, "icosahedralgraph": 553, "icosahedron": 553, "id": [2, 4, 7, 9, 13, 15, 17, 18, 28, 30, 33, 38, 45, 47, 67, 82, 83, 84, 86, 92, 94, 95, 96, 106, 110, 111, 129, 130, 131, 154, 167, 170, 173, 175, 177, 181, 184, 198, 209, 216, 244, 257, 260, 263, 265, 267, 272, 274, 288, 299, 308, 311, 314, 319, 321, 322, 325, 329, 330, 331, 333, 334, 336, 337, 344, 347, 350, 356, 358, 361, 362, 365, 367, 368, 369, 370, 396, 402, 404, 425, 426, 427, 428, 429, 430, 431, 434, 435, 437, 438, 439, 441, 534, 535, 574, 577, 580, 583, 584, 588, 590, 591, 598, 600, 601, 603, 604, 608, 609, 610], "id1": [47, 608], "id2": [47, 608], "id3": 47, "id_parser_": 321, "idea": [9, 37, 347, 362, 372, 433], "ideal": [29, 37, 131, 318, 364], "ident": [29, 369, 385, 473, 474, 478, 549, 569, 571, 577], "identifi": [4, 9, 13, 24, 131, 173, 184, 216, 263, 274, 308, 319, 337, 339, 341, 343, 357, 358, 360, 368, 417, 504, 571, 574, 577, 584, 590, 597, 610], "identityencod": [425, 609], "idiom": 577, "idl": 128, "idoffset_": 321, "idst_": 321, "idx": 589, "id\u5217": 610, "id\u548coid\u67e5\u8be2gid": 321, "id\u548c\u9876\u70b9\u5e8f\u53f7": 321, "id\u548c\u9876\u70b9\u5e8f\u53f7\u7ec4\u6210": 321, "id\u7f16\u7801\u4e86\u7c7b\u578b": 608, "ie": 321, "ie_list": 13, "ie_lists_": [13, 321], "ie_mut": 228, "ie_offset": 13, "ie_offsets_lists_": [13, 321], "ie_offsets_ptr_lists_": 321, "ie_ptr_lists_": 321, "iedest": 367, "iedestss": 367, "ieee": [528, 536, 537, 569, 574], "iemut": 138, "ifdef": 589, "ifndef": 589, "ifnotpres": [354, 584], "ifrag": [17, 600], "ifragmentwrapp": 367, "ignor": [20, 333, 442, 453, 472, 577, 584], "ii": 343, "ij": [368, 442], "ik": 554, "il": 565, "illeg": 343, "illegal_oper": 134, "illustr": [2, 4, 29, 129, 130, 131, 134, 319, 343, 347, 353, 354, 355, 360, 362, 428, 554, 590], "imag": [4, 29, 36, 38, 45, 100, 128, 132, 134, 317, 322, 331, 333, 346, 348, 354, 365, 428, 584, 597], "imagepullpolici": 354, "imbal": 359, "imdb": 129, "immedi": [0, 6, 318, 330, 363, 368, 370, 431, 442, 580, 584, 590], "immut": [12, 34, 134, 327, 339, 359], "immutable_graph": 134, "immutableedgecutfrag": 15, "immutablemap": 334, "impact": [13, 361], "imper": [341, 361], "implement": [0, 1, 4, 8, 9, 12, 13, 16, 18, 22, 24, 34, 45, 131, 134, 181, 216, 272, 309, 311, 314, 315, 325, 328, 330, 333, 334, 335, 337, 338, 339, 341, 344, 346, 347, 350, 354, 355, 356, 357, 361, 364, 367, 368, 372, 425, 427, 429, 430, 431, 433, 436, 437, 439, 440, 442, 518, 519, 523, 524, 526, 528, 529, 530, 571, 572, 580, 600], "impli": 341, "implic": 592, "implicit": [13, 580], "implicitli": [4, 378], "import": [0, 2, 4, 7, 10, 15, 16, 17, 18, 19, 20, 22, 27, 29, 30, 33, 36, 37, 38, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 133, 134, 154, 173, 175, 181, 184, 191, 209, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 314, 319, 320, 325, 327, 330, 332, 335, 336, 341, 342, 343, 345, 347, 349, 350, 352, 353, 355, 356, 358, 360, 362, 368, 369, 418, 420, 425, 426, 427, 429, 432, 434, 436, 437, 438, 439, 442, 496, 524, 525, 526, 527, 577, 584, 588, 592, 594, 598, 600, 601, 602, 604, 605, 608, 609, 610], "import_opt": [45, 70, 129, 130, 277, 308], "import_schema_by_id": 46, "importantli": 33, "importerror": [349, 352, 353, 358, 604], "importopt": 187, "imposs": 343, "impress": [318, 320], "improv": [0, 6, 9, 17, 19, 23, 134, 318, 339, 359, 362, 363, 364, 593], "inE": [339, 431, 608], "in_channel": [354, 355], "in_deg_by_loc": 402, "in_deg_by_nod": 402, "in_deg_sequ": 509, "in_degre": [20, 350, 352, 429, 431, 434, 437, 508, 534, 535, 577], "in_degree_centr": [442, 578], "in_degree_sequ": 508, "in_drop_r": [349, 353, 358, 604], "in_edg": 577, "inaccur": 37, "inact": 24, "inadequ": 4, "inarch": 367, "inc": 46, "incev": [14, 16, 17, 18, 34, 360, 367, 375, 594, 600], "incid": [9, 20, 339, 341, 343, 453, 454, 496, 518, 567, 577], "includ": [0, 3, 4, 6, 7, 9, 12, 16, 17, 20, 22, 24, 27, 30, 35, 36, 37, 43, 45, 130, 131, 134, 152, 173, 175, 242, 263, 265, 314, 318, 325, 327, 328, 330, 331, 333, 334, 337, 338, 343, 346, 347, 348, 349, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 427, 428, 431, 433, 439, 442, 457, 496, 504, 510, 520, 569, 576, 577, 588, 589, 590, 597, 598], "inclus": [263, 519], "incom": [10, 13, 14, 16, 34, 45, 128, 131, 341, 343, 367, 370, 442], "incoming_data": [418, 439, 584], "incoming_edg": 370, "incoming_graph_data": [577, 580], "incompat": [134, 528, 589], "incomplet": 37, "inconsist": [20, 365], "inconveni": 2, "incorpor": [20, 134], "incorrect": 368, "increas": [27, 38, 128, 322, 325, 339, 427, 475, 476, 484, 506, 508, 516, 534, 537, 539, 589], "increment": [3, 14, 16, 18, 20, 34, 342, 347, 359, 367, 594], "inde": [20, 22], "indegreeview": 577, "independ": [2, 6, 30, 357, 364, 426, 440, 453, 456, 504, 531, 577], "index": [6, 12, 13, 31, 45, 55, 129, 130, 159, 173, 216, 249, 263, 308, 314, 321, 327, 347, 350, 356, 362, 367, 368, 369, 427, 428, 436, 439, 441, 442, 451, 475, 476, 506, 508, 509, 510, 512, 589, 606, 610], "index\u7684\u8d77\u59cb\u5730\u5740": 321, "india": 343, "indic": [6, 13, 24, 37, 38, 130, 131, 134, 281, 318, 329, 343, 356, 359, 360, 361, 365, 376, 426, 428, 431, 439, 483, 486, 496, 499, 500, 501, 502, 504, 506, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 521, 524, 525, 526, 527, 528, 531, 532, 533, 537, 567, 569, 572, 574, 579, 589], "indices_lock": 134, "individu": [24, 329, 331, 353, 358], "indivis": 24, "indptr": 13, "induc": [6, 339, 341, 368, 390, 453, 456, 472, 520, 577], "industri": [347, 357, 362, 364, 365], "inedgeview": 577, "ineffect": 343, "ineffici": 589, "inequ": 337, "inevit": 330, "inf": 24, "infeas": 6, "infer": [329, 333, 356, 362, 363], "infin": [525, 526, 527], "infinit": [343, 538], "influenc": [0, 27, 333, 442], "influenti": 0, "info": [17, 38, 107, 128, 134, 173, 263, 322, 332, 343, 354, 370, 439, 577, 580, 584, 589, 590, 591, 598], "infocom": [536, 537, 569], "inform": [14, 15, 16, 19, 27, 29, 38, 45, 75, 126, 216, 308, 311, 315, 317, 322, 330, 331, 333, 336, 337, 339, 353, 358, 360, 362, 363, 372, 386, 425, 426, 427, 428, 431, 433, 435, 439, 442, 457, 475, 516, 538, 539, 567, 577, 584, 586, 590, 597], "infrastructur": 37, "ingest": [357, 590], "ingo": 431, "ingress": [3, 12], "inher": 330, "inherit": [4, 6, 9, 16, 314, 330, 359, 367, 425, 435], "init": [15, 16, 17, 18, 130, 134, 187, 308, 321, 352, 356, 367, 368, 370, 375, 425, 427, 428, 432, 435, 437, 577, 580, 586, 594, 600, 609, 610], "init_cli": [354, 355], "init_m": 9, "init_method": 354, "init_process_group": 354, "init_v": 9, "init_valu": [18, 370, 600], "initchannel": 16, "initi": [9, 16, 18, 19, 126, 128, 130, 134, 314, 315, 331, 333, 343, 354, 355, 360, 362, 367, 426, 427, 437, 439, 441, 442, 516, 518, 519, 577, 580, 588, 590, 594, 600], "initpartition": 367, "inject": 341, "inlin": 367, "inneg": [431, 434, 437], "inner": [10, 13, 16, 321, 343, 344, 370, 439, 589], "inner_nod": [18, 370, 600], "inner_typ": 337, "inner_vertex_array_t": 367, "inner_vertic": [14, 16], "inner_vertices_it": 586, "inner_vertices_t": 367, "innervertexgid2vertex": 367, "innervertic": [14, 16, 17, 321, 367, 586, 600], "innov": 359, "input": [6, 9, 12, 13, 15, 17, 22, 24, 45, 76, 124, 129, 130, 133, 154, 156, 173, 209, 212, 216, 244, 246, 263, 299, 302, 308, 311, 319, 325, 333, 347, 349, 350, 353, 356, 357, 358, 361, 362, 368, 387, 391, 412, 425, 426, 427, 428, 429, 431, 434, 437, 440, 442, 510, 524, 526, 528, 534, 535, 569, 577, 580, 581, 584, 589, 590, 604, 609], "input_fn": 437, "input_nod": [354, 355], "inputformat": 22, "insensit": [337, 341], "insert": [9, 14, 131, 154, 244, 330, 397, 590], "inserttract": 314, "inserttransact": 134, "insid": [32, 38, 45, 130, 322, 341, 343, 368, 376, 426, 438, 439, 552, 583, 584, 608], "insight": [37, 45, 263, 309, 325, 360, 362, 597], "inspect": [37, 38, 356, 584], "inspir": [372, 577], "instal": [2, 4, 15, 16, 17, 19, 23, 33, 35, 41, 44, 126, 128, 132, 133, 314, 320, 322, 329, 331, 335, 342, 358, 368, 372, 435, 577, 580, 584, 601, 602, 603, 604, 607], "install_flash_work": 15, "install_parallel_work": 16, "install_prefix": [4, 36, 348, 602], "instanc": [10, 15, 23, 27, 28, 29, 30, 33, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 131, 132, 193, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 314, 317, 318, 319, 320, 322, 328, 329, 333, 339, 341, 343, 352, 357, 358, 360, 361, 365, 367, 368, 369, 376, 378, 380, 396, 403, 420, 428, 439, 477, 479, 480, 482, 484, 486, 487, 489, 491, 492, 495, 506, 508, 509, 511, 513, 514, 515, 517, 521, 522, 523, 529, 530, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 572, 579, 584, 589, 597, 598], "instance_id": [28, 45, 591], "instance_nam": 103, "instant": 592, "instanti": [20, 368, 437, 592], "instead": [6, 13, 16, 20, 23, 30, 37, 131, 216, 336, 341, 343, 356, 359, 427, 428, 429, 435, 436, 439, 503, 510, 515, 523, 524, 528, 534, 577, 583, 586, 589], "institut": [353, 358, 604], "instruct": [27, 29, 30, 33, 37, 44, 45, 132, 134, 314, 315, 318, 329, 331, 332, 333, 335, 336, 342, 358, 361, 367, 380, 431], "int": [0, 14, 15, 16, 17, 18, 19, 20, 23, 24, 33, 47, 53, 55, 57, 78, 80, 84, 85, 89, 93, 100, 123, 128, 225, 231, 249, 252, 254, 256, 257, 259, 260, 261, 262, 267, 280, 284, 285, 298, 304, 305, 307, 311, 314, 321, 339, 352, 354, 356, 367, 368, 369, 370, 402, 426, 427, 428, 429, 430, 431, 434, 437, 438, 439, 441, 442, 470, 475, 477, 479, 482, 484, 486, 487, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 512, 513, 514, 515, 516, 518, 519, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 538, 539, 540, 541, 572, 577, 579, 584, 586, 590, 600, 608, 610], "int32": [131, 337, 349, 353, 358, 426, 428, 436, 437, 588, 604], "int32_t": [13, 356, 439, 610], "int64": [131, 337, 356, 370, 396, 418, 426, 428, 429, 434, 436, 437, 439, 584, 588, 610], "int64_t": [13, 321, 329, 356, 367, 368, 439, 592, 610], "int64arrai": 321, "int64build": 321, "int_attr": [350, 428, 429, 430, 434, 437], "integ": [131, 135, 141, 159, 162, 164, 166, 167, 169, 170, 171, 172, 177, 190, 194, 195, 208, 209, 214, 215, 307, 333, 337, 341, 442, 477, 480, 481, 482, 483, 484, 486, 488, 489, 491, 492, 495, 496, 499, 500, 501, 502, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 542, 555, 569, 570, 571, 572, 574, 577, 588], "integr": [3, 4, 9, 12, 13, 22, 23, 34, 130, 134, 216, 308, 315, 319, 328, 330, 332, 334, 336, 344, 345, 357, 359, 361, 363, 364, 570, 589, 590, 592, 594], "intel": [32, 332, 601, 603, 607], "intellig": [328, 330, 343, 357, 364, 534, 537], "intend": [2, 13, 36, 308, 337, 569, 583], "intens": 442, "inter": [325, 438, 496, 499], "interact": [13, 27, 29, 33, 36, 37, 38, 41, 43, 44, 127, 129, 131, 133, 154, 173, 175, 181, 184, 191, 209, 216, 274, 306, 308, 309, 311, 316, 318, 325, 328, 329, 330, 331, 335, 336, 338, 340, 342, 343, 344, 346, 356, 357, 359, 360, 363, 364, 366, 396, 439, 518, 567, 582, 584, 597, 604, 608], "interactive_admin_endpoint": [154, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 274, 281, 299, 306, 308, 309, 314, 317, 319, 590], "interactive_config": 128, "interactive_config_test": 134, "interactive_cypher_endpoint": [216, 306, 308, 317, 319], "interactive_engin": [35, 36, 134, 331, 334, 342], "interactive_queri": [396, 584], "interactive_serv": 134, "interactive_stored_proc_endpoint": [216, 306, 308, 317, 319], "interactive_workspac": 134, "interactivequeri": [440, 582, 584, 608], "interactivequerydagnod": 396, "interchang": 359, "interconnect": [338, 360, 427], "interest": [37, 343, 346, 360, 590], "interfac": [6, 9, 11, 12, 17, 18, 19, 22, 23, 34, 43, 45, 133, 134, 216, 308, 322, 325, 327, 330, 333, 343, 344, 345, 347, 350, 357, 360, 361, 362, 363, 364, 367, 372, 427, 428, 429, 431, 432, 433, 434, 577, 584, 590, 594], "intermedi": [9, 12, 17, 330, 343, 346, 357, 359], "intern": [4, 13, 154, 173, 181, 184, 191, 209, 244, 263, 272, 274, 281, 299, 312, 314, 339, 360, 439, 477, 600, 602], "internal_error": 134, "internal_oid_t": 367, "internaltyp": 367, "internet": [27, 29, 31, 317, 336, 343, 360, 574, 576], "interoper": [12, 589], "interpret": [308, 325, 357, 442], "interruptedexcept": 216, "intersect": [6, 333, 361, 578], "interv": [134, 337, 496, 528, 584], "intervent": 9, "intra": [438, 496, 499], "intranet": 27, "intric": 343, "intricaci": 14, "introduc": [3, 6, 10, 19, 20, 24, 130, 216, 309, 327, 330, 337, 339, 341, 343, 345, 347, 357, 359, 361, 364, 425, 428, 429, 431, 433, 442, 554, 576, 589, 590, 594], "introduct": [12, 34, 344, 360, 430, 431, 434, 442, 487, 569, 589], "intuit": [6, 318, 330, 339, 346, 361, 584], "inv": [37, 431, 437, 608], "invalid": [9, 154, 209, 244, 263, 299, 334, 439, 584], "invalid_argu": 134, "invalid_import_fil": 134, "invalid_schema": 134, "invalidargumenterror": [368, 584], "invari": 521, "invers": [442, 521], "invest": 364, "investig": [4, 6], "invoc": [334, 337], "invok": [8, 9, 12, 14, 15, 17, 24, 34, 216, 308, 318, 319, 337, 356, 367, 429, 430, 434, 584, 600], "involv": [9, 13, 37, 41, 318, 325, 330, 333, 339, 343, 347, 350, 357, 360, 361, 362, 363, 364], "involvedobject": 38, "io": [4, 27, 30, 33, 41, 314, 359, 360, 368, 436, 439, 527, 584, 590, 593, 607], "io_adaptor": 4, "io_error": 134, "iodoffset_": 321, "iodst_": 321, "ioedest": 367, "ioedestss": 367, "ioexcept": [173, 216, 314], "ip": [2, 29, 317, 329, 331, 342, 584, 590, 608], "ipc": 591, "ipcclient": 591, "ipython": 32, "ir": [134, 329, 330, 331, 357, 359], "irregular": 362, "irresult": 184, "is_at_al": [56, 83], "is_compat": 368, "is_direct": [482, 577], "is_dynam": [354, 355], "is_empti": 307, "is_error": [310, 312], "is_frozen": 455, "is_graph": [506, 512], "is_inner_nod": 370, "is_multigraph": 577, "is_ok": [244, 263, 265, 272, 274, 281, 299, 308, 310, 312, 314, 590], "is_on": [128, 134], "is_outer_nod": 370, "is_simple_path": [368, 600], "isempti": 314, "isinnervertex": 367, "islocatedin": 343, "isn": [37, 339, 430], "isnul": 341, "iso": 131, "isok": [154, 173, 175, 181, 184, 191, 209, 216, 314], "isol": [308, 339, 442, 538, 590], "isomorph": [333, 343, 362, 427, 431, 556, 578], "isort": 35, "isoutervertex": [14, 367], "ispartof": 343, "ispolatov": 518, "issourc": 24, "issu": [9, 17, 32, 37, 128, 134, 314, 322, 325, 329, 332, 333, 342, 359, 360, 364, 500, 501, 502, 566, 603], "issubclassof": 343, "ist": 442, "isvp": 6, "item": [20, 29, 130, 315, 320, 354, 357, 426, 427, 428, 431, 437, 442, 577, 590], "item_node_decod": 426, "itensorcontextwrapp": 367, "iter": [0, 6, 9, 14, 16, 17, 19, 20, 24, 319, 328, 341, 342, 347, 349, 350, 352, 353, 356, 357, 358, 359, 360, 362, 363, 368, 370, 425, 428, 437, 441, 442, 444, 445, 446, 447, 448, 453, 464, 465, 466, 467, 471, 472, 482, 483, 484, 486, 489, 491, 492, 495, 496, 524, 525, 526, 527, 528, 534, 537, 539, 571, 577, 600, 604, 609], "iteratorkernel": 9, "itertool": 577, "its": [0, 4, 6, 7, 9, 10, 12, 13, 14, 18, 24, 30, 31, 34, 128, 129, 130, 134, 216, 308, 318, 325, 333, 334, 336, 339, 341, 343, 347, 349, 350, 353, 356, 357, 358, 360, 361, 362, 368, 369, 370, 417, 425, 427, 431, 435, 437, 439, 442, 484, 487, 494, 496, 516, 521, 534, 537, 545, 564, 574, 584, 589, 590, 592], "itself": [10, 20, 22, 37, 341, 343, 347, 356, 357, 370, 425, 427, 583, 584, 589], "iv": [18, 600], "ivertexdatacontextwrapp": 367, "ivnum": 321, "ivnums_": 321, "j": [10, 31, 134, 321, 368, 437, 442, 475, 476, 497, 498, 506, 508, 509, 511, 517, 528, 531, 532, 533, 555, 589], "j4": 31, "jack": 608, "jackie_chan": 343, "jame": 487, "jane": 554, "januari": 131, "janusgraph": 364, "japan": 343, "jar": [4, 8, 22, 23, 35, 39, 216, 333, 368, 600], "jar_path": 600, "java": [1, 4, 8, 12, 14, 34, 132, 133, 181, 315, 320, 327, 331, 341, 344, 346, 359, 360, 364, 368, 372, 376, 589, 590, 600], "java_app_class": [368, 600], "java_path": [334, 600], "java_pi": [17, 368], "java_tool_opt": 39, "javaag": 39, "javaapp": [17, 582, 600], "javadoc": [17, 35], "javasdk": [345, 594], "java\u7684": 608, "jaworski": 532, "jdk": [32, 329, 332, 345, 594, 600], "jemalloc": 365, "jeong": 512, "jet_li": 343, "jia": 336, "jiang": 600, "jiaxin": 600, "jim": [478, 489], "jingbo": 600, "jingren": 600, "jit": 4, "jna": 334, "jna_path": 334, "jni": [327, 372], "job": [7, 13, 23, 45, 46, 95, 173, 175, 216, 263, 265, 308, 309, 311, 325, 328, 330, 349, 357, 358, 359, 363, 367, 402, 426, 584, 590], "job_benchmark": 328, "job_config": 45, "job_db": 328, "job_expect": 328, "job_id": [46, 58, 95, 129, 175, 216, 263, 265, 266, 308, 309, 311], "job_id_exampl": 95, "job_meta": 134, "job_nam": [427, 437], "job_respons": 266, "job_response_dict": 266, "job_response_form_dict": 266, "job_response_inst": 266, "job_statu": [95, 96, 267], "job_status_dict": [96, 267], "job_status_form_dict": 267, "job_status_from_dict": 96, "job_status_inst": [96, 267], "jobapi": 46, "jobid": [175, 176, 216, 265], "jobmanagementapi": [216, 309], "jobrespons": [173, 216, 263, 309, 311], "jobstatu": [46, 95, 175, 216, 265, 309, 311], "joel": 510, "john": [533, 550], "johnny_depp": 343, "join": [37, 128, 333, 337, 343, 354, 427, 437, 478, 481, 489, 496, 505, 506, 519, 521, 524, 525, 526, 527, 528, 536, 537, 577, 589], "joindecompositionrul": 333, "joint": [368, 534, 535, 536, 537, 578], "joint_degre": [536, 537], "joint_degree_graph": 536, "jon": 442, "joseph": 343, "josh": 341, "journal": [442, 511, 519, 536, 567, 570, 574], "jponnela": 442, "jr": 16, "json": [36, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 154, 173, 175, 181, 191, 209, 216, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 328, 329, 331, 334, 337, 584, 586, 590, 591], "jsonnod": 334, "jsonobject": [17, 600], "jsonpayload": 334, "jstor": 554, "judgement": 589, "juliu": 559, "june": 554, "junit": 314, "jupit": 314, "jupyt": [366, 584], "jupyterlab": 366, "just": [18, 19, 23, 27, 45, 126, 129, 130, 314, 315, 317, 322, 325, 329, 333, 341, 343, 364, 372, 435, 439, 577, 580, 584, 590, 592], "k": [6, 20, 37, 244, 299, 319, 321, 331, 343, 347, 357, 358, 359, 361, 368, 369, 429, 442, 479, 487, 497, 498, 499, 500, 502, 504, 505, 506, 513, 516, 525, 526, 527, 529, 532, 533, 534, 535, 536, 537, 542, 577, 583, 589, 604, 608], "k1": 341, "k2": 341, "k3": 577, "k4": 561, "k8": [2, 4, 7, 17, 22, 30, 37, 38, 41, 132, 194, 317, 322, 325, 327, 329, 335, 342, 346, 349, 351, 356, 364, 366, 584, 590, 600, 601, 602, 604, 607, 610], "k8s_client_config": [27, 584], "k8s_coordinator_cpu": [424, 584], "k8s_coordinator_mem": [424, 584], "k8s_coordinator_pod_node_selector": 584, "k8s_deploy_mod": [424, 584], "k8s_engine_cpu": [27, 424, 584], "k8s_engine_mem": [27, 322, 354, 424, 584, 603], "k8s_engine_pod_node_selector": 584, "k8s_etcd_imag": 424, "k8s_glt_client": 354, "k8s_gs_imag": [424, 584, 602], "k8s_image_pull_polici": [352, 354, 424, 584], "k8s_image_pull_secret": [424, 584], "k8s_image_registri": [27, 33, 584], "k8s_image_repositori": [27, 584], "k8s_image_tag": [27, 33, 354, 584], "k8s_launch": 354, "k8s_mars_scheduler_cpu": [424, 584], "k8s_mars_scheduler_mem": [424, 584], "k8s_mars_worker_cpu": [424, 584], "k8s_mars_worker_mem": [424, 584], "k8s_namespac": [30, 33, 424, 584], "k8s_service_typ": [352, 354, 424, 584, 604], "k8s_vineyard_cpu": [424, 584], "k8s_vineyard_deploy": [30, 33, 424, 584], "k8s_vineyard_imag": 584, "k8s_vineyard_mem": [322, 354, 424, 584, 603], "k8s_volum": [27, 30, 33, 424, 584, 601, 604], "k8s_waiting_for_delet": [424, 584], "k_": [368, 478, 542], "k_core": [358, 368, 442, 578, 600, 604], "k_j": 368, "k_m": 489, "k_n": 482, "k_neighbor": 319, "k_shell": [368, 600], "kafka": [322, 586, 590, 603], "kaiser": 442, "kalongedgetooutervertex": 370, "kalongincomingedgetooutervertex": 370, "kalongoutgoingedgetooutervertex": 370, "kantor": 556, "karat": 567, "karate_club_graph": 569, "karhum": 531, "karp": 500, "kaski": 442, "katz": [6, 368, 442], "katz_centr": [0, 34, 368, 442, 578, 600], "katz_centrality_numpi": [368, 442], "kboolandaggreg": 370, "kbooloraggreg": 370, "kbooloverwriteaggreg": 370, "kbothoutin": [16, 367], "kconcat": 367, "kcore": [358, 604], "kdd": [534, 535], "kdd\u7b49": 606, "kdoublemaxaggreg": 370, "kdoubleminaggreg": 370, "kdoubleoverwriteaggreg": 370, "kdoubleproductaggreg": 370, "kdoublesumaggreg": 370, "kdtree": [525, 526, 527], "kean": 333, "keep": [9, 341, 343, 350, 370, 431, 439, 534, 537, 590], "keepdim": [354, 355], "kei": [3, 4, 13, 20, 27, 129, 130, 131, 136, 143, 152, 153, 154, 157, 158, 166, 209, 216, 226, 233, 242, 243, 244, 247, 248, 256, 263, 299, 309, 311, 319, 320, 328, 329, 332, 333, 334, 337, 338, 341, 343, 356, 359, 361, 362, 363, 368, 369, 370, 401, 402, 403, 412, 428, 431, 437, 439, 442, 471, 520, 524, 525, 526, 527, 575, 577, 579, 580, 583, 584, 589, 590, 600, 610], "kept": [13, 341, 343, 367], "kernel": [6, 513], "kert\u00e9sz": 442, "key1": 329, "key2": 329, "keyerror": 577, "keyvaluepair": 341, "keyword": [337, 444, 445, 446, 513, 520, 524, 525, 526, 527, 528, 577, 580, 583, 584], "khan": 343, "kill": [331, 584], "kim": 512, "kind": [6, 9, 12, 13, 15, 27, 33, 34, 129, 131, 314, 322, 328, 343, 354, 356, 358, 359, 364, 367, 369, 429, 431, 435, 436, 574, 583, 588, 590, 592, 593, 601, 603, 607], "kint64maxaggreg": 370, "kint64minaggreg": 370, "kint64overwriteaggreg": 370, "kint64productaggreg": 370, "kint64sumaggreg": 370, "kite": [547, 554], "kivel\u00e4": 442, "kkore": [0, 34], "kleinber": 442, "kleinberg": 442, "kleitman": [509, 511], "kmaxaggreg": 370, "kmergegraphdef": 367, "kminaggreg": [18, 370, 600], "kn": 529, "know": [7, 8, 30, 33, 38, 45, 129, 130, 131, 154, 173, 216, 244, 263, 272, 308, 329, 333, 340, 341, 343, 351, 356, 358, 361, 426, 427, 435, 439, 588, 590, 591, 605, 608, 610], "knowledg": [37, 325, 336, 347, 362, 433], "known": [0, 6, 8, 9, 24, 32, 329, 332, 336, 337, 343, 360, 361, 368, 459, 477, 480, 529, 530, 547, 571, 592], "knudsen": 519, "knuth": 568, "ko": 341, "konlyout": 367, "konno": 524, "koverwriteaggreg": 370, "kpickfirst": 367, "kpickfirstnonempti": 367, "kpickfirstnonemptygraphdef": 367, "kproductaggreg": 370, "krackhardt": 554, "krapivski": [513, 514, 515, 518], "krequireconsist": 367, "kshell": [0, 34], "ksumaggreg": 370, "ksynconoutervertex": [16, 18, 367, 370, 600], "ktextappendaggreg": 370, "kube": [27, 584], "kube_config_path": 601, "kubeconfig": 584, "kubectl": [27, 29, 30, 33, 38, 322, 329, 590, 598, 603], "kubeflow": [354, 436], "kubernet": [2, 29, 75, 322, 325, 327, 329, 331, 346, 351, 354, 356, 358, 363, 584, 590, 601, 603, 604, 606, 610, 611], "kurant": 536, "kuzu": [328, 364], "kuzudb": 328, "kv": 424, "kvalbein": 574, "kw": [486, 584], "kwarg": [356, 368, 369, 376, 387, 399, 403, 404, 421, 424, 434, 439, 440, 441, 584], "l": [23, 29, 35, 45, 126, 134, 315, 350, 362, 429, 497, 498, 500, 501, 502, 509, 510, 511, 513, 514, 515, 518, 525, 526, 527, 528, 530, 534, 535, 536, 537, 566, 569, 577, 597, 598], "lab": 611, "label": [4, 6, 7, 13, 15, 20, 33, 77, 100, 129, 152, 153, 154, 160, 173, 209, 210, 213, 242, 243, 244, 250, 263, 299, 300, 303, 311, 314, 319, 321, 328, 329, 333, 334, 336, 337, 339, 349, 353, 354, 355, 357, 358, 360, 362, 367, 368, 369, 370, 378, 425, 428, 431, 437, 439, 442, 477, 481, 488, 492, 493, 495, 505, 506, 508, 509, 510, 511, 512, 554, 555, 577, 579, 580, 583, 584, 588, 590, 591, 604, 605, 608, 609], "label0": 600, "label1": 343, "label2": 343, "label_1": 319, "label_2": 319, "label_3": 319, "label_id": [314, 321, 367, 369, 370, 402], "label_id_t": [321, 367], "label_id_typ": 367, "label_nam": [314, 319, 369, 583], "label_not_found": 334, "label_num_": 321, "labeld": 369, "labeled_vertex_data": 368, "labeled_vertex_properti": 368, "labeledvertexdatacontext": 367, "labeledvertexdatacontextdagnod": 369, "labeledvertexpropertycontextdagnod": [368, 369], "labelnam": [314, 608], "labelname1": 608, "labelname2": 608, "labeltyp": 591, "label\u5206\u7ec4": 321, "label\u6570\u91cf\u548c\u5168\u90e8oid": 321, "lack": [20, 32, 333, 336, 341, 363, 442], "ladder": [481, 488], "laid": 318, "lambda": [339, 343, 425, 431, 437, 442, 513, 524, 526, 527, 528, 609], "lambda_": 442, "lambda\u548cgroovy\u8868\u8fbe\u5f0f\u6216\u81ea\u5b9a\u4e49\u51fd\u6570": 608, "lancichinetti": 496, "landscap": 554, "lang": [33, 35, 130, 332, 336, 341, 358, 440], "langchain": 336, "langchain_prompt": 336, "languag": [3, 12, 16, 35, 43, 46, 134, 316, 320, 325, 328, 330, 332, 333, 339, 341, 342, 343, 344, 346, 347, 350, 357, 358, 359, 360, 361, 364, 372, 440, 589, 590, 594], "langvil": 442, "lapp": 590, "laptop": 359, "larg": [4, 6, 7, 9, 11, 12, 13, 14, 18, 20, 23, 27, 34, 37, 131, 318, 322, 325, 329, 330, 332, 333, 338, 339, 342, 343, 344, 346, 347, 350, 351, 352, 357, 358, 359, 363, 364, 368, 412, 426, 427, 429, 431, 433, 437, 438, 451, 475, 476, 496, 531, 589, 600], "large_attr": [412, 581], "large_data": 367, "largeattrvalu": 412, "larger": [129, 318, 333, 339, 343, 353, 524], "largest": [17, 343, 442, 522, 600], "laskei": 504, "last": [27, 30, 343, 431, 436, 439, 499, 571, 598], "lastli": 336, "lastnam": [343, 356, 588, 605, 610], "latenc": [328, 330, 339, 342, 357, 363, 364, 590], "later": [13, 18, 20, 32, 33, 332, 336, 343, 361, 439, 584, 589, 590, 607], "latest": [4, 14, 17, 32, 37, 38, 39, 41, 42, 45, 128, 132, 134, 315, 317, 331, 333, 336, 348, 349, 589, 590, 602, 607], "latter": [328, 341, 343, 360], "launch": [2, 8, 9, 17, 22, 29, 36, 41, 128, 132, 314, 322, 325, 329, 340, 349, 351, 352, 358, 366, 418, 436, 581, 584, 590, 591, 597, 600, 604], "launch_clust": 601, "launcher_typ": [28, 45], "launder": [361, 364], "law": [24, 496, 506], "layer": [4, 6, 45, 329, 330, 333, 347, 350, 359, 362, 364, 425, 426, 429, 433, 437, 609], "layer1": [350, 429], "layer2": [350, 429], "layer_edg": [350, 429], "layer_featur": 437, "layer_id": 429, "layer_index": 437, "layer_nod": [350, 429], "layout": [34, 360, 590], "lazi": [369, 439, 584], "lcc": 365, "lcf": [542, 544, 546, 548, 550, 556, 558], "lcfnotat": 542, "ld_library_path": 31, "ldbc": [0, 4, 34, 318, 328, 329, 331, 333, 339, 340, 346, 356, 360, 364, 365, 588, 605, 610], "ldbc1": 333, "ldbc__graphar": 588, "ldbc_graphar": 588, "ldbc_queri": 328, "ldbc_sampl": [356, 590, 608, 610], "ldbc_subgraph": 588, "ldbc_subgraph_graphar": 588, "ldot": 510, "le": [524, 528, 568], "lead": [6, 17, 24, 128, 322, 333, 343, 362, 506, 508], "leader_student_id": 439, "leaf": [367, 369, 414, 442, 487, 571], "leaky_relu": 437, "learn": [7, 27, 32, 36, 37, 38, 41, 45, 325, 330, 332, 346, 350, 351, 352, 354, 359, 360, 363, 366, 420, 426, 429, 430, 431, 432, 435, 437, 582, 584, 604, 606], "learning_engin": 36, "learning_r": [349, 352, 353, 358, 437, 604], "learningbasedmodel": [425, 609], "leas": 37, "least": [0, 6, 37, 129, 343, 442, 476, 498], "leav": [6, 328, 343, 439, 477, 487], "lectur": 531, "lederberg": 542, "left": [27, 36, 128, 337, 341, 368, 439, 442, 478, 510], "leftmost": 479, "leftrightarrow": 442, "leg": 543, "legaci": 359, "legal": 330, "lego": 134, "lei": 343, "leinhardt": 504, "len": [15, 341, 343, 352, 354, 427, 442, 451, 482, 499, 501, 504, 506, 507, 511, 577], "length": [128, 131, 307, 314, 321, 325, 334, 337, 341, 343, 356, 361, 368, 429, 442, 481, 483, 488, 510, 531, 535, 541, 563, 572, 577, 610], "lengthi": 330, "lengthrang": 341, "leo": 442, "leonidzhukov": 442, "lepist": 531, "less": [0, 2, 6, 13, 17, 27, 329, 336, 337, 341, 356, 368, 431, 438, 442, 494, 505, 516, 518, 590], "lesson_num": 439, "let": [15, 18, 19, 41, 130, 329, 330, 343, 356, 362, 539, 583], "letter": [337, 571], "level": [0, 6, 12, 38, 128, 184, 274, 325, 330, 333, 357, 359, 362, 368, 433, 487, 534, 535, 574, 589, 590], "leverag": [39, 128, 216, 333, 338, 339, 345, 346, 359, 361, 372, 569, 586, 590, 594], "lexic": 439, "lexicograph": 476, "lfr": 496, "lg": [349, 352, 353, 358, 420, 584, 598, 604], "lh": 321, "li": [534, 537], "lib": [23, 31, 216, 316, 331, 333, 334, 376, 590], "lib64": 31, "lib_path": 367, "libclang": 31, "libdefault": 334, "libgrap": [4, 16, 31, 34, 359, 372], "librari": [4, 6, 12, 15, 16, 31, 32, 33, 92, 111, 170, 198, 216, 260, 288, 314, 318, 330, 331, 334, 357, 367, 368, 372, 590], "libtool": 432, "licens": [31, 602], "lid": [321, 367, 402], "lid_list": 321, "lid\u548ceid": 321, "lid\u548ceid\u5230nbr": 321, "lid\u7684\u7f16\u7801\u5305\u542b\u4e86\u9876\u70b9label": 321, "lid\u7f16\u7801": 321, "life": [12, 32, 34, 329, 357], "lifetim": 440, "light": 9, "lightweight": [333, 334], "ligra": 6, "like": [4, 14, 15, 18, 19, 20, 23, 24, 27, 29, 32, 36, 37, 41, 45, 126, 128, 129, 131, 134, 314, 319, 322, 325, 329, 330, 332, 333, 336, 343, 344, 346, 348, 356, 357, 358, 362, 363, 364, 366, 367, 368, 426, 431, 435, 437, 439, 496, 506, 508, 516, 577, 583, 584, 586, 588, 589, 590, 591, 610], "likelihood": 362, "limit": [6, 9, 13, 22, 47, 131, 134, 315, 320, 322, 329, 333, 334, 335, 336, 337, 339, 344, 347, 360, 361, 362, 364, 365, 584, 603, 608], "lin": 343, "line": [2, 4, 6, 7, 17, 36, 37, 38, 41, 45, 126, 128, 132, 134, 317, 327, 330, 348, 349, 359, 364, 425, 426, 577, 579, 590, 591, 598, 609], "linear": [341, 511, 513, 569, 589], "linearli": [475, 491], "link": [12, 31, 37, 38, 131, 322, 324, 330, 333, 339, 347, 362, 365, 368, 439, 442, 479, 500, 502, 503, 513, 514, 515, 574, 577, 584], "lint": [35, 37], "linux": [27, 30, 31, 36, 134, 317, 329, 349, 365, 372, 607], "linux_x86_64": 432, "list": [0, 1, 16, 19, 20, 28, 31, 34, 37, 38, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 136, 140, 143, 144, 146, 150, 152, 153, 154, 155, 156, 161, 162, 166, 167, 168, 169, 170, 172, 173, 175, 181, 183, 186, 193, 198, 210, 211, 212, 213, 216, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 329, 337, 339, 341, 343, 346, 352, 354, 356, 359, 362, 366, 368, 370, 389, 390, 397, 398, 412, 426, 429, 431, 439, 442, 451, 453, 456, 463, 465, 471, 472, 475, 476, 480, 482, 483, 501, 504, 506, 508, 509, 510, 511, 512, 524, 528, 531, 534, 535, 540, 542, 555, 571, 577, 578, 580, 584, 588, 590, 593, 598, 605, 608], "list_alert_messag": 46, "list_alert_receiv": 46, "list_alert_rul": 46, "list_graph": [46, 263, 311], "list_job": [46, 265, 311], "list_procedur": [272, 311], "list_service_statu": 46, "list_stored_procedur": 46, "listen": [29, 317, 318, 331, 367], "listgraph": [216, 309], "listjob": [216, 309], "listliter": 337, "listprocedur": [216, 309], "listr": 181, "lite": [4, 16, 31, 34, 359, 372], "liter": 341, "literal_ev": 590, "litestr": 436, "littl": [307, 329, 341, 343], "live": 343, "livejournal1": 365, "ll": [7, 13, 20, 29, 129, 130, 349], "llm": 338, "lnc": 510, "lo": [31, 342], "load": [2, 4, 7, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 29, 33, 45, 95, 128, 134, 173, 175, 216, 263, 308, 311, 315, 316, 320, 322, 325, 327, 329, 330, 331, 332, 333, 335, 338, 342, 349, 358, 359, 360, 362, 365, 366, 367, 368, 376, 378, 380, 409, 425, 427, 436, 437, 439, 584, 589], "load_app": [16, 17, 18, 22, 600], "load_centr": 442, "load_data": 590, "load_direct": 365, "load_factor": 13, "load_factori": 13, "load_from": [13, 22, 30, 439, 584, 588], "load_graph": [425, 609], "load_ldbc": [20, 343, 588, 608], "load_modern_graph": [2, 7, 30, 33, 332, 358, 368, 440], "load_ogbn_arxiv": [354, 355], "load_ogbn_mag": [349, 352, 353, 356, 358, 604, 610], "load_p2p_network": [15, 16, 17, 18, 325, 368, 369, 600], "load_strategi": [16, 367], "load_tool": 590, "load_undirected_from_direct": 365, "loadbalanc": [352, 584, 604], "loadedget": 367, "loader": [4, 22, 331, 355, 367, 378, 389, 582, 591, 605, 606], "loader_op": 378, "loaderjob": [45, 129], "loadfrag": 367, "loadfragmentasfragmentgroup": 367, "loadgraphtog": 23, "loading_config": [45, 68, 129, 130, 276, 308, 311], "loading_resp": 265, "loadingconfig": 186, "loadstrategi": [16, 367], "loadvertexedget": 367, "loadvertext": 367, "loc": 402, "local": [0, 2, 4, 6, 10, 13, 14, 22, 24, 27, 30, 34, 37, 126, 129, 130, 132, 133, 216, 308, 317, 322, 327, 328, 329, 335, 342, 343, 351, 356, 357, 358, 362, 367, 368, 372, 402, 426, 427, 435, 436, 437, 439, 588, 591, 597, 607, 608], "local_partit": 589, "local_vertex_map": [367, 591], "localfilesystem": 426, "localhost": [46, 47, 67, 75, 94, 95, 106, 110, 121, 134, 315, 331, 334, 335, 342, 354, 356, 584, 610], "localtftrain": [425, 609], "localtrain": [349, 352, 353, 358, 604], "localvertexmap": 13, "locat": [4, 23, 27, 36, 38, 128, 130, 131, 188, 278, 311, 317, 329, 331, 337, 343, 348, 356, 361, 371, 373, 427, 428, 439, 590, 591, 597], "locationip": [325, 356, 610], "lock": 584, "log": [15, 17, 46, 75, 88, 96, 128, 134, 177, 267, 322, 327, 328, 352, 353, 357, 359, 589, 591, 603], "log4r": [331, 590], "log_level": [38, 128, 134, 354, 424], "log_softmax": [354, 355], "logback": 590, "logic": [4, 6, 9, 14, 16, 17, 216, 308, 330, 333, 334, 341, 343, 346, 359, 361, 365, 428, 588, 589, 590, 598, 600], "logical_plan_build_fail": 334, "logist": 360, "logit": [349, 353, 358, 437, 604], "logview": 96, "lollipop": 489, "long": [14, 17, 30, 33, 38, 307, 314, 333, 336, 339, 341, 343, 359, 364, 368, 431, 589, 590, 600, 608], "long_text": [45, 97, 113, 129, 131, 173, 216, 263, 268, 272, 290, 308, 590], "long_text_dict": [97, 268], "long_text_form_dict": 268, "long_text_from_dict": 97, "long_text_inst": [97, 268], "longer": [15, 352, 370, 584], "longtext": [46, 200, 216, 309], "look": [4, 15, 18, 20, 27, 128, 216, 317, 329, 343, 356, 372, 438, 583, 586, 590, 591], "lookup": [347, 362, 437, 577], "loop": [359, 442, 452, 465, 504, 506, 508, 510, 516, 524, 525, 526, 527, 528, 534, 537, 577, 578, 608], "loos": [359, 364, 586], "lop": 341, "loss": [347, 349, 352, 353, 354, 355, 358, 362, 437, 604, 609], "loss_fn": 437, "lost": [33, 584], "lot": [3, 13, 37, 325, 343, 345, 594], "louvain": [8, 360, 368, 600], "low": [0, 6, 7, 13, 32, 330, 333, 349, 357, 358, 362, 363, 364, 569, 590], "lower": [34, 330, 333, 334, 339, 341, 343, 361, 496, 503, 516], "lowercas": 337, "lpa": [0, 7, 34, 358, 368, 600], "lpa_result": 600, "lpa_u2i": [368, 600], "lr": [354, 355], "lsqb": [328, 333], "lsqb_queri": 328, "lt": [341, 343, 608], "lte": [341, 358, 604, 608], "ltype": 555, "lu": [510, 600], "lubotzki": 521, "luigi": 343, "lump": 20, "luo": 600, "ly": 359, "m": [6, 7, 9, 18, 20, 23, 27, 28, 30, 31, 32, 35, 45, 128, 134, 328, 329, 330, 331, 332, 343, 349, 358, 368, 369, 442, 452, 483, 487, 489, 500, 506, 508, 510, 512, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 556, 565, 569, 570, 574, 577, 590, 600], "m1": [9, 322, 332, 478, 603, 607], "m2": [9, 478], "m_": 538, "m_1": 538, "m_2": 538, "m_i": 538, "m_pi": [18, 600], "ma": 341, "mac": [317, 372, 602, 604], "machin": [2, 4, 6, 7, 11, 14, 20, 24, 27, 30, 32, 36, 37, 38, 45, 130, 132, 134, 317, 318, 322, 329, 331, 332, 333, 335, 339, 342, 348, 349, 351, 352, 357, 358, 359, 360, 361, 362, 368, 425, 437, 584, 589], "maclean": 527, "maco": [27, 30, 36, 134, 317, 322, 332, 601, 603, 604, 607], "made": [36, 37, 45, 329, 333, 350, 365, 426, 429, 435, 442, 537, 589], "mag": [349, 353, 358, 604], "magnitud": [346, 359], "mahinda": 343, "mai": [2, 4, 6, 7, 8, 14, 15, 18, 20, 22, 24, 27, 29, 30, 31, 32, 36, 37, 38, 45, 46, 128, 129, 132, 134, 216, 308, 314, 318, 319, 322, 325, 329, 330, 332, 333, 336, 339, 341, 343, 347, 349, 352, 356, 357, 358, 361, 362, 363, 364, 378, 426, 431, 433, 434, 435, 436, 439, 476, 499, 506, 508, 516, 577, 580, 583, 584, 589, 590, 592, 594, 597], "main": [4, 6, 30, 34, 37, 129, 134, 154, 173, 175, 181, 184, 191, 209, 216, 306, 308, 314, 318, 330, 333, 334, 339, 342, 343, 364, 425, 434, 437, 442, 584, 609, 610], "mainli": [13, 130, 134, 330, 337, 343, 364, 433], "mainstream": [333, 350, 429, 430], "maintain": [6, 10, 14, 35, 36, 130, 134, 319, 339, 341, 357, 360, 361, 590], "mainten": [9, 589], "major": [6, 12, 13, 14, 337, 360, 367], "make": [6, 9, 13, 14, 15, 16, 23, 27, 29, 30, 31, 32, 35, 36, 37, 41, 43, 45, 126, 129, 134, 314, 315, 317, 318, 319, 327, 329, 330, 331, 333, 335, 336, 337, 341, 342, 343, 346, 348, 356, 359, 360, 361, 362, 365, 431, 432, 435, 437, 439, 455, 507, 571, 577, 584, 588, 589, 590, 597, 601, 602], "make_one_shot_iter": [431, 437], "make_shar": 586, "makefil": 35, "male": 343, "male_count": 343, "manag": [2, 4, 10, 12, 14, 16, 27, 29, 30, 126, 132, 133, 134, 216, 308, 309, 315, 316, 317, 319, 322, 325, 329, 338, 343, 346, 350, 351, 352, 357, 359, 360, 361, 362, 363, 364, 365, 367, 584, 590, 591, 597, 600], "mandatori": [130, 131, 358, 426], "mani": [0, 4, 6, 10, 12, 13, 14, 24, 32, 34, 36, 37, 45, 131, 314, 318, 320, 322, 325, 330, 348, 356, 358, 359, 360, 362, 426, 433, 480, 524, 526, 577, 589, 594], "manifest": 132, "manifest_path": 354, "manipul": [8, 11, 19, 20, 318, 343, 346, 361, 364, 366, 367, 577], "manner": [0, 2, 17, 18, 32, 36, 318, 358, 360, 361], "manual": [4, 9, 27, 30, 33, 133, 216, 322, 357, 364, 439, 590], "manufactur": 330, "many_to_mani": [45, 129, 131, 137, 173, 216, 263, 272, 308, 590], "many_to_on": [131, 137], "manylinux2010_x86_64": 31, "manylinux2014": [32, 602], "map": [4, 6, 13, 45, 126, 129, 134, 157, 158, 170, 177, 189, 198, 206, 216, 247, 248, 308, 317, 320, 334, 337, 339, 341, 343, 360, 367, 426, 435, 439, 569, 584, 590, 591, 605, 608], "mapliter": 337, "mapreduc": [95, 590], "map\u67e5\u8be2\u672cfragment\u7684\u5185\u90e8\u70b9\u6570\u91cf": 321, "mar": [12, 27, 325, 341, 359, 584], "marco": 499, "marcu": 442, "margin": 13, "marguli": 522, "mark": [365, 442], "marker": 579, "market": 343, "marketplac": 36, "marko": [319, 339, 341, 343], "markopoul": [534, 535, 536, 537, 569], "markov": 519, "mask": [349, 353, 358, 441, 604], "massiv": [318, 330, 361], "master": [4, 6, 19, 22, 23, 24, 31, 134, 318, 354, 600], "master_addr": [354, 355], "master_port": [354, 355], "master_url": 23, "masuda": 524, "mat": 485, "match": [6, 15, 128, 130, 181, 216, 272, 308, 315, 318, 319, 330, 331, 332, 334, 335, 336, 337, 357, 358, 359, 368, 476, 496, 504, 506, 508, 535, 571, 590, 608], "matchanalyticsalgorithm": 343, "matchlabel": 33, "matchoptimizationalgorithm": 343, "matchsent": 341, "materi": 336, "math": [17, 349, 353, 358, 442, 526, 527, 604, 606], "mathcal": 510, "mathemat": [337, 509, 511, 519, 521, 523, 532], "mathematician": 576, "mathew": [525, 526], "mathrm": 496, "mathworld": [529, 538, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 557], "matjaz": 442, "matmul": 437, "matplotlib": [19, 343], "matric": [540, 569], "matrix": [13, 356, 362, 368, 433, 442, 504, 522, 537, 540, 569, 577, 580], "matter": [427, 583], "matur": 431, "maven": [23, 133, 328, 333, 334, 372, 600], "max": [17, 337, 370, 438, 442, 600, 608], "max_commun": 496, "max_content_length": 128, "max_degre": 496, "max_it": [368, 442, 496], "max_iter": 319, "max_length": [123, 131, 298], "max_round": [0, 368, 588, 600], "max_vertex_num": [53, 131, 231], "maxgraph": [363, 606], "maxim": [0, 6, 442, 530, 576], "maximum": [0, 128, 131, 319, 329, 337, 339, 341, 343, 360, 368, 428, 442, 496, 512, 527, 528, 529, 530, 535, 576, 590], "maxiter": [17, 600], "maxlength": 208, "maxvertexnum": 141, "maxwel": 586, "mayb": [314, 343], "maze": 560, "mb": [333, 590], "mcsr": 134, "md": [30, 315, 328, 437], "md_type": [18, 370, 375, 600], "me": 9, "mean": [0, 2, 20, 29, 30, 36, 37, 45, 128, 129, 130, 131, 132, 184, 216, 274, 308, 318, 329, 330, 333, 339, 352, 367, 369, 375, 414, 427, 430, 431, 441, 442, 482, 499, 506, 516, 525, 526, 527, 577, 580, 583, 584, 586, 588, 589, 590, 592, 597], "meaning": [343, 356, 369, 439], "meant": [341, 343], "meanwhil": [12, 325, 346, 362, 589], "measur": [0, 6, 20, 330, 360, 362, 368, 426, 442, 520, 521, 554], "mech": 368, "mechan": [134, 343, 359, 362, 364, 586, 594], "media": 360, "medium": 354, "meera": 343, "meet": [6, 15, 18, 29, 37, 314, 325, 330, 332, 350, 357, 362, 429, 430, 496, 525, 526, 527, 592, 594], "member": [13, 16, 341, 343, 367, 567], "member_s": 439, "member_student_id": 439, "membercount": 343, "membership": [341, 577], "memoiz": 359, "memori": [9, 12, 23, 24, 27, 34, 75, 128, 130, 131, 318, 322, 325, 327, 339, 342, 346, 348, 351, 352, 354, 357, 359, 360, 362, 363, 364, 365, 425, 426, 427, 433, 437, 439, 577, 584, 590, 593, 602, 603], "memory_usag": [90, 98, 100], "memorystr": 23, "mend": 485, "mention": [131, 341, 343, 588, 589, 598], "mere": [478, 489], "merg": [341, 431], "messag": [4, 6, 10, 14, 15, 16, 17, 18, 24, 34, 36, 37, 38, 46, 47, 78, 82, 83, 129, 135, 225, 310, 312, 317, 322, 330, 334, 343, 350, 362, 367, 370, 438, 589, 600], "message_count": 343, "message_id": [47, 118], "message_ids_exampl": 47, "message_manager_t": [14, 16, 367], "message_strategi": [16, 367], "messageiter": [24, 370], "messagemanag": [4, 17, 600], "messagemessag": 4, "messagestrategi": [16, 18, 367, 370, 600], "met": 368, "meta": [128, 132, 134, 311, 331, 333, 337, 347, 356, 367, 428, 429, 588, 590], "meta_path": 429, "meta_schema_not_readi": 334, "meta_statistics_not_readi": 334, "metadata": [33, 45, 71, 120, 129, 130, 134, 173, 175, 181, 189, 206, 263, 265, 272, 279, 296, 322, 334, 354, 367, 439, 577, 586, 590], "metadata_stor": 134, "metainfo": 352, "method": [2, 15, 16, 17, 18, 20, 22, 23, 29, 46, 47, 67, 75, 94, 95, 106, 110, 121, 154, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 274, 281, 299, 308, 309, 310, 314, 328, 333, 334, 341, 343, 350, 352, 356, 360, 362, 367, 368, 370, 391, 402, 417, 425, 429, 433, 434, 440, 442, 505, 513, 515, 524, 526, 577, 580, 582, 584, 589, 590, 594, 600], "metric": [185, 191, 275, 281, 328, 362, 524, 525, 526, 527, 528], "metric_typ": [57, 82, 84], "meyer": 442, "mf": 9, "mg": 577, "michael": 519, "micro": 128, "microsoft": [353, 358, 604], "mid": 574, "middl": [45, 446], "middlewar": 6, "midnight": 131, "might": [27, 128, 131, 134, 308, 322, 442, 534, 577, 590, 593], "migrat": [8, 330, 349, 352, 353, 358, 359, 364, 586, 604], "mike": [209, 299, 590], "milan": 524, "mildli": 521, "miller": 510, "millisecond": [128, 131, 337, 341, 365, 588], "min": [14, 18, 24, 57, 84, 333, 337, 370, 600, 608], "min_commun": 496, "min_degre": 496, "min_progress": 368, "mind": 347, "mindist": 24, "mine": [6, 15, 357, 359, 360], "mini": [347, 362], "miniconda": 358, "minikub": [27, 29, 30, 590], "minim": [6, 11, 45, 333, 360, 437, 528, 529, 550, 576], "minimum": [0, 6, 322, 331, 333, 337, 341, 343, 368, 496, 584], "minitest": 602, "minkowski": [525, 526, 527], "minor": [12, 14, 34, 346, 357, 362, 365, 592], "minregisteredresourcesratio": 23, "minu": [6, 341, 480], "minut": [29, 322, 330], "mirror": [6, 7, 10, 24, 27, 32, 332, 348, 349], "mirrorvertic": 367, "miscellan": 577, "miser": 568, "mislead": 336, "miss": [9, 37, 429, 439, 487, 584], "mitig": 342, "miwa": 524, "mix": [328, 341, 368, 589], "mkdir": [31, 134, 322, 437, 603], "mmap": 131, "mmap_arrai": 130, "mmap_vector": 130, "mod": [480, 494, 523, 542], "mode": [6, 15, 27, 32, 36, 45, 126, 128, 132, 317, 322, 333, 334, 342, 351, 354, 356, 367, 368, 369, 418, 425, 429, 435, 437, 439, 579, 584, 590, 594, 598, 610], "modekei": 437, "model": [0, 1, 3, 8, 9, 18, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 154, 173, 181, 184, 191, 209, 216, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 314, 319, 320, 325, 330, 333, 338, 339, 343, 345, 346, 349, 350, 351, 356, 357, 358, 360, 361, 364, 372, 427, 429, 431, 432, 496, 500, 504, 506, 508, 510, 516, 518, 519, 524, 525, 526, 527, 528, 532, 533, 567, 574, 584, 588, 590, 594, 604], "model_fn": [425, 437, 609], "model_properti": 269, "model_property_dict": 269, "model_property_form_dict": 269, "model_property_inst": 269, "modelproperti": [242, 243, 244, 245, 251, 299, 300, 303, 590], "moder": 343, "modern": [2, 6, 7, 33, 129, 134, 315, 320, 329, 331, 332, 343, 346, 358, 359, 360, 586, 590, 591], "modern_graph": [7, 30, 33, 45, 129, 130, 134, 173, 216, 308, 329, 332, 358, 591, 597], "modern_graph_bulk_loading_json": 173, "modern_graph_data_dir": 440, "modern_graph_import": 130, "modern_graph_schema_json": 173, "modern_statist": 334, "modif": [14, 22, 314, 333, 346, 357, 362, 439, 580], "modifi": [14, 20, 24, 28, 128, 318, 328, 329, 333, 337, 342, 381, 382, 397, 398, 432, 455, 508, 575, 588, 589], "modify_typ": [397, 398], "modul": [6, 8, 9, 15, 19, 20, 23, 134, 327, 330, 334, 336, 341, 346, 354, 357, 358, 359, 361, 362, 438, 576, 606], "modular": [357, 569], "modulo": [337, 341, 521], "modulu": 341, "moebiu": 556, "moment": [216, 308, 337, 372], "mondai": 20, "monei": [361, 364], "monitor": [27, 29, 346], "monopol": 339, "monoton": 14, "monterei": 607, "month": 341, "more": [0, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 20, 27, 29, 30, 32, 34, 36, 37, 38, 41, 45, 46, 126, 131, 132, 216, 314, 315, 317, 318, 319, 320, 322, 325, 328, 330, 331, 332, 333, 336, 339, 341, 343, 346, 347, 348, 349, 350, 356, 357, 359, 360, 361, 362, 363, 364, 367, 368, 369, 372, 425, 426, 429, 430, 431, 435, 436, 439, 442, 475, 516, 523, 524, 538, 539, 571, 577, 579, 584, 588, 589, 590, 593, 594, 597], "moreov": [339, 341, 357, 361, 363, 589], "morn": 426, "moshen": 512, "most": [8, 9, 13, 15, 22, 33, 38, 45, 134, 318, 322, 330, 333, 336, 337, 341, 343, 347, 356, 358, 360, 362, 364, 365, 369, 425, 427, 431, 433, 435, 439, 497, 498, 522, 525, 526, 527, 588, 590], "mostli": [322, 331, 403], "motif": 442, "mount": [28, 30, 33, 322, 330, 356, 436, 584, 601, 603, 604], "mount_dataset": [325, 356], "mountpath": [27, 30, 33, 354, 584, 601, 604], "move": [0, 4, 6, 318, 336, 359, 431, 534, 537], "movement": [364, 431], "movi": [319, 320, 333, 359, 427], "mp": 9, "mpi": [31, 367], "mpi_comm_world": 586, "mpich": 365, "mr": [567, 570], "msg": [14, 16, 24, 310, 343, 370, 589], "mu": 496, "much": [4, 6, 13, 19, 22, 322, 330, 341, 343, 427, 431, 589], "multi": [6, 31, 132, 327, 339, 343, 346, 347, 350, 357, 359, 361, 362, 363, 364, 368, 429, 431, 433, 586, 590], "multidigraph": [402, 444, 456, 465, 470, 471, 508, 516, 517, 575, 577], "multigraph": [402, 442, 444, 452, 456, 465, 470, 471, 497, 498, 506, 508, 521, 522, 523, 577, 580], "multipart": 121, "multipartit": [483, 494], "multipl": [4, 6, 12, 14, 17, 29, 30, 41, 43, 130, 131, 134, 184, 216, 274, 308, 318, 328, 329, 330, 337, 341, 346, 347, 357, 358, 359, 360, 361, 362, 363, 364, 368, 369, 370, 426, 427, 431, 442, 539, 577, 583, 588, 589, 592, 598], "multipli": [337, 341, 564], "multipoint": 528, "multitud": 590, "murti": 570, "must": [6, 13, 24, 27, 30, 37, 54, 128, 129, 130, 131, 142, 232, 319, 322, 329, 341, 343, 357, 367, 369, 378, 426, 427, 429, 430, 431, 439, 441, 442, 455, 494, 496, 504, 507, 517, 519, 521, 524, 526, 528, 536, 539, 575, 577, 579, 583, 589, 590], "mutabl": [4, 134, 359], "mutable_csr": [134, 167, 190, 280], "mutablepoint": 321, "mutablevalu": 24, "mutat": 339, "mv": [9, 336], "mvn": [17, 22, 134, 216, 328, 334, 372], "my": [2, 18, 29, 577, 580, 584, 590], "my_app": [16, 18, 600], "my_app_context": 16, "my_pod_nam": 354, "my_sssp_pregel": [18, 600], "myalgorithm": 375, "myapp": 16, "myappcontext": 16, "mycielski": 578, "mycielskian": 538, "mycielskigraph": 538, "myfilesystem": 436, "myoper": 435, "mysql": [359, 586], "m\u00f6biu": 556, "n": [0, 19, 20, 30, 33, 38, 46, 47, 67, 75, 94, 95, 106, 110, 121, 128, 130, 173, 216, 272, 308, 315, 328, 330, 332, 334, 335, 337, 341, 343, 346, 350, 358, 362, 365, 368, 369, 429, 431, 434, 436, 442, 452, 456, 457, 459, 463, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 498, 499, 500, 505, 506, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 542, 555, 570, 571, 572, 574, 577, 590], "n1": 358, "n2": 358, "n_class": 437, "n_edges_add": 534, "n_epoch": 437, "n_featur": 437, "n_hop": 437, "n_th": 538, "nalysi": 359, "name": [0, 2, 4, 6, 12, 16, 17, 20, 22, 23, 27, 28, 29, 30, 32, 33, 37, 38, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 311, 314, 315, 319, 322, 328, 329, 330, 331, 333, 334, 336, 337, 339, 341, 343, 354, 355, 356, 357, 359, 361, 367, 368, 369, 370, 376, 412, 426, 428, 431, 433, 435, 437, 439, 440, 442, 461, 462, 476, 543, 550, 555, 567, 573, 577, 579, 580, 583, 584, 588, 589, 590, 598, 600, 601, 603, 608, 610], "namespac": [27, 28, 29, 30, 33, 38, 314, 354, 584], "narrow": [333, 496], "nat": [529, 530, 576], "nation": 343, "nativ": [34, 128, 314, 327, 330, 334, 338, 357, 361, 363, 364], "native_sourc": [14, 18, 600], "natur": [6, 12, 13, 24, 131, 325, 339, 343], "navig": [36, 334, 589, 597], "nb": 591, "nbr": [17, 20, 321, 367, 370, 577, 600], "nbr_": 321, "nbr_id": 438, "nbr_t": 367, "nbr_unit_t": [321, 367], "nbrdict": 577, "nbrs_num": [349, 352, 353, 358, 604], "nbrsdict": 577, "nbrunit": 367, "nbunch": [20, 450, 454, 456, 472, 577], "nbunch_it": 577, "ncrement": 359, "nd_iter": 577, "nd_view": 577, "ndarrai": [356, 369, 384, 395, 428, 429, 431, 434, 439, 441, 577, 610], "ndistu": 14, "ne": 510, "nearest": [0, 368], "nebula": 364, "nebular": 364, "necessari": [4, 6, 23, 27, 37, 41, 314, 319, 331, 332, 333, 342, 356, 368, 379, 387, 392, 426, 427, 429, 431, 439, 589, 590, 598], "necessarili": [427, 539], "necessit": 357, "nedg": 577, "need": [0, 2, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 37, 41, 45, 46, 47, 75, 94, 95, 106, 128, 129, 130, 131, 134, 175, 191, 216, 263, 265, 281, 308, 314, 322, 325, 328, 329, 330, 336, 343, 346, 347, 348, 349, 352, 356, 357, 358, 359, 361, 362, 364, 367, 368, 372, 425, 426, 427, 429, 431, 434, 435, 436, 438, 439, 511, 524, 529, 535, 555, 571, 577, 580, 586, 589, 590, 592, 593, 594, 600], "need_split_edg": 367, "neg": [346, 347, 425, 429, 431, 433, 437, 442, 461, 539], "neg_attr": 431, "neg_dst_ego": 352, "neg_dst_emb": 352, "neg_i": 431, "neg_i_1hop": 431, "neg_nod": [350, 434], "neg_num": 352, "neg_sampl": 352, "negat": [337, 341], "negative_sampl": [350, 425, 434, 609], "negativesampl": [350, 434], "neigh_mean": 437, "neigh_vec": 437, "neigh_weight": 437, "neighbor": [0, 6, 9, 13, 14, 17, 18, 321, 339, 341, 343, 347, 350, 354, 360, 361, 362, 368, 370, 425, 426, 428, 429, 431, 433, 434, 435, 437, 438, 442, 447, 448, 467, 519, 520, 534, 537, 570, 577, 586, 589, 600], "neighbor_sampl": [350, 429], "neighbor_vertex_id": 13, "neighborattrdict": 577, "neighbordict": 577, "neighborhood": [0, 6, 357, 359, 362, 368, 431, 435, 442, 520], "neighbors_by_loc": 402, "neighbors_by_nod": 402, "neighborsampl": [350, 429], "neighbour": 457, "neither": 37, "neo4j": [216, 306, 308, 315, 316, 317, 318, 327, 329, 331, 332, 335, 336, 337, 359, 364, 365, 440, 588, 590], "neo4j_sess": 590, "neo4jsess": 216, "neq": [341, 608], "nest": [334, 341], "net": [314, 442, 496], "netowrkx": 577, "network": [15, 27, 131, 317, 322, 325, 327, 331, 343, 347, 351, 353, 357, 358, 360, 363, 364, 365, 366, 368, 425, 426, 427, 429, 431, 433, 437, 442, 497, 498, 504, 506, 510, 513, 514, 515, 518, 530, 554, 565, 566, 568, 569, 574, 578, 592, 603], "networkx": [0, 3, 7, 8, 12, 34, 325, 346, 363, 366, 367, 368, 402, 442, 444, 445, 446, 447, 448, 449, 451, 453, 455, 456, 457, 459, 460, 461, 462, 466, 467, 471, 472, 476, 477, 479, 480, 482, 483, 484, 487, 489, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 517, 520, 521, 522, 523, 528, 529, 530, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 570, 572, 577, 579, 580, 582, 606, 611], "networkxerror": [442, 448, 455, 457, 461, 462, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 512, 518, 521, 522, 523, 534, 537, 569, 577, 580], "networkxexcept": 511, "networkxnotimpl": 442, "networkxpointlessconcept": [442, 572], "networkxunfeas": 512, "neural": [327, 347, 357, 358, 363, 364, 366, 425, 426, 429, 431, 433, 437], "neural_network": 437, "never": [372, 577], "new": [3, 4, 6, 9, 12, 13, 14, 17, 20, 23, 30, 33, 34, 37, 47, 94, 110, 133, 134, 154, 173, 181, 184, 191, 209, 263, 272, 306, 310, 311, 312, 314, 318, 320, 330, 332, 334, 343, 348, 357, 358, 359, 367, 370, 377, 378, 419, 436, 439, 440, 442, 449, 455, 496, 508, 517, 519, 539, 568, 575, 577, 584, 586, 588, 589, 592, 604], "new_dist": [18, 600], "new_graph": [600, 605], "new_know": [263, 590], "new_person": [263, 590], "new_sess": 30, "new_weight": 263, "newbuild": 334, "newli": [9, 41, 216, 308], "newman": [368, 442, 506, 508, 569], "next": [0, 6, 9, 12, 14, 16, 24, 29, 30, 33, 34, 342, 343, 347, 350, 351, 356, 357, 362, 425, 426, 429, 431, 433, 435, 436, 437, 503, 571, 583, 586, 589, 592], "next_modifi": 14, "nf": [322, 436, 603], "ngine": 359, "nichola": 516, "nightli": [32, 322, 603], "nikoletsea": 531, "nil": 571, "nio": 314, "niter": 577, "nkk": [534, 535], "nl": [550, 559], "nll_loss": [354, 355], "nloop": 470, "nn": [347, 349, 352, 353, 354, 355, 358, 362, 368, 425, 437, 604, 609], "nnode": 577, "no_grad": [354, 355], "no_proxi": [322, 603], "no_proxy\u7684\u524d\u540e\u7f00\u89c4\u5219": 603, "node": [0, 4, 10, 13, 15, 18, 27, 30, 33, 100, 104, 131, 322, 325, 333, 337, 338, 341, 349, 350, 351, 357, 358, 360, 362, 364, 366, 368, 369, 370, 390, 393, 398, 401, 402, 420, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 463, 465, 467, 469, 470, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 589, 590, 591, 600, 603, 604, 609], "node_attr_dict_factori": 577, "node_attribute_dict": 20, "node_data": 402, "node_decod": 437, "node_dict_factori": 577, "node_featur": [354, 355], "node_for_ad": 577, "node_from": [430, 441], "node_ip": [29, 590], "node_label": [354, 355, 584], "node_num": [402, 604, 608], "node_port": 29, "node_rank": 354, "node_sampl": 430, "node_sourc": 426, "node_statu": 98, "node_status_dict": 98, "node_status_from_dict": 98, "node_status_inst": 98, "node_t": [425, 426, 437, 609], "node_typ": [349, 352, 353, 358, 425, 427, 428, 431, 434, 437, 441, 604, 609], "node_weight": [350, 431, 434], "nodeattr": 577, "nodeattrdict": 577, "nodedata": 577, "nodedataview": 577, "nodedict": 577, "nodefrom": 441, "nodelist": [465, 504], "nodeport": [29, 354, 584, 590, 604], "nodeproppr": 355, "nodes_by_loc": 402, "nodes_for_ad": 577, "nodes_for_cycl": 444, "nodes_for_path": 445, "nodes_for_remov": 577, "nodes_for_star": 446, "nodes_set": 336, "nodes_with_selfloop": [470, 471], "nodesampl": 430, "nodestatu": [46, 104], "nodethr": 527, "nodetyp": [19, 579], "nodeview": 577, "non": [6, 9, 27, 134, 341, 364, 367, 370, 428, 466, 467, 487, 506, 508, 511, 535, 539, 546, 564, 577, 578], "nondecreas": 476, "none": [7, 9, 20, 27, 31, 121, 128, 173, 281, 306, 307, 311, 337, 352, 354, 355, 356, 358, 368, 369, 376, 383, 384, 387, 390, 394, 395, 396, 397, 399, 402, 404, 407, 408, 412, 418, 420, 424, 425, 426, 431, 439, 440, 441, 442, 450, 454, 456, 457, 461, 462, 471, 472, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 569, 571, 572, 574, 577, 579, 580, 581, 584, 588, 589, 605, 609, 610], "nonempti": 368, "nonetyp": 311, "nonisomorph": 541, "nonisomporph": 540, "nonneg": [506, 508], "nonplanar": 550, "nontrivi": [360, 549], "nonzero": [442, 506, 523], "nor": 37, "normal": [0, 6, 27, 322, 343, 368, 431, 439, 442, 499, 589], "not_compatible_for": 15, "not_found": 134, "notabl": [328, 337], "notat": [20, 128, 130, 542, 544, 546, 548, 550, 556, 558, 577], "notcontain": [341, 608], "note": [4, 13, 14, 20, 27, 29, 37, 38, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 314, 319, 328, 330, 333, 336, 337, 341, 343, 347, 352, 353, 356, 358, 359, 360, 368, 369, 370, 378, 417, 419, 427, 431, 439, 442, 451, 452, 455, 459, 472, 473, 474, 475, 476, 477, 483, 484, 489, 492, 494, 496, 497, 498, 499, 501, 503, 505, 506, 508, 509, 510, 511, 512, 516, 517, 518, 519, 520, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 539, 554, 569, 570, 571, 572, 574, 577, 579, 580, 583, 584, 588, 590, 597, 604, 610], "notebook": [366, 584], "notebook\u670d\u52a1\u4e2d\u5c1d\u8bd5\u6267\u884c": 611, "notebook\u6765\u7ec4\u7ec7\u8fd9\u4e9b\u6559\u7a0b": 611, "notendingwith": [341, 608], "noteport": 29, "notexist": 314, "notexisttoantijoinrul": 128, "noth": [16, 128, 370, 386, 439, 441, 577], "notic": [30, 33, 329, 339, 343, 357, 431, 439, 570, 577, 584, 592], "notimplementederror": 378, "notion": 343, "notmatchtoantijoinrul": [128, 134], "notstartingwith": [341, 608], "nottravers": 341, "novel": [333, 568], "novic": 336, "now": [6, 7, 20, 23, 27, 45, 126, 129, 216, 308, 315, 318, 329, 331, 333, 334, 336, 337, 342, 343, 349, 368, 435, 508, 590, 592, 605], "nowadai": 336, "np": [343, 428, 431, 437, 441, 592], "npm": 37, "nproc": 31, "nsdi": [359, 606], "nstart": 442, "null": [130, 337, 341, 442, 459, 475, 476, 483, 490, 542, 572, 577], "null_valu": 130, "nullabl": [51, 63, 89], "num": [314, 321, 331, 339, 342, 343, 438, 589], "num_client": [354, 355], "num_client_nod": 354, "num_cliqu": 503, "num_edg": 13, "num_lay": [354, 355], "num_neighbor": [354, 355], "num_of_nod": [0, 368], "num_rpc_thread": [354, 355], "num_serv": [354, 355], "num_server_nod": 354, "num_test": [354, 355], "num_val": [354, 355], "num_vertic": 13, "num_work": [27, 28, 33, 354, 355, 424, 584, 608], "num_worker_replica": 354, "number": [0, 8, 9, 13, 19, 20, 24, 28, 30, 33, 38, 45, 126, 128, 130, 131, 173, 263, 314, 315, 319, 325, 329, 331, 332, 339, 340, 341, 343, 347, 351, 352, 354, 358, 360, 362, 365, 367, 368, 370, 427, 428, 429, 430, 431, 434, 438, 442, 452, 457, 459, 468, 469, 470, 475, 476, 478, 480, 483, 487, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 550, 555, 560, 567, 569, 570, 572, 574, 575, 576, 577, 584, 586, 589, 590, 591, 598, 604, 608], "number_of_edg": [19, 20, 451, 486, 570, 577], "number_of_nod": [19, 20, 442, 486, 570, 577], "number_of_selfloop": [465, 471], "numer": [0, 20, 45, 134, 333, 337, 339, 341, 357, 359, 360, 368, 369, 442, 577, 583, 589], "numeric_assortativity_coeffici": [368, 600], "numeric_column": 437, "numpartit": 23, "numpi": [325, 343, 347, 367, 369, 384, 395, 404, 428, 429, 431, 432, 433, 434, 437, 439, 441, 442, 569, 577, 580, 606], "nutshel": [359, 586], "nvidia": 365, "nvlink": 359, "nx": [19, 20, 325, 379, 381, 382, 385, 388, 390, 392, 397, 398, 402, 405, 406, 439, 442, 577, 579, 580], "nx_add_edg": 397, "nx_add_nod": 398, "nx_del_edg": 397, "nx_del_nod": 398, "nx_update_edg": 397, "nx_update_nod": 398, "o": [19, 22, 23, 27, 30, 33, 38, 314, 367, 437, 442, 459, 510, 512, 517, 525, 526, 527, 529, 530, 531, 577, 590, 601, 604], "o2g_": 13, "o3": 365, "o_sourc": 15, "obgn": [349, 353], "obgn_mag": 352, "obj": 367, "object": [4, 15, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 154, 155, 170, 177, 182, 189, 198, 204, 206, 209, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 310, 312, 331, 332, 334, 335, 337, 341, 342, 343, 347, 350, 356, 357, 358, 360, 362, 365, 367, 379, 392, 404, 418, 426, 428, 429, 430, 431, 434, 437, 440, 441, 455, 475, 476, 534, 574, 577, 579, 580, 582, 583, 590, 600, 610], "object_id": [439, 440, 441], "object_typ": 434, "objectid": [30, 33, 367, 439, 584, 589, 591], "objectmanag": 367, "objectmapp": 334, "objectmeta": 367, "objectnam": 439, "objecttyp": 367, "observ": [13, 23, 308, 322, 333, 590], "obsolet": 579, "obstacl": 325, "obtain": [9, 14, 17, 29, 30, 129, 330, 331, 333, 335, 342, 346, 347, 350, 353, 358, 362, 426, 430, 431, 433, 552, 555, 571, 577, 584, 590], "occup": 322, "occupi": [333, 339], "occur": [7, 9, 14, 32, 134, 322, 334, 341, 349, 590], "occurr": [318, 336, 361], "octagon": 562, "octahedr": 557, "octahedralgraph": 557, "octahedron": 557, "octob": 574, "odd": 523, "odoffset_": 321, "odp": [134, 188, 320, 426], "odst_": 321, "oe": 321, "oe_list": 13, "oe_lists_": [13, 321], "oe_mut": 228, "oe_offset": 13, "oe_offsets_lists_": [13, 321], "oe_offsets_ptr_lists_": 321, "oe_ptr_lists_": 321, "oedest": 367, "oedestss": 367, "oemut": 138, "off": [31, 330, 357, 562, 590], "offer": [0, 2, 9, 12, 20, 34, 43, 126, 129, 130, 131, 216, 315, 317, 318, 319, 327, 331, 333, 337, 342, 346, 347, 357, 359, 363, 364, 589, 590], "offic": 567, "offici": [22, 328, 329, 331, 332, 342, 361], "offlin": [2, 327, 346, 347, 359, 362, 363, 586], "offload": [318, 590], "offset": [13, 321, 367, 428, 436, 480, 590], "offset2lid": 367, "offset_arrai": 321, "offset_vec": 321, "offsets_ptr": 321, "offset\u4eceivnum\u5f00\u59cb\u7f16\u53f7": 321, "offset\u6570\u7ec4": 321, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u6e90\u9876\u70b9\u7684nbr\u586b\u5145\u5165\u8fb9\u7684src": 321, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9nbr\u7684\u5730\u5740": 321, "offset\u7684\u8d77\u59cb\u5730\u5740": 321, "offset\u8d77\u59cb\u5730\u5740": 321, "ofstr": 334, "often": [9, 37, 131, 318, 325, 329, 342, 357, 360, 361, 362, 364, 427, 428, 431, 577, 590, 598], "ogb": 355, "ogbn": [353, 354, 355, 358, 604], "ogbn_arxiv": [354, 355], "ogbn_mag_smal": [352, 356, 604, 610], "oid": [321, 367, 369, 370], "oid2flashid": 15, "oid2gid": 367, "oid_arrays_": [13, 321], "oid_t": [13, 15, 16, 321, 367], "oid_t_": 367, "oid_typ": [33, 356, 367, 368, 396, 418, 439, 584, 610], "oid\u7684\u6620\u5c04\u5173\u7cfb": 321, "ojsonpath": 29, "ok": [134, 308, 310, 312, 334, 367], "olap": 357, "old": [9, 12, 14, 32, 34, 336, 584], "oltp": [327, 357, 359], "omit": [6, 319, 356, 369, 450, 591, 610], "onc": [6, 12, 15, 17, 20, 24, 27, 29, 30, 34, 36, 131, 330, 331, 334, 347, 368, 370, 427, 428, 431, 437, 439, 440, 442, 472, 577, 584, 590, 597], "one": [0, 2, 6, 9, 10, 12, 13, 14, 15, 19, 20, 22, 24, 29, 30, 36, 37, 41, 128, 129, 131, 184, 216, 274, 281, 308, 314, 318, 322, 325, 327, 329, 330, 333, 337, 339, 341, 343, 347, 350, 356, 358, 361, 362, 364, 367, 368, 370, 376, 377, 417, 425, 426, 427, 428, 429, 431, 435, 439, 442, 451, 475, 476, 479, 480, 483, 492, 493, 496, 505, 506, 511, 513, 514, 515, 516, 517, 519, 534, 537, 545, 548, 552, 555, 561, 562, 563, 569, 571, 573, 577, 583, 584, 586, 588, 589, 590, 593, 604, 608], "one_to_mani": [131, 137], "one_to_on": [131, 137], "ones": [6, 9, 306, 363, 368, 433], "onfailur": 354, "ongo": 341, "onion": 6, "onli": [4, 6, 9, 12, 13, 14, 15, 17, 18, 20, 22, 23, 27, 29, 30, 34, 36, 128, 129, 130, 131, 134, 184, 216, 263, 274, 281, 306, 308, 311, 314, 318, 319, 325, 329, 330, 333, 337, 339, 341, 343, 346, 347, 349, 350, 356, 357, 358, 359, 360, 361, 362, 364, 367, 368, 369, 370, 372, 376, 425, 426, 427, 429, 430, 431, 432, 439, 440, 442, 461, 462, 471, 497, 498, 523, 524, 528, 536, 549, 570, 571, 577, 583, 584, 588, 589, 590, 591, 594], "onlin": [346, 359, 362, 363, 586, 590], "only_in": [131, 138], "only_out": [131, 138], "onnela": 442, "onrec": 367, "onto": 30, "oom": 342, "op": [318, 369, 379, 381, 382, 383, 384, 386, 387, 389, 391, 392, 394, 395, 396, 397, 398, 399, 402, 403, 404, 407, 408, 409, 411, 412, 435, 577, 581, 584], "op_def_pb2": 416, "op_typ": [391, 412, 581], "opdef": [412, 416], "open": [22, 36, 37, 134, 314, 317, 331, 342, 344, 350, 361, 364, 437, 579, 589, 590], "openai": 336, "openapi": [45, 46, 125, 127, 134, 313], "openapi_coordin": [125, 127], "openapi_interact": [134, 313], "openapitool": 46, "openbla": 322, "opencyph": [315, 359], "openmpi": [31, 365], "opensourc": 359, "openssl": [31, 322, 603], "openssl_1_1_1h": 31, "opentelemetri": 39, "oper": [6, 9, 12, 15, 30, 31, 36, 47, 110, 121, 126, 128, 134, 173, 175, 181, 191, 216, 263, 265, 272, 281, 308, 310, 312, 314, 317, 318, 319, 322, 325, 327, 329, 330, 332, 333, 338, 339, 341, 346, 347, 350, 356, 357, 359, 360, 361, 362, 363, 368, 370, 378, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 397, 398, 399, 401, 402, 405, 406, 407, 408, 426, 427, 428, 429, 430, 431, 433, 434, 436, 438, 439, 459, 538, 539, 577, 580, 582, 584, 586, 589, 590, 597], "operationtyp": 412, "operator_launch": 28, "opnam": 435, "oppos": [24, 350], "opposit": [341, 431, 505, 552], "oprequest": 435, "oprespons": 435, "opt": [31, 36, 128, 134, 330, 331, 348, 437], "optim": [0, 9, 12, 14, 34, 50, 53, 128, 130, 131, 134, 138, 141, 228, 231, 318, 319, 327, 330, 334, 342, 343, 344, 346, 347, 349, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 365, 368, 425, 437, 439, 589, 591, 604], "optimize_for_host": 134, "option": [2, 4, 6, 13, 15, 27, 29, 31, 32, 37, 41, 46, 47, 48, 49, 50, 51, 52, 53, 55, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 75, 76, 85, 86, 89, 92, 93, 94, 95, 96, 99, 100, 104, 106, 107, 108, 109, 110, 111, 121, 124, 128, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 205, 206, 209, 210, 211, 212, 214, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 295, 296, 299, 300, 301, 302, 304, 306, 308, 311, 317, 319, 320, 328, 329, 331, 333, 334, 335, 336, 337, 339, 341, 342, 343, 346, 348, 354, 356, 359, 361, 364, 368, 369, 372, 375, 396, 402, 403, 404, 414, 424, 426, 429, 431, 439, 440, 442, 444, 445, 446, 461, 462, 471, 477, 479, 480, 482, 484, 486, 487, 489, 491, 492, 495, 499, 500, 501, 504, 506, 508, 509, 511, 512, 513, 514, 515, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 534, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 569, 572, 575, 577, 579, 580, 583, 584, 590, 591], "orc": [439, 588], "order": [0, 6, 34, 130, 314, 318, 330, 333, 337, 346, 359, 361, 362, 368, 369, 426, 431, 437, 442, 444, 445, 451, 475, 476, 479, 484, 491, 504, 505, 508, 540, 541, 544, 569, 570, 577, 583, 586, 590, 608], "ordered_by_dest": 588, "ordered_by_sourc": 588, "ordin": 334, "ordinari": 439, "org": [7, 17, 23, 46, 216, 314, 315, 322, 335, 342, 349, 352, 353, 354, 358, 360, 368, 442, 500, 501, 502, 516, 519, 526, 539, 543, 544, 545, 546, 548, 549, 550, 556, 557, 558, 559, 561, 562, 563, 564, 569, 600, 603, 604, 608], "organ": [4, 44, 45, 134, 336, 341, 343, 346, 347, 362, 366, 425, 427, 429, 433, 434, 513, 515, 554], "orient": [24, 350, 364, 434, 590], "origin": [0, 4, 6, 9, 12, 13, 22, 129, 330, 333, 334, 339, 341, 347, 352, 353, 362, 367, 369, 396, 425, 427, 439, 440, 496, 518, 524, 563, 571, 575, 577, 583, 584, 590, 591], "orkut": 365, "oss": [23, 29, 31, 129, 356, 367, 432, 439, 590, 600, 601, 610], "ossf": [356, 610], "ossrh": 216, "ostream": 367, "otel": 590, "otel_service_nam": 39, "other": [0, 3, 4, 6, 8, 9, 10, 12, 14, 16, 20, 23, 24, 29, 30, 33, 34, 36, 37, 130, 131, 132, 133, 320, 322, 325, 328, 330, 333, 334, 339, 341, 343, 346, 347, 350, 352, 357, 359, 360, 361, 362, 363, 364, 368, 370, 425, 427, 429, 431, 435, 438, 439, 440, 442, 446, 477, 479, 483, 486, 496, 505, 511, 517, 526, 527, 569, 577, 579, 580, 583, 584, 588, 589, 593], "other_model": 438, "otherv": 608, "otherwis": [13, 33, 311, 314, 343, 360, 368, 426, 430, 431, 432, 442, 459, 496, 516, 526, 575, 577, 584, 589, 590], "our": [7, 12, 13, 17, 32, 34, 36, 37, 41, 45, 129, 130, 131, 134, 315, 325, 330, 333, 337, 339, 348, 358, 360, 361, 362, 364, 365, 366, 432, 433, 442, 590, 592, 600], "ourc": 67, "out": [0, 6, 9, 12, 27, 29, 33, 34, 37, 46, 154, 173, 175, 181, 184, 191, 209, 216, 314, 334, 339, 342, 347, 354, 355, 356, 358, 359, 360, 361, 364, 368, 370, 425, 428, 429, 431, 442, 499, 508, 509, 516, 517, 520, 534, 535, 571, 575, 577, 589, 591, 593, 604, 608], "out_channel": [354, 355], "out_deg_by_loc": 402, "out_deg_by_nod": 402, "out_deg_sequ": 509, "out_degre": [20, 508, 534, 535, 577], "out_degree_centr": [442, 578], "out_degree_sequ": 508, "out_edg": [20, 454, 577], "outcom": 10, "outdegreeview": 577, "outedgedataview": 577, "outedgeiter": 24, "outedgeview": 577, "outer": [10, 14, 321, 337, 370, 492, 589], "outer_nod": 370, "outer_vertex_array_t": 367, "outer_vertic": 14, "outer_vertices_t": 367, "outervertexgid2vertex": 367, "outervertic": [14, 321, 367], "outgo": [10, 13, 16, 24, 131, 333, 341, 343, 361, 370, 431, 442, 577, 589], "outgoing_edg": [18, 370, 600], "outlin": [130, 331, 333, 334, 337], "outneg": [431, 434], "outnegv": 431, "outofrangeerror": [350, 430, 431, 437], "outperform": [34, 333, 346, 360, 362, 363, 364], "output": [6, 14, 17, 24, 27, 29, 30, 34, 38, 126, 133, 184, 274, 315, 325, 328, 329, 331, 334, 336, 339, 341, 343, 347, 349, 350, 353, 357, 358, 362, 365, 367, 396, 404, 412, 425, 431, 433, 437, 439, 440, 524, 526, 528, 569, 581, 583, 590, 600, 601, 604, 609], "output_dim": [352, 425, 609], "output_shap": 437, "output_to_cli": [583, 600], "output_typ": [349, 353, 358, 412, 581, 604], "outsid": [341, 608], "outv": [350, 425, 429, 431, 437, 608, 609], "ouv": 431, "over": [0, 9, 12, 15, 16, 18, 22, 24, 33, 34, 317, 322, 325, 341, 345, 350, 357, 359, 360, 364, 365, 368, 370, 428, 442, 464, 465, 471, 523, 577, 586, 594], "overal": [9, 128, 339, 362], "overflow": 131, "overhead": [9, 13, 364, 426, 427], "overlap": [9, 584], "overrid": [17, 128, 314, 356, 367, 425, 435, 597, 600], "overs": 350, "overview": [3, 23, 34, 315, 320, 333, 343, 358, 586], "overwhelm": 9, "overwrit": [45, 129, 130, 187, 584, 590], "overwritten": 370, "ovg2l_maps_": 321, "ovgid_lists_": 321, "ovgid\u548cg2l_map\u540e": 321, "ovnums_": 321, "ovnum\u548ctvnum\u6570\u7ec4": 321, "own": [1, 4, 6, 8, 12, 15, 24, 34, 36, 37, 134, 216, 314, 315, 320, 328, 333, 336, 339, 345, 346, 360, 366, 372, 417, 429, 432, 437, 496, 506, 584, 589, 594], "ownership": 34, "oxford": [442, 475, 476, 525, 569], "p": [19, 20, 31, 36, 134, 181, 216, 319, 336, 341, 343, 358, 359, 368, 427, 437, 442, 500, 501, 502, 504, 513, 514, 515, 518, 519, 521, 523, 525, 526, 527, 528, 531, 533, 608], "p1": 343, "p2": 343, "p2p": [15, 17, 22, 23], "p2p_network": 325, "p2pedgeinputformat": 22, "p2pvertexinputformat": 22, "p50": 328, "p90": 328, "p95": 328, "p99": 328, "p_": [478, 510, 524], "p_2": 538, "p_dist": [524, 526], "p_in": [499, 500, 501], "p_n": [489, 491], "p_out": [499, 500, 501], "pa": 343, "pack": [17, 23, 328, 600], "packag": [7, 8, 11, 17, 18, 20, 22, 23, 27, 29, 30, 36, 45, 46, 126, 132, 134, 216, 308, 317, 322, 328, 329, 332, 333, 349, 358, 435, 524, 526, 577, 580, 590, 597, 602], "paczuski": 368, "pad": [350, 429], "page": [37, 125, 126, 127, 129, 313, 315, 327, 359, 368, 371, 373, 487, 502, 566, 606], "page_rank": 319, "pagerank": [6, 8, 9, 13, 17, 22, 33, 34, 37, 325, 357, 360, 363, 365, 368, 369, 442, 580, 583, 588, 600], "pagerank_loc": 365, "pagerank_nx": [368, 600], "pai": [426, 431, 432], "pair": [13, 20, 332, 337, 339, 343, 367, 368, 370, 424, 437, 476, 481, 482, 488, 504, 522, 528, 577, 580, 583, 589, 591], "pairwis": 368, "palei": 523, "panda": [12, 325, 336, 367, 369, 383, 394, 439, 577, 606], "paper": [9, 14, 24, 333, 347, 349, 352, 353, 354, 355, 357, 358, 359, 365, 437, 442, 574, 584, 600, 604], "paper_cites_pap": 604, "paper_featur": [349, 358, 604], "paper_has_topic_field_of_studi": 604, "pappu": 558, "pappus_graph": 542, "paradigm": [6, 15, 346, 350, 357, 425, 431], "parallel": [4, 6, 12, 14, 15, 16, 24, 34, 130, 190, 280, 325, 344, 346, 354, 357, 359, 361, 367, 370, 427, 506, 508, 545, 577, 580, 590, 600], "parallelappbas": [16, 17, 600], "parallelcontextbas": [17, 600], "parallelengin": [16, 17, 600], "parallelenginespec": 367, "parallelmessagemanag": [16, 17, 600], "parallelprocess": [14, 16], "parallelpropertyappbas": 600, "parallelpropertycontextbas": 600, "parallelpropertymessagemanag": 367, "parallelpropertywork": 367, "param": [17, 23, 29, 92, 111, 170, 198, 260, 274, 288, 306, 311, 314, 322, 332, 334, 336, 354, 368, 388, 389, 403, 418, 420, 424, 431, 437, 584, 590, 600], "param1": [16, 209, 299], "param2": [209, 299], "param_nam": [311, 318, 319], "param_str": 600, "paramet": [0, 2, 6, 9, 15, 16, 17, 30, 45, 46, 92, 111, 128, 170, 190, 198, 216, 260, 280, 288, 306, 309, 310, 311, 312, 314, 316, 318, 322, 328, 330, 333, 337, 341, 342, 343, 350, 355, 358, 362, 367, 368, 369, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 390, 392, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 414, 417, 424, 426, 427, 429, 431, 434, 437, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 453, 455, 456, 457, 459, 460, 461, 462, 466, 467, 471, 472, 475, 477, 479, 480, 482, 483, 484, 486, 487, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 584, 588, 589, 590, 597], "parameter": 319, "parameter_dict": [99, 270], "parameter_form_dict": 270, "parameter_from_dict": 99, "parameter_inst": [99, 270], "params_": 435, "params_list": 431, "params_str": 600, "parent": [370, 372, 412, 417, 571], "parenthes": 341, "parquet": [439, 588], "pars": [17, 330, 334, 356, 368, 426, 586, 590], "parse_arg": [352, 354], "parse_edgelist": 579, "parsedoubl": 154, "parsefrom": 334, "parser": [321, 330, 354], "part": [9, 13, 37, 134, 325, 330, 341, 347, 350, 359, 431, 432, 435, 437, 560, 577, 588, 589, 590], "parti": [134, 357, 557], "partial": [14, 16, 18, 34, 341, 367, 369, 426, 519, 594], "partial_e_t": 321, "partial_result": 14, "partial_v_t": 321, "particip": [37, 128], "particular": [9, 37, 337, 341, 368, 428, 431, 506], "particularli": [11, 362, 569], "partit": [4, 6, 9, 10, 12, 13, 14, 15, 18, 24, 329, 330, 339, 350, 357, 360, 362, 368, 430, 435, 494, 499, 500, 501, 504, 535, 594], "partition": [4, 321, 435], "partition_col_nam": 130, "partition_nam": 130, "partitioned_graph": 589, "partner": 557, "pass": [0, 2, 6, 9, 10, 14, 15, 16, 18, 20, 24, 27, 37, 128, 318, 330, 332, 333, 336, 341, 343, 350, 356, 361, 362, 368, 370, 375, 431, 435, 437, 486, 524, 526, 569, 577, 581, 600, 605, 610], "password": [331, 590], "past": [29, 131, 330, 592], "pastor": 368, "patch": 37, "path": [2, 4, 6, 7, 9, 17, 19, 22, 23, 24, 27, 28, 30, 31, 33, 39, 45, 128, 129, 130, 134, 216, 263, 308, 311, 314, 319, 328, 329, 330, 331, 334, 336, 337, 344, 346, 347, 350, 354, 356, 358, 360, 361, 364, 368, 376, 426, 427, 429, 431, 436, 437, 439, 442, 445, 478, 484, 488, 489, 491, 508, 571, 577, 579, 581, 583, 584, 588, 590, 592, 600, 601, 604, 605, 608], "path1": 584, "path2": 584, "path_expand": 339, "path_graph": [20, 442, 453, 455, 456, 462, 577, 579], "path_opt": [339, 341, 343, 361, 608], "path_to_db": 328, "path_to_your_gar_resourc": 16, "path_to_your_jar": 600, "pathexpand": 339, "pathexpans": 330, "pathlib": 605, "pattern": [3, 6, 12, 23, 30, 128, 318, 330, 331, 334, 336, 339, 341, 346, 350, 357, 360, 364, 368, 430, 435, 590], "pattison": 566, "paul": 510, "pawe\u0142": 510, "pb": 343, "pd": [325, 336, 356, 610], "pdf": [442, 524, 526, 527], "pe_spec": 367, "peak": 128, "pedro": 343, "peer": 574, "pegasu": [331, 339, 357], "pegasusbatchs": 329, "pegasusoutputcapac": 329, "pegasustimeout": 329, "pegasusworkernum": 329, "penal": 442, "penalti": 13, "pendant": 543, "penros": [525, 526], "pentatop": 552, "peopl": [131, 330, 336, 343, 577], "per": [2, 130, 318, 329, 339, 589, 590], "perceiv": 362, "percentag": 569, "perceptu": 350, "perci": 550, "percu": 524, "perf": 37, "perfect": [13, 134, 439], "perfectli": 477, "perform": [0, 3, 4, 6, 9, 12, 14, 17, 22, 23, 24, 37, 41, 128, 130, 134, 314, 318, 327, 328, 330, 333, 337, 341, 343, 344, 345, 347, 357, 359, 360, 362, 363, 364, 369, 427, 431, 433, 439, 534, 539, 569, 581, 583, 586, 590, 592, 594], "period": [33, 590], "perl": 31, "permiss": [38, 46, 131, 322, 376, 603], "permission_deni": 134, "permissionerror": 376, "permit": [343, 577], "perron": 442, "persist": [12, 15, 30, 34, 134, 322, 327, 329, 357, 359, 364, 588], "persistentvolum": [33, 590], "persistentvolumeclaim": [33, 584, 590], "person": [6, 7, 30, 33, 45, 129, 130, 131, 154, 173, 181, 209, 216, 244, 263, 272, 299, 308, 314, 319, 329, 332, 333, 336, 339, 341, 343, 356, 358, 439, 557, 566, 577, 580, 583, 588, 589, 590, 591, 605, 610], "person1": 343, "person2": 343, "person_0_0": [356, 590, 605, 610], "person_acted_in_movi": 333, "person_created_softwar": 130, "person_follows_person": 333, "person_gend": 343, "person_id": [583, 590], "person_id_1": 590, "person_knows_person": [45, 129, 130, 173, 216, 263, 308, 590], "person_knows_person_0_0": [356, 590, 605, 610], "person_likes_comment_0_0": [356, 610], "person_likes_post_0_0": [356, 610], "personcount": 343, "personcountforum": 343, "personnam": 319, "perspect": [6, 24, 359], "persson": [216, 308, 590], "pertain": [131, 329], "perugini": 442, "peter": 341, "petersen": [556, 559], "peterson": [516, 559], "peval": [14, 16, 17, 18, 34, 360, 367, 375, 594, 600], "pexperiment": 134, "pg": [7, 358, 368, 584, 588, 589], "pgraph": 334, "ph": 359, "phase": [6, 16, 23, 24, 134, 333, 426, 431], "phd": 533, "phenomenon": [497, 498], "phi": 442, "philippa": 566, "phillip": 442, "philosophi": [6, 24, 359], "php": 9, "phy": [496, 508, 513, 514, 515, 518], "physic": [134, 319, 329, 330, 333, 334, 357, 368, 442, 500, 501, 502, 524, 588], "physical_plan_build_fail": 334, "physicalbyt": 334, "physicalplan": 334, "pick": [6, 343, 365, 519, 534, 537], "pie": [0, 1, 3, 8, 12, 34, 343, 345, 346, 360, 372, 375, 582, 594, 604, 606], "pieaggregatetyp": [18, 370, 600], "piec": [14, 316, 327, 436, 584], "pillar": 318, "pinar": 536, "ping": [37, 600], "pinpoint": 38, "pip": [7, 27, 30, 31, 32, 132, 133, 317, 322, 329, 332, 349, 358, 435, 590, 603, 607], "pip3": [16, 19, 23, 35, 36, 37, 45, 126, 132, 308, 317, 322, 335, 342, 590, 597, 601, 603, 607], "pipefail": 31, "pipelin": [12, 34, 346, 357, 360, 364, 593], "pittel": 516, "pivot": [318, 333], "pk_1": 319, "pk_2": 319, "pk_3": 319, "pkgconfig": 322, "pkill": 331, "pl": 22, "place": [10, 18, 19, 36, 130, 329, 333, 343, 435, 436, 439, 504, 524, 525, 526, 527, 528, 557, 575], "placehold": [23, 128, 337], "plai": [36, 330, 333, 345, 366, 436, 441, 594], "plain": [184, 274, 362], "plaintext": 347, "plan": [131, 134, 318, 319, 330, 333, 334, 337, 357, 359, 360, 361, 372, 590, 598], "planar": [543, 546, 547, 549], "planner": [128, 134, 319, 327, 333], "plannod": 334, "plant": [500, 501], "planted_partition_graph": 504, "platform": [27, 32, 37, 43, 132, 134, 317, 327, 329, 330, 349, 363, 364, 365, 372, 426, 568, 584], "plato": [364, 365], "platon": [545, 548, 553, 557, 561, 563], "playground": [366, 611], "pleas": [4, 9, 12, 14, 16, 17, 23, 24, 27, 30, 32, 33, 34, 37, 41, 45, 46, 126, 128, 129, 134, 181, 184, 216, 274, 308, 314, 315, 317, 318, 319, 322, 331, 336, 339, 350, 352, 356, 358, 425, 426, 427, 429, 430, 431, 432, 435, 437, 588, 590, 594, 597, 604], "plo": 442, "plt": 343, "plu": [330, 341, 343, 480, 552], "plug": [12, 34, 357], "plugin": [17, 23, 333, 600], "plugin_meta": 134, "plugins_lock": 134, "pna": 368, "pnum": 589, "po": [524, 525, 526, 527, 528], "pod": [2, 27, 28, 29, 30, 38, 41, 75, 104, 306, 322, 325, 329, 352, 356, 584, 590, 598, 601, 603, 604, 610], "pod_nam": [75, 590, 598, 603], "pod_name_exampl": 75, "pod_statu": 100, "pod_status_dict": 100, "pod_status_from_dict": 100, "pod_status_inst": 100, "podarraybuild": 321, "podstatu": [46, 104], "pod\u4e2d\u7684\u672c\u5730\u76ee\u5f55": 600, "point": [6, 13, 14, 22, 37, 43, 45, 134, 306, 330, 333, 334, 339, 341, 350, 360, 425, 480, 505, 534, 537, 577, 588, 590, 591, 592, 597], "pointer": 367, "poisson": 506, "polici": [9, 317, 322, 359, 367, 584], "polit": 554, "polyhedr": 564, "polyhedra": 562, "polyhedron": 564, "polymorph": 592, "polynomi": 570, "pom": [17, 23, 216], "pool": 362, "poor": [322, 433], "popd": 35, "popul": [128, 476, 477, 479, 480, 482, 484, 487, 489, 491, 492, 495, 506, 508, 509, 511, 513, 514, 515, 521, 522, 523, 529, 530, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 572, 579], "popular": [12, 22, 29, 316, 325, 356, 358, 361, 362, 425, 437, 590], "port": [2, 23, 29, 38, 45, 126, 134, 216, 306, 308, 315, 317, 318, 319, 322, 329, 331, 336, 342, 354, 356, 367, 584, 590, 608, 610], "portabl": [359, 589], "portion": [318, 343, 360, 361, 369, 439], "pos_src_ego_tensor": [425, 609], "pose": 6, "posit": [327, 334, 343, 362, 363, 425, 431, 442, 487, 506, 508, 509, 511, 512, 516, 524, 525, 526, 527, 528, 572, 575, 589, 592], "positive_sampl": [425, 609], "possess": 318, "possibl": [0, 4, 6, 15, 130, 318, 320, 322, 330, 333, 347, 361, 362, 368, 427, 433, 434, 442, 510, 518, 519, 534, 535, 536, 537, 569, 573, 589], "possibli": 577, "post": [46, 47, 67, 94, 95, 106, 110, 121, 154, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 274, 281, 299, 309, 322, 334, 343, 356, 431, 496, 610], "post_0_0": [356, 610], "potenti": [37, 128, 134, 318, 347, 357, 589], "power": [24, 128, 216, 308, 309, 319, 333, 337, 338, 341, 343, 346, 361, 368, 442, 496, 506, 554, 577], "powergraph": [24, 364, 365], "poweriterationfailedconverg": 442, "pp": [442, 506, 509, 510, 511, 524, 530, 531, 568, 574], "ppi": 437, "pppp": 332, "pprint": [46, 47, 67, 75, 94, 95, 106, 110, 121], "pr_result": 33, "practic": [13, 16, 28, 317, 330, 339, 347, 350, 357, 362, 426, 427, 429, 590], "pra\u0142at": 510, "pre": [6, 29, 32, 322, 330, 333, 343, 349, 353, 358, 361, 584, 603], "prebuilt": [4, 41, 331], "preced": [341, 577, 590], "precis": [333, 356, 362, 569], "pred": 577, "predecessor": [20, 447, 520, 571, 577], "predefin": 334, "predic": [330, 343], "predict": [347, 353, 357, 358, 362], "preds_by_loc": 402, "preds_by_nod": 402, "preempt": 584, "preemptiv": 584, "preexist": 27, "prefer": [2, 13, 27, 36, 318, 333, 589], "preferenti": 516, "prefetch_s": [354, 355], "prefix": [31, 37, 316, 322, 328, 331, 337, 341, 354, 439, 571, 589, 608], "pregel": [1, 4, 8, 12, 17, 22, 34, 346, 357, 360, 582, 594, 604, 606], "pregelaggregatortyp": 370, "preliminari": 32, "prepar": [2, 4, 33, 36, 43, 129, 320, 329, 332, 333, 336, 347, 348, 349, 350, 352, 353, 358, 362, 366, 589, 604], "prepareconf": 367, "preparetorunapp": 367, "prepend": [130, 314], "preprint": 516, "preprocess": [347, 437], "prerequisit": 320, "prescrib": 536, "present": [0, 2, 20, 27, 128, 130, 341, 343, 350, 351, 352, 353, 354, 355, 357, 358, 360, 372, 442, 453, 496, 577, 588, 589], "preserv": [9, 13, 369, 439, 539, 569], "press": [442, 475, 476, 523, 565, 568, 569], "prestigi": 333, "preval": 357, "prevent": [339, 455], "previou": [2, 9, 15, 19, 27, 29, 31, 33, 41, 216, 343, 358, 368, 376, 377, 425, 429, 431, 515, 590], "previous": [131, 343, 513, 514, 515, 588, 589], "primari": [6, 15, 129, 130, 131, 136, 143, 152, 153, 154, 157, 158, 166, 193, 209, 216, 226, 233, 242, 243, 244, 247, 248, 256, 263, 283, 299, 309, 311, 318, 319, 320, 334, 339, 357, 364, 590], "primarili": [343, 361, 589], "primary_kei": [45, 48, 52, 59, 66, 85, 93, 129, 131, 173, 216, 226, 230, 233, 240, 256, 262, 263, 272, 308, 590], "primary_key_valu": [243, 299, 303, 311, 590], "primarykei": [136, 140, 143, 150, 166, 172], "primarykeyvalu": [153, 209, 213], "prime": [318, 521, 523], "primit": [6, 359], "primitive_typ": [45, 81, 101, 129, 131, 173, 216, 255, 263, 271, 272, 274, 308, 334, 590], "primitive_type_dict": [101, 271], "primitive_type_form_dict": 271, "primitive_type_from_dict": 101, "primitive_type_inst": [101, 271], "primitivetyp": [46, 165, 184, 216, 274, 309], "primitivetypeenum": 184, "principl": [14, 435], "print": [2, 7, 16, 20, 29, 30, 33, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 129, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 314, 317, 319, 322, 325, 329, 332, 333, 334, 335, 336, 342, 343, 349, 350, 352, 353, 354, 355, 356, 358, 368, 369, 428, 430, 431, 434, 437, 439, 440, 442, 455, 504, 572, 577, 580, 588, 590, 597, 598, 605, 608, 610], "print_al": 428, "print_top_10": 335, "println": [154, 173, 175, 181, 184, 191, 209, 216, 314, 334], "printstacktrac": [216, 314], "prior": [0, 12, 34, 134, 333, 341, 343, 346, 357], "priorit": 333, "privat": [173, 216, 334], "privileg": 14, "prj": 426, "prob": 504, "probabilii": 515, "probabilistic_method": 437, "probabilti": [499, 502], "probabl": [20, 37, 341, 350, 362, 368, 429, 434, 499, 500, 501, 502, 504, 506, 510, 513, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 531, 533], "problem": [0, 2, 6, 9, 11, 14, 15, 24, 29, 31, 37, 38, 126, 314, 322, 324, 325, 330, 343, 360, 362], "problemat": 128, "proc": [272, 316, 529, 530, 534, 535, 576], "proc_id": [272, 274, 311], "proc_nam": 308, "proce": [9, 134, 314, 496, 590], "procedur": [22, 29, 46, 110, 128, 132, 133, 181, 184, 272, 274, 306, 309, 311, 315, 318, 320, 329, 330, 337, 343, 378, 519], "procedure_id": [181, 216, 238, 272, 309, 311], "procedureid": [148, 181, 184], "proceduremanagementapi": [216, 309], "procedurenam": 314, "proceed": [23, 27, 126, 315, 499, 517], "process": [2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 19, 22, 23, 24, 27, 29, 30, 32, 34, 35, 37, 126, 128, 129, 132, 134, 314, 315, 316, 318, 320, 325, 327, 329, 331, 332, 333, 338, 342, 343, 345, 346, 347, 349, 350, 351, 352, 357, 359, 360, 361, 362, 363, 367, 378, 426, 427, 429, 431, 435, 437, 506, 508, 511, 539, 545, 577, 584, 586, 588, 589, 592, 594], "processor": 349, "procnam": 216, "produc": [6, 38, 41, 129, 330, 333, 334, 365, 368, 377, 425, 437, 439, 440, 442, 496, 510, 512, 520, 581, 590], "product": [6, 12, 32, 126, 134, 322, 350, 357, 361, 364, 370, 426, 427, 431, 597, 608], "profici": [131, 343], "profil": [27, 333, 608], "program": [0, 3, 9, 15, 16, 17, 18, 20, 23, 24, 133, 318, 319, 328, 345, 346, 350, 357, 359, 360, 362, 364, 365, 372, 425, 430, 431, 589, 594], "program_opt": 31, "programm": [6, 17, 357, 372], "programmat": [216, 308, 590], "progress": [368, 521], "progress_tri": 368, "project": [2, 4, 7, 13, 15, 17, 23, 33, 37, 46, 216, 315, 318, 330, 333, 335, 337, 358, 359, 361, 367, 368, 369, 401, 432, 439, 584, 588, 600, 604, 605, 608], "project_to_simpl": 15, "projected_g": 13, "projector": 367, "promis": [128, 362], "promot": 35, "prompt": [36, 336, 342], "promptli": 333, "prone": 524, "proof": 534, "prop_id": 321, "prop_id_t": [321, 367], "prop_id_typ": 367, "propag": [6, 7, 9, 14, 36, 357, 358, 360, 362, 368, 431, 449, 539], "proper": [17, 37], "properli": [322, 339, 590], "properti": [0, 4, 6, 7, 9, 12, 15, 17, 20, 33, 45, 128, 129, 130, 131, 154, 173, 209, 216, 244, 263, 272, 299, 308, 309, 312, 320, 321, 328, 331, 333, 334, 336, 344, 358, 360, 361, 362, 367, 368, 369, 370, 387, 401, 415, 416, 417, 428, 431, 439, 440, 524, 539, 569, 574, 577, 580, 583, 584, 586, 590, 591, 598, 604, 605, 608], "properties_map": 367, "propertiescolmap": 590, "property0": 600, "property1": 343, "property2": 343, "property_graph_t": 367, "property_graph_typ": 367, "property_graph_util": [321, 367], "property_id": [89, 261, 370], "property_nam": [45, 51, 63, 89, 129, 130, 131, 173, 216, 229, 239, 261, 263, 272, 308, 343, 369, 370, 583, 590], "property_not_found": 334, "property_typ": [45, 51, 63, 89, 129, 131, 173, 216, 229, 239, 261, 263, 272, 308, 590], "property_vertex_map_t": 367, "propertyappbas": 367, "propertyautoappbas": 367, "propertyautomessagemanag": 367, "propertyautowork": 367, "propertygraphschema": 321, "propertygraphutil": 367, "propertyid": 171, "propertyidvalu": 339, "propertyidvalue1": 339, "propertyidvalue2": 339, "propertykei": 341, "propertymessagemanag": 367, "propertynam": [128, 139, 149, 171, 590], "propertytyp": [139, 149, 171], "proport": 516, "propos": [0, 3, 6, 12, 14, 24, 34, 346, 357, 359, 360, 362, 364, 429, 435, 586, 589], "proprieti": 9, "protect": 577, "protein": [360, 518], "proto": [184, 274, 367, 387, 412], "protobuf": [31, 42, 312, 334], "protocol": [39, 314, 334, 335, 338, 356, 364, 584, 590], "protocol_file_system": [356, 610], "protocol_nam": [356, 610], "prove": [6, 24, 569], "proven": 358, "provid": [1, 2, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 43, 44, 45, 126, 128, 129, 130, 131, 133, 134, 184, 216, 274, 281, 299, 306, 308, 311, 314, 315, 318, 319, 322, 325, 327, 328, 329, 330, 333, 334, 336, 337, 339, 341, 342, 343, 345, 346, 347, 348, 350, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 372, 386, 425, 427, 431, 432, 433, 437, 442, 473, 474, 496, 524, 525, 526, 527, 574, 577, 579, 584, 586, 588, 589, 590, 591, 594, 597, 600], "provis": 590, "prowess": 318, "proxi": [322, 603], "prune": [0, 333], "pr\u00fcfer": 572, "pseudograph": [506, 508], "psu": 442, "psychometrika": 442, "ptr": 321, "public": [9, 15, 16, 17, 27, 154, 173, 175, 181, 184, 191, 209, 216, 314, 317, 334, 358, 365, 367, 435, 600, 604], "publish": [9, 14, 24, 29, 333, 357, 358], "pull": [6, 12, 14, 27, 29, 32, 34, 38, 45, 322, 329, 360, 432, 435, 584, 590, 602], "purchas": 361, "pure": [18, 367, 594], "purpos": [13, 43, 343, 357, 589], "push": [6, 12, 34, 37, 128, 320, 330, 333, 360, 435], "pushd": 35, "pushdown": 333, "put": [14, 16, 17, 22, 46, 47, 110, 131, 134, 154, 181, 209, 216, 244, 263, 272, 299, 307, 309, 435], "put_byt": [307, 314], "put_doubl": 307, "put_int": [307, 314], "put_long": 307, "put_str": [307, 314], "putback": 350, "putobject": 367, "pv": [322, 329, 584, 590, 603], "pv_name": 590, "pvc": [329, 584, 590], "pvc_name": [33, 584], "pwd": [4, 30, 437], "py": [15, 32, 36, 41, 45, 46, 47, 67, 75, 94, 95, 106, 110, 121, 132, 134, 308, 331, 354, 425, 432, 437, 584, 597, 600, 601, 602, 609], "py2": 31, "py3": [31, 602], "pydata": [8, 363], "pyenv": 602, "pyg": [346, 347, 350, 351, 362, 363, 364], "pygrap": [592, 593], "pypi": [7, 27, 32, 322, 332, 335, 349, 603], "pyplot": 343, "pyspark_driver_python": 23, "pyspark_python": 23, "pyspark_venv": 23, "pyspark_venv_g": 23, "pytest": [45, 46, 308], "python": [1, 7, 8, 11, 12, 14, 16, 17, 20, 22, 23, 27, 29, 30, 32, 33, 34, 37, 43, 44, 45, 132, 133, 315, 317, 319, 320, 322, 325, 327, 329, 332, 336, 338, 343, 344, 347, 349, 352, 356, 357, 358, 360, 361, 363, 364, 367, 368, 375, 425, 428, 432, 435, 437, 440, 441, 577, 579, 580, 588, 589, 597, 598, 600, 601, 603, 604, 606, 607, 608, 610], "python3": [7, 23, 27, 28, 30, 31, 32, 35, 36, 41, 45, 132, 134, 308, 322, 331, 332, 349, 354, 358, 600, 601, 602, 603], "python38": 31, "python_dict": [308, 590], "python_sdk": [225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 315], "pythonclientcodegen": 46, "python\u8bbf\u95ee\u56fe\u6570\u636e": 608, "pytorch": [346, 347, 354, 357, 362, 431, 433], "pytorchjob": 354, "pytorchreplicaspec": 354, "pywrap": 441, "pyyaml": [308, 590, 601], "py\u653e\u5230shell\u811a\u672c\u540c\u4e00\u76ee\u5f55\u4e0b": 437, "pz": 523, "q": [336, 342, 429, 431, 437, 519, 523], "q1": [332, 336, 343, 358], "q2": [332, 343, 358], "q3": [332, 343, 358], "q4": 343, "qemu": 132, "qiang": 600, "qo": 584, "qp": [318, 328, 329, 339, 343, 363, 590], "qualifi": [368, 600], "qualiti": [35, 37, 362], "quantifi": 0, "quarterli": 554, "quer": 369, "queri": [1, 2, 7, 9, 13, 14, 19, 22, 29, 34, 64, 92, 111, 128, 129, 133, 147, 154, 170, 181, 184, 191, 198, 209, 237, 244, 260, 263, 272, 274, 281, 288, 299, 309, 316, 320, 322, 325, 327, 328, 329, 331, 332, 334, 335, 337, 338, 340, 341, 342, 344, 345, 346, 347, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 377, 383, 384, 396, 399, 403, 407, 408, 412, 425, 427, 429, 431, 433, 437, 439, 441, 461, 462, 582, 583, 584, 589, 592, 594, 598, 604], "query11": 343, "query14": 343, "query2": 343, "query3": 343, "query4": 343, "query_arg": [367, 412, 581], "query_execution_timeout": 334, "query_fail": 134, "query_nam": [273, 274], "query_port": 134, "query_request": 273, "query_request_dict": 273, "query_request_form_dict": 273, "query_request_inst": 273, "query_timeout": [128, 134], "query_to_cyph": 336, "queryarg": 367, "querynam": [183, 328], "queryr": 184, "queryrequest": [184, 216, 274, 309, 311], "queryservic": 128, "queryserviceapi": [216, 309], "query\u5bf9\u8c61": 431, "question": [37, 327, 338, 343, 603], "queue": [342, 370], "quick": [7, 332, 349, 607], "quickli": [32, 36, 318, 333, 346, 358, 361, 362, 364, 437, 584], "quietli": [20, 472, 577], "quit": [2, 30, 308, 336, 496, 590], "quot": [47, 130], "quote_char": 130, "quotient_graph": 504, "r": [2, 6, 7, 15, 16, 17, 22, 31, 33, 35, 314, 325, 329, 337, 358, 359, 362, 368, 369, 477, 487, 494, 500, 504, 516, 524, 533, 565, 570, 583, 584, 588, 590, 600, 604, 605], "r1": [13, 369, 592, 593], "r2": [13, 369, 592, 593], "r3": [13, 369, 592], "r4": [369, 592], "r6": 365, "rac": 368, "race": 6, "radicchi": 496, "radiu": [520, 525, 526, 527], "rais": [308, 311, 314, 322, 330, 333, 368, 376, 378, 412, 424, 431, 439, 440, 442, 448, 457, 461, 462, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512, 516, 518, 521, 522, 523, 534, 537, 569, 572, 573, 577, 580, 584], "ran": [325, 352], "random": [6, 28, 31, 350, 352, 357, 365, 429, 430, 431, 434, 437, 478, 489, 496, 499, 500, 501, 502, 504, 506, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 523, 524, 525, 526, 527, 528, 531, 532, 533, 534, 537, 569, 572, 574, 576, 584], "random_node_split": [354, 355], "random_partition_graph": [499, 504], "random_partition_model": 500, "random_powerlaw_tree_sequ": 506, "random_sequ": 506, "random_st": [496, 499, 500, 501, 502, 504, 506, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 531, 532, 533, 537, 569, 572, 574], "random_with_replac": 350, "random_without_replac": 429, "randomli": [350, 431, 496, 502, 506, 508, 517, 519, 524, 527, 532, 574], "randomsampl": 435, "rang": [0, 13, 18, 128, 130, 131, 333, 334, 339, 341, 343, 346, 349, 350, 352, 353, 354, 355, 357, 358, 361, 364, 367, 369, 370, 383, 384, 394, 395, 399, 407, 408, 425, 430, 434, 482, 484, 486, 489, 492, 504, 510, 524, 525, 526, 527, 555, 577, 582, 589, 600, 603, 604, 608, 609], "rank": [0, 6, 33, 354, 357, 367, 368, 369, 569, 583], "ransact": 359, "raph": 359, "rapid": 357, "rapidli": [333, 357, 429], "raptopoulo": 531, "rate": [0, 129, 318, 320, 357, 363, 368, 524, 526, 527], "rather": [15, 18, 130, 318, 343, 356, 361, 363, 364, 442, 496, 538, 589], "ratio": [0, 13, 343, 569], "raw": [19, 22, 23, 129, 130, 134, 308, 311, 329, 330, 347, 394, 395, 427, 433, 435, 436, 441], "raw_feat_layer_index": 437, "raw_valu": 321, "rb": 579, "rbo": [128, 134, 330, 333], "rdbm": [316, 336], "rdd": 23, "re": [15, 37, 128, 308, 317, 329, 342, 343, 361, 428, 431, 435, 437, 583, 590, 592], "reach": [37, 319, 322, 333, 339, 343, 361, 431, 436, 439, 442, 519, 534, 537, 589], "reachabl": [0, 319, 442], "read": [4, 8, 20, 24, 37, 130, 306, 311, 314, 318, 325, 328, 334, 335, 337, 340, 351, 356, 357, 359, 425, 426, 431, 436, 437, 439, 475, 476, 575, 577, 578, 582, 584, 586, 590, 608], "read_adjlist": 579, "read_csv": [325, 336, 356, 610], "read_edgelist": [19, 579], "read_endpoints_from_env": 306, "readabl": [35, 341, 577], "readallbyt": 314, "readappbas": 314, "reader": [134, 436], "readfiletostr": 334, "readi": [9, 30, 32, 37, 317, 318, 322, 325, 331, 333, 334, 342, 357, 427, 429, 584, 590, 598], "readili": 9, "readm": [30, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 372], "readtransact": [134, 314], "readtre": 334, "readwriteonc": 33, "real": [2, 6, 9, 12, 13, 34, 314, 325, 329, 333, 339, 341, 346, 357, 358, 360, 362, 569, 588, 590], "realist": [330, 569], "realiti": [37, 431], "realiz": [506, 508, 511, 534, 535, 536, 537, 564, 589], "realli": 13, "realm": 343, "realtim": [263, 590], "reason": [4, 322, 339, 341, 347, 426, 427, 557], "reassign": [496, 534], "rebas": 37, "rebuild": 36, "recal": 362, "recast": [12, 14, 34], "receiv": [4, 6, 9, 14, 16, 17, 24, 37, 46, 47, 306, 334, 356, 357, 360, 362, 370, 431, 435, 586, 589, 600], "receiver_id": [46, 47], "receiver_id_exampl": 47, "recent": [6, 328, 429, 590], "recept": [429, 433], "receptive_fn": [425, 609], "reciproc": [0, 442], "recogn": [130, 589, 590], "recommend": [4, 27, 30, 36, 37, 45, 314, 322, 329, 332, 336, 339, 343, 347, 356, 357, 358, 362, 431], "recomput": 9, "reconfigur": 333, "reconnect": [29, 584], "record": [9, 13, 134, 308, 318, 319, 329, 332, 335, 336, 343, 358, 436, 586, 590], "recov": [571, 584], "recoveri": 364, "recreat": 584, "rectangl": 6, "rectangular": [524, 528], "recurs": [0, 6, 431, 479], "recycl": 322, "red": [19, 20, 37, 336, 426, 577], "redeploi": 126, "redesign": [9, 359], "redhat": 134, "redirect": [435, 515], "redner": [513, 514, 515], "reduc": [6, 9, 13, 14, 15, 17, 318, 330, 333, 336, 342, 350, 426, 429, 525, 526, 527, 577, 590], "reduce_mean": [349, 353, 358, 425, 437, 604, 609], "reduce_sum": [349, 353, 358, 604], "redund": 6, "ref": [368, 589], "refactor": 37, "refer": [0, 2, 4, 9, 10, 12, 16, 17, 23, 24, 29, 30, 33, 34, 37, 41, 43, 44, 45, 126, 128, 129, 131, 132, 133, 134, 181, 184, 274, 308, 314, 315, 316, 317, 318, 319, 320, 322, 329, 331, 332, 337, 339, 341, 343, 347, 348, 350, 360, 361, 362, 364, 368, 387, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 442, 475, 476, 487, 496, 497, 498, 499, 500, 501, 502, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 576, 577, 590, 594, 608], "referenc": [45, 134, 369], "reflect": [341, 589, 597], "reformat": 365, "regard": [337, 343, 353, 589], "regardless": [10, 337, 359, 426, 522, 589], "regex": [31, 341], "region": 601, "region_nam": [356, 610], "regist": [133, 181, 184, 216, 308, 315, 316, 318, 330, 333, 356, 367, 370, 399, 584], "register_aggreg": 370, "register_file_system": 436, "register_implement": [356, 610], "register_oper": 435, "register_sync_buff": [18, 370, 600], "registr": 436, "registri": [4, 27, 32, 41, 45, 134, 320, 331, 333, 348, 354, 432, 584, 590, 602], "registry_instance_record": 275, "registry_instance_record_dict": 275, "registry_instance_record_form_dict": 275, "registry_instance_record_inst": 275, "registryinstancerecord": [193, 283], "regular": [343, 516, 521, 522, 523, 545, 550, 553, 558, 561, 562, 563, 564], "regular_dodecahedron": 548, "reinforcement_learn": 437, "reinstal": [590, 597], "reject": 584, "rel": [0, 27, 46, 47, 67, 75, 94, 95, 106, 110, 121, 130, 154, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 274, 281, 299, 309, 330, 331, 347, 356, 362, 427, 431, 442, 590], "relabel": 504, "relat": [2, 4, 13, 23, 24, 27, 33, 38, 45, 49, 129, 131, 134, 137, 173, 216, 227, 263, 272, 308, 309, 316, 318, 322, 327, 328, 330, 336, 338, 342, 347, 350, 353, 357, 358, 359, 361, 362, 367, 427, 431, 437, 533, 569, 574, 588, 589, 590], "relationship": [0, 131, 134, 318, 319, 322, 330, 333, 337, 338, 343, 347, 350, 357, 360, 361, 362, 426, 427, 437, 589, 590], "relaunch": [364, 590], "relax": 502, "releas": [2, 27, 31, 32, 35, 129, 306, 315, 322, 339, 352, 365, 534, 537, 583, 584, 590, 603, 607], "release_nam": 601, "relev": [37, 128, 129, 432, 471, 577, 588], "reli": [4, 9, 19, 317, 336, 338, 432, 589], "reliabl": [134, 530], "reload": [30, 590], "reloc": 23, "relu": [349, 353, 358, 604], "remain": [27, 128, 318, 337, 341, 356, 360, 426, 431, 511, 538], "rememb": [17, 22, 23, 30, 33, 45, 126, 129, 216, 308, 317, 319, 590, 597], "remot": [29, 36, 216, 342, 354, 355, 372, 440, 584, 608], "remote_path": 257, "remoteconn": 342, "remotedistsamplingworkeropt": [354, 355], "remotepath": 167, "remov": [27, 29, 126, 154, 173, 209, 244, 263, 299, 315, 341, 343, 368, 372, 432, 449, 455, 457, 503, 506, 508, 510, 552, 555, 571, 577, 590], "remove_edg": [20, 577], "remove_edges_from": [20, 506, 508, 577], "remove_nod": [20, 577], "remove_nodes_from": [20, 577], "removecolumn": 321, "removeobject": 367, "reop": 216, "reopen": 36, "rep": [173, 216], "repeat": [68, 339, 361, 362, 431, 437, 511, 516, 519, 539, 542, 608], "repeatedli": [13, 330, 360], "replac": [2, 17, 19, 22, 23, 29, 30, 129, 134, 173, 216, 308, 311, 314, 317, 319, 330, 331, 334, 336, 341, 359, 365, 428, 429, 430, 439, 577, 590], "replai": [9, 134, 350, 359, 586, 590], "replas": 216, "replay_record": 590, "replayrecord": 590, "repli": [128, 343], "replic": [10, 331, 518], "replica": [30, 329, 354], "replicacount": [329, 590], "replicaset": 601, "replyof": [343, 588, 605], "repo": [4, 29, 37, 129, 134, 308, 331, 359, 590, 601, 602], "repo_hom": 597, "report": [20, 322, 328, 365, 402, 500, 501, 502, 577, 580], "report_typ": 402, "repositori": [4, 29, 36, 37, 46, 132, 134, 216, 329, 336, 372, 584, 590], "reprens": 216, "repres": [6, 9, 12, 15, 128, 130, 131, 308, 312, 319, 325, 330, 334, 336, 339, 343, 347, 349, 350, 353, 356, 357, 358, 359, 360, 362, 365, 367, 368, 369, 376, 403, 426, 427, 428, 429, 431, 435, 437, 439, 483, 516, 524, 525, 526, 527, 528, 536, 543, 546, 550, 558, 567, 569, 571, 572, 577, 581, 584, 589, 590], "represent": [20, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 131, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 318, 330, 357, 359, 362, 439, 575, 577, 588], "reproduc": [37, 577], "req": [274, 435], "request": [33, 45, 46, 128, 216, 309, 311, 314, 322, 334, 356, 367, 396, 427, 435, 438, 440, 471, 577, 584, 590, 603], "request_opt": [396, 440], "requir": [2, 4, 6, 13, 15, 17, 20, 31, 32, 35, 37, 44, 47, 67, 75, 94, 95, 106, 110, 121, 128, 130, 131, 133, 154, 173, 175, 181, 184, 191, 209, 244, 263, 265, 272, 274, 281, 299, 311, 317, 319, 322, 325, 330, 332, 333, 334, 336, 339, 341, 343, 347, 350, 352, 356, 357, 358, 362, 364, 368, 372, 386, 425, 426, 427, 429, 430, 434, 435, 436, 437, 438, 475, 523, 524, 528, 577, 584, 589, 590, 593, 607], "research": [11, 333, 350, 362, 567, 584], "resembl": [357, 569, 574, 576], "reserv": [30, 128], "reset": 438, "reset_default_tf_graph": [349, 353, 358, 604], "reshap": [9, 437], "resid": [10, 14, 38], "resiz": 321, "resolut": [322, 590], "resolv": [23, 28, 322, 356, 439, 591], "resort": 511, "resourc": [2, 27, 29, 33, 38, 46, 75, 128, 134, 306, 318, 322, 325, 333, 342, 352, 357, 364, 368, 376, 496, 529, 584, 590, 593, 597, 603], "resource_nam": 584, "resource_usag": 102, "resource_usage_dict": 102, "resource_usage_from_dict": 102, "resource_usage_inst": 102, "resourceusag": [46, 90], "resp": [181, 216, 244, 263, 265, 272, 274, 281, 299, 308, 314, 590], "respect": [9, 16, 38, 327, 330, 337, 341, 356, 357, 358, 361, 362, 368, 387, 404, 412, 428, 431, 442, 483, 496, 543, 577, 583, 589, 590], "respond": 427, "respons": [4, 9, 12, 16, 27, 34, 36, 37, 46, 128, 134, 310, 312, 322, 330, 334, 336, 357, 367, 435, 438, 584, 586, 590], "rest": [37, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 133, 134, 320, 327, 577, 590], "restart": [30, 46, 106, 191, 216, 281, 309, 311, 314, 319, 333, 598], "restart_count": 100, "restart_servic": [46, 281, 311], "restartpolici": 354, "restartservic": [216, 309], "restor": [584, 590], "restore_from_pvc": 584, "restore_graphs_from_pvc": 33, "restrict": 131, "result": [0, 2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 24, 33, 37, 134, 154, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 274, 281, 299, 308, 309, 311, 314, 318, 319, 325, 330, 331, 332, 333, 334, 336, 339, 341, 342, 343, 346, 350, 357, 358, 360, 361, 362, 367, 368, 369, 377, 383, 384, 393, 399, 401, 403, 404, 407, 408, 425, 428, 429, 431, 433, 434, 436, 439, 440, 442, 506, 508, 511, 530, 577, 588, 590, 592, 600, 604], "result_column": 439, "result_lpa": 600, "result_opt": [341, 343, 608], "result_path": [399, 404], "result_schema": 369, "result_sssp": 600, "resultcount": 328, "resultdagnod": [369, 404], "resultiterationbatchs": 342, "resultschemayaml": 334, "resultset": 342, "ret": [7, 18, 342, 358, 600, 605], "ret1": [358, 604], "ret2": [358, 604], "ret_g": 19, "ret_nx": 19, "retain": [341, 518, 591], "retain_oid": [13, 329, 356, 367, 418, 439, 584, 591, 610], "retent": 518, "retriev": [15, 133, 263, 311, 327, 336, 337, 339, 341, 358, 359, 369, 383, 384, 394, 395, 399, 403, 407, 408, 428, 429, 431, 437, 442, 583, 590, 591], "return": [0, 6, 9, 15, 18, 20, 92, 111, 134, 170, 198, 216, 260, 288, 307, 308, 310, 311, 312, 314, 315, 321, 330, 332, 333, 334, 335, 336, 337, 341, 342, 343, 350, 352, 354, 355, 358, 361, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 418, 419, 420, 424, 425, 427, 428, 429, 430, 431, 434, 435, 436, 437, 439, 440, 441, 442, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 583, 584, 586, 589, 590, 600, 609], "returnd": 312, "reus": [4, 30, 216, 308, 319, 347, 350, 359, 368, 437, 439, 584, 586], "rev": [496, 508, 513, 514, 515, 518], "revers": [6, 20, 337, 343, 385, 388, 441, 442, 520, 528, 577], "review": [129, 357, 368, 442, 506, 524], "revis": [4, 14, 17, 365], "revisit": [351, 352, 366], "reweight": 575, "rewind": 362, "rewir": [496, 498, 502, 534, 537], "rewrit": 435, "rf": 437, "rh": [31, 321], "rich": [346, 357, 360, 362, 427, 429], "right": [22, 337, 341, 356, 435, 478, 487, 489, 510, 575], "rightmost": 487, "ring": 503, "riordan": 517, "rippl": 341, "risk": [342, 357], "rko": 341, "rm": [348, 437], "road": [360, 592], "robin": [328, 475, 476], "robust": 496, "rocksdb": [339, 590], "role": [322, 330, 333, 345, 354, 359, 427, 436, 442, 528, 566, 574, 590, 594, 598, 603], "rolebind": [322, 603], "roll": [341, 343, 346], "ronald": [475, 476, 566], "room": [20, 577], "root": [0, 4, 27, 32, 36, 46, 322, 356, 359, 477, 479, 570, 571, 588], "rough": 360, "roughli": 10, "round": [0, 9, 14, 17, 24, 328, 368, 370, 494, 504], "rout": [128, 528], "routin": [37, 128, 442, 577], "routing_": 335, "routingcontrol": 335, "row": [13, 130, 329, 333, 347, 362, 426, 439, 570, 590], "rpc": [331, 354, 367, 438, 584, 590], "rpc_port": 28, "rt_mutable_graph": 134, "ruiqi": 600, "rule": [35, 46, 47, 128, 134, 319, 330, 343, 350, 360, 429, 435, 439, 476, 586], "rule_id": [46, 47], "rule_id_exampl": 47, "rule_learn": 437, "run": [1, 2, 4, 6, 8, 9, 12, 13, 19, 20, 24, 27, 29, 30, 31, 32, 38, 44, 46, 126, 132, 133, 134, 177, 184, 191, 216, 244, 274, 281, 306, 308, 319, 322, 329, 331, 333, 335, 336, 339, 342, 345, 348, 351, 352, 356, 357, 358, 359, 362, 364, 366, 367, 368, 369, 403, 414, 431, 435, 436, 437, 439, 440, 529, 530, 580, 581, 584, 589, 590, 591, 592, 593, 594, 597, 598, 600, 602], "run_app": [383, 384, 399, 407, 408], "run_client_proc": 354, "run_fetch": 584, "rundagfil": 367, "runnabl": [16, 17, 23, 92, 170, 260, 314], "runner": [367, 600], "running_deployment_info": [75, 103], "running_deployment_info_dict": 103, "running_deployment_info_from_dict": 103, "running_deployment_info_inst": 103, "running_deployment_statu": [75, 104], "running_deployment_status_dict": 104, "running_deployment_status_from_dict": 104, "running_deployment_status_inst": 104, "running_graph": 134, "runningdeploymentinfo": [46, 75], "runningdeploymentstatu": [46, 75], "runtim": [4, 6, 17, 23, 31, 132, 133, 134, 317, 319, 330, 357, 359, 360, 361, 367, 368, 372, 589, 602, 603], "runtimeerror": [440, 584], "runtimeexcept": [181, 216, 314], "rust": [359, 589, 590], "r\u00e9nyi": [525, 526, 527], "s00453": 512, "s1": 542, "s2": [426, 542], "s3": [356, 439, 610], "s_algorithm": 360, "s_i": 368, "saberi": 512, "sack": [341, 608], "sacrif": 589, "sacrific": 6, "safari": 343, "safe": 577, "safe_load": [308, 590], "sage": 354, "sai": [28, 41], "salari": 439, "same": [0, 2, 4, 6, 10, 13, 15, 17, 20, 22, 29, 30, 37, 131, 132, 306, 319, 330, 337, 339, 341, 343, 347, 356, 360, 361, 365, 426, 427, 431, 432, 435, 437, 439, 441, 442, 470, 471, 492, 500, 501, 506, 508, 534, 535, 537, 570, 571, 577, 584, 588, 589, 590, 591, 592], "sampl": [2, 29, 30, 31, 33, 129, 314, 320, 327, 329, 346, 347, 354, 357, 358, 364, 372, 426, 427, 428, 430, 433, 435, 438, 441, 516, 536, 569, 590, 609], "sample_gen": 437, "sample_input_fn": 437, "sample_se": [425, 609], "sampler": [350, 352, 430, 433, 435], "sampling_path": [0, 34], "sandbox": 359, "sander": 570, "sannella": 531, "santo": [496, 500, 501, 502], "santofortunato": 496, "saram\u00e4ki": 442, "satisfactori": [6, 359, 362], "satisfi": [6, 9, 24, 32, 318, 332, 343, 361, 364, 368, 372, 436, 442, 494, 524, 528, 535, 536, 594], "satorra": 368, "saturdai": 426, "satyanarayana": 530, "save": [13, 18, 28, 29, 129, 329, 427, 439, 442, 590], "save_to": [439, 588], "saw": 37, "scalabl": [318, 329, 342, 360, 361, 362, 363, 364, 574], "scalar": [337, 435, 442], "scale": [7, 11, 12, 13, 20, 23, 27, 34, 37, 318, 325, 329, 331, 333, 338, 342, 343, 344, 346, 347, 357, 358, 359, 360, 362, 363, 364, 427, 429, 431, 433, 438, 506, 517, 524, 576, 589], "scan": [333, 339, 589], "scanearlystoprul": 333, "scanexpandfusionrul": 333, "scannererror": 368, "scatter": [24, 427], "scenario": [2, 4, 6, 8, 12, 13, 41, 128, 131, 318, 330, 333, 339, 341, 342, 343, 347, 350, 356, 357, 361, 362, 364, 426, 427, 429], "scene": [34, 330, 352, 434], "schedul": [6, 23, 36, 68, 128, 339, 357, 359, 584], "scheinerman": 533, "schema": [33, 45, 46, 54, 94, 129, 130, 134, 142, 144, 167, 173, 216, 232, 263, 272, 308, 309, 311, 314, 318, 321, 330, 331, 334, 336, 337, 338, 339, 343, 352, 353, 356, 368, 426, 427, 436, 439, 577, 586, 588, 589, 591, 605, 608, 610], "schema_": 321, "schema_fil": 134, "schema_kei": 586, "schema_map": [67, 105, 263, 276, 311], "schema_mapping_dict": [105, 276], "schema_mapping_form_dict": 276, "schema_mapping_from_dict": 105, "schema_mapping_inst": [105, 276], "schema_mapping_loading_config": 277, "schema_mapping_loading_config_data_sourc": 278, "schema_mapping_loading_config_data_source_dict": 278, "schema_mapping_loading_config_data_source_form_dict": 278, "schema_mapping_loading_config_data_source_inst": 278, "schema_mapping_loading_config_dict": 277, "schema_mapping_loading_config_form_dict": 277, "schema_mapping_loading_config_format": 279, "schema_mapping_loading_config_format_dict": 279, "schema_mapping_loading_config_format_form_dict": 279, "schema_mapping_loading_config_format_inst": 279, "schema_mapping_loading_config_inst": 277, "schema_mapping_loading_config_x_csr_param": 280, "schema_mapping_loading_config_x_csr_params_dict": 280, "schema_mapping_loading_config_x_csr_params_form_dict": 280, "schema_mapping_loading_config_x_csr_params_inst": 280, "schema_path": 439, "schema_update_tim": 86, "schemamap": [46, 67, 167, 173, 216, 257, 263, 308, 309, 311], "schemamappingloadingconfig": [186, 216, 276, 309], "schemamappingloadingconfigdatasourc": [187, 216, 277, 309], "schemamappingloadingconfigformat": [187, 216, 277, 309], "schemamappingloadingconfigxcsrparam": [187, 216, 277, 309], "schemapath": 334, "schemayaml": 334, "scheme": [0, 6, 9, 130, 188, 278, 308, 329, 356], "sci": [529, 530, 576], "scienc": [11, 531, 554], "scientif": 358, "scientist": [8, 346, 364], "scipi": [322, 524, 525, 526, 527, 577, 580, 603], "scl": 31, "scope": [6, 23, 37, 333, 359, 439], "score": [0, 343, 362], "scr_id": 426, "scratch": 372, "screen": [317, 592], "script": [4, 32, 37, 134, 328, 333, 364, 365, 396, 425, 426, 437, 440, 601], "sdk": [12, 18, 43, 44, 132, 133, 134, 306, 311, 315, 317, 320, 322, 329, 333, 335, 344, 345, 346, 360, 361, 364, 372, 582, 594, 600], "sdk_endpoint": 107, "seal": [321, 346, 362], "seamless": [9, 325, 333, 363, 590], "seamlessli": [130, 216, 308, 309, 315, 325, 329, 333, 334, 338, 344, 346, 357, 363, 364], "search": [6, 37, 319, 327, 333, 336, 347, 357, 360, 362, 364, 368, 442, 606], "seastar": [128, 134], "second": [6, 13, 27, 130, 314, 318, 319, 325, 337, 343, 347, 356, 361, 364, 365, 369, 433, 522, 523, 531, 532, 533, 534, 538, 576, 577, 584, 590, 591], "secondari": 339, "secondli": [339, 364], "seconnd": 535, "secret": [37, 356, 584, 601, 610], "section": [8, 13, 27, 29, 128, 130, 131, 132, 328, 333, 340, 343, 347, 351, 357, 431, 432, 439, 476, 589, 590], "secur": [317, 347, 362, 363], "sedgewick": 560, "see": [0, 2, 4, 13, 19, 20, 27, 29, 30, 36, 37, 38, 42, 45, 46, 47, 67, 75, 94, 95, 106, 110, 121, 126, 130, 134, 154, 175, 209, 315, 317, 318, 319, 322, 329, 332, 336, 339, 342, 343, 346, 356, 363, 368, 369, 372, 418, 420, 426, 427, 429, 434, 437, 439, 475, 485, 490, 496, 499, 500, 501, 502, 504, 506, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 531, 532, 533, 534, 537, 542, 569, 572, 574, 577, 579, 583, 584, 588, 589, 590, 593], "seed": [350, 425, 433, 437, 496, 499, 500, 501, 502, 504, 506, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 531, 532, 533, 534, 537, 569, 572, 574], "seek": [129, 436], "seem": [322, 343], "seen": [20, 126, 315, 330, 357, 589], "segmentedpartitioner\u8fd8\u9700\u7ed9\u51fa\u5168\u90e8\u7684oid": 321, "select": [0, 9, 15, 36, 131, 330, 333, 336, 339, 347, 350, 356, 357, 360, 362, 369, 377, 383, 384, 394, 395, 399, 407, 408, 425, 431, 439, 496, 505, 528, 540, 574, 577, 583, 584, 588, 589, 608], "selectkei": 341, "selector": [7, 15, 33, 38, 358, 367, 369, 377, 383, 384, 394, 395, 399, 407, 408, 439, 582, 584, 588, 600, 605], "self": [2, 329, 343, 356, 412, 425, 428, 431, 442, 452, 465, 504, 506, 508, 510, 516, 524, 525, 526, 527, 528, 577, 578, 580, 584, 590, 605, 609, 610], "self_loop": 516, "self_vec": 437, "self_weight": 437, "selfloop": [470, 471, 504, 510], "selfloop_edg": [465, 470, 506, 508], "sell": 357, "seller": 357, "semant": [6, 330, 350, 430, 589], "send": [4, 6, 10, 18, 24, 328, 331, 334, 360, 370, 589, 600], "send_valu": 589, "sendmessageto": 24, "sens": [361, 569, 584], "sensit": [337, 569], "sent": [9, 10, 14, 16, 24, 328, 342], "sentenc": [338, 341, 343], "sep": [325, 336, 356, 439, 610], "separ": [0, 6, 17, 30, 36, 47, 329, 331, 343, 357, 364, 426, 427, 524, 579, 589, 590], "separatedli": 589, "septemb": 566, "sequenc": [24, 337, 341, 343, 368, 439, 476, 496, 506, 507, 508, 509, 510, 511, 512, 528, 534, 535, 538, 571, 572, 577, 578, 591], "sequenti": [6, 12, 14, 18, 34, 36, 357, 475, 476, 512, 589, 594, 600], "ser": [342, 608], "seri": [15, 343, 362, 367, 431, 589], "serial": [4, 314, 341, 342, 367, 439, 584, 589, 608], "serializeresulttostr": [342, 608], "seriou": 343, "serious": 427, "serv": [4, 27, 43, 128, 134, 216, 308, 319, 322, 333, 336, 339, 346, 358, 359, 362, 427, 590, 597], "server": [27, 29, 47, 67, 75, 82, 83, 94, 95, 106, 110, 121, 134, 154, 173, 184, 209, 244, 263, 274, 299, 311, 312, 317, 328, 330, 331, 336, 339, 342, 344, 346, 350, 355, 357, 359, 361, 366, 430, 435, 436, 437, 590, 602, 608], "server_client_master_port": [354, 355], "server_count": [425, 427, 437, 609], "server_id": [425, 609], "server_internal_error": 312, "server_rank": 354, "server_rank_list": 354, "serverless": 333, "servic": [2, 27, 28, 29, 38, 39, 43, 45, 46, 106, 130, 132, 133, 173, 184, 191, 263, 274, 281, 306, 311, 314, 319, 320, 328, 335, 342, 346, 352, 357, 358, 360, 362, 367, 584, 591], "service_metr": 282, "service_metrics_dict": 282, "service_metrics_form_dict": 282, "service_metrics_inst": 282, "service_nam": 283, "service_port": 28, "service_registri": 264, "service_registry_record": 283, "service_registry_record_dict": 283, "service_registry_record_form_dict": 283, "service_registry_record_inst": 283, "service_statu": [106, 107, 284], "service_status_dict": [107, 284], "service_status_form_dict": 284, "service_status_from_dict": 107, "service_status_inst": [107, 284], "service_status_sdk_endpoint": 108, "service_status_sdk_endpoints_dict": 108, "service_status_sdk_endpoints_from_dict": 108, "service_status_sdk_endpoints_inst": 108, "serviceapi": 46, "servicemanagementapi": [216, 309], "servicemetr": [185, 275], "servicenam": 193, "serviceregistri": 174, "serviceregistryrecord": [174, 264], "servicestatu": [46, 106, 191, 216, 281, 309, 311], "servicestatussdkendpoint": [46, 107], "sess": [2, 16, 17, 22, 27, 29, 30, 33, 216, 244, 263, 265, 272, 274, 281, 299, 308, 314, 325, 336, 352, 353, 354, 356, 368, 369, 414, 418, 439, 440, 584, 588, 590, 592, 598, 600, 601, 602, 604, 605, 608, 610], "sess2": 29, "session": [2, 7, 8, 16, 17, 22, 27, 28, 29, 33, 45, 154, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 299, 306, 308, 309, 314, 319, 322, 325, 332, 336, 340, 342, 343, 346, 349, 351, 354, 356, 358, 366, 368, 369, 387, 418, 419, 420, 422, 424, 439, 440, 577, 581, 582, 588, 590, 592, 597, 598, 600, 601, 602, 604, 605, 608, 610], "session_id": [387, 391, 412, 439, 440, 577, 581], "set": [0, 2, 4, 6, 7, 9, 10, 13, 14, 15, 16, 18, 20, 23, 27, 30, 31, 36, 39, 41, 43, 45, 126, 128, 130, 131, 134, 216, 315, 317, 318, 319, 322, 325, 328, 329, 330, 331, 332, 333, 334, 337, 338, 341, 343, 344, 346, 349, 350, 356, 357, 358, 359, 361, 362, 365, 366, 367, 368, 370, 418, 424, 425, 426, 427, 429, 431, 434, 437, 438, 439, 440, 441, 442, 456, 480, 496, 510, 511, 516, 520, 528, 531, 532, 533, 538, 539, 557, 572, 575, 577, 580, 584, 588, 589, 590, 591, 594, 597, 602, 603, 607], "set_data": 367, "set_default_float_attribut": 438, "set_default_int_attribut": 438, "set_default_neighbor_id": [429, 438], "set_default_string_attribut": 438, "set_edge_data": 577, "set_error": 367, "set_graph_def": 367, "set_inter_threadnum": 438, "set_intra_threadnum": 438, "set_item": 577, "set_node_data": 577, "set_node_valu": [18, 370, 600], "set_opt": [2, 7, 15, 17, 19, 29, 38, 322, 332, 336, 349, 352, 353, 354, 355, 358, 598, 603], "set_padding_mod": 429, "set_rpc_message_max_s": 438, "set_shap": 367, "set_valu": [18, 370, 600], "set_xxx": 438, "set_yyi": 438, "setcommand": 367, "setdescript": [181, 314], "sethead": 334, "setnam": 314, "setqueri": 314, "setquerynam": 184, "settyp": 314, "setup": [36, 37, 46, 128, 308, 322, 439, 584, 602], "setuptool": 133, "setvalu": [16, 17, 600], "seven": [6, 437, 476], "sever": [6, 9, 15, 17, 20, 23, 30, 33, 36, 37, 38, 47, 57, 82, 84, 318, 327, 330, 337, 343, 346, 347, 350, 356, 357, 360, 362, 363, 365, 369, 425, 431, 433, 435, 436, 442, 483, 577, 583, 584, 589], "severity_exampl": 47, "sf": [331, 333, 343], "sf1": 343, "sg": 369, "sgf": 569, "sh": [4, 31, 35, 134, 328, 333, 342, 432, 590, 608], "shade": [17, 22, 23, 600], "shadedpattern": 23, "shake": 557, "shall": [17, 23], "shallow": 20, "shanghai": 426, "shape": [322, 349, 350, 353, 358, 367, 369, 428, 429, 430, 431, 434, 437, 441, 499, 604], "sharding_mod": 128, "share": [4, 6, 30, 31, 37, 128, 131, 343, 348, 357, 359, 360, 589, 591, 602], "shared_mem": [322, 603], "shared_ptr": [15, 321, 367, 586, 591], "sheer": 431, "shell": [23, 35, 319, 329, 331, 333, 338, 361, 368], "shelv": 330, "shield": 43, "shift": [36, 337, 341, 343, 442, 542], "shift_list": 542, "shiftlist": 542, "ship": 4, "shm": [4, 32, 41, 331, 348, 354, 602], "short": [6, 359, 364, 365, 457, 589, 590], "shortcom": [336, 339, 343], "shortcut": 577, "shortest": [6, 7, 19, 24, 319, 330, 337, 358, 360, 368, 442, 592], "shortestpath": 337, "shortsha": 602, "should": [0, 6, 9, 13, 16, 19, 20, 22, 23, 27, 28, 30, 33, 37, 128, 130, 134, 152, 242, 314, 328, 329, 330, 332, 336, 339, 341, 343, 356, 357, 358, 362, 367, 368, 376, 379, 392, 401, 435, 436, 439, 441, 442, 472, 496, 524, 525, 526, 527, 577, 579, 584, 586, 589, 590, 591, 592], "shoulder": 318, "show": [2, 14, 19, 20, 27, 29, 30, 38, 126, 315, 319, 322, 330, 331, 343, 346, 351, 352, 358, 360, 361, 362, 428, 429, 437, 580, 584, 586, 589], "show_log": [2, 7, 15, 17, 19, 29, 38, 322, 332, 349, 352, 353, 354, 355, 358, 424, 598, 603], "showcas": 130, "shown": [6, 7, 9, 10, 12, 15, 16, 18, 24, 27, 34, 130, 134, 330, 332, 343, 349, 350, 360, 362, 365, 426, 427, 428, 431, 437], "shuffl": [330, 341, 354, 355, 431, 437, 441], "shut": 355, "shutdown": [126, 315, 354], "shutdown_cli": [354, 355], "siam": [506, 511, 517], "side": [23, 37, 82, 83, 330, 334, 341, 342, 368, 387, 427, 480, 589], "sig": [27, 600, 607], "sigint": 584, "sigmod": [3, 12, 14, 24, 34, 357, 600, 606], "sigmod2017": [359, 600, 606], "sign": 442, "signal": 584, "signatur": [368, 431, 577], "signed_int32": [165, 180, 184], "signed_int64": [165, 180], "signifi": [131, 461, 462], "signific": [13, 359, 364], "significantli": [128, 333, 336, 339, 360, 363], "sigterm": 584, "silent": [322, 577, 598], "silicon": [32, 332, 601, 603], "silva": 343, "similar": [0, 10, 12, 20, 37, 329, 330, 334, 337, 339, 342, 343, 347, 350, 356, 357, 360, 364, 368, 425, 426, 427, 428, 431, 434, 439, 569, 577], "similarli": [6, 19, 20, 131, 314, 317, 331, 343, 360, 442, 480, 506, 508, 524, 527, 534, 577, 598], "simpl": [2, 7, 9, 15, 16, 17, 20, 27, 30, 32, 33, 128, 129, 130, 181, 216, 307, 308, 322, 327, 330, 332, 333, 339, 341, 343, 349, 356, 357, 358, 361, 368, 369, 401, 425, 427, 440, 442, 506, 508, 511, 512, 534, 535, 536, 537, 539, 551, 569, 577, 583, 590, 600, 603, 604, 608], "simple_g": [33, 358, 600, 604], "simple_graph": [15, 16], "simple_path": 343, "simplepath": [341, 608], "simpler": [335, 342, 343, 577], "simpli": [9, 17, 20, 128, 216, 319, 329, 336, 343, 356, 358, 431, 499, 503, 577], "simplic": [4, 9], "simplifi": [30, 43, 329, 333, 357, 358, 359, 361, 363, 426, 431, 589], "simul": [343, 402, 437], "simultan": [358, 364, 586], "sin": [18, 600], "sinaweibo": 365, "sinc": [4, 6, 23, 24, 29, 30, 37, 128, 130, 131, 216, 281, 308, 314, 330, 336, 341, 343, 348, 352, 356, 357, 365, 378, 427, 431, 439, 475, 476, 506, 508, 555, 572, 579, 583, 588, 589, 590], "since_d": 131, "singer": 533, "singl": [4, 6, 7, 11, 14, 15, 17, 20, 24, 27, 36, 37, 41, 131, 134, 184, 274, 307, 317, 319, 322, 329, 333, 337, 339, 341, 343, 348, 349, 351, 352, 357, 358, 360, 361, 368, 369, 425, 439, 450, 457, 479, 483, 488, 498, 503, 520, 526, 571, 573, 577, 584, 588, 592], "singleton": [538, 577], "sink": 431, "site": [7, 32, 332, 349], "situat": [131, 341, 343, 346, 426, 427, 590], "size": [4, 6, 10, 13, 16, 17, 23, 24, 32, 41, 128, 130, 321, 322, 329, 331, 333, 342, 347, 348, 350, 354, 356, 362, 365, 370, 426, 428, 429, 431, 436, 438, 439, 482, 483, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 508, 519, 528, 532, 534, 577, 588, 589, 590, 591, 602], "size_t": [6, 13, 321, 367, 370, 436, 586, 589], "sizelimit": 354, "sizeof": 13, "sk": 542, "skeleton": [545, 548, 562, 563], "skill": 131, "skip": [27, 31, 35, 333, 334, 361, 372, 590], "slack": [322, 603], "slave": 318, "sleep": [216, 308, 437], "slice": [13, 330, 369, 439, 583], "slightli": [337, 432, 496, 583], "slow": [14, 332], "slower": 132, "small": [4, 9, 11, 13, 20, 318, 325, 333, 339, 343, 360, 361, 364, 442, 497, 498, 524, 567, 578, 584, 590], "smaller": [322, 333, 339, 343, 365, 440, 442, 498, 499, 503], "smallest": [368, 529, 549, 559], "smoothli": 329, "smp": 128, "snap": 360, "snapshot": [22, 263, 309, 311, 328, 333, 339, 364, 586, 590], "snapshot_id": [263, 282, 285, 309, 311, 590], "snapshot_statu": [285, 590], "snapshot_status_dict": 285, "snapshot_status_form_dict": 285, "snapshot_status_inst": 285, "snapshotid": [192, 195], "snapshotstatu": [263, 311], "snb": [318, 343, 356, 605, 610], "so": [6, 12, 13, 30, 37, 41, 129, 131, 216, 308, 317, 319, 322, 329, 330, 332, 334, 338, 342, 343, 347, 350, 352, 356, 357, 359, 368, 372, 425, 431, 433, 452, 487, 492, 505, 506, 507, 510, 525, 526, 527, 538, 571, 577, 589, 590, 604], "soc": [365, 497, 498], "social": [8, 131, 325, 331, 343, 357, 360, 362, 365, 504, 554, 569, 578], "socialnetwork": 442, "sociologi": 442, "sociometr": 442, "sock": [23, 28, 331], "socket": [23, 28, 30, 331, 367, 591], "soft": 526, "softwar": [30, 33, 130, 319, 329, 332, 341, 346, 357, 439, 591], "softwareid": 319, "softwarenam": 319, "sole": [317, 333, 336, 337], "solid": [320, 545, 562, 563], "solut": [9, 31, 45, 128, 318, 322, 361, 362, 364, 442, 603], "solv": [11, 24, 37, 322, 324, 343, 360], "solver": 368, "some": [4, 6, 10, 12, 13, 17, 20, 23, 29, 31, 34, 36, 37, 45, 128, 129, 132, 134, 314, 319, 328, 329, 330, 332, 333, 337, 339, 341, 342, 347, 356, 357, 360, 362, 368, 425, 426, 427, 433, 435, 437, 438, 439, 440, 487, 496, 506, 508, 511, 530, 571, 576, 577, 588, 589, 590, 591, 597], "someon": 37, "someth": [332, 577], "sometim": [6, 27, 343, 356, 487, 547], "somewhat": 496, "son": 336, "son_of": 336, "song": 343, "soon": [333, 359, 363, 364, 365, 428], "sophist": 359, "sort": [19, 20, 321, 330, 333, 343, 442, 448, 476, 480, 483, 486, 511, 512, 570, 571, 577, 589], "sort_on_compact": 228, "sort_valu": 15, "sortoncompact": 138, "sortprojecttransposerul": 333, "sotera": 368, "sought": 360, "sourc": [6, 7, 8, 9, 14, 15, 18, 22, 23, 24, 29, 33, 36, 37, 38, 44, 45, 67, 77, 125, 127, 131, 134, 152, 158, 160, 216, 242, 248, 250, 306, 307, 308, 310, 311, 312, 313, 314, 317, 318, 320, 321, 322, 328, 329, 331, 332, 336, 337, 339, 343, 347, 348, 350, 356, 358, 360, 361, 362, 364, 367, 368, 369, 371, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 419, 420, 422, 424, 427, 428, 429, 430, 431, 437, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 581, 583, 584, 586, 588, 589, 590, 592, 597, 600, 601, 602, 608, 610], "source_degree_typ": 0, "source_id": [0, 14], "source_vertex": [45, 49, 69, 77, 129, 130, 131, 173, 216, 227, 250, 263, 272, 305, 308, 590], "source_vertex_map": [45, 76, 129, 130, 173, 216, 246, 263, 308], "source_vertex_typ": [67, 94, 311], "source_vertex_type_exampl": [67, 94], "source_vertex_type_nam": 263, "sourceid": 22, "sourcevertex": [137, 160, 215], "sourcevertexmap": 156, "south": 565, "southern": 565, "sp": [19, 316], "space": [333, 347, 362, 426, 427, 431, 442, 476, 524, 525, 526, 527, 528], "spam": 20, "span": [6, 20], "spark": [17, 588], "sparksess": 23, "spars": [6, 13, 347, 362, 425, 428, 504, 577, 580], "sparse_softmax_cross_entropy_with_logit": [349, 353, 358, 425, 437, 604, 609], "sparseedg": [350, 428, 429, 431], "sparseegographencod": [425, 609], "sparsenod": [350, 428, 429, 431], "spawn": 9, "speak": 427, "spec": [29, 33, 354, 367, 437], "special": [6, 20, 318, 320, 333, 343, 357, 426, 545, 561, 571, 594], "special_cas": 557, "specif": [0, 4, 6, 9, 12, 14, 15, 16, 20, 24, 33, 34, 37, 38, 41, 43, 45, 46, 126, 128, 132, 134, 190, 280, 322, 325, 328, 329, 330, 332, 333, 334, 337, 339, 341, 343, 346, 353, 356, 357, 358, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 429, 430, 431, 434, 437, 439, 496, 524, 528, 577, 583, 586, 588, 589, 590, 597], "specifi": [9, 16, 17, 20, 23, 24, 30, 36, 128, 129, 130, 131, 134, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 274, 281, 299, 306, 308, 310, 311, 312, 314, 317, 318, 319, 328, 329, 333, 334, 337, 339, 341, 346, 350, 354, 358, 360, 368, 370, 376, 383, 384, 394, 395, 399, 403, 407, 408, 424, 425, 426, 428, 431, 434, 439, 441, 442, 453, 461, 462, 483, 496, 506, 508, 509, 512, 513, 520, 524, 525, 526, 527, 528, 534, 537, 539, 542, 555, 574, 577, 579, 583, 584, 588, 590, 591, 597], "spectral": [569, 578], "spectrum": [6, 359, 442, 569], "speed": [7, 32, 318, 320, 343, 348, 349, 359, 438, 504, 577], "speedup": 359, "spell": [37, 130], "spend": 37, "spiraki": 531, "split": [10, 130, 333, 341, 343, 352, 353, 354, 355, 426, 427, 584, 590], "spread": 591, "spring": 334, "springer": [442, 531], "sproc": 316, "sql": [325, 330, 337, 341, 343, 344], "sqrt": [442, 522], "squar": [333, 343, 504, 523, 551, 552, 555, 570], "src": [7, 13, 15, 16, 17, 18, 30, 34, 154, 216, 244, 309, 311, 321, 325, 328, 333, 339, 342, 349, 350, 353, 356, 358, 368, 369, 376, 425, 427, 439, 583, 586, 589, 592, 600, 604, 609, 610], "src_1hop": 431, "src_atr": 431, "src_attr": 431, "src_ego": [349, 352, 353, 358, 604], "src_ego_spec": [425, 609], "src_emb": [352, 425, 609], "src_fid": 367, "src_field": [336, 356, 439, 605], "src_id": [18, 130, 321, 350, 426, 427, 428, 430, 431, 434, 437, 441, 600], "src_label": [242, 244, 245, 251, 311, 329, 333, 356, 439, 580, 584, 590, 591, 604, 605], "src_list": 321, "src_list_ptr": 321, "src_node": 428, "src_primary_key_valu": [242, 244, 245, 251, 311, 590], "src_type": [13, 428], "src_type_nam": 263, "src_user_id": 130, "src_vertex_label_nam": 319, "src_vertex_pk": 319, "src_vl": 589, "src_vl_num": 589, "src_vtype": 589, "src_vtypes_num": 589, "srclabel": [152, 154, 155, 161, 590], "srcpkcolmap": 590, "srcprimarykeyvalu": [152, 154, 155, 161], "sssp": [0, 7, 8, 9, 13, 14, 17, 18, 22, 24, 34, 321, 358, 365, 368, 369, 376, 583, 584, 592, 593, 600], "sssp_pie": [18, 600], "sssp_pregel": [18, 600], "ssspkernel": 9, "sst": 590, "sswp": 9, "stabl": [36, 368, 439, 586, 590, 607], "stack": 362, "stackexchang": 603, "stage": [20, 134, 322, 327, 347, 363, 364, 431, 589], "stai": [30, 333], "stand": [318, 364, 429, 430, 589], "standalon": [2, 23, 27, 32, 194, 322, 327, 331, 332, 333, 334, 343, 356, 357, 591, 597, 610], "standard": [6, 35, 43, 315, 317, 327, 330, 333, 343, 344, 356, 359, 440, 510, 525, 526, 527, 589], "standardcharset": 334, "stanford": [360, 568], "stanton": 536, "star": [446, 483, 492], "starservic": 216, "start": [0, 2, 4, 6, 9, 16, 19, 20, 27, 28, 29, 31, 32, 37, 39, 43, 44, 45, 106, 131, 132, 133, 184, 191, 281, 306, 309, 311, 317, 318, 319, 320, 327, 328, 329, 335, 336, 337, 339, 341, 342, 350, 352, 354, 355, 356, 361, 363, 366, 367, 369, 425, 429, 431, 440, 441, 442, 477, 502, 506, 508, 509, 512, 528, 542, 571, 579, 584, 589, 590, 594, 607], "start_servic": [46, 281, 308, 311], "start_service_request": [106, 109, 281, 286, 308, 311], "start_service_request_dict": [109, 286], "start_service_request_form_dict": 286, "start_service_request_from_dict": 109, "start_service_request_inst": [109, 286], "start_tim": [47, 96, 107, 267, 284], "start_time_exampl": 47, "startdat": 343, "startingwith": [341, 608], "startkei": 341, "startnod": 337, "startserv": 367, "startservic": [216, 309, 314], "startserviceongraph": 314, "startservicerequest": [46, 106, 191, 216, 281, 308, 309, 311, 314], "startservicerespons": [216, 314], "startswith": 341, "starttim": [177, 194], "startup": 332, "stat": [368, 524, 526], "state": [4, 6, 9, 10, 12, 24, 27, 34, 330, 346, 360, 361, 363, 365, 436, 439, 496, 499, 500, 501, 502, 504, 506, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 524, 525, 526, 527, 528, 531, 532, 533, 537, 569, 572, 574], "statefulset": [27, 590], "statement": [29, 431, 590], "static": [9, 16, 31, 154, 173, 175, 181, 184, 191, 209, 216, 263, 310, 312, 314, 333, 334, 342, 367, 592], "static_cast": [14, 16, 314, 321, 586], "staticmethod": [18, 375, 600], "statist": [134, 173, 263, 309, 311, 330, 333, 334, 337, 343, 428], "statistics_en": 284, "statisticsen": 194, "statsjson": 334, "statspath": 334, "statu": [18, 27, 29, 30, 38, 43, 45, 46, 47, 67, 75, 82, 94, 95, 96, 100, 106, 107, 110, 118, 121, 129, 133, 134, 154, 173, 175, 177, 181, 184, 191, 194, 195, 209, 216, 244, 263, 265, 267, 272, 274, 281, 284, 285, 299, 306, 308, 309, 310, 311, 320, 322, 352, 435, 436, 442, 590, 594, 598], "status_exampl": 47, "statuscod": 312, "statusenum": 216, "std": [13, 14, 15, 314, 321, 334, 367, 586, 591], "stdout": 38, "steal": 359, "steep": 360, "step": [6, 9, 14, 15, 27, 29, 30, 31, 32, 33, 36, 37, 134, 315, 320, 329, 330, 331, 332, 335, 339, 342, 344, 346, 347, 354, 355, 356, 357, 358, 359, 361, 370, 425, 426, 427, 429, 431, 434, 437, 496, 504, 516, 569, 590, 598, 610], "sticki": 330, "still": [8, 24, 27, 34, 38, 134, 325, 333, 343, 360, 455, 584, 589, 590], "stitch": 435, "stochast": [504, 578], "stone_story_edg": 336, "stone_story_nodes_rel": 336, "stop": [22, 27, 30, 46, 106, 191, 216, 281, 308, 309, 311, 333, 359, 363, 367, 442], "stop_r": 281, "stop_servic": [46, 281, 308, 311], "stop_service_request": 287, "stop_service_request_dict": 287, "stop_service_request_form_dict": 287, "stop_service_request_inst": 287, "stopiter": 342, "stopro": 316, "stopserv": 367, "stopservic": [216, 309], "storag": [3, 9, 30, 43, 46, 50, 53, 75, 103, 128, 134, 138, 141, 184, 216, 228, 231, 274, 308, 314, 318, 322, 330, 331, 333, 337, 339, 343, 356, 359, 362, 364, 404, 427, 588, 590, 591], "storage_opt": [399, 404], "storage_usag": 91, "storageclassnam": 33, "storagespecif": 589, "store": [2, 10, 12, 13, 16, 17, 30, 34, 110, 128, 131, 132, 133, 134, 181, 184, 274, 306, 309, 311, 315, 318, 320, 322, 327, 329, 337, 338, 339, 341, 343, 346, 356, 357, 359, 360, 361, 363, 364, 369, 370, 383, 384, 399, 407, 408, 427, 433, 439, 440, 496, 501, 524, 525, 526, 527, 528, 577, 579, 584, 586, 588, 589, 591, 598, 600, 603], "store_data_path": [329, 331], "store_graphs_to_pvc": 33, "store_to_pvc": 584, "store_typ": [86, 257], "stored_proc_endpoint": 306, "stored_proc_uri": 311, "stored_procedur": [60, 86, 234, 257], "stored_procedure_id": [46, 65, 110], "stored_procedure_id_exampl": 110, "stored_procedure_meta": [111, 288], "stored_procedure_meta_dict": [111, 288], "stored_procedure_meta_form_dict": 288, "stored_procedure_meta_from_dict": 111, "stored_procedure_meta_inst": [111, 288], "storedproc": [46, 110, 128, 132, 314, 316, 319], "storedprocedur": [45, 144, 167], "storedprocedureapi": 46, "storedproceduremeta": [46, 216, 309], "storegcintervalm": 590, "storeproc": 316, "storer": 487, "storetyp": 167, "stori": 336, "storp": 316, "str": [0, 20, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 115, 116, 118, 119, 120, 124, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 296, 299, 300, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 352, 353, 354, 356, 368, 369, 370, 376, 377, 383, 384, 385, 387, 394, 395, 396, 399, 401, 402, 403, 404, 407, 408, 437, 439, 440, 455, 457, 571, 577, 579, 583, 584, 605, 610], "straightforward": [332, 334, 358], "strategi": [4, 9, 10, 12, 16, 24, 131, 134, 328, 339, 341, 342, 343, 350, 362, 365, 370, 429, 430, 431, 434, 435, 580, 593, 608], "stream": [38, 322, 329, 341, 342, 343, 347, 431, 436, 439], "streamlin": [317, 341], "strength": 442, "strict": [311, 590], "strictli": [333, 442, 496], "string": [13, 17, 23, 33, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 128, 129, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 209, 210, 212, 213, 214, 215, 216, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 307, 308, 311, 314, 319, 329, 333, 334, 336, 337, 339, 341, 356, 367, 368, 370, 375, 412, 426, 427, 428, 429, 430, 431, 434, 436, 437, 438, 439, 441, 442, 457, 461, 462, 471, 569, 571, 573, 577, 579, 586, 588, 589, 590, 591, 600, 608, 610], "string_attr": 428, "string_default_max_length": 128, "string_oid": 591, "string_typ": [112, 289], "string_type_dict": [112, 289], "string_type_form_dict": 289, "string_type_from_dict": 112, "string_type_inst": [112, 289], "string_type_str": [113, 290], "string_type_string_dict": [113, 290], "string_type_string_form_dict": 290, "string_type_string_from_dict": 113, "string_type_string_inst": [113, 290], "string_view": 13, "stringtyp": [46, 216, 309], "stringtypestr": [46, 81, 112, 165, 199, 216, 255, 289, 309], "strogatz": 508, "strong": [15, 317, 330, 360], "stronger": [6, 359], "strongli": [6, 36, 45, 332, 336, 343, 431, 516], "struct": [321, 367, 500, 533], "structur": [4, 6, 9, 12, 15, 16, 17, 20, 24, 45, 128, 130, 131, 133, 134, 318, 325, 330, 333, 334, 342, 343, 353, 358, 359, 360, 361, 362, 368, 426, 427, 428, 439, 487, 506, 554, 569, 571, 577, 578, 588, 589, 593], "stub": [125, 127, 313, 365, 371, 373, 506, 534, 537], "stuck": 322, "student": 439, "student_id": 439, "studi": [333, 343, 353, 358, 364, 523, 525], "studio": 36, "studyat": 343, "style": [327, 346, 357, 582], "sub": [4, 12, 14, 18, 343, 346, 356, 369, 429, 431, 589, 594], "sub_graph": [33, 339, 358, 604, 605], "sub_graph2": 605, "sub_vertices_t": 367, "subclass": [356, 367, 577], "subcommand": [36, 45, 348], "subfamili": 480, "subgraph": [0, 6, 9, 17, 33, 319, 328, 343, 344, 346, 358, 359, 360, 368, 390, 396, 425, 431, 433, 439, 440, 442, 453, 456, 478, 489, 520, 577, 588, 604, 608], "subject": 358, "submiss": 37, "submit": [45, 95, 129, 133, 175, 184, 274, 311, 314, 318, 320, 330, 335, 336, 341, 342, 343, 358, 361, 426, 427, 440, 586, 604], "submit_dataloading_job": 46, "submodul": [134, 432, 435, 589], "suboptim": 333, "subprocess": 134, "subproject": 372, "subrang": 377, "subroutin": 316, "subscor": 343, "subscrib": 367, "subscript": [20, 577], "subsequ": [134, 328, 329, 330, 331, 333, 342, 368, 426, 427], "subset": [2, 6, 20, 134, 318, 333, 339, 341, 353, 358, 483, 494, 583, 584], "subset_s": 483, "substitut": 328, "substitution_paramet": 328, "substr": [341, 608], "subtask": 359, "subtract": [337, 341], "subtyp": 131, "succ": 577, "succe": [29, 134], "succeed": 334, "success": [0, 13, 22, 47, 67, 94, 95, 110, 121, 129, 173, 175, 177, 181, 191, 216, 263, 265, 272, 281, 308, 310, 312, 372, 427, 511, 542], "successfulli": [30, 47, 67, 75, 94, 95, 106, 110, 129, 154, 184, 209, 216, 244, 274, 299, 308, 317, 331, 333, 336, 347, 352, 496, 590], "successor": [20, 414, 447, 514, 515, 520, 577], "succinct": [6, 339], "succinctli": 24, "succs_by_loc": 402, "succs_by_nod": 402, "suchun": 336, "sud": 570, "sudo": [46, 308, 432, 601, 602], "sudoku": 578, "suffel": 530, "suffer": [6, 325], "suffic": 9, "suffici": [8, 17, 322, 339, 357, 426], "suffix": [322, 328, 341], "sugar": [332, 339, 344, 361], "suggest": [4, 13, 330, 336, 343, 344, 356, 359, 496], "suit": [4, 36, 325, 331, 347, 362], "suitabl": [13, 131, 357, 364, 427, 431, 437, 496, 590, 593], "sum": [0, 20, 337, 339, 354, 360, 368, 370, 442, 496, 501, 504, 506, 507, 508, 517, 524, 527, 528, 535, 536, 575, 577, 608], "sum_": [368, 442, 510], "sum_k": 510, "summar": [337, 343, 347], "summari": [13, 364, 457], "summat": 527, "super": [356, 368, 427, 431], "superior": [346, 358, 360, 364], "superstep": [6, 16, 17, 24, 370], "supervis": [354, 358, 366, 426, 429, 437, 584, 604], "supplement": 6, "suppli": [6, 322, 339, 526], "support": [0, 3, 4, 6, 9, 10, 12, 13, 17, 18, 20, 22, 24, 29, 32, 34, 37, 43, 46, 47, 67, 75, 94, 95, 106, 110, 121, 128, 129, 131, 132, 134, 184, 216, 263, 274, 308, 309, 314, 315, 318, 319, 320, 322, 325, 328, 329, 330, 332, 333, 334, 338, 339, 343, 344, 345, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 369, 372, 378, 425, 426, 427, 429, 430, 431, 433, 434, 436, 439, 440, 442, 577, 580, 583, 584, 586, 588, 590, 591, 593, 594, 597, 603], "supported_cyph": [315, 318], "suppos": [17, 343, 571, 589], "sure": [13, 23, 27, 30, 41, 45, 126, 129, 314, 315, 317, 319, 331, 333, 336, 343, 431, 435, 437, 584], "survei": [442, 530], "suspici": 357, "sv": 336, "svc": [27, 329], "swagger": 43, "swiftli": 318, "swing": [427, 428], "switch": [6, 12, 23, 34, 126, 129, 134, 216, 308, 314, 315, 333, 342, 360, 534, 537, 589, 590, 597], "sy": [342, 437], "symbol": 131, "symmetr": [504, 523, 546, 550, 556, 558, 569], "symmetri": [542, 549], "symp": 499, "symposium": 517, "sync": [4, 370, 436, 589], "sync_all_": 15, "sync_properti": 589, "synchron": [4, 6, 10, 12, 14, 15, 357, 589], "syncstateonoutervertex": 14, "syncstateonoutervertexastarget": 10, "syntact": [332, 339, 344, 361], "syntax": [334, 337, 339, 341, 350, 361, 369, 431, 577, 583], "synthes": 569, "synthesi": 530, "synthet": 571, "syoov": 598, "system": [3, 6, 8, 9, 12, 24, 30, 31, 33, 34, 36, 37, 43, 128, 132, 134, 154, 173, 175, 181, 184, 191, 209, 216, 314, 315, 316, 317, 318, 322, 325, 329, 330, 332, 333, 334, 337, 338, 339, 343, 344, 345, 346, 349, 357, 359, 360, 361, 362, 363, 365, 426, 427, 432, 435, 574, 576, 586, 588, 589, 590, 592, 594, 600, 608], "systempath": 333, "sz": 589, "t": [2, 6, 8, 13, 17, 23, 29, 30, 32, 33, 36, 37, 38, 41, 128, 130, 308, 310, 314, 317, 321, 322, 329, 339, 341, 343, 354, 355, 356, 359, 365, 367, 368, 370, 372, 378, 425, 430, 431, 437, 441, 442, 455, 471, 506, 508, 510, 530, 534, 535, 569, 571, 574, 577, 583, 590, 592, 609], "tab": 426, "tabl": [13, 128, 134, 320, 328, 334, 339, 343, 347, 356, 365, 425, 427, 439, 584, 586, 588, 589, 591], "table1": 428, "table2": 428, "table3": 428, "table4": 428, "table_1": 427, "table_2": 427, "table_3": 427, "table_4": 427, "table_nam": 130, "table_vec_t": 367, "table\u5305\u542boid": 321, "table\u5305\u62ecsrc\u548cdst\u7684oid": 321, "table\u5408\u5e76\u6210\u4e00\u4e2achunk": 321, "table\u5408\u5e76\u6210\u4e00\u4e2achunk\u4fbf\u4e8e\u540e\u7eed\u8bbf\u95ee": 321, "table\u7684src\u5217\u548cdst\u5217": 321, "table\u7684src\u5217\u548cgid\u5217": 321, "tackl": [359, 360], "tag": [27, 41, 128, 132, 317, 334, 341, 343, 365, 504, 584, 590, 602], "tag1": 343, "tag2": 343, "tag_not_found": 334, "tagclass": 343, "taglin": 129, "tail": [6, 314, 329, 336, 341, 343, 359, 598], "tailor": [128, 333], "tait": 564, "take": [2, 4, 6, 9, 14, 15, 18, 24, 27, 29, 30, 36, 41, 45, 131, 132, 314, 319, 322, 328, 330, 333, 336, 343, 346, 347, 356, 358, 359, 362, 372, 389, 426, 429, 430, 431, 435, 437, 439, 442, 505, 526, 557, 575, 577, 581, 583, 589, 590, 591, 592], "taken": 577, "talk": 583, "tar": [23, 29, 31, 328, 333, 334, 590], "tarbal": 334, "target": [0, 6, 17, 22, 24, 82, 216, 328, 331, 334, 341, 347, 348, 357, 358, 362, 364, 368, 370, 431, 433, 439, 442, 513, 515, 534, 537, 569, 600], "target_degree_typ": 0, "task": [4, 6, 7, 14, 34, 37, 41, 95, 128, 330, 332, 343, 346, 347, 349, 351, 352, 353, 354, 355, 357, 359, 360, 362, 426, 437, 589], "task_count": 427, "task_index": [427, 437], "tau1": 496, "tau2": 496, "taught": [14, 343], "taxicab": [524, 528], "tbf": [37, 326, 365, 585, 596, 599], "tc": [33, 358, 604], "tc_result": 33, "tcp": [338, 354], "teacher": 439, "teacher_id": 439, "teacher_in_charge_id": 439, "technic": [7, 349, 433, 571, 577], "techniqu": [9, 34, 333, 350, 359, 360, 431], "technologi": [4, 327, 330, 363], "telecommun": 569, "tell": 589, "temp_workspac": 134, "temperatur": 352, "templat": [4, 9, 15, 28, 319, 321, 328, 354, 367, 589], "tempor": [81, 114, 165, 201, 255, 291, 337, 341], "temporal_typ": [114, 291], "temporal_type_dict": [114, 291], "temporal_type_form_dict": 291, "temporal_type_from_dict": 114, "temporal_type_inst": [114, 291], "temporal_type_tempor": [115, 292], "temporal_type_temporal_dict": [115, 292], "temporal_type_temporal_form_dict": 292, "temporal_type_temporal_from_dict": 115, "temporal_type_temporal_inst": [115, 292], "temporaltyp": [46, 216, 309], "temporaltypetempor": [46, 81, 114, 165, 201, 216, 255, 291, 309], "temporari": 6, "ten": [318, 333, 360, 364, 429], "tend": [333, 506], "tendenc": [0, 20], "tensor": [347, 350, 367, 368, 369, 408, 425, 429, 433, 435, 581, 583], "tensor_t": 367, "tensorcontext": [367, 369], "tensorcontextdagnod": 369, "tensorcontextwrapp": 367, "tensorflow": [32, 346, 347, 349, 352, 353, 357, 358, 362, 363, 425, 426, 427, 430, 431, 433, 437, 604], "tensors_": 435, "tensorshap": 437, "terfac": 359, "term": [216, 308, 316, 347], "termin": [24, 36, 336], "terminologi": [131, 337], "test": [18, 23, 29, 33, 43, 44, 129, 133, 173, 181, 216, 263, 272, 314, 317, 319, 320, 322, 327, 329, 332, 333, 343, 346, 349, 352, 353, 358, 362, 425, 435, 437, 441, 461, 462, 496, 577, 579, 584, 589, 590, 601, 602, 604, 609], "test_acc": [349, 353, 354, 355, 358, 604], "test_cpp_ut": 432, "test_data": [27, 349, 353, 358, 601, 604], "test_dir": 4, "test_embed": [349, 353, 358, 604], "test_graph": [45, 129, 216, 263, 272, 308, 590], "test_graph_bulk_loading_json": 216, "test_graph_datasourc": [263, 308], "test_graph_def": [263, 272, 308, 590], "test_graph_plann": 334, "test_graph_schema_json": 216, "test_graphar": 588, "test_indic": [349, 353, 358, 604], "test_interact": 45, "test_label": [349, 353, 358, 604], "test_load": [354, 355], "test_loader_master_port": 354, "test_procedur": [272, 308, 314, 319], "test_python_ut": 432, "test_tabl": [425, 609], "testgraphplann": 334, "testingdata": [27, 30, 33, 601, 604], "testprocedur": [181, 184, 216, 308], "tetrahedr": 561, "tetrahedron": [561, 563, 564], "text": [131, 184, 274, 362, 370, 478], "textbook": 14, "textlin": 579, "textp": [341, 608], "textual": 588, "tf": [349, 350, 352, 353, 358, 425, 426, 431, 432, 437, 604, 609], "tf_hh_mm_ss_sss": 131, "tfg": 352, "tgz": 29, "th": [314, 319, 343, 429, 442, 555], "than": [0, 13, 15, 18, 23, 24, 29, 30, 33, 37, 130, 318, 319, 322, 329, 330, 333, 337, 341, 343, 345, 350, 356, 357, 360, 361, 363, 364, 368, 427, 429, 431, 438, 442, 452, 486, 494, 496, 498, 503, 505, 516, 518, 527, 584, 589, 590, 593, 594], "thank": [37, 325, 336, 357], "thei": [4, 6, 20, 24, 27, 30, 31, 128, 130, 311, 325, 330, 336, 339, 341, 343, 346, 352, 357, 360, 362, 364, 425, 426, 434, 439, 483, 491, 496, 524, 526, 527, 570, 571, 577, 583, 584, 586, 589], "them": [0, 1, 2, 6, 8, 12, 14, 15, 17, 24, 27, 30, 33, 34, 36, 41, 128, 129, 216, 306, 308, 317, 322, 325, 330, 333, 337, 341, 343, 352, 357, 358, 360, 362, 364, 365, 366, 377, 425, 428, 437, 482, 569, 583, 589, 590, 600], "themselv": [0, 330, 343, 347, 571], "theorem": [442, 521, 533], "theoret": 20, "theori": [317, 350, 429, 437], "therebi": [4, 318, 339], "therefor": [6, 12, 15, 325, 330, 332, 336, 337, 339, 341, 343, 347, 358, 425, 426, 431, 523, 589, 598], "therein": 339, "thesi": [527, 533], "theta": [524, 527], "thi": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 43, 44, 45, 46, 47, 75, 94, 95, 106, 126, 128, 129, 130, 131, 132, 134, 173, 175, 184, 191, 216, 263, 265, 272, 274, 281, 308, 310, 312, 314, 315, 317, 318, 319, 322, 325, 328, 329, 330, 331, 332, 333, 336, 337, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 367, 368, 369, 370, 386, 399, 402, 417, 425, 426, 427, 429, 430, 431, 432, 433, 435, 437, 439, 442, 459, 473, 474, 475, 476, 477, 478, 483, 486, 488, 489, 496, 497, 498, 500, 501, 504, 505, 506, 508, 510, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 536, 538, 555, 557, 560, 565, 569, 571, 572, 574, 575, 576, 577, 579, 581, 583, 584, 585, 586, 588, 589, 590, 594, 597, 598, 600], "thing": [329, 431, 597], "think": [14, 24], "third": [18, 134, 319, 356, 357, 361, 439, 562, 563], "third_parti": 134, "thorough": [130, 328], "those": [9, 29, 131, 318, 319, 329, 331, 336, 337, 339, 343, 356, 366, 429, 439, 442, 453, 482, 484, 486, 577, 579, 583], "though": [20, 314, 496, 577, 590], "thought": [13, 505], "thousand": 318, "thread": [4, 6, 31, 128, 130, 216, 329, 331, 347, 365, 438], "thread_num": [14, 16], "thread_num_per_work": [128, 134], "threadnum": [17, 600], "three": [0, 6, 10, 12, 14, 18, 30, 34, 38, 41, 128, 129, 131, 319, 333, 334, 343, 356, 357, 359, 364, 365, 372, 426, 429, 430, 431, 434, 435, 436, 437, 442, 471, 476, 483, 559, 564, 573, 577, 590, 594], "threshold": [368, 524, 525, 526, 527], "through": [0, 2, 4, 6, 12, 13, 14, 15, 16, 19, 22, 24, 27, 32, 34, 37, 38, 43, 126, 129, 315, 317, 319, 327, 328, 329, 330, 332, 333, 335, 336, 338, 341, 342, 343, 344, 347, 350, 356, 358, 360, 361, 362, 364, 369, 372, 426, 427, 429, 430, 431, 436, 437, 439, 442, 472, 486, 503, 542, 577, 588, 589], "throughout": [134, 329, 330, 341], "throughput": [128, 318, 320, 328, 330, 357, 363, 364, 590], "throw": [173, 181, 184, 216, 274, 314, 334, 430], "thu": [4, 6, 12, 16, 20, 27, 34, 36, 45, 126, 128, 322, 325, 343, 352, 362, 368, 430, 472, 480, 577, 589], "tian": 600, "ticket": 37, "tid": [14, 16], "tidi": 32, "tier": 574, "tightli": 334, "till": [435, 584], "tillman": [534, 535, 537], "time": [2, 6, 9, 12, 13, 14, 17, 19, 20, 23, 27, 29, 30, 33, 34, 37, 128, 131, 132, 184, 216, 274, 281, 308, 319, 322, 328, 330, 331, 332, 333, 334, 337, 339, 341, 343, 346, 350, 354, 355, 356, 358, 361, 362, 365, 368, 426, 427, 431, 442, 475, 476, 512, 513, 514, 515, 525, 526, 527, 529, 530, 539, 542, 577, 589, 590, 592, 604, 608], "time32": 131, "time_format": 131, "time_stamp_typ": [116, 293], "time_stamp_type_dict": [116, 293], "time_stamp_type_form_dict": 293, "time_stamp_type_from_dict": 116, "time_stamp_type_inst": [116, 293], "time_zone_format": 131, "timefram": [318, 320], "timeout": [128, 322, 331, 332, 590], "timeout_second": [322, 424, 584, 603], "timestamp": [100, 102, 115, 116, 131, 202, 203, 292, 293, 588, 590], "timestamptyp": [46, 216, 309], "timezon": 131, "tinkerpop": [7, 315, 325, 327, 329, 331, 332, 342, 346, 358, 359, 440, 606], "tinkerpop\u540c\u65f6\u652f\u6301java\u8bed\u8a00\u6309\u7c7b\u4f3c\u65b9\u5f0f\u8bbf\u95ee": 608, "tinkerpop\u5b9a\u4e49\u7684\u5c5e\u6027\u56fe\u6a21\u578b\u548cgremlin\u904d\u5386\u67e5\u8be2": 608, "tinkerpop\u89c4\u8303\u7684\u4e3b\u8981\u5dee\u4e00\u70b9": 608, "tinyurl": 584, "tip": [2, 13, 562], "titl": [37, 129, 343, 353, 358], "tmp": [18, 19, 28, 38, 45, 134, 173, 329, 331, 399, 404, 437, 439, 584, 588, 590, 598, 600, 603], "tmp_interactive_workspac": 134, "tmp_table0": 321, "to_datafram": [2, 7, 15, 325, 358, 369, 439, 583, 588, 600], "to_devic": [354, 355], "to_dict": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305], "to_direct": [20, 439, 497, 498, 513, 515, 577], "to_gar": [18, 600], "to_json": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305], "to_networkx_graph": 577, "to_numpi": [16, 17, 22, 368, 369, 439, 583, 600], "to_str": 586, "to_undirect": [20, 439, 513, 515, 577], "to_undirected_class": 577, "to_vineyard_datafram": [369, 583, 600], "to_vineyard_tensor": [369, 583, 600], "toarrowarrai": 367, "tod": [600, 606], "todai": 9, "todatafram": 367, "todo": [37, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 132, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 315, 337, 354, 355, 435], "togeth": [4, 9, 10, 20, 41, 330, 343, 352, 357, 365, 431, 435, 478], "togsgraph": 23, "tojsonstr": 367, "token": [329, 341], "tol": [368, 442, 496], "toler": [0, 333, 368, 442, 496], "tolist": [440, 590], "tom": 608, "tom_cruis": 343, "tondarrai": 367, "too": [314, 318, 329, 343, 364, 427, 496, 577], "tool": [32, 35, 36, 45, 126, 132, 134, 315, 317, 318, 325, 327, 329, 338, 344, 346, 348, 357, 524, 526, 586, 589, 590, 591, 607], "toolchain": [36, 45, 348], "toolsuit": 343, "top": [0, 9, 12, 22, 34, 47, 67, 75, 94, 95, 106, 110, 121, 244, 263, 265, 272, 274, 281, 299, 333, 339, 341, 343, 364, 429, 551, 590, 608], "topic": [6, 7, 332, 349, 358, 368, 590], "topk": [333, 350, 429, 431], "topkpushdownrul": 333, "topo": 428, "topolog": [347, 427], "topologi": [13, 347, 350, 359, 428, 433, 574, 586, 588, 589], "torch": [354, 355], "torch_geometr": [354, 355], "torsten": 570, "toss": 341, "tostr": [154, 216, 334, 367, 591], "tot": 442, "total": [6, 8, 12, 34, 314, 319, 325, 330, 331, 332, 342, 343, 354, 370, 452, 496, 519, 536, 542, 577, 590, 591, 604], "total_edge_count": 259, "total_vertex_count": 259, "totaledgecount": 169, "totalvertexcount": 169, "tovineyarddatafram": 367, "tovineyardtensor": 367, "toward": [22, 333, 590], "towardsdatasci": 360, "trace": [364, 368], "track": 9, "tracker": [425, 437, 609], "trade": [330, 357, 590], "tradit": [6, 330, 333, 336, 338, 339, 362, 554], "traffic": 325, "trail": 341, "train": [325, 336, 347, 349, 350, 351, 357, 358, 363, 364, 366, 427, 430, 431, 433, 434, 437, 441, 584, 604, 609], "train_data": [349, 352, 353, 358, 604], "train_embed": [349, 353, 358, 604], "train_gcn": 604, "train_label": [349, 353, 358, 604], "train_load": [354, 355], "train_loader_master_port": 354, "train_op": 437, "train_sag": 358, "train_supervis": 437, "train_tabl": [425, 609], "trainer": [347, 349, 352, 353, 358, 425, 604, 609], "training_pg_master_port": 354, "trans": [346, 425, 609], "transact": [133, 314, 339, 357, 363, 364, 365, 586, 600], "transfer": [6, 325, 327, 346, 361, 363, 608], "transform": [128, 330, 333, 343, 367, 379, 392, 569, 577, 578, 582, 588], "transit": [346, 546, 574], "translat": [18, 37, 336, 357], "transpar": [8, 357], "transport": 360, "travers": [0, 6, 13, 15, 17, 318, 329, 330, 337, 339, 342, 347, 357, 358, 359, 360, 425, 428, 431, 433, 437, 440, 571, 577, 586, 589, 590, 591, 600, 608], "traversal_sourc": 440, "traversecontext": [17, 600], "treat": [12, 14, 20, 34, 343, 439, 577, 579, 584, 597], "tree": [329, 359, 477, 479, 487, 507, 513, 515, 525, 526, 527, 540, 541, 578, 584, 610], "tri": [322, 325, 352, 361, 506, 512], "triad": 578, "triad_nam": 573, "triadic_censu": 573, "triangl": [6, 33, 333, 343, 358, 361, 368, 442, 539, 543, 547, 551, 563, 578, 600, 604], "triangular": 562, "trie": 571, "trigger": [7, 14, 15, 18, 37, 350, 358, 378, 592], "trigger_tim": 82, "trillion": 9, "tripartit": 483, "tripl": 437, "triplet": [130, 333, 339], "triumph": 318, "trivial": [356, 364, 493], "troubl": 329, "true": [2, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 29, 38, 45, 75, 95, 128, 129, 130, 134, 216, 308, 311, 314, 322, 328, 329, 332, 333, 334, 341, 342, 343, 349, 350, 352, 353, 354, 355, 356, 358, 367, 368, 370, 372, 414, 418, 422, 425, 426, 427, 431, 434, 437, 439, 442, 449, 458, 459, 460, 461, 462, 471, 473, 474, 480, 482, 500, 504, 506, 510, 516, 520, 523, 535, 575, 577, 579, 580, 584, 590, 591, 598, 600, 603, 608, 609, 610], "truncat": [131, 562, 563, 564, 569], "truncated_cub": 562, "truncated_tetrahedron": 563, "trust": [7, 27, 32, 332, 349], "truth": [4, 362], "try": [7, 17, 23, 29, 32, 36, 41, 46, 47, 67, 75, 94, 95, 106, 110, 121, 184, 216, 311, 314, 320, 322, 325, 332, 333, 342, 348, 349, 352, 353, 358, 366, 368, 455, 496, 580, 584, 604], "try_catch_up_with_primari": 590, "try_upload_fil": 311, "tsui_hark": 343, "tue": [550, 559], "tune": [3, 325, 333, 356, 357], "tupl": [20, 343, 356, 426, 427, 428, 437, 439, 442, 461, 462, 471, 483, 524, 528, 534, 573, 577, 579, 584], "tur": 557, "turan": 494, "turn": [17, 318, 322, 336, 365, 372, 571, 598], "tutori": [7, 8, 12, 14, 24, 29, 329, 331, 332, 340, 346, 351, 356, 358, 360, 362, 437, 526, 594], "tutt": 564, "tvnum": 321, "tvnums_": 321, "twenti": 525, "twice": [20, 555, 577], "twitter": [19, 365], "two": [0, 2, 6, 9, 13, 16, 17, 18, 19, 29, 37, 128, 131, 134, 314, 318, 322, 325, 329, 330, 333, 334, 336, 337, 339, 341, 343, 347, 348, 356, 358, 360, 361, 362, 364, 365, 425, 426, 427, 428, 429, 431, 433, 435, 437, 439, 442, 448, 471, 478, 479, 481, 483, 484, 488, 505, 516, 517, 524, 525, 526, 527, 528, 532, 534, 537, 538, 543, 544, 552, 570, 571, 576, 577, 588, 589, 590, 597, 604], "txn": 314, "txt": [4, 31, 35, 328, 600], "type": [1, 3, 4, 6, 9, 12, 13, 15, 16, 18, 19, 20, 27, 29, 30, 33, 34, 36, 37, 38, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 308, 311, 314, 315, 317, 318, 319, 325, 329, 330, 331, 333, 334, 336, 338, 339, 341, 343, 347, 350, 352, 353, 354, 355, 357, 358, 360, 361, 362, 365, 367, 368, 369, 375, 376, 378, 379, 383, 384, 387, 388, 391, 392, 394, 395, 396, 397, 398, 399, 401, 402, 404, 407, 408, 412, 418, 420, 425, 427, 428, 429, 430, 431, 434, 435, 436, 437, 439, 440, 441, 442, 447, 448, 451, 453, 456, 457, 459, 461, 462, 465, 466, 467, 470, 471, 472, 475, 476, 477, 479, 480, 482, 483, 484, 486, 487, 489, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 578, 579, 581, 582, 584, 586, 589, 590, 592, 601, 604, 609], "type_id": [85, 93, 252, 256, 262, 304], "type_inference_fail": 334, "type_nam": [45, 46, 48, 52, 59, 66, 67, 69, 72, 85, 93, 94, 124, 129, 130, 131, 173, 216, 226, 230, 233, 240, 252, 256, 262, 263, 272, 302, 304, 308, 311, 590], "type_name_exampl": [67, 94], "type_pb2": [397, 398, 402], "type_triplet": [45, 76, 129, 130, 173, 216, 246, 263, 308], "typed_valu": [117, 294], "typed_value_dict": [117, 294], "typed_value_form_dict": 294, "typed_value_from_dict": 117, "typed_value_inst": [117, 294], "typedarrai": 367, "typedvalu": [46, 183, 184, 216, 273, 274, 309], "typeenum": [181, 216, 314], "typeerror": [376, 412, 584], "typeid": [162, 166, 172, 214], "typenam": [15, 16, 136, 140, 143, 150, 162, 166, 172, 212, 214, 321, 367], "types_pb2": [412, 577], "typetriplet": 156, "typic": [9, 24, 45, 126, 128, 318, 325, 339, 341, 343, 357, 360, 361, 364, 426, 431, 506, 577, 583, 589], "typo": 37, "tzf_offset": 131, "tzf_utc": 131, "u": [0, 6, 14, 16, 18, 20, 37, 314, 321, 322, 339, 343, 356, 358, 368, 431, 435, 437, 439, 442, 448, 471, 483, 496, 510, 516, 519, 524, 527, 539, 577, 589, 597, 600, 610], "u2i": 431, "u_dist": [18, 321, 600], "u_master_partit": 589, "u_nod": 428, "u_of_edg": 577, "ubuntu": [32, 134, 317, 322, 329, 332, 432, 601, 603, 607], "udf": [18, 375, 583, 600], "ueri": 429, "ui_decod": 427, "uiliti": 391, "uint32": [131, 337], "uint32_t": [13, 367, 439], "uint64": [337, 418, 439, 584], "uint64_t": [13, 16, 439, 586], "uint8_t": 13, "ulong": 33, "ulrik": 499, "unaccept": 330, "unaddress": 337, "unambigu": 439, "unari": 341, "unavail": [173, 263, 334], "unbind": 67, "unbind_edge_datasourc": 46, "unbind_vertex_datasourc": 46, "unchang": 6, "unclear": [497, 498], "uncom": 308, "uncommon": 37, "uncompress": 579, "unconfigur": 128, "uncov": 360, "undefin": 589, "under": [0, 9, 10, 14, 17, 24, 38, 45, 126, 128, 131, 318, 328, 333, 334, 343, 349, 356, 357, 368, 372, 431, 433, 434, 442, 589], "undergo": 362, "underli": [9, 43, 325, 330, 333, 343, 359, 433, 589], "understand": [43, 44, 129, 130, 133, 314, 343, 350, 361, 425, 431, 439, 589], "undirect": [20, 131, 356, 362, 368, 388, 427, 431, 439, 442, 448, 452, 474, 497, 498, 504, 506, 513, 515, 518, 520, 521, 522, 524, 525, 526, 527, 528, 534, 539, 543, 544, 547, 550, 551, 553, 559, 572, 574, 577, 591], "unequ": 341, "unexpect": 329, "unfamiliar": 37, "unfold": [337, 343, 368], "unforeseen": 134, "unfreez": 455, "unfrozen_graph": 455, "unifi": [12, 34, 43, 325, 327, 330, 333, 426, 586, 590], "uniform": [512, 524, 533], "uniform_random_intersection_graph": [531, 532], "uniformli": [347, 514, 515, 516, 524, 525, 526, 527, 528, 572], "uninstal": [126, 315, 322, 329, 603], "union": [6, 439, 505, 605], "uniontravers": 341, "uniqu": [13, 130, 131, 216, 308, 319, 330, 336, 337, 339, 341, 356, 357, 358, 359, 368, 416, 417, 426, 430, 435, 436, 439, 442, 544, 550, 583, 590, 591], "unique_ptr": 367, "unit": [4, 330, 343, 361, 435, 525, 526, 527, 590], "unittest": 602, "univers": [343, 357, 442, 475, 476, 523, 533, 565, 569], "university1": 343, "university2": 343, "unix": [588, 603], "unknown": [334, 486, 589], "unlabel": 0, "unless": [360, 429, 577], "unlik": [14, 17, 338, 347, 350, 357, 577], "unlimit": 131, "unload": [368, 391, 409, 411], "unnecessari": [2, 6, 9, 343, 589], "unpack": [20, 342, 367, 577], "unregist": 584, "unrol": 341, "unsatur": 534, "unseen": [356, 362, 592], "unset": 337, "unsign": 368, "unsigned_int32": [165, 180], "unsigned_int64": [165, 180], "unspecifi": [439, 454], "unsqueez": 355, "unstructur": 362, "unsupervis": [350, 352, 366, 425, 431, 433, 434, 584], "unsupervised_softmax_cross_entropy_loss": 352, "unsupport": [337, 339, 341], "unsupported_oper": 134, "unsur": [331, 336], "untar": 329, "until": [6, 9, 14, 17, 24, 27, 30, 134, 216, 308, 333, 341, 343, 362, 436, 496, 519, 590, 608], "unus": 590, "unweight": [368, 442], "unzip": [29, 315, 328, 333, 335, 336, 342, 608], "up": [6, 13, 20, 23, 37, 126, 134, 315, 336, 341, 343, 346, 348, 350, 363, 370, 435, 438, 476, 480, 504, 571, 589, 590, 607], "upcom": [330, 333], "updat": [6, 9, 12, 14, 15, 17, 20, 24, 27, 29, 32, 34, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 134, 154, 181, 209, 216, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 309, 311, 314, 341, 346, 347, 357, 360, 362, 364, 432, 435, 577, 586, 590, 600, 601], "update_alert_message_in_batch": 46, "update_alert_message_status_request": [47, 118], "update_alert_message_status_request_dict": 118, "update_alert_message_status_request_from_dict": 118, "update_alert_message_status_request_inst": 118, "update_alert_receiver_by_id": 46, "update_alert_rule_by_id": 46, "update_edg": 311, "update_edge_typ": [263, 311], "update_proc_req": 272, "update_procedur": [272, 311], "update_procedure_request": [272, 295], "update_procedure_request_dict": 295, "update_procedure_request_form_dict": 295, "update_procedure_request_inst": 295, "update_stored_proc_request": [110, 119], "update_stored_proc_request_dict": 119, "update_stored_proc_request_from_dict": 119, "update_stored_proc_request_inst": 119, "update_stored_procedure_by_id": 46, "update_tim": 260, "update_vertex": 311, "update_vertex_typ": [263, 311], "updatealertmessagestatusrequest": [46, 47], "updateedg": [216, 309], "updateedgerequest": 154, "updateedgerespons": 154, "updateedgetyp": 309, "updateprocedur": [216, 309], "updateprocedurerequest": [181, 216, 272, 309, 311], "updater": 181, "updatestoredprocrequest": [46, 110], "updatetim": 170, "updatetransact": [134, 314], "updatevertex": [216, 309], "updatevertexrequest": 209, "updatevertexrespons": 209, "updatevertextyp": 309, "upgrad": [7, 23, 32, 332, 349, 607], "upload": [23, 45, 46, 121, 129, 130, 311, 314, 329], "upload_and_replace_input_inplac": 311, "upload_fil": [46, 311], "upload_file_respons": [120, 121, 296], "upload_file_response_dict": [120, 296], "upload_file_response_form_dict": 296, "upload_file_response_from_dict": 120, "upload_file_response_inst": [120, 296], "uploadfilerespons": [46, 121, 216, 309, 311], "upon": [1, 2, 9, 14, 132, 308, 318, 337, 364, 439, 590, 591], "upper": [330, 341, 343, 347, 361, 496, 589], "upstream": [37, 431], "uref": 589, "uri": [46, 47, 67, 75, 94, 95, 106, 110, 121, 134, 154, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 274, 281, 299, 309, 311, 334, 335, 356, 439, 588, 610], "urisyntaxexcept": 314, "url": [23, 29, 96, 177, 267, 331, 439, 440, 608], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 24, 28, 29, 30, 31, 33, 35, 36, 37, 38, 41, 45, 46, 50, 53, 126, 128, 130, 131, 134, 138, 141, 154, 209, 228, 231, 306, 308, 311, 314, 315, 316, 317, 318, 319, 320, 322, 325, 328, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 377, 378, 402, 403, 412, 417, 425, 426, 427, 428, 429, 431, 433, 436, 438, 439, 440, 441, 442, 461, 462, 471, 483, 486, 490, 496, 497, 498, 504, 506, 510, 511, 513, 515, 517, 518, 519, 520, 523, 524, 525, 526, 527, 528, 534, 538, 542, 555, 560, 569, 571, 574, 575, 577, 579, 580, 582, 584, 588, 589, 590, 592, 593, 594, 597, 598, 600, 604, 610], "usa": [442, 529, 530, 576], "usag": [7, 17, 29, 31, 32, 36, 37, 44, 75, 102, 132, 133, 317, 334, 341, 343, 344, 348, 349, 350, 369, 428, 429, 430, 434, 439, 496, 577, 584, 590, 591], "use_mmap_vector": [130, 280], "use_perfect_hash": [13, 367, 418, 439, 584], "use_pthash": 134, "usemmapvector": 190, "user": [0, 2, 4, 6, 9, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 27, 29, 31, 34, 37, 41, 43, 46, 128, 129, 130, 131, 133, 308, 309, 314, 315, 317, 318, 319, 322, 327, 328, 330, 333, 334, 336, 337, 339, 341, 343, 346, 350, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 425, 427, 428, 429, 430, 431, 432, 434, 437, 440, 577, 583, 584, 586, 589, 593, 604, 607, 608], "user_node_decod": 426, "usernam": [331, 590], "usr": [4, 590], "usual": [4, 9, 13, 19, 27, 38, 39, 322, 325, 330, 336, 341, 343, 347, 350, 351, 352, 362, 431, 435, 438, 505, 528, 571, 577, 589, 591, 592], "utf": 579, "utf_8": 334, "util": [2, 4, 6, 9, 15, 32, 36, 41, 43, 45, 128, 131, 133, 134, 181, 307, 314, 318, 319, 333, 334, 337, 338, 343, 346, 348, 353, 356, 357, 359, 360, 363, 367, 368, 370, 441, 542, 588, 589, 590, 593], "utilsapi": 46, "uu": 510, "uv": [442, 510], "uv_decod": 427, "uw": 442, "v": [0, 2, 6, 7, 9, 10, 13, 14, 15, 18, 20, 22, 24, 33, 37, 45, 216, 244, 299, 321, 325, 332, 337, 339, 342, 343, 350, 358, 361, 362, 367, 368, 369, 370, 425, 428, 429, 430, 431, 434, 437, 439, 440, 441, 442, 448, 471, 496, 499, 504, 506, 510, 516, 519, 524, 527, 534, 537, 539, 571, 577, 583, 584, 588, 589, 590, 600, 604, 608, 609], "v0": [128, 317, 365, 432, 580], "v1": [27, 33, 35, 46, 47, 67, 75, 94, 95, 106, 110, 121, 134, 154, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 274, 281, 299, 309, 322, 341, 343, 349, 352, 353, 354, 358, 361, 425, 542, 555, 580, 603, 604, 609], "v10": 365, "v100": 365, "v2": [341, 343, 349, 361, 425, 555, 609], "v3": [31, 361, 365], "v4": 365, "v6d": [30, 31, 329, 356, 584], "v6d_ldbc_loader": 329, "v6d_modern_load": [329, 331], "v6d_object_id": 331, "v7": 365, "v_0": 580, "v_1": 580, "v_current": 542, "v_dist": [18, 600], "v_label": [321, 367, 586], "v_label_id": [18, 370, 600], "v_label_num": [18, 591, 600], "v_of_edg": 577, "v_offset": 321, "v_prop": [22, 367, 401], "v_res_typ": 15, "v_type": 15, "vada": 341, "val": [349, 352, 353, 358, 425, 441, 584, 604, 609], "val_tabl": [425, 609], "valenc": [509, 511], "valid": [37, 134, 311, 319, 328, 330, 333, 352, 353, 362, 375, 425, 472, 496, 518, 524, 573, 584, 586], "valu": [0, 6, 9, 13, 15, 18, 20, 24, 29, 36, 117, 128, 130, 131, 137, 138, 147, 152, 153, 154, 165, 167, 170, 177, 180, 182, 184, 187, 188, 194, 198, 204, 209, 210, 242, 243, 244, 269, 274, 294, 299, 300, 307, 310, 311, 314, 319, 321, 322, 329, 330, 332, 333, 334, 337, 347, 352, 354, 356, 360, 362, 367, 368, 369, 370, 403, 412, 424, 425, 427, 428, 429, 430, 431, 434, 436, 437, 438, 439, 441, 442, 451, 471, 486, 496, 524, 525, 526, 527, 534, 536, 537, 569, 570, 571, 577, 579, 580, 583, 584, 586, 588, 589, 590, 591, 600, 608, 609, 610], "valuabl": 362, "value1": [209, 299, 329, 356, 610], "value2": [209, 299, 329], "value_t": 15, "value_typ": 367, "valueerror": [368, 424, 439, 442, 516, 573, 584], "valuefrom": 354, "valuegett": 321, "valuemap": 608, "valuetotre": 334, "var": [23, 33, 38, 322, 356, 437, 590, 598, 610], "var_char": [113, 122, 131, 290, 297], "var_char_dict": [122, 297], "var_char_form_dict": 297, "var_char_from_dict": 122, "var_char_inst": [122, 297], "var_char_var_char": [123, 298], "var_char_var_char_dict": [123, 298], "var_char_var_char_form_dict": 298, "var_char_var_char_from_dict": 123, "var_char_var_char_inst": [123, 298], "var_properti": [54, 232, 247, 248], "var_schema": [60, 86, 234, 257], "varaibl": 439, "varchar": [46, 200, 216, 309], "varcharvarchar": [46, 113, 122, 200, 207, 216, 290, 297, 309], "vari": [360, 426], "variabl": [16, 29, 33, 39, 41, 131, 216, 306, 308, 314, 317, 319, 322, 331, 341, 375, 496, 584, 590, 591, 603], "variable_scop": 437, "varianc": 499, "variant": [0, 31, 362, 365, 439], "varieti": [6, 12, 34, 325, 328, 357, 364, 402], "varint": [13, 439], "variou": [3, 4, 8, 12, 14, 15, 20, 24, 30, 34, 38, 41, 128, 132, 134, 318, 328, 330, 333, 334, 339, 343, 346, 347, 357, 358, 359, 360, 362, 363, 389, 439, 542, 589, 594], "vast": 342, "vcut": 593, "vd": 23, "vd_type": [18, 370, 375, 600], "vdata": 22, "vdata_t": 367, "ve": [37, 329, 335, 342, 357], "vec": 321, "vec_build": 321, "vector": [9, 321, 347, 353, 358, 362, 367, 370, 425, 433, 435, 442, 524, 528], "venu": [349, 358], "venv": [23, 332, 358], "verbos": [17, 23, 38, 128, 322, 598], "verbose_level": 128, "veri": [7, 13, 32, 129, 325, 330, 332, 343, 346, 349, 356, 358, 362, 427, 429, 600], "verif": [281, 330, 357], "verifi": [9, 27, 38, 281, 325, 329, 331, 333, 337, 365, 431], "verlag": 521, "versa": [10, 524], "versatil": [318, 328, 363, 589], "version": [6, 15, 17, 18, 20, 23, 27, 29, 37, 46, 103, 128, 131, 132, 167, 216, 257, 317, 322, 332, 333, 336, 339, 341, 342, 349, 357, 359, 364, 365, 368, 432, 439, 497, 498, 513, 515, 528, 534, 555, 577, 586, 588, 589, 590, 597, 600, 603], "versu": 314, "vertex": [0, 2, 3, 4, 6, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 30, 33, 34, 46, 67, 94, 129, 131, 134, 152, 153, 154, 157, 158, 209, 216, 242, 243, 244, 247, 248, 263, 299, 308, 309, 311, 314, 319, 321, 329, 337, 339, 341, 345, 346, 347, 350, 357, 358, 359, 360, 361, 362, 365, 367, 368, 369, 370, 375, 396, 426, 427, 428, 429, 430, 431, 434, 437, 439, 441, 442, 516, 521, 538, 539, 555, 580, 582, 586, 588, 590, 591, 594, 600, 605], "vertex2gid": 367, "vertex_array_t": [16, 367], "vertex_bal": 593, "vertex_collect": 400, "vertex_data": [15, 16, 300, 368, 376], "vertex_data_dict": 300, "vertex_data_form_dict": 300, "vertex_data_inst": 300, "vertex_data_t": 591, "vertex_edge_request": [299, 301, 311, 590], "vertex_edge_request_dict": 301, "vertex_edge_request_form_dict": 301, "vertex_edge_request_inst": 301, "vertex_id": [13, 24, 325, 356, 610], "vertex_label": [13, 319, 367, 370], "vertex_label_id": 370, "vertex_label_nam": [319, 370], "vertex_label_num": [18, 314, 370, 586, 591, 600], "vertex_label_num_": 321, "vertex_map": [4, 13, 45, 105, 124, 129, 130, 173, 216, 263, 276, 302, 308, 311, 418, 439, 584], "vertex_map_id": 367, "vertex_map_t": [321, 367], "vertex_mapping_dict": [124, 302], "vertex_mapping_form_dict": 302, "vertex_mapping_from_dict": 124, "vertex_mapping_inst": [124, 302], "vertex_or_edge_label_list": 389, "vertex_pk": 319, "vertex_prop_id": 367, "vertex_properti": [367, 368, 370], "vertex_property_id": 370, "vertex_property_nam": [370, 589], "vertex_property_num": 370, "vertex_rang": [15, 369, 383, 384, 394, 395, 399, 407, 408, 439, 583], "vertex_range_t": [321, 367], "vertex_request": [299, 301, 303, 311, 590], "vertex_request_dict": 303, "vertex_request_form_dict": 303, "vertex_request_inst": 303, "vertex_statist": 304, "vertex_statistics_dict": 304, "vertex_statistics_form_dict": 304, "vertex_statistics_inst": 304, "vertex_t": [14, 16, 321, 367], "vertex_tables_": [13, 321], "vertex_tables_columns_": 321, "vertex_typ": [45, 62, 87, 129, 131, 173, 216, 236, 258, 263, 272, 308, 590], "vertex_type_nam": 263, "vertex_type_pair_rel": [45, 48, 59, 85, 129, 131, 173, 216, 226, 233, 256, 263, 272, 308, 590], "vertex_type_pair_statist": [252, 305], "vertex_type_pair_statistics_dict": 305, "vertex_type_pair_statistics_form_dict": 305, "vertex_type_pair_statistics_inst": 305, "vertex_type_request": 263, "vertex_type_statist": 259, "vertexapi": [216, 309], "vertexarrai": [17, 367, 370, 600], "vertexcut": 589, "vertexdata": [209, 216, 299, 309, 311], "vertexdatacontext": [16, 17, 367, 442, 600], "vertexdatacontextdagnod": [368, 369], "vertexdatacontextwrapp": 367, "vertexedgerequest": [209, 216, 299, 309, 311, 590], "vertexhandl": 589, "vertexid": 341, "vertexinputformat": 22, "vertexlabel": 389, "vertexlist": 589, "vertexmap": [6, 13, 15, 46, 105, 186, 216, 276, 309, 321], "vertexpropertycontext": [367, 600], "vertexpropertycontextdagnod": [368, 369], "vertexrang": [367, 370], "vertexrequest": [209, 211, 216, 299, 301, 309, 590], "vertexstatist": [169, 216, 259, 309], "vertexsubset": [6, 15], "vertextyp": [146, 168], "vertextypepairrel": [136, 143, 166], "vertextypepairstatist": [162, 216, 252, 309], "vertextypestatist": 169, "vertic": [0, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 33, 45, 68, 129, 130, 131, 173, 263, 311, 314, 318, 319, 321, 329, 330, 332, 333, 337, 339, 341, 347, 350, 357, 358, 360, 361, 362, 367, 368, 369, 370, 398, 426, 427, 428, 429, 430, 431, 434, 437, 439, 500, 511, 521, 523, 538, 539, 550, 552, 563, 564, 570, 583, 584, 586, 588, 589, 590, 591, 600, 604, 605], "vertices_t": 367, "vespignani": 368, "vfile": [367, 591], "vfilepath": 23, "vformat": [22, 439], "via": [12, 14, 17, 18, 20, 22, 23, 24, 27, 32, 43, 46, 128, 134, 216, 308, 314, 315, 317, 318, 322, 329, 333, 334, 337, 338, 339, 341, 344, 345, 346, 357, 359, 361, 364, 367, 478, 489, 496, 572, 575, 577, 590, 594, 600], "vice": [10, 524], "vid": [321, 367, 439], "vid_array_t": [321, 367], "vid_field": [336, 356, 439, 605], "vid_parser_": 321, "vid_t": [13, 15, 16, 321, 367], "vid_t_": 367, "vid_typ": [13, 33, 367, 418, 439, 584], "view": [13, 20, 24, 45, 126, 315, 320, 356, 357, 388, 450, 454, 473, 474, 577, 580, 586, 598], "view_typ": 388, "vineyard": [13, 15, 16, 23, 28, 31, 33, 321, 322, 327, 329, 339, 346, 351, 352, 357, 363, 364, 367, 369, 399, 404, 407, 408, 439, 440, 584, 589, 590, 598, 600, 603, 604, 605, 608, 610], "vineyard_deploy": 30, "vineyard_id": [30, 33, 439, 598], "vineyard_ipc_socket": [331, 591], "vineyard_rpc_endpoint": 367, "vineyard_shared_mem": [27, 322, 354, 424, 584, 603], "vineyard_socket": 367, "vineyardctl": [30, 584], "vineyardd": [30, 33, 331], "vineyardmemori": 23, "vineyardserv": 367, "vineyardsock": 23, "violat": [334, 476], "virtu": 442, "virtual": [6, 9, 23, 131, 308, 332, 336, 358, 367, 435, 436], "virtualenv": [23, 308], "visibl": [322, 370], "visit": [12, 29, 126, 314, 315, 336, 343, 361, 426], "visual": [36, 37, 318, 357], "vital": 37, "vj": 555, "vk": 555, "vl": 589, "vlabel": 591, "vladimir": 442, "vldb": [9, 600, 606], "vldb2017": 606, "vldb2020": 606, "vldb2021": 359, "vli": 589, "vm": [27, 30, 367], "vm_ptr_": 321, "vnum": 321, "voderank": 34, "void": [9, 14, 15, 16, 17, 24, 154, 173, 175, 181, 184, 191, 209, 216, 314, 321, 334, 367, 586, 589, 591, 600], "vol": [531, 574], "volum": [322, 329, 342, 354, 500, 501, 502, 512, 521, 566, 584, 589], "volumemount": 354, "vote": [0, 370], "vote_to_halt": [18, 370, 600], "voterank": [368, 600], "votetohalt": 24, "vpl": 589, "vprop": 589, "vr2fg": 30, "vref": 589, "vscode": 45, "vset_t": 15, "vsize": [6, 15], "vtype": 589, "vw": 442, "w": [9, 134, 342, 368, 442, 504, 510, 524, 527, 529, 534, 537, 539, 567, 577, 579, 590, 608], "w2": 555, "w4": 561, "w_": [368, 442, 510], "w_0": 510, "w_1": 510, "w_k": 510, "w_u": [510, 524, 527], "w_v": [510, 524, 527], "wa": [24, 29, 30, 37, 94, 306, 334, 341, 343, 359, 365, 431, 442, 496, 511, 524, 525, 526, 527, 576, 590], "wagner": 499, "wai": [0, 1, 4, 6, 10, 14, 20, 29, 36, 37, 45, 131, 318, 319, 322, 325, 329, 330, 339, 342, 346, 359, 361, 362, 429, 431, 433, 435, 442, 496, 562, 569, 571, 577, 584, 588, 589, 591], "wait": [27, 128, 129, 177, 216, 308, 322, 333, 584], "wait_for_clos": [427, 437], "wal": [128, 134, 359, 586], "wal_uri": 128, "walk": [2, 4, 32, 126, 129, 315, 329, 343, 357, 358, 361, 431, 478, 489], "wall": 343, "wang": [343, 509, 511], "want": [4, 6, 7, 18, 20, 22, 27, 29, 30, 32, 33, 45, 126, 128, 173, 216, 308, 314, 315, 317, 328, 339, 343, 349, 356, 363, 372, 378, 424, 435, 439, 486, 520, 577, 583, 584, 586, 588, 590, 597], "warehous": 2, "warn": [38, 128, 577], "warshal": 442, "wasserman": 0, "watt": [497, 498, 508], "waw": [510, 524], "waxman": 528, "wayn": 567, "wcc": [2, 13, 365, 368, 600, 605], "wcc_result": 2, "wco": 333, "wd": 505, "we": [0, 2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 41, 45, 126, 128, 129, 130, 131, 134, 154, 184, 209, 216, 274, 308, 309, 314, 315, 317, 318, 319, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 343, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 369, 372, 376, 378, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 440, 480, 494, 496, 506, 508, 534, 555, 577, 580, 583, 584, 588, 589, 590, 592, 594, 604, 610], "weakli": [0, 368, 442, 516], "web": [325, 334, 368, 442, 510, 524, 529, 570], "web_docu": 442, "webhook_url": [56, 83], "websit": [329, 360, 496], "websocket": [339, 608], "webui": 357, "weigh": 362, "weight": [0, 7, 19, 20, 33, 45, 129, 130, 154, 173, 216, 244, 263, 272, 308, 321, 341, 343, 350, 358, 360, 365, 368, 397, 425, 427, 428, 429, 430, 431, 434, 437, 439, 442, 444, 445, 446, 450, 461, 462, 504, 516, 520, 524, 527, 567, 575, 576, 577, 579, 584, 590, 609], "weight0": 439, "weight1": 439, "weisstein": 529, "welcom": [37, 315], "well": [4, 6, 8, 9, 12, 13, 18, 20, 27, 29, 34, 131, 317, 328, 330, 333, 336, 339, 346, 347, 356, 358, 359, 360, 361, 362, 366, 431, 439, 447, 480, 528, 577, 586, 590, 593, 594, 598], "wenfei": 600, "wenyuan": 600, "were": [34, 37, 343, 365, 528], "wf": 0, "wget": [19, 22, 23, 29, 35, 129, 308, 315, 335, 432, 608], "what": [126, 128, 315, 322, 329, 343, 344, 361, 436, 523, 577, 583, 589], "wheel": [32, 322, 495, 561, 603, 606], "when": [2, 4, 6, 9, 10, 13, 20, 23, 24, 27, 29, 30, 31, 37, 46, 47, 67, 75, 94, 95, 106, 110, 121, 128, 130, 131, 134, 216, 308, 314, 317, 318, 319, 322, 325, 329, 330, 333, 336, 337, 341, 342, 343, 347, 350, 352, 357, 359, 360, 362, 364, 365, 368, 369, 370, 378, 412, 418, 426, 427, 428, 429, 430, 431, 434, 435, 436, 438, 439, 441, 442, 486, 496, 516, 524, 525, 526, 527, 533, 577, 579, 580, 584, 586, 588, 589, 590, 592, 597, 598], "where": [0, 2, 6, 12, 13, 14, 18, 24, 37, 38, 41, 128, 131, 134, 314, 317, 319, 322, 333, 334, 336, 337, 339, 346, 347, 356, 357, 358, 361, 362, 364, 368, 412, 426, 427, 429, 431, 435, 442, 452, 459, 477, 506, 510, 512, 521, 524, 525, 526, 527, 555, 577, 584, 589, 590, 597, 604, 608], "wherea": [325, 496, 589], "wheretravers": 341, "wherev": 333, "whether": [0, 37, 130, 134, 307, 310, 312, 329, 330, 333, 334, 341, 343, 356, 357, 361, 367, 368, 426, 427, 431, 439, 499, 501, 504, 524, 535, 536, 577, 588, 589, 590, 591], "which": [0, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 38, 41, 45, 128, 129, 130, 131, 134, 136, 143, 166, 216, 226, 233, 256, 281, 308, 314, 317, 318, 319, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 364, 365, 367, 368, 370, 372, 376, 379, 392, 401, 403, 425, 426, 427, 428, 429, 430, 431, 433, 435, 436, 437, 439, 440, 441, 442, 456, 481, 483, 496, 497, 498, 506, 508, 525, 526, 527, 534, 536, 537, 555, 567, 569, 571, 575, 576, 577, 579, 580, 581, 583, 584, 586, 588, 589, 590, 591, 592, 594, 597], "while": [4, 6, 12, 19, 20, 29, 34, 126, 130, 131, 132, 216, 281, 308, 318, 319, 325, 328, 329, 333, 334, 335, 337, 339, 341, 342, 343, 347, 357, 359, 360, 361, 363, 364, 426, 431, 437, 473, 474, 534, 537, 539, 571, 577, 586, 589, 590, 598], "whitespac": 579, "whl": [31, 432, 435], "who": [0, 11, 29, 318, 333, 343, 357, 361, 432, 437], "whole": [6, 9, 12, 24, 34, 318, 329, 330, 343, 347, 357, 359, 361, 362, 433, 588, 590, 593], "whose": [9, 24, 311, 336, 343, 429, 431, 442, 447, 467, 549, 553, 569, 571, 572, 588, 589], "why": [37, 322, 343, 368], "wide": [0, 11, 12, 24, 332, 334, 345, 346, 350, 357, 358, 360, 361, 362, 364, 429, 588, 594], "widendeepencod": [425, 609], "wider": 589, "width": 451, "wife_of": 336, "wiki": [360, 368, 539, 543, 544, 545, 546, 548, 549, 550, 556, 557, 558, 559, 561, 562, 563, 564], "wikipedia": [316, 360, 368, 539, 543, 544, 545, 546, 548, 549, 550, 556, 557, 558, 559, 561, 562, 563, 564, 570], "willing": 592, "wilson": [475, 476], "win": [550, 559], "windmil": 505, "window": [36, 343, 607], "wire": 496, "wish": [32, 37, 315], "with_cyph": [358, 584], "with_data": 449, "with_dataset": [352, 354, 424, 584, 610], "with_edge_label": 589, "with_label": 19, "with_mar": [424, 584], "with_vertex_label": 589, "within": [0, 13, 30, 36, 128, 130, 131, 134, 318, 319, 320, 333, 336, 337, 339, 341, 342, 343, 348, 357, 358, 359, 360, 361, 362, 431, 440, 442, 496, 499, 500, 520, 526, 527, 584, 589, 598, 604, 608], "without": [2, 4, 6, 9, 14, 22, 27, 29, 30, 34, 37, 128, 281, 329, 333, 339, 341, 357, 359, 364, 372, 385, 426, 428, 429, 430, 431, 452, 489, 503, 510, 516, 517, 524, 525, 526, 527, 528, 577, 580, 584, 589, 590, 592, 608], "withremot": 342, "wiuf": 519, "wj": 555, "wk": 555, "wn2898": 577, "wolfram": [529, 538, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 557], "women": 565, "won": [128, 431, 592], "wonder": 329, "word": [37, 343, 353, 358, 361, 362, 437, 439, 577], "word2vec": [353, 358, 604], "work": [4, 8, 11, 14, 18, 20, 32, 34, 36, 37, 41, 45, 131, 306, 325, 329, 330, 332, 334, 341, 346, 350, 356, 357, 358, 359, 360, 361, 362, 367, 369, 429, 431, 439, 576, 577, 583, 592], "workabl": 336, "workaround": 322, "workat": 343, "workdir": 31, "worker": [4, 9, 13, 14, 23, 28, 34, 128, 134, 331, 339, 350, 352, 354, 427, 430, 437, 584, 588], "worker_concurr": [354, 355], "worker_count": 441, "worker_devic": [354, 355], "worker_handl": 367, "worker_host": 427, "worker_id": 367, "worker_num": 339, "worker_opt": [354, 355], "workflow": [37, 45, 134, 325, 357, 362, 363, 367, 590], "workload": [27, 36, 318, 325, 327, 330, 331, 333, 339, 340, 343, 346, 357, 359, 365, 590, 592, 593], "workload_typ": [354, 355], "workspac": [134, 354], "world": [6, 9, 13, 325, 333, 341, 343, 357, 358, 360, 367, 442, 497, 498, 524], "world_siz": 354, "worri": 343, "worst": [333, 361], "worth": [339, 353, 431, 439, 577], "would": [2, 4, 20, 29, 31, 36, 37, 41, 45, 131, 322, 328, 331, 336, 343, 357, 367, 368, 431, 437, 580, 583, 584, 590], "wrap": [4, 310, 356, 359, 367, 372], "wrapper": [4, 334, 335, 342, 344, 346, 361, 367, 380, 386, 439, 440, 589], "writabl": 22, "write": [6, 8, 9, 12, 15, 17, 22, 24, 34, 37, 134, 263, 314, 318, 322, 325, 333, 337, 339, 341, 343, 346, 356, 357, 358, 359, 360, 361, 366, 370, 372, 425, 431, 435, 439, 440, 579, 580, 586, 589, 594, 600, 604], "write_edgelist": 579, "write_opt": [399, 404], "writeappbas": 314, "writeout": 591, "write\u529f\u80fd": 610, "written": [4, 12, 20, 131, 134, 263, 343, 357, 359, 361, 555, 586, 589, 590, 592, 600], "wrong": 322, "wrote": 129, "wsl2": 607, "wt": 20, "wu": 600, "www": [349, 352, 353, 358, 442, 496, 550, 559, 562, 604], "x": [309, 334, 342, 343, 354, 355, 365, 368, 425, 431, 437, 442, 480, 513, 521, 523, 524, 528, 552, 609], "x86": 134, "x86_64": [31, 45, 132, 317, 354], "x_1": 480, "x_2": 480, "x_csr_param": [49, 52, 66, 93, 130, 131, 227, 230, 240, 262, 277], "x_i": 442, "x_j": 442, "x_m": 480, "x_max": 528, "x_min": 528, "xcsrparam": [137, 140, 150, 172, 187], "xiaojian": 600, "xl": 365, "xlabel": 343, "xlist": 555, "xml": [17, 23, 367, 590], "xor": [337, 341], "xu": 600, "xvf": 328, "xvzf": 334, "xx": 429, "xxx": [129, 328, 332, 336, 435, 439, 584, 600], "xxxsampler": 435, "xxxxx": 590, "xzf": 31, "xzvf": 590, "y": [31, 32, 343, 354, 355, 368, 523, 524, 528], "y_max": 528, "y_min": 528, "y_pred": [354, 355], "y_true": [354, 355], "yacin": 343, "yaml": [15, 16, 28, 29, 38, 45, 125, 127, 128, 130, 131, 133, 134, 308, 313, 315, 319, 329, 334, 342, 354, 368, 376, 584, 588, 590, 608], "yaml_str": [308, 590], "yang": [343, 600], "ye": [130, 325, 577], "year": [333, 336, 341, 343, 358, 360, 604], "yellow": [20, 426], "yet": [32, 216, 308, 309, 317, 335, 341, 369, 534, 537, 577, 583], "yield": [20, 216, 319, 333, 431, 437, 524, 528, 577], "yin": 600, "yinghui": 600, "ylabel": 343, "yml": [331, 588, 590], "york": 568, "you": [1, 2, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 45, 46, 126, 128, 129, 130, 132, 134, 173, 184, 216, 274, 281, 306, 308, 314, 315, 317, 318, 319, 322, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 348, 349, 351, 352, 356, 358, 361, 363, 364, 366, 368, 372, 424, 426, 427, 430, 431, 432, 435, 436, 439, 442, 455, 486, 496, 506, 508, 520, 525, 526, 527, 577, 584, 586, 588, 589, 590, 592, 597, 598, 600, 610], "you_delimit": 426, "your": [1, 2, 4, 7, 8, 12, 13, 14, 20, 23, 24, 27, 29, 30, 31, 32, 36, 38, 41, 45, 126, 128, 129, 134, 216, 308, 314, 315, 317, 318, 319, 320, 322, 331, 332, 333, 334, 335, 336, 339, 342, 347, 348, 349, 351, 352, 358, 364, 366, 368, 372, 427, 432, 436, 437, 486, 506, 577, 584, 586, 589, 590, 600, 608], "your_access_key_id": 601, "your_access_key_secret": 601, "your_attr_typ": 426, "your_endpoint_address": 342, "your_endpoint_port": 342, "your_image_registri": 132, "your_proj_nam": 130, "your_region_id": 601, "your_region_nam": 601, "your_release_nam": 329, "your_wheel_nam": [432, 435], "youralgorithm": [18, 600], "yourapp": 15, "yourpregelalgorithm": [18, 600], "yourself": 37, "yu": 600, "yuansi": 23, "yum": 31, "yuryev": 518, "z": [510, 523, 524, 528], "zachari": 567, "zaversnik": 442, "zero": [16, 131, 359, 368, 426, 431, 442, 459, 477, 486, 519, 571, 572, 591], "zero_grad": [354, 355], "zeyu": 600, "zf": 365, "zhang": [343, 600], "zhang_yim": 343, "zhangjiak": 432, "zheng": 600, "zhou": 600, "zip": [16, 129, 315, 335, 336, 342, 376, 524, 528, 577, 608], "zk": 590, "zlib": 31, "zone": [131, 337], "zookeep": [322, 603], "zxvf": 29, "\u0131az": 531, "\u02bbedge_decod": 426, "\u02bbegograph": 425, "\u02bbegotensor": 425, "\u02bbitem_node_decod": 426, "\u02bbuser_node_decod": 426, "\u4e00\u4e2agremlin\u67e5\u8be2\u6216\u56fe\u904d\u5386\u7684\u6267\u884c": 608, "\u4e00\u4e2ajar\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684app\u5b9e\u73b0": 600, "\u4e00\u4e2a\u5c5e\u6027\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe": 608, "\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50": 610, "\u4e00\u4e2a\u8fd0\u884c": 601, "\u4e00\u4e2a\u904d\u5386\u5668\u662fgremlin\u5f15\u64ce\u5904\u7406\u7684\u6700\u5c0f\u6570\u636e\u5355\u5143": 608, "\u4e00\u5217\u4e3a\u7ec8\u70b9": 610, "\u4e00\u5217\u4e3a\u8d77\u70b9": 610, "\u4e00\u5217\u5c5e\u6027": 610, "\u4e00\u5f20\u56fe\u4e2d\u4e0d\u80fd\u542b\u6709\u540c\u540d\u7684\u6807\u7b7e": 610, "\u4e00\u6837\u8fdb\u884c\u56fe\u5206\u6790": [606, 611], "\u4e00\u79cd\u8fb9\u7684\u6807\u7b7e\u53ef\u80fd\u8fde\u63a5\u4e86\u4e24\u79cd\u53ca\u4ee5\u4e0a\u7684\u70b9": 610, "\u4e00\u7ec4\u5c5e\u6027\u540d\u5b57": 610, "\u4e00\u822c\u4f1a\u76f4\u63a5\u7528\u90bb\u63a5\u77e9\u9635\u8fdb\u884c\u8ba1\u7b97": 609, "\u4e00\u822c\u5c06\u5176\u8bbe\u7f6e\u4e3a": 603, "\u4e00\u8282\u89c1\u5230\u8fc7": 605, "\u4e09\u7c7b\u70b9": 608, "\u4e0a\u4e00\u6b65\u7b97\u6cd5\u7684\u8fd0\u884c\u7ed3\u679c\u53ef\u4ee5\u88ab\u52a0\u5165\u4e00\u5f20\u56fe\u4e2d": 605, "\u4e0a\u4f7f\u7528": 604, "\u4e0a\u5206\u914d": 603, "\u4e0a\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u5c5e\u6027\u56fe\u6a21\u578b\u793a\u4f8b": 608, "\u4e0a\u56fe\u8868\u793a\u4e86\u7528\u6237\u901a\u8fc7": 604, "\u4e0a\u5b89\u88c5": 607, "\u4e0a\u6587\u63d0\u5230\u7684\u6570\u636e\u6e90\u662f\u4e00\u4e2a": 610, "\u4e0a\u7684\u4e00\u4e2a": 601, "\u4e0a\u7684\u517c\u5bb9\u6027\u5982\u4f55": 603, "\u4e0a\u7684\u63a5\u53e3\u6765\u4f7f\u7528\u5b9a\u4e49\u5728": 600, "\u4e0a\u7684\u8bbf\u95ee\u6743\u9650\u6388\u4e88\u76f8\u5173nfs\u76ee\u5f55": 603, "\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684": 608, "\u4e0a\u9762\u7684\u8bed\u53e5\u4f1a\u4ea7\u751f\u5982\u4e0b": 608, "\u4e0a\u9996\u6b21\u63d0\u51fa\u5e76\u83b7\u5f97\u6700\u4f73\u8bba\u6587\u5956": 600, "\u4e0b\u4f7f\u7528": 600, "\u4e0b\u5206\u522b\u6784\u5efa": 602, "\u4e0b\u5217\u4ee3\u7801": 600, "\u4e0b\u56fe\u5c55\u793a\u4e86\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 604, "\u4e0b\u7684": 602, "\u4e0b\u7684\u6784\u5efa\u8fc7\u7a0b\u662f\u5728\u672c\u5730": 602, "\u4e0b\u8f7d\u9002\u5f53\u7248\u672c\u7684gremlin": 608, "\u4e0b\u9762\u4e24\u53e5gremlin\u793a\u4f8b\u67e5\u8be2\u5206\u522b\u8ba1\u7b97\u56fe\u4e2d\u9876\u70b9\u548c\u8fb9\u7684\u603b\u6570": 608, "\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684gremlin\u793a\u4f8b": 608, "\u4e0b\u9762\u6211\u4eec\u5217\u51fa\u5f53\u524d\u5b9e\u73b0\u548capach": 608, "\u4e0b\u9762\u6211\u4eec\u6309\u7167\u4e0a\u9762\u4ecb\u7ecd\u76844\u4e2a\u6b65\u9aa4\u6765\u4ecb\u7ecd\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2agcn\u6a21\u578b": 609, "\u4e0b\u9762\u6211\u4eec\u9996\u5148\u901a\u8fc7\u5728\u7279\u5b9a\u5468\u671f\u5185\u4ece\u5168\u56fe\u4e2d\u63d0\u53d6\u8bba\u6587": 604, "\u4e0b\u9762\u63cf\u8ff0\u5982\u4f55\u5229\u7528\u4e0a\u6587\u83b7\u5f97\u7684url": 608, "\u4e0d\u4ec5\u53ef\u4ee5\u52a0\u5165\u8fd0\u7b97\u7ed3\u679c\u5230\u76f4\u63a5\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 605, "\u4e0d\u5305\u542bid\u5217": 321, "\u4e0d\u53ef\u4fee\u6539": 608, "\u4e0d\u540c\u6807\u7b7e\u7684\u9876\u70b9\u5141\u8bb8\u6709\u76f8\u540c\u7684oid": 321, "\u4e0d\u540c\u7684\u662f\u9700\u8981\u4e24\u5217": 610, "\u4e0d\u540c\u7684\u6807\u7b7e\u6709\u4e0d\u540c\u7684\u5c5e\u6027": 604, "\u4e0d\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 321, "\u4e0e": 600, "\u4e0e\u4ee5\u5f80\u7684\u7cfb\u7edf\u7684\u4e0d\u540c": 600, "\u4e0e\u6211\u4eec\u8054\u7cfb": 603, "\u4e0e\u6784\u5efa\u70b9\u6807\u7b7e\u4e00\u8282\u4e2d\u7684": 610, "\u4e0e\u8fbe\u6469\u9662\u7684\u9ad8\u6c34\u5e73\u7814\u7a76": 606, "\u4e14\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e0etinkerpop": 608, "\u4e14\u6bcf\u4e00\u6b21\u90fd\u8fc7\u6ee4\u6216\u8df3\u8fc7\u8def\u5f84\u4e2d\u7684\u91cd\u590d\u70b9": 608, "\u4e16\u754c\u4eba\u5de5\u667a\u80fd\u521b\u65b0\u5927\u8d5bsail\u5956\u7b49": 606, "\u4e2d": [600, 602, 603, 604, 610], "\u4e2d\u4e4b\u540e": 605, "\u4e2d\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 604, "\u4e2d\u52a0\u5165graphscope\u76f8\u5173\u7684\u5730\u5740": 603, "\u4e2d\u53c2\u9605\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f": 601, "\u4e2d\u5f00\u542f": 607, "\u4e2d\u6240\u793a": 600, "\u4e2d\u7684": [600, 601, 603], "\u4e2d\u7684\u51fd\u6570": 606, "\u4e2d\u7684\u56fe": 604, "\u4e2d\u76f8\u5e94\u7684\u63a5\u53e3\u5e76\u4e14\u5b9e\u73b0\u63a5\u53e3": 600, "\u4e2d\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 604, "\u4e2d\u83b7\u5f97\u6700\u65b0\u7248\u7684\u4ee3\u7801": 602, "\u4e2d\u8f7d\u56fe": 606, "\u4e2d\u8fdb\u884c": 602, "\u4e3a": [602, 603, 604], "\u4e3a\u4e86\u5b9e\u73b0\u81ea\u5df1\u7684\u7b97\u6cd5": 600, "\u4e3a\u4e86\u5e94\u5bf9gnn\u5728\u5de5\u4e1a\u573a\u666f\u4e2d\u7684\u591a\u6837\u6027\u548c\u5feb\u901f\u53d1\u5c55\u7684\u9700\u6c42": 609, "\u4e3a\u4e86\u6ee1\u8db3\u6b64\u79cd\u9700\u6c42": 610, "\u4e3a\u4e86\u7b80\u5316\u67e5\u8be2": 604, "\u4e3a\u4e86\u7f16\u5199java\u5b9e\u73b0\u7684\u56fe\u7b97\u6cd5": 600, "\u4e3a\u4e86\u89e3\u51b3\u4f9d\u8d56jar\u5305\u7684\u7248\u672c\u95ee\u9898": 600, "\u4e3a\u4e86\u8ba9\u5f00\u53d1\u8005\u66f4\u5bb9\u6613\u4e0a\u624b": 602, "\u4e3a\u4e86\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 600, "\u4e3a\u4ec0\u4e48\u5728": 603, "\u4e3a\u4ec0\u4e48\u5728\u4f7f\u7528": 603, "\u4e3a\u4ec0\u4e48\u8f7d\u56fe\u65f6\u62a5\u627e\u4e0d\u5230\u6587\u4ef6\u7684\u9519\u8bef": 603, "\u4e3a\u4f8b": [600, 604], "\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0egraphscope\u5b58\u50a8\u7684\u56fe\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u7684\u63a7\u5236\u53f0": 608, "\u4e3a\u6307\u793a\u53bb\u54ea\u91cc\u8bfb\u6570\u636e\u7684\u8def\u5f84": 610, "\u4e3a\u6539\u5584\u8be5\u9879\u76ee\u6240\u505a\u7684\u4efb\u4f55\u8d21\u732e": 602, "\u4e3a\u6b64": 604, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u586b\u5145ovnum\u548ctvnum": 321, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efagid\u5230lid\u7684\u6620\u5c04\u4e0e\u53bb\u91cd\u7684gid\u6570\u7ec4": 321, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efarow": 321, "\u4e3a\u8f93\u5165\u4ea7\u751f": 609, "\u4e3a\u907f\u514d\u7c7b\u4f3c\u60c5\u51b5": 603, "\u4e3b\u673a\u4e0a\u7684\u8def\u5f84": 604, "\u4e3b\u8981\u7684\u7528\u6cd5\u5982\u4e0b": 601, "\u4e3b\u8981\u9762\u5411\u8d85\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u53d1": 609, "\u4e3b\u952e\u7ea6\u675f": 608, "\u4e3b\u9898\u6807\u7b7e\u7b49\u5c5e\u6027": 604, "\u4e3e\u4e2a\u4f8b\u5b50": 610, "\u4e3e\u4f8b\u6765\u8bf4": 610, "\u4e4b\u4e8e": 610, "\u4e5f\u53eb\u505arepl\u73af\u5883": 608, "\u4e5f\u53ef\u5728": 603, "\u4e5f\u53ef\u901a\u8fc7\u6211\u4eec\u63d0\u4f9b\u7684\u5185\u7f6e\u6570\u636e\u96c6\u51fd\u6570\u5e2e\u52a9\u5b8c\u6210\u8f7d\u56fe\u6d41\u7a0b": 604, "\u4e5f\u5c31\u662fcolumn": 321, "\u4e5f\u5c31\u662f\u8bf4": [321, 601], "\u4e5f\u652f\u6301\u4ee5\u9876\u70b9\u4e3a\u4e2d\u5fc3\u7684": 600, "\u4e70\u5bb6": 608, "\u4e86\u5e38\u89c1\u7684\u90bb\u5c45\u91c7\u6837": 609, "\u4e8b\u52a1": 608, "\u4e8b\u5b9e\u8bc1\u660e": 604, "\u4e8c\u7ea7\u7d22\u5f15\u76ee\u524d\u5c1a\u672a\u652f\u6301": 608, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 606, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u5141\u8bb8\u7528\u6237\u4ee5": 604, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3": 611, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u56fe": 604, "\u4ea7\u751f\u7684": 609, "\u4ea7\u751f\u8d1f\u6837\u672c": 609, "\u4ea7\u751f\u8d85\u65f6\u5f02\u5e38": 603, "\u4ece": [606, 608], "\u4ece0\u5f00\u59cb": 610, "\u4ececontext\u4e2d\u83b7\u53d6\u6e90\u9876\u70b9": 600, "\u4ecegar\u5305\u4e2d\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 600, "\u4eceshuffle\u540e\u7684vtable\u53d6\u51faoid\u6267\u884cal": 321, "\u4ece\u800c\u4eca\u540e\u53ef\u4ee5\u5f15\u7528": 608, "\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a": 608, "\u4ece\u800c\u63a5\u4e0b\u6765\u8f93\u5165\u7684\u6240\u6709gremlin\u67e5\u8be2\u90fd\u88ab\u81ea\u52a8\u4f20\u8f93\u5230": 608, "\u4ece\u800c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528\u8bf8\u5982": 608, "\u4ece\u800c\u8ba9\u5df2\u6709\u7684\u5e94\u7528\u53ea\u9700\u6700\u5c0f\u5316\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u6269\u5c55\u5230\u5927\u89c4\u6a21\u8ba1\u7b97\u96c6\u7fa4": 608, "\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684": 608, "\u4ece\u8fd9\u4e9b\u5165\u95e8\u6559\u7a0b\u4e2d\u4f60\u53ef\u4ee5\u4e86\u89e3\u5230\u5982\u4f55\u542f\u52a8\u4e00\u4e2agraphscope\u4f1a\u8bdd": 611, "\u4ed6\u4eec\u5171\u6709\u7684\u90e8\u5206\u4f1a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58": 605, "\u4ee3\u7801\u4ee5\u9ad8\u6548\u5730\u6267\u884c": 600, "\u4ee3\u7801\u98ce\u683c": 606, "\u4ee3\u8868": 608, "\u4ee3\u8868head\u8282\u70b9\u7684age\u5c5e\u6027": 608, "\u4ee3\u8868\u4e86\u4e00\u4e2a\u7528\u6237": 608, "\u4ee3\u8868\u4e86\u67e5\u8be2\u7684\u7ed3\u679c": 608, "\u4ee3\u8868\u6570\u636e\u6e90": 610, "\u4ee3\u8868\u65b9\u6cd5\u662fgraphsag": 609, "\u4ee3\u8868\u7b2c\u51e0\u5217": 610, "\u4ee3\u8868\u7ed3\u679c": 600, "\u4ee3\u8868\u9009\u62e9\u6240\u6709\u7684\u5c5e\u6027": 605, "\u4ee5": [601, 604, 605, 607, 610], "\u4ee5\u4e0b\u5185\u5bb9\u63cf\u8ff0\u4e86\u8bbf\u95ee\u9876\u70b9": 321, "\u4ee5\u4e0b\u6570\u636e\u90fd\u662f\u5b58\u50a8\u5728vineyard\u4e2d\u7684": 321, "\u4ee5\u4e0b\u662f\u4e2a\u4f8b\u5b50": 610, "\u4ee5\u4e0b\u662f\u51e0\u4e2a\u4f8b\u5b50": 605, "\u4ee5\u4e0b\u662f\u6bcf\u4e00\u79cd\u9876\u70b9": 321, "\u4ee5\u4e0b\u662f\u7ed3\u679c\u5904\u7406\u4e2d\u9009\u62e9\u5668\u7684\u4e00\u4e9b\u793a\u4f8b": 600, "\u4ee5\u4fbf\u4e8e\u7528\u6237\u66f4\u5feb\u5730\u4e0a\u624bgraphscop": 611, "\u4ee5\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5": 600, "\u4ee5\u53ca": [603, 610], "\u4ee5\u53ca\u4e00\u7ec4\u8fd0\u884c": 601, "\u4ee5\u53ca\u4ea4\u4e92\u5f0f\u67e5\u8be2": 604, "\u4ee5\u53ca\u4ed6\u4eec\u7684": 609, "\u4ee5\u53ca\u5982\u4f55\u5206\u522b": 611, "\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u56fe\u8f6c\u6362\u4e3a\u53ef\u4ee5\u9002\u914d\u666e\u901a\u7b97\u6cd5\u5e94\u7528\u7684\u65b9\u6cd5": 605, "\u4ee5\u53ca\u6240\u9009\u62e9\u7684\u5c5e\u6027": 605, "\u4ee5\u53ca\u8f7d\u5165\u4ed6\u4eec\u7684\u5de5\u5177\u51fd\u6570": 610, "\u4ee5\u53ca\u8fde\u63a5\u4e24\u4e2a\u5b9e\u4f53\u7684\u56db\u79cd\u7c7b\u578b\u7684\u6709\u5411\u5173\u7cfb\u8fb9": 604, "\u4ee5\u53ca\u91c7\u6837\u51fa\u7684\u90bb\u5c45\u7ec4\u6210": 609, "\u4ee5\u5c5e\u6027\u56fe": 604, "\u4ee5\u65b9\u4fbf\u7684\u5b9a\u4f4d\u548c\u6d1e\u5bdf\u7279\u5b9a\u7684\u6df1\u5165\u4fe1\u606f": 604, "\u4ee5\u8fd9\u4e9b": 609, "\u4ee5\u901a\u8fc7python\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u9884\u542f\u52a8\u7684graphscope\u670d\u52a1": 601, "\u4efb\u4f55\u989d\u5916\u7684\u5177\u4f53\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u5728loader\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u4f20\u5165": 610, "\u4f18\u5316\u5668\u548c\u8bad\u7ec3\u8fc7\u7a0b": 609, "\u4f18\u96c5\u7684\u65b9\u6cd5\u662f\u9996\u5148\u521b\u5efa": 603, "\u4f1a\u4ece\u8fb9\u7684\u7aef\u70b9\u4e2d\u805a\u5408\u51fa\u70b9\u8868": 610, "\u4f1a\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 610, "\u4f1a\u62a5": 603, "\u4f1a\u6709\u66f4\u5feb\u7684\u901f\u5ea6": 610, "\u4f1a\u88ab\u7ffb\u8bd1\u6210\u5982\u4e0b\u7684": 600, "\u4f1a\u8bdd": [601, 604], "\u4f1a\u9010\u6b65\u652f\u6301": 608, "\u4f1a\u9020\u6210\u5361\u4f4f\u7684\u73b0\u8c61": 603, "\u4f46\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528": 603, "\u4f46\u5176\u5305\u542b\u4e00\u4e2a\u6301\u4e45\u56fe\u5b58\u50a8\u7684\u7ec4\u4ef6": 603, "\u4f46\u5bf9\u5176\u4e2d\u6bcf\u4e00\u4e2a\u904d\u5386\u5668\u7684\u5f53\u524d\u4f4d\u7f6e": 608, "\u4f46\u662f\u6709\u4e0d\u540c\u7684\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e": 610, "\u4f46\u662f\u8981\u540c\u65f6\u7edf\u8ba1\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9\u7684\u5ea6\u6765\u6784\u5efarow": 321, "\u4f5c\u4e3a": [600, 601, 610], "\u4f5c\u4e3av\u548ce\u7684\u6807\u7b7e\u9009\u62e9\u5668": 600, "\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u51fd\u6570\u88ab\u5305\u88f9\u64cd\u4f5c\u7528\u4e8e\u5904\u7406\u5176\u6bcf\u4e00\u4e2a\u8f93\u5165": 608, "\u4f5c\u4e3a\u540d\u4e3a": 600, "\u4f5c\u4e3a\u540e\u7aef\u5f15\u64ce\u7684\u5165\u53e3": 604, "\u4f5c\u4e3a\u63a5\u4e0b\u6765\u4e00\u7cfb\u5217\u8f6c\u6362\u64cd\u4f5c\u7684\u8d77\u59cb\u56fe": 605, "\u4f5c\u4e3a\u70b9\u7684\u4e00\u4e2a\u5c5e\u6027": 605, "\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570": 610, "\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6\u8c13\u8bcd": 608, "\u4f5c\u8005": 604, "\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528": 607, "\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570": 609, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7": 601, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6784\u5efa\u547d\u4ee4\u5f00\u53d1\u5e76\u6d4b\u8bd5\u5176\u4e2d\u67d0\u4e00\u4e2a\u6a21\u5757": 602, "\u4f60\u4e5f\u8bb8\u9700\u8981\u6302\u8f7d\u78c1\u76d8\u6216\u8005\u4f7f\u7528\u4e91\u5b58\u50a8\u63d0\u4f9b\u5546\u7684\u670d\u52a1": 603, "\u4f60\u53ef\u4ee5\u4ece": 609, "\u4f60\u53ef\u4ee5\u4f7f\u7528": 602, "\u4f60\u53ef\u4ee5\u53c2\u8003\u76f8\u4f3c\u7684\u6a21\u578b\u4ee3\u7801\u505a\u4e3a\u5f00\u59cb": 609, "\u4f60\u53ef\u4ee5\u5728": 610, "\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8bd5\u7740\u8fd0\u884c\u4ed6\u4eec": 600, "\u4f60\u53ef\u4ee5\u6839\u636e": 603, "\u4f60\u53ef\u4ee5\u901a\u8fc7": [600, 601, 603], "\u4f60\u53ef\u4ee5\u901a\u8fc7graphscope\u7684python": 600, "\u4f60\u53ef\u4ee5\u968f\u65f6\u4f7f\u7528": 610, "\u4f60\u53ef\u80fd\u9700\u8981\u901a\u8fc7": 602, "\u4f60\u5e94\u8be5\u9700\u8981\u8bbe\u7f6e": 603, "\u4f60\u9700\u8981\u5c06": 600, "\u4f60\u9700\u8981\u628agen_test_data": 437, "\u4f7f\u5176\u5e76\u884c\u5316\u7684\u8fd0\u884c\u5728\u5206\u5e03\u5f0f\u73af\u5883": 600, "\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u80fd\u591f\u83b7\u53d6\u7684\u6240\u6709oid": 321, "\u4f7f\u7528": [604, 606, 609, 610, 611], "\u4f7f\u7528graphscope\u4e2d\u7684ga": 611, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 606, "\u4f7f\u7528row": 321, "\u4f7f\u7528\u517c\u5bb9": [606, 611], "\u4f7f\u7528\u5199\u5728\u5e26\u6709label0\u7684\u9876\u70b9\u4e0a\u7684property0\u4f5c\u4e3a": 600, "\u4f7f\u7528\u67e5\u8be2\u8bed\u8a00": [606, 611], "\u4f7f\u7528\u7ed3\u679c\u5217\u4f5c\u4e3a\u540d\u4e3a": 600, "\u4f7f\u7528\u8fb9\u4e0a\u7b2c\u4e09\u5217\u6570\u636e\u4f5c\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb": 600, "\u4f7f\u7528\u9876\u70b9\u7684": 600, "\u4f8b\u5982": [321, 600, 604, 608, 610], "\u4f8b\u5982pagerank\u548cshortestpath": 608, "\u4f8b\u5982\u56fe\u91c7\u6837": 609, "\u4f8b\u5982\u5bf9\u4e8ebfs\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528": 600, "\u4f8b\u5982\u5f62\u72b6": 603, "\u4f8b\u5982\u793e\u533a\u68c0\u6d4b": 604, "\u4f8b\u5982\u9876\u70b9id": 600, "\u4f8b\u5982\u9884\u5370\u672c\u548c\u4f1a\u8bae": 604, "\u4f8b\u5b50": 610, "\u4f9d\u6258\u4e8e\u963f\u91cc\u6d77\u91cf\u6570\u636e\u548c\u4e30\u5bcc\u573a\u666f": 606, "\u4f9d\u8d56\u4e00\u4e9b\u6743\u9650\u6765\u5220\u9664\u8fd0\u884c\u65f6\u7684\u8d44\u6e90": 603, "\u4fdd\u5b58\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4\u7684\u5185\u5b58\u4e2d": 600, "\u4fee\u9970\u7b26": 608, "\u500d\u901a\u5e38\u662f\u4e00\u4e2a\u5408\u7406\u7684\u503c": 603, "\u503c": 608, "\u503c\u53ef\u4ee5\u4e3a": 605, "\u503c\u662f\u8981\u53d6\u7684\u5c5e\u6027\u7684\u5217\u8868": 605, "\u5047\u5b9a\u6211\u4eec\u8981\u5c06\u672c\u673a\u7684": 601, "\u505a\u4e3agnns\u6a21\u578b\u7684\u7279\u5f81\u8f93\u5165": 609, "\u505a\u4e3a\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 604, "\u50cf": [606, 611], "\u50cf\u8fd9\u6837": 610, "\u5148\u5728\u672c\u5730\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 600, "\u5165\u95e8\u6559\u7a0b": 606, "\u5165\u95e8\u6559\u7a0b\u5305\u62ec\u5982\u4e0b\u8fd9\u4e9b\u5185\u5bb9": 611, "\u5168\u5c40id": 321, "\u5168\u90e8\u9876\u70b9\u5e8f\u53f7\u4e3a": 321, "\u5171\u540c\u7ec4\u6210": 321, "\u5173\u95ed\u4f1a\u8bdd": 606, "\u5173\u95ed\u5f53\u524d\u7684\u4f1a\u8bdd": 604, "\u5176\u4e2d": [321, 600, 605], "\u5176\u4e2deid\u7528\u4e8e\u4e4b\u540e\u83b7\u53d6\u8fb9\u4e0a\u7684\u5c5e\u6027": 321, "\u5176\u4e2dfid\u4e3a0": 321, "\u5176\u4e2dvtable\u6309\u7167\u9876\u70b9\u6807\u7b7e": 321, "\u5176\u4e2d\u4e00\u4e9b\u5dee\u5f02\u4f1a\u6709\u673a\u4f1a\u6d88\u9664": 608, "\u5176\u4e2d\u6838\u5fc3\u4f18\u52bf\u5305\u62ec\u5728\u4e1a\u754c\u9996\u6b21\u652f\u6301\u4e86": 606, "\u5176\u4e2d\u7684": 608, "\u5176\u4e2d\u7684\u6838\u5fc3\u6280\u672f\u66fe\u83b7\u5f97\u6570\u636e\u5e93\u9886\u57df\u9876\u7ea7\u5b66\u672f\u4f1a\u8bae": 606, "\u5176\u4e2d\u7684\u9876\u70b9\u548c\u8fb9\u53ef\u4ee5\u62e5\u6709\u4e00\u7ec4\u5c5e\u6027": 608, "\u5176\u4ed6\u5217\u90fd\u4f5c\u4e3a\u5c5e\u6027": 610, "\u5176\u4ed6\u5c5e\u6027": 610, "\u5176\u4ed6\u60c5\u51b5\u4e0b": 610, "\u5176\u4ed6\u95ee\u9898": 603, "\u5176\u4f1a\u9ed8\u8ba4\u5c06\u5176\u53c2\u6570\u4e2d\u7684\u5c5e\u6027\u56fe\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 605, "\u5176\u503c\u4e3a\u4e00\u4e2a\u5b57\u5178": 605, "\u5176\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32": 610, "\u5176\u5e94\u8be5\u662f": 600, "\u5176\u6240\u5c5e\u5bf9\u8c61\u7684": 608, "\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\u6240\u793a": 608, "\u5177\u4f53\u53ef\u4ee5\u53c2\u8003": 608, "\u5177\u4f53\u67d0\u4e2a\u7b97\u6cd5\u662f\u5426\u652f\u6301\u5c5e\u6027\u56fe\u4e5f\u5728\u5176\u6587\u6863\u8fdb\u884c\u4e86\u63cf\u8ff0": 600, "\u5177\u4f53\u800c\u8a00": 605, "\u5177\u6709\u4e00\u7ad9\u5f0f": 606, "\u5185\u5b58": 603, "\u5185\u5efa\u4e86\u4e00\u7ec4\u9884\u7f6e\u5e38\u7528\u7b97\u6cd5": 604, "\u5185\u7f6e\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668": 609, "\u5185\u7f6e\u4e86\u4e00\u7ec4\u6d41\u884c\u7684\u6570\u636e\u96c6": 610, "\u5185\u7f6e\u7684\u56fe\u5206\u6790\u7b97\u6cd5": [606, 611], "\u5185\u7f6e\u7b97\u6cd5": 606, "\u5185\u7f6e\u7b97\u6cd5\u53ef\u4ee5\u5728\u56fe\u4e0a\u8f7b\u677e\u8c03\u7528": 600, "\u5185\u7f6e\u7b97\u6cd5\u7684\u5b8c\u6574\u5217\u8868\u5982\u4e0b\u6240\u793a": 600, "\u5185\u90e8\u548c\u5916\u90e8\u70b9\u603b\u6570": 321, "\u5185\u90e8\u70b9": 321, "\u5185\u90e8\u70b9\u7684\u9876\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 321, "\u5185\u90e8\u70b9\u8303\u56f4\u7531\u8d77\u59cblid\u548c\u7ec8\u6b62lid\u6784\u6210": 321, "\u5185\u90e8\u7684\u8bf8\u5982\u641c\u7d22\u63a8\u8350": 609, "\u5185\u914d\u7f6e": 608, "\u51c6\u5907\u597d\u9876\u70b9\u6570\u91cf": 321, "\u51fa\u8fb9\u548c\u5165\u8fb9\u5171\u7528\u4e00\u4e2acsr": 321, "\u51fa\u8fb9\u7684row": 321, "\u51fa\u8fb9\u7684\u8d77\u59cb\u5730\u5740": 321, "\u51fd\u6570": [600, 608], "\u51fd\u6570\u5b9a\u4e49\u5bf9\u5206\u533a\u6570\u636e\u7684\u589e\u91cf\u8ba1\u7b97": 600, "\u51fd\u6570\u5b9a\u4e49\u7b97\u6cd5\u7684\u5c40\u90e8\u8ba1\u7b97": 600, "\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u7b97\u6cd5\u521d\u59cb\u72b6\u6001": 600, "\u51fd\u6570\u7684\u58f0\u660e\u548c\u4f5c\u7528\u90fd\u7531\u5305\u88f9\u64cd\u4f5c\u7684\u8bed\u4e49\u51b3\u5b9a": 608, "\u51fd\u6570\u91cc\u5c06\u7f16\u7801\u5668\u548c\u635f\u5931\u51fd\u6570\u7ec4\u7ec7\u8d77\u6765": 609, "\u51fd\u6570\u91cc\u6211\u4eec\u4f7f\u7528\u5c01\u88c5\u7684": 609, "\u5206\u4e3ahashpartitioner\u548csegmentedpartition": 321, "\u5206\u522b\u4e3a": 610, "\u5206\u522b\u4e3a\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 321, "\u5206\u522b\u4ee3\u8868\u9876\u70b9\u548c\u8fb9": 600, "\u5206\u522b\u662f\u70b9\u8868": 609, "\u5206\u522b\u6807\u8bb0\u4e3a": 604, "\u5206\u533a\u5668": 321, "\u5206\u53d1\u5305\u662f\u57fa\u4e8e": 602, "\u5206\u5e03\u5f0f\u7684\u7ba1\u7406\u56fe\u6570\u636e": 604, "\u5206\u5e03\u5f0f\u7f16\u8bd1\u4f18\u5316": 606, "\u5206\u7c7b\u4e3a349\u4e2a\u7c7b\u522b": 604, "\u5206\u7ec4": 321, "\u5206\u89e3\u548c\u4e09\u89d2\u5f62\u8ba1\u6570\u4ee5\u751f\u6210\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u7684\u7ed3\u6784\u7279\u5f81": 604, "\u5217": 600, "\u5217\u53f7": 321, "\u5217\u540d": 610, "\u5217\u540d\u4e0e\u7ec8\u70b9\u7684": 610, "\u5217\u540d\u4e3a": 600, "\u5217\u7684\u5217\u540d": 610, "\u5219\u4f1a\u62c9\u53d6\u5bf9\u5e94\u7248\u672c\u7684\u6700\u65b0\u955c\u50cf": 601, "\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4": 604, "\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u4e92\u4f1a\u8bdd": 608, "\u521b\u5efa\u4f1a\u8bdd": 606, "\u521b\u5efa\u4f1a\u8bdd\u9700\u8981\u4f7f\u7528": 604, "\u521b\u5efa\u7684\u96c6\u7fa4": 601, "\u521b\u5efa\u9ed8\u8ba4": 600, "\u521d\u59cb\u5316id": 321, "\u521d\u59cb\u5316ivnum": 321, "\u521d\u59cb\u5316\u4ed6\u4eec\u9700\u8981\u7ed9\u51fafragment\u7684\u6570\u91cf": 321, "\u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb": 600, "\u5220\u9664edg": 321, "\u5229\u7528java": 606, "\u5229\u7528python": 606, "\u5230": 609, "\u5230\u8fd9\u91cc": 605, "\u524d\u4e24\u4e2a\u51fd\u6570\u7528\u6765\u91c7\u6837\u79cd\u5b50\u8282\u70b9\u548c\u6b63\u6837\u672c": 609, "\u5269\u4e0b\u7684\u6210\u5458\u5c06\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u6765\u6784\u5efa": 321, "\u529f\u80fd": 607, "\u52a0\u4e0a\u5c5e\u6027\u540d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5c5e\u6027\u503c": 608, "\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 600, "\u5305\u4ee5\u5907\u5c06\u6765\u4f7f\u7528": 600, "\u5305\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 600, "\u5305\u542b\u4e00\u4e2a": 608, "\u5305\u542b\u4e00\u4e2a\u6570\u636e\u6d41\u8fed\u4ee3\u5668\u548c\u82e5\u5e72": 609, "\u5305\u542b\u4e00\u4e2a\u70b9\u6807\u7b7e": 605, "\u5305\u542b\u4e24\u4e2a\u53c2\u6570": 605, "\u5305\u542b\u5b83\u4eec\u7684\u4f4d\u7f6e": 608, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u6216\u8005\u6570\u636e\u672c\u8eab": 610, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u65f6": 610, "\u5305\u62ec": [606, 609], "\u5305\u62ectensorflow": 609, "\u5305\u62ec\u70b9": 608, "\u5305\u62ec\u8fde\u901a\u6027\u5206\u6790\u7b97\u6cd5": 600, "\u5355\u673a\u60c5\u51b5\u4e0b": 603, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 606, "\u5373\u53d6\u524dk\u4e2a\u7ed3\u679c": 608, "\u5373\u53ef\u8bbf\u95ee\u5230\u9876\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027": 321, "\u5373\u552f\u4e00\u6807\u8bc6\u4e3a": 608, "\u5373\u591a\u4e8e\u4e00\u4e2a\u70b9\u6807\u7b7e\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 605, "\u5373\u67e5\u8be2\u4f18\u5316\u7531graphscope\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210": 608, "\u5373\u8bba\u6587": 604, "\u5373\u8fd4\u56de\u81ea\u8eab\u5373\u53ef": 609, "\u539f\u59cbid": 321, "\u539f\u59cb\u5411\u91cf\u7528\u4e0d\u540c\u7684\u56fe\u7f16\u7801\u5668\u8fdb\u884c\u7f16\u7801": 609, "\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u7684id": 321, "\u539f\u59cb\u7684gcn": 609, "\u539f\u59cb\u7684\u9876\u70b9\u8868": 321, "\u53c2\u6570\u5f00\u542f\u65e5\u5fd7\u8f93\u51fa": 603, "\u53c2\u8003": 601, "\u53d1\u73b0\u4e86\u4e00\u4e9b\u591a\u4f59\u7684": 603, "\u53d1\u884c\u7248\u7528\u6237": 607, "\u53d6\u503c\u4e3a\u56fe\u4e2d\u4e0d\u5b58\u5728\u7684\u70b9\u6807\u7b7e": 610, "\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u6807\u8bb0\u4e3a": 604, "\u53e6\u4e00\u4e2a\u5e38\u7528\u7684": 608, "\u53e6\u4e00\u4e9b\u662f\u76ee\u524dgraphscope\u5b9a\u4f4d\u7684\u573a\u666f\u5dee\u5f02\u9020\u6210\u7684\u4e0d\u540c\u8bbe\u8ba1\u9009\u62e9": 608, "\u53e6\u5916": [604, 610], "\u53ea\u4e0d\u8fc7\u8fd9\u6b21": 610, "\u53ea\u4f1a\u8f7d\u5165\u6307\u5b9a\u4e86\u7684\u5217\u4f5c\u4e3a\u5c5e\u6027": 610, "\u53ea\u4fdd\u7559\u5c5e\u6027": 321, "\u53ea\u5728\u67d0\u4e2afragment\u5185\u90e8\u6709\u610f\u4e49": 321, "\u53ea\u6709\u4e00\u7c7b\u70b9\u548c\u4e00\u7c7b\u8fb9\u800c\u4e0d\u533a\u5206\u6807\u7b7e": 604, "\u53ea\u80fd\u901a\u8fc7\u624b\u52a8\u6267\u884c\u547d\u4ee4\u5982": 603, "\u53ea\u8981\u88ab\u52a0\u5165\u5c5e\u6027\u7684\u70b9\u6807\u7b7e\u76f8\u540c": 605, "\u53ea\u9700\u8981\u628aoe\u76f8\u5173\u53d8\u91cf\u540d\u6362\u6210ie\u5373\u53ef": 321, "\u53ea\u9700\u8981\u91cd\u5199\u57fa\u7c7b\u7684\u91c7\u6837": 609, "\u53ea\u9700\u8fdb\u884c\u5f88\u5c0f\u7684\u66f4\u6539\u5373\u53ef\u8f7b\u677e\u5730\u5c06\u4e32\u884c\u7b97\u6cd5\u5373\u63d2\u5373\u7528": 600, "\u53ef\u4ee5": 600, "\u53ef\u4ee5\u4e3a": 610, "\u53ef\u4ee5\u4e3a\u4efb\u4f55\u6807\u8bc6\u7b26": 610, "\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8def\u5f84": 610, "\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668\u6765\u8fdb\u884c\u6279\u6b21\u8bad\u7ec3": 609, "\u53ef\u4ee5\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u63a8\u65ad\u70b9\u7684\u7c7b\u578b": 610, "\u53ef\u4ee5\u4f7f\u7528": [603, 609], "\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u83b7\u5f97\u5177\u4f53\u7684\u8bbf\u95ee\u5730\u5740": 608, "\u53ef\u4ee5\u5305\u542b\u4e0b\u5217\u7c7b\u578b\u7684\u5c5e\u6027\u503c": 608, "\u53ef\u4ee5\u53c2\u8003": 600, "\u53ef\u4ee5\u5728\u54ea\u91cc\u627e\u5230\u6e90\u6570\u636e": 610, "\u53ef\u4ee5\u5728\u5c5e\u6027\u540d\u4e4b\u540e\u52a0\u5165\u4e00\u4e2a\u989d\u5916\u7c7b\u578b\u7684\u53c2\u6570": 610, "\u53ef\u4ee5\u5904\u7406\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2": 604, "\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0e": 604, "\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u7ed3\u6784\u4fe1\u606f\u548c\u5c5e\u6027\u4fe1\u606f\u538b\u7f29\u4e3a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u4f4e\u7ef4\u5d4c\u5165\u5411\u91cf": 604, "\u53ef\u4ee5\u662f\u88ab\u8bbf\u95ee\u7684\u70b9": 608, "\u53ef\u4ee5\u67e5\u770b": 600, "\u53ef\u4ee5\u6dfb\u52a0\u4e24\u6b21\u540d\u4e3a": 610, "\u53ef\u4ee5\u7528": 603, "\u53ef\u4ee5\u7528\u4e00\u7ec4": 608, "\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21": 605, "\u53ef\u4ee5\u8868\u8fbe\u4e00\u4e2a\u6761\u4ef6\u8c13\u8bcd": 608, "\u53ef\u4ee5\u88ab\u7528\u4f5c\u6570\u636e\u5e93": 603, "\u53ef\u4ee5\u901a\u8fc7": 600, "\u53ef\u4ee5\u901a\u8fc7path": 608, "\u53ef\u5728\u73af\u5883\u53d8\u91cf": 603, "\u53ef\u7075\u6d3b\u5e94\u5bf9\u73b0\u5b9e\u4e2d\u56fe\u5e94\u7528\u591a\u53d8\u7684\u89c4\u6a21": 600, "\u53ef\u76f4\u63a5\u901a\u8fc7": 607, "\u53ef\u80fd\u4e0d\u80fd\u6b63\u786e\u56de\u6536\u5206\u914d\u7684\u8d44\u6e90": 603, "\u53ef\u80fd\u4f1a\u7528\u5230\u5176\u4ed6\u7684\u7b2c\u4e09\u65b9jar\u5305": 600, "\u53ef\u80fd\u4f1a\u7531\u4e8e\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u77ed\u6682\u7684\u5361\u4f4f\u73b0\u8c61": 603, "\u53ef\u80fd\u7684\u539f\u56e0\u6709": 603, "\u53ef\u89c1": 603, "\u53ef\u9009\u7684\u5b83\u4e5f\u53ef\u4ee5\u5305\u542b\u8d70\u8fc7\u7684\u5b8c\u6574\u8def\u5f84\u5386\u53f2\u751a\u81f3\u5e94\u7528\u72b6\u6001": 608, "\u53ef\u9009\u9879": 610, "\u53ef\u901a\u8fc7": 603, "\u53ef\u901a\u8fc7\u5b98\u65b9\u6587\u6863\u6765\u5b89\u88c5\u4e0a\u8ff0\u4f9d\u8d56": 607, "\u53ef\u901a\u8fc7\u63d0\u4ea4": 603, "\u5404\u4e2a\u65b9\u5411\u6216\u7814\u7a76\u5c0f\u7ec4\u7684\u8bba\u6587": 604, "\u540c\u4e00\u4e2a\u8fb9\u6807\u7b7e\u4e0b\u9762\u53c8\u6309\u7167src\u548cdst\u7684\u9876\u70b9\u6807\u7b7e\u5206\u7ec4": 321, "\u540c\u4e0a": 321, "\u540c\u65f6": [603, 608], "\u540c\u65f6\u5982\u679c\u4f60\u53ef\u4ee5\u8bbf\u95ee": 603, "\u540c\u65f6\u652f\u6301\u5355\u673a\u548c\u5206\u5e03\u5f0f\u8bad\u7ec3": 609, "\u540c\u65f6\u7528\u6237\u9700\u8981\u5b9e\u73b0app\u76f8\u5e94\u7684": 600, "\u540c\u65f6\u7cfb\u7edf\u4f1a\u4e3a\u6bcf\u4e2a\u70b9\u548c\u8fb9\u5bf9\u8c61": 608, "\u540c\u65f6\u8fd8\u8981\u4f7f\u7528offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9\u7684nbr\u586b\u5145dst": 321, "\u540d\u79f0\u7b49": 603, "\u540e": 609, "\u540e\u6839\u636e\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u8f6c\u6362\u6210\u5bf9\u5e94\u7684tensor\u683c\u5f0f": 609, "\u540e\u7aef\u670d\u52a1\u7684\u5165\u53e3": 601, "\u540e\u7eed\u62c9\u8d77\u7684\u5176\u4ed6\u6bcf\u4e2a": 604, "\u540e\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u5c06\u56fe\u52a0\u8f7d\u8fdb\u5185\u5b58": 609, "\u5411vertex": 321, "\u5411\u91cf": 609, "\u5411\u91cf\u4f5c\u4e3a\u8868\u5f81": 604, "\u542f\u52a8graphscope\u65f6\u7531\u4e8e\u8fde\u63a5v6d": 603, "\u547d\u4ee4\u65f6": 603, "\u548c": [321, 431, 600, 602, 603, 604, 605, 607, 608, 609, 610], "\u548cedg": 321, "\u548ceid\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u5177\u4f53\u7684\u5c5e\u6027": 321, "\u548cpytorch": 609, "\u548c\u4e00\u4e2a\u6295\u5f71\u7684\u51fd\u6570": 605, "\u548c\u4e00\u4e2a\u7c7b\u522b\u540d\u79f0": 608, "\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 605, "\u548c\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58": 610, "\u548c\u51fa\u8fb9\u540c\u7406": 321, "\u548c\u56fe\u5206\u7247\u5b58\u50a8\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4": 608, "\u548c\u5c5e\u6027\u540d\u53ca\u503c\u7c7b\u578b": 608, "\u548c\u5f15\u64ce": 604, "\u548c\u7528\u6237\u81ea\u5b9a\u4e49\u4e3b\u952e\u4fe1\u606f": 608, "\u548c\u793a\u4f8b\u7528\u6cd5": 608, "\u548c\u7aef\u53e3": 608, "\u548c\u81ea\u8eab\u7279\u5f81\u8fdb\u884c\u7ec4\u5408": 609, "\u548c\u8fb9\u90fd\u53ef\u4ee5\u5177\u6709\u5c5e\u6027": 604, "\u552f\u4e00\u6807\u8bc6": 604, "\u5546\u54c1": 608, "\u56db\u7c7b\u8fb9\u76f8\u4e92\u5173\u8054": 608, "\u56de\u4e00\u8df3\u90bb\u5c45": 609, "\u56e0\u4e3a": 609, "\u56e0\u4e3a\u5728adjlist\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u51fa\u8fb9\u5c5e\u6027\u8868\u7684\u8d77\u59cb\u5730\u5740": 321, "\u56e0\u4e3a\u7cfb\u7edf\u7684\u5168\u5206\u5e03\u5f0f\u53ef\u6269\u5c55\u67b6\u6784": 608, "\u56e0\u6b64": [601, 602, 604], "\u56e0\u6b64\u4e0a\u9762\u4ee3\u7801\u662f\u91c7\u6837\u4e8c\u8df3\u90bb\u5c45": 609, "\u56e0\u6b64\u518d\u7ed9\u51fa\u5c5e\u6027\u7684\u5217\u53f7\u5c31\u80fd\u591f\u53bb\u5f97\u5230\u5177\u4f53\u7684\u6570\u636e": 321, "\u56e0\u6b64\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9ed8\u8ba4\u914d\u7f6e\u5c31\u8db3\u591f\u4e86": 603, "\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u901a\u8fc7\u9876\u70b9\u548c\u8fb9\u7684\u7c7b\u578b\u6765\u751f\u6210\u4e00\u4e2a\u7b80\u5355\u56fe": 600, "\u56e0\u6b64\u9009\u62e9": 609, "\u56e0\u6b64\u9700\u8981\u672c\u5730\u4e8b\u5148\u5b89\u88c5": 602, "\u56fe": 605, "\u56fe\u4e0a\u7684\u70b9": 610, "\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61": 608, "\u56fe\u4e2d\u865a\u7ebf\u5c55\u793a\u7684\u4e00\u6761": 608, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 606, "\u56fe\u4fee\u6539\u64cd\u4f5c": 608, "\u56fe\u5206\u6790": 606, "\u56fe\u5206\u6790\u548c\u56fe\u5b66\u4e60\u4efb\u52a1": 604, "\u56fe\u5206\u6790\u5f15\u64ce": [602, 606], "\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u4e00\u4e2ajava\u7684\u56fe\u7b97\u6cd5": 600, "\u56fe\u5206\u6790\u5f15\u64ce\u5185\u7f6e\u4e86\u8bb8\u591a\u5e38\u7528\u7684\u56fe\u5206\u6790\u7b97\u6cd5": 600, "\u56fe\u5206\u6790\u662f\u5728\u771f\u5b9e\u573a\u666f\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u7c7b\u56fe\u8ba1\u7b97": 604, "\u56fe\u5b66\u4e60\u5f15\u64ce": [601, 606], "\u56fe\u5b66\u4e60\u5f15\u64ce\u7684\u751f\u547d\u5468\u671f": 604, "\u56fe\u5b66\u4e60\u6a21\u578b": 606, "\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5b9e\u73b0\u76ee\u524d\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f": 609, "\u56fe\u5d4c\u5165\u7b97\u6cd5\u7b49": 609, "\u56fe\u5f15\u64ce\u5206\u5e03\u5f0f\u5b58\u50a8\u56fe\u7684\u62d3\u6251\u548c\u5c5e\u6027\u4fe1\u606f\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u56fe\u91c7\u6837\u67e5\u8be2": 609, "\u56fe\u6570\u636e\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u88ab\u5904\u7406\u6570\u636e\u7684\u4e00\u90e8\u5206": 600, "\u56fe\u6570\u636e\u5206\u5e03\u5728\u8fd9\u4e2a\u4f1a\u8bdd\u80cc\u540e\u62c9\u8d77\u7684": 604, "\u56fe\u67e5\u8be2\u5f15\u64ce": 601, "\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u5b66\u4e60": 606, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 606, "\u56fe\u795e\u7ecf\u7f51\u7edc": 606, "\u56fe\u7b97\u6cd5\u51fd\u6570": 600, "\u56fe\u7f16\u7801\u5668": 609, "\u56fe\u904d\u5386\u548c\u8d1f\u91c7\u6837\u65b9\u6cd5": 609, "\u5728": [600, 601, 602, 603, 604, 607, 608, 609, 610], "\u5728aw": 606, "\u5728gremlin\u4e2d\u901a\u8fc7": 608, "\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b": 610, "\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc": 610, "\u5728\u4e0b\u9762\u7684\u5c5e\u6027\u56fe\u4e2d": 610, "\u5728\u4f1a\u8bdd\u7684\u62c9\u8d77\u9636\u6bb5": 603, "\u5728\u5355\u673a\u6a21\u5f0f\u4e0b": 610, "\u5728\u5404\u79cd\u4e1a\u52a1\u4e2d\u90fd\u975e\u5e38\u6709\u6548": 604, "\u5728\u56fe\u4e0a\u8fd0\u884c\u81ea\u5df1\u7684\u7b97\u6cd5": 600, "\u5728\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u7b97\u6cd5\u4e4b\u540e": 600, "\u5728\u5e95\u5c42": 605, "\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u4e4b\u540e": 600, "\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d": 604, "\u5728\u6267\u884c\u56fe\u7b97\u6cd5\u5206\u6790\u9636\u6bb5": 603, "\u5728\u63a5\u4e0b\u6765\u4e00\u7ae0\u91cc": 609, "\u5728\u652f\u6301\u4ee5\u4e0b\u73af\u5883\u4e2d\u8fd0\u884c": 603, "\u5728\u672c\u4f8b\u4e2d\u4e3a": 604, "\u5728\u672c\u5730\u9a8c\u8bc1\u81ea\u5b9a\u4e49\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u4e4b\u540e": 600, "\u5728\u67d0\u4e9b\u573a\u666f\u4e0b": 605, "\u5728\u6b64\u4e4b\u540e": 600, "\u5728\u6b64\u57fa\u7840\u4e0a\u505a\u5f00\u53d1\u6216\u4ee3\u7801\u7684\u66f4\u6539": 602, "\u5728\u6b64\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2agremlin\u7684\u603b\u4f53\u4ecb\u7ecd": 608, "\u5728\u6b64\u793a\u4f8b\u4e2d": 604, "\u5728\u6e90\u9876\u70b9\u6240\u5728\u5206\u533a\u4e2d": 600, "\u5728\u7eaf": 600, "\u5728\u8be5\u56fe\u4e0a\u9884\u6d4b\u6bcf\u7bc7\u8bba\u6587\u7684\u7c7b\u522b": 604, "\u5728\u8be5\u6570\u636e\u4e2d": 604, "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b": [600, 610], "\u5728\u8fd9\u91cc": 610, "\u5728\u901a\u8fc7": 603, "\u5728\u90a3\u91cc\u5c06\u5176\u8d4b\u503c\u4e3a": 610, "\u5728\u963f\u91cc\u5df4\u5df4\u5185\u5916\u90e8\u5e94\u7528\u4e2d": 606, "\u5730\u5740": 608, "\u57fa\u4e8e": [606, 611], "\u57fa\u4e8egl": 609, "\u57fa\u4e8epytorch\u7684\u6a21\u578b\u6b63\u5728\u5f00\u53d1\u4e2d": 609, "\u57fa\u4e8e\u4e0a\u9762\u4ecb\u7ecd\u7684\u6570\u636e\u6a21\u578b\u548c\u7f16\u7801\u5668": 609, "\u57fa\u4e8e\u5f53\u524d": 602, "\u57fa\u4e8e\u96c6\u5408\u7684local\u8ba1\u7b97": 608, "\u586b\u5145": 321, "\u586b\u5145dst": 321, "\u586b\u5145\u76ee\u7684\u9876\u70b9lid": 321, "\u589e\u52a0\u4e86\u65b0\u7684\u6807\u7b7e\u7684\u65b0\u56fe": 605, "\u589e\u91cf\u8ba1\u7b97": 600, "\u5904\u7406dst\u7684\u903b\u8f91\u540c\u7406": 321, "\u5904\u7406\u7b2c\u4e00\u4e2a\u5143\u7d20": 321, "\u5904\u7406\u8fb9\u5305\u62ec\u4ee5\u4e0b5\u4e2a\u6b65\u9aa4": 321, "\u5904\u7406\u9876\u70b9": 321, "\u5916": 610, "\u5916\u90e8\u70b9": 321, "\u5916\u90e8\u70b9gid": 321, "\u5916\u90e8\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 321, "\u5916\u90e8\u70b9\u7684lid\u7531label": 321, "\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 605, "\u591a\u4e8e\u4e00\u4e2a\u70b9": 605, "\u591a\u6837\u6027\u548c\u590d\u6742\u6027": 600, "\u591a\u8df3\u90bb\u5c45": 609, "\u591a\u91cd\u6620\u5c04": 608, "\u5927\u591a\u6570\u5185\u7f6e\u7b97\u6cd5\u53ea\u652f\u6301\u5728\u7b80\u5355\u56fe\u4e0a\u8fdb\u884c\u8ba1\u7b97": 600, "\u5927\u591a\u6570\u60c5\u51b5\u4e0b": 603, "\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5de5\u4f5c\u7684\u5f88\u597d": 610, "\u5931\u8d25": 603, "\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u6709\u54ea\u4e9b": 603, "\u5982": [600, 603, 606, 608], "\u5982tensorflow": 609, "\u5982\u4e0a\u8ff0\u4ee3\u7801\u6240\u793a": 601, "\u5982\u4e0b\u6240\u793a": 608, "\u5982\u4ee3\u7801\u6240\u793a": 600, "\u5982\u4f55\u5982\u67e5\u770b": 603, "\u5982\u4f55\u89e3\u51b3": 603, "\u5982\u4f55\u8bbe\u7f6e": 603, "\u5982\u4f55\u8f7d\u56fe": 611, "\u5982\u679c": 603, "\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362": 605, "\u5982\u679c\u4e3a\u7a7a\u5217\u8868": 610, "\u5982\u679c\u4f60\u662f\u901a\u8fc7": 601, "\u5982\u679c\u4f60\u7684\u4ee3\u7801\u6ca1\u6709\u901a\u8fc7ci\u7684\u98ce\u683c\u68c0\u67e5": 602, "\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u662f\u4f7f\u7528": 603, "\u5982\u679c\u4f60\u9700\u8981\u8be5\u5206\u53d1\u5305\u80fd\u652f\u6301\u4e0d\u540c\u7684": 602, "\u5982\u679c\u5185\u7f6e\u7b97\u6cd5\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42": 600, "\u5982\u679c\u56fe\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u70b9\u6807\u7b7e": 610, "\u5982\u679c\u5728\u4e0b\u9762\u7684\u5217\u8868\u4e2d\u4ecd\u7136\u65e0\u6cd5\u627e\u5230\u60a8\u9047\u5230\u7684\u95ee\u9898\u7684\u7b54\u6848": 603, "\u5982\u679c\u5f00\u53d1\u8005\u6b63\u5728\u5f00\u53d1": 602, "\u5982\u679c\u5f53\u524d\u7f51\u7edc\u4e0b\u8f7d\u955c\u50cf\u8fc7\u6162": 603, "\u5982\u679c\u60a8\u7684graphscope\u8fd0\u884c\u5728k8s\u96c6\u7fa4\u4e0a": 603, "\u5982\u679c\u6709\u7684\u8bdd": 608, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u5c5e\u6027\u56fe\u4e0a": 600, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u7b80\u5355\u56fe\u4e0a": 600, "\u5982\u679c\u7528\u6237\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e": 603, "\u5982\u679c\u7528\u6237\u7684": 610, "\u5982\u679c\u7701\u7565\u6216\u4e3a": 610, "\u5982\u679c\u786e\u5b9a\u56fe\u70b9id\u8303\u56f4\u4e0d\u4f1a\u8d85\u8fc7": 610, "\u5982\u679c\u8fd0\u884c": 601, "\u5982\u98ce\u63a7": 606, "\u5b50": 608, "\u5b50\u56fe": 321, "\u5b50\u56feid": 321, "\u5b50\u56fe\u7684\u552f\u4e00\u7f16\u53f7": 321, "\u5b50\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 608, "\u5b57\u5178\u7684\u952e\u662f\u6807\u7b7e\u540d": 605, "\u5b58\u50a8\u4e86\u9876\u70b9": 321, "\u5b58\u50a8\u6570\u636e\u96c6\u7684\u5185\u5b58": 603, "\u5b58\u5728\u4ee5\u4e0b\u7f16\u7801\u65b9\u5f0f": 321, "\u5b83\u4e0d\u6539\u53d8\u8f93\u5165\u904d\u5386\u5668\u96c6\u5408": 608, "\u5b83\u4e3a\u4e0d\u540c\u7ecf\u9a8c\u7684\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u7528\u7684\u4ea4\u4e92\u5f0f\u73af\u5883": 608, "\u5b83\u4ece\u5b9e\u9645\u95ee\u9898\u51fa\u53d1": 609, "\u5b83\u4eec\u4f9d\u636egremlin\u67e5\u8be2\u63d0\u4f9b\u7684\u7528\u6237\u6307\u4ee4\u5728\u8f93\u5165\u56fe\u4e2d\u6e38\u8d70": 608, "\u5b83\u4eec\u901a\u8fc7": 608, "\u5b83\u5141\u8bb8\u4e00\u4e2a": 608, "\u5b83\u5305\u542b": 608, "\u5b83\u53ef\u80fd\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32": 610, "\u5b83\u5b58\u50a8\u7531": 603, "\u5b83\u5c01\u88c5": 601, "\u5b83\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u8d26\u6237": 608, "\u5b83\u6240\u505a\u7684\u4e8b\u60c5\u53ea\u662f\u5bf9\u4e00\u4e2a\u7b80\u5355\u56fe\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u4e86\u904d\u5386": 600, "\u5b83\u652f\u6301\u4e00\u6b21\u8f7d\u5165": 608, "\u5b83\u6574\u5408\u4e86\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u591a\u4e2a\u91cd\u8981\u7684\u521b\u65b0\u6027\u6280\u672f": 606, "\u5b83\u7531\u4e00\u4e2abatch\u7684\u79cd\u5b50\u70b9\u6216\u8005\u8fb9": 609, "\u5b83\u7531\u5e95\u5c42\u7684\u4e00\u4e2a\u56fe\u5f15\u64ce\u548c\u4e0a\u5c42\u7684": 609, "\u5b83\u76f8\u5f53\u4e8e": 603, "\u5b83\u8868\u8fbe\u4e86\u67e5\u8be2\u7ed3\u679c\u4ec5\u9700\u8981\u5305\u542b\u4e00\u4e2a\u8fd9\u6837\u7684\u8def\u5f84": 608, "\u5b83\u88ab\u72ec\u7acb\u5e94\u7528\u4e8e\u5faa\u73af\u4f53\u7684\u6bcf\u4e00\u4e2a\u8f93\u51fa\u904d\u5386\u5668": 608, "\u5b83\u8981\u6c42\u8be5\u8d77\u59cb\u70b9\u7684\u6807\u8bb0\u4e3a": 604, "\u5b89\u88c5": [601, 606], "\u5b89\u88c5gremlin": 608, "\u5b89\u88c5\u5230\u4f60\u7684\u672c\u5730\u73af\u5883\u4e0a": 600, "\u5b89\u88c5\u548c\u914d\u7f6egremlin": 608, "\u5b89\u88c5\u591a\u4e2a": 602, "\u5b89\u88c5\u5b8c\u6210\u540e": 600, "\u5b8c\u6574\u4ee3\u7801\u8bf7\u53c2\u8003": 609, "\u5b98\u65b9\u6587\u6863": 608, "\u5b9a\u4e49\u548c\u8f7d\u5165\u56fe": 604, "\u5b9a\u4e49\u5728\u9876\u70b9\u4e0a\u7684": 600, "\u5b9a\u4e49\u7f16\u7801\u5668": 609, "\u5b9a\u4e49\u9876\u70b9\u6570\u636e\u548c\u6d88\u606f\u6570\u636e\u7684\u7c7b\u578b": 600, "\u5b9a\u5236gremlin\u56fe\u904d\u5386\u7b56\u7565": 608, "\u5b9e\u4f8b": 601, "\u5b9e\u4f8b\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u5c42": 604, "\u5b9e\u4f8b\u5305\u542b": 601, "\u5b9e\u4f8b\u65f6": 603, "\u5b9e\u4f8b\u65f6\u9700\u8981\u4e0b\u8f7d\u5bf9\u5e94\u955c\u50cf": 603, "\u5b9e\u65f6\u5206\u6790\u4e0e\u4ea4\u4e92\u63a2\u7d22": 608, "\u5b9e\u73b0\u4e00\u4e2a\u7b97\u6cd5\u9700\u8981\u4e0b\u9762\u56db\u4e2a\u6b65\u9aa4": 609, "\u5b9e\u73b0\u4e86\u4e0etinkerpop\u751f\u6001\u65e0\u7f1d\u96c6\u6210": 608, "\u5b9e\u73b0\u4e86\u91cd\u8981\u7684\u4e1a\u52a1\u65b0\u4ef7\u503c": 606, "\u5ba2\u6237\u7aef": [601, 602, 606], "\u5ba2\u6237\u7aef\u4e0d\u5305\u542b\u5728\u8be5\u955c\u50cf\u4e2d": 602, "\u5ba2\u6237\u7aef\u4f7f\u7528": 603, "\u5ba2\u6237\u7aef\u5373\u53ef": 602, "\u5ba2\u6237\u7aef\u5e76\u4e14\u672a\u4fee\u6539\u5f15\u64ce\u76f8\u5173\u7684\u6587\u4ef6": 602, "\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u548c\u547d\u4ee4": 601, "\u5ba2\u6237\u7aef\u8c03\u7528": 604, "\u5bb6\u5ead\u5730\u5740": 608, "\u5bb9\u5668\u5206\u914d\u7684\u5185\u5b58": 603, "\u5bb9\u5668\u7684\u5185\u5b58\u5927\u5c0f": 603, "\u5bf9": 608, "\u5bf9etable\u6267\u884cshuffl": 321, "\u5bf9\u4e34\u63a5\u70b9\u6309\u7167lid\u6392\u5e8f": 321, "\u5bf9\u4e8e": [604, 607], "\u5bf9\u4e8ecora\u70b9\u5206\u7c7b\u6a21\u578b": 609, "\u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e9b\u5931\u8d25\u7684": 603, "\u5bf9\u4e8e\u5206\u5e03\u5f0f\u90e8\u7f72": 603, "\u5bf9\u4e8e\u539f\u59cbgcn\u6765\u8bf4\u56e0\u4e3a\u8981\u83b7\u5f97\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u5c45": 609, "\u5bf9\u4e8e\u5927\u591a\u6570gnn\u6a21\u578b": 609, "\u5bf9\u4e8e\u5c5e\u6027\u56fe\u7684\u7ed3\u679c": 600, "\u5bf9\u4e8e\u5f00\u53d1\u8005\u66f4\u4e3a\u53cb\u597d": 609, "\u5bf9\u4e8e\u65e0\u5411\u56fe": 321, "\u5bf9\u4e8e\u65e0\u5411\u56fe\u53ea\u6709oe_lists_\u88ab\u4f7f\u7528": 321, "\u5bf9\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60": 609, "\u5bf9\u4e8e\u65e2\u6709\u79bb\u6563\u7279\u5f81\u7531\u4e8e\u8fde\u7eed\u7279\u5f81\u7684\u60c5\u51b5": 609, "\u5bf9\u4e8e\u6709\u5411\u56fe": 321, "\u5bf9\u4e8e\u68c0\u6d4b\u5230\u7684\u73af": 608, "\u5bf9\u4e8e\u70b9\u6765\u8bf4": 608, "\u5bf9\u5e94\u5230\u884c\u53f7": 321, "\u5bf9\u5e94\u7684": 609, "\u5bf9\u6bd4tinkerpop": 606, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 606, "\u5bf9\u8c61": 601, "\u5bf9\u8c61\u4e8b\u5b9e\u4e0a\u662fpython\u7c7b": 608, "\u5bf9\u8c61\u6765\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c": 600, "\u5bf9\u8c61\u6765\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e": 600, "\u5bfc\u81f4\u5728": 603, "\u5bfc\u81f4\u65e0\u6cd5\u9ad8\u6548\u8bad\u7ec3\u751a\u81f3\u65e0\u6cd5\u8bad\u7ec3": 609, "\u5c01\u88c5": 321, "\u5c06": [600, 609], "\u5c06shuffle\u8fc7\u7684vtable\u548cetable\u9001\u7ed9basicarrowfragmentbuilder\u6784\u5efacsr": 321, "\u5c06src\u548cdst\u7684gid\u90fd\u8f6c\u6362\u6210lid": 321, "\u5c06vertex": 321, "\u5c06\u4ed6\u4eec\u5c01\u88c5\u6210\u5404\u79cdvineyardobject": 321, "\u5c06\u4f1a\u63a8\u65ad\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e\u4e3a\u8fd9\u4e00\u4e2a\u70b9\u6807\u7b7e": 610, "\u5c06\u4f1a\u89e3\u6790": 610, "\u5c06\u5176\u901a\u8fc7": 601, "\u5c06\u539f\u59cbcora\u8f6c\u6362\u6210": 609, "\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 610, "\u5c06\u6bcf\u4e00\u4e2a\u6e90\u9876\u70b9\u7684\u76ee\u7684\u9876\u70b9\u6392\u5e8f": 321, "\u5c06\u76f8\u5e94\u7684\u884c\u4f20\u8f93\u7ed9\u6b63\u786e\u7684\u8fdb\u7a0b": 321, "\u5c06\u7ed3\u679c\u4f5c\u4e3a\u65b0\u5217\u6dfb\u52a0\u56de\u5c5e\u6027\u56fe": 600, "\u5c06\u8282\u70b9": 604, "\u5c06\u8868\u4e2d\u7684\u8bb0\u5f55\u5206\u53d1\u7ed9\u9876\u70b9\u7684\u62e5\u6709\u8005": 321, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 606, "\u5c06\u90bb\u5c45\u8282\u70b9\u7279\u5f81\u8fdb\u884c\u6c47\u805a\u5e76": 609, "\u5c1d\u8bd5\u8f7d\u56fe\u5e76\u4e14\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684bfs\u7684\u7b97\u6cd5": 600, "\u5c42\u6784\u5efa\u56fe\u7f16\u7801\u5668": 609, "\u5c5e\u4e8e": 608, "\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 321, "\u5c5e\u6027": [321, 608, 610], "\u5c5e\u6027id": 321, "\u5c5e\u6027\u540d\u5e94\u5f53\u4e0e\u6570\u636e\u4e2d\u7684\u9996\u884c\u8868\u5934\u4e2d\u7684\u540d\u5b57\u76f8\u4e00\u81f4": 610, "\u5c5e\u6027\u56fe": 610, "\u5c5e\u6027\u56fe\u4e2d": 604, "\u5c5e\u6027\u56fe\u4e3a\u4f8b": 605, "\u5c5e\u6027\u56fe\u7684": 610, "\u5d4c\u5957\u904d\u5386": 608, "\u5d4c\u5957\u904d\u5386\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8fbe\u5faa\u73af": 608, "\u5df2\u7ecf\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u5b58\u50a8\u5728": 604, "\u5df2\u7ecf\u8bc1\u660e\u5728\u591a\u4e2a\u5173\u952e\u4e92\u8054\u7f51\u9886\u57df": 606, "\u5e2e\u52a9\u7528\u6237\u66f4\u5bb9\u6613\u7684\u4e0a\u624b": 610, "\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u6307\u5b9a": 610, "\u5e38\u89c1\u95ee\u9898": 606, "\u5e73\u53f0\u4e0a": 601, "\u5e76": 601, "\u5e76\u4e0d\u662f\u4e00\u4e2a\u56fe\u6570\u636e\u5e93": 603, "\u5e76\u4e14\u4e3a\u6bcf\u4e2akey\u8bbe\u7f6e\u522b\u540d": 608, "\u5e76\u4e14\u4e3a\u6bcf\u4e2avalue\u8bbe\u7f6e\u522b\u540d": 608, "\u5e76\u4e14\u4f1a\u4fdd\u7559\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528": 610, "\u5e76\u4e14\u5177\u6709\u6613\u4e8e\u4f7f\u7528": 604, "\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 610, "\u5e76\u4e14\u53ea\u4fdd\u5b58path\u7684\u6700\u672b\u7aef\u70b9": 608, "\u5e76\u4e14\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65": 605, "\u5e76\u4e14\u548c\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u517c\u5bb9": 609, "\u5e76\u4e14\u8fb9\u7684\u4e24\u7aef\u9876\u70b9\u7684\u6807\u7b7e\u4e5f\u662f\u786e\u5b9a\u7684": 604, "\u5e76\u4e14\u8fd0\u884c\u5728\u56fe\u5206\u6790\u5f15\u64ce\u4e0a": 600, "\u5e76\u4e14\u9700\u8981\u6839\u636e\u9700\u8981\u7684app\u7c7b\u578b\u6765\u5b9e\u73b0": 600, "\u5e76\u4ee5\u5c06\u5c5e\u6027\u56fe\u8f7d\u5165": 610, "\u5e76\u505a\u4e00\u4e9b\u6570\u636e\u5206\u6790\u7684\u5de5\u4f5c": 610, "\u5e76\u52a0\u8f7d\u5c5e\u6027\u56fe": 600, "\u5e76\u52a0\u8f7d\u9884\u7f16\u8bd1\u597d\u7684\u955c\u50cf": 607, "\u5e76\u5728": 607, "\u5e76\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5": 609, "\u5e76\u5c06\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u590d\u5236\u5230": 602, "\u5e76\u5df2\u7ecf\u6210\u529f\u5e94\u7528\u5728\u963f\u91cc\u5df4\u5df4": 609, "\u5e76\u5e2e\u52a9\u6570\u636e\u79d1\u5b66\u5bb6\u6765\u9ad8\u6548\u7684\u5206\u6790\u5927\u56fe": 604, "\u5e76\u6309\u7167vertex": 321, "\u5e76\u63d0\u4f9b\u4e09\u4e2a\u4e32\u884c": 600, "\u5e76\u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u548c\u7528\u6237\u900f\u660e\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6267\u884c": 608, "\u5e76\u63d0\u4f9b\u5927\u89c4\u6a21\u7684\u9ad8\u6548\u6267\u884c": 604, "\u5e76\u751f\u6210\u4e00\u5f20\u65b0\u56fe": 600, "\u5e76\u7ba1\u7406\u7740\u56fe\u5206\u6790\u5f15\u64ce": 601, "\u5e76\u7f16\u5199\u8bad\u7ec3\u8fc7\u7a0b": 609, "\u5e76\u884c\u7ebf\u7a0b\u6570\u4e3a1": 600, "\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684ivnum": 321, "\u5e76\u9ad8\u6548\u5730\u5904\u7406\u5927\u89c4\u6a21\u56fe\u6570\u636e": 600, "\u5e7f\u544a": 606, "\u5e8f\u53f7": 321, "\u5efa\u6a21\u56fe\u6570\u636e": [604, 610], "\u5efa\u7acb\u4e00\u4e2a\u4f1a\u8bdd": 604, "\u5efa\u8bae\u4f7f\u7528": 610, "\u5f00\u53d1\u4fbf\u6377": 606, "\u5f00\u53d1\u63a7\u5236\u53f0": 606, "\u5f00\u53d1\u76f8\u5173\u4f9d\u8d56": 601, "\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5728\u672c\u5730\u91cd\u65b0\u5b89\u88c5": 602, "\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cdgnn\u7b97\u6cd5": 609, "\u5f00\u53d1\u8005\u6307\u5357": 606, "\u5f00\u53d1\u8005\u9700\u8981\u901a\u8fc7": 602, "\u5f00\u59cb\u901a\u8fc7": 608, "\u5f15\u64ce": 601, "\u5f15\u64ce\u5bb9\u5668\u7684": 601, "\u5f15\u64ce\u5bb9\u5668\u7684\u7ba1\u7406": 601, "\u5f15\u64ce\u7684\u5404\u79cd\u7ec4\u4ef6": 601, "\u5f15\u7528": 604, "\u5f53": 610, "\u5f53id\u4e0d\u80fd\u7528": 610, "\u5f53\u4f60\u5b8c\u6210\u4ea4\u4e92": 608, "\u5f53\u524d": 604, "\u5f53\u524dfragment": 321, "\u5f53\u524dgraphscope\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 608, "\u5f53\u524d\u5b9a\u4f4d\u7684\u573a\u666f\u548c\u5b9e\u73b0\u4e0d\u652f\u6301\u4e0b\u5217\u529f\u80fd": 608, "\u5f53\u524d\u8bbe\u8ba1\u6709\u4e0b\u9762\u7684\u4e00\u4e9b\u9650\u5236": 608, "\u5f53\u56fe\u6784\u5efa\u597d\u5e76\u8f7d\u5165\u4e86": 605, "\u5f53\u5728": 604, "\u5f53\u5b8c\u6210\u4e00\u6b21\u56fe\u8ba1\u7b97": 600, "\u5f53\u6211\u4eec\u5b8c\u6210\u6240\u6709\u7684\u8ba1\u7b97\u8fc7\u7a0b\u540e": 604, "\u5f53\u6267\u884c\u4e00\u4e2a\u4ec5\u53ef\u4ee5\u8dd1\u5728\u7b80\u5355\u56fe\u4e0a\u7684\u7b97\u6cd5\u65f6": 605, "\u5f53\u6536\u5230\u5305\u542b\u6587\u4ef6\u8def\u5f84\u7684\u8f7d\u56fe\u8bf7\u6c42\u65f6": 610, "\u5f53\u65f6\u6211\u4eec\u7528\u5b83\u6765\u6784\u5efa\u4e00\u5f20\u56fe": 605, "\u5f53\u7136\u8fd9\u4e00\u6b65\u5e76\u4e0d\u4f1a\u5728\u539f\u56fe\u4e0a\u4fee\u6539": 605, "\u5f53\u8ba1\u7b97\u5b8c\u6210\u540e": 600, "\u5f97\u5230": 609, "\u5f97\u5230src\u548cdst\u4e24\u4e2agid\u6570\u7ec4\u540e": 321, "\u5f97\u5230\u591a\u4e2avertex": 321, "\u5f97\u5230\u6700\u540e\u7684\u70b9\u6216\u8005\u8fb9\u7684\u5411\u91cf": 609, "\u5f97\u5230\u6700\u7ec8\u7684\u8f93\u51fa": 609, "\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c": 600, "\u5faa\u73af": 608, "\u5feb\u901f\u4e0a\u624b": [600, 606], "\u5feb\u901f\u5b89\u88c5": 603, "\u5feb\u901f\u7684\u65b9\u5f0f\u662f\u5728\u6240\u6709\u76f8\u5173\u7684": 603, "\u6027\u80fd\u6781\u81f4\u7b49\u7279\u70b9": 606, "\u603b\u662f": 321, "\u603b\u662f\u7ed9\u6807\u7b7e\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\u4e5f\u6709\u597d\u5904": 610, "\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528": 603, "\u60a8\u4e5f\u53ef\u4ee5\u5728": 607, "\u60a8\u53ef\u4ee5\u4ece": 600, "\u60a8\u53ef\u4ee5\u63d0\u4ea4": 603, "\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u914d\u7f6e\u5f15\u64ce\u955c\u50cf\u5730\u5740\u7b49\u53c2\u6570": 601, "\u60a8\u53ef\u4ee5\u901a\u8fc7": 600, "\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4ee5\u4e0b\u7b97\u6cd5\u7c7b\u6765\u5728": 600, "\u610f\u4e49\u4e0e\u884c\u4e3a\u90fd\u548c\u70b9\u4e2d\u7684\u4e00\u81f4": 610, "\u610f\u4e49\u548c\u8868\u73b0\u4e0e\u70b9\u4e2d\u7684": 610, "\u611f\u53d7\u91ce": 609, "\u6210": 609, "\u6211\u4eec\u4e3agraphscope\u7684\u7528\u6237\u51c6\u5907\u4e86\u4e00\u7cfb\u5217\u8be6\u5c3d\u7684\u5165\u95e8\u6559\u7a0b": 611, "\u6211\u4eec\u4e3a\u9009\u62e9\u5668\u4fdd\u7559\u4e86\u4e09\u4e2a\u5173\u952e\u5b57": 600, "\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u5176\u589e\u52a0\u66f4\u591a\u7684\u6807\u7b7e": 605, "\u6211\u4eec\u4ee5\u56fe\u795e\u7ecf\u7f51\u7edc\u91cc\u6700\u6d41\u884c\u7684gcn\u6a21\u578b\u505a\u4e3a\u793a\u4f8b\u6765\u8bf4\u660e": 609, "\u6211\u4eec\u4f7f\u7528cora\u6570\u636e\u96c6\u4ee5\u70b9\u5206\u7c7b\u4efb\u52a1\u505a\u4e3a\u793a\u4f8b": 609, "\u6211\u4eec\u4f7f\u7528\u56fe\u904d\u5386\u6765\u67e5\u770b\u4e24\u4f4d\u7ed9\u5b9a\u4f5c\u8005\u5171\u540c\u64b0\u5199\u7684\u8bba\u6587\u6570\u91cf": 604, "\u6211\u4eec\u5047\u8bbe\u4f5c\u8005\u53ef\u4ee5\u5206\u522b\u7531id": 604, "\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 610, "\u6211\u4eec\u53d1\u73b0\u5c06\u5176\u8bbe\u7f6e\u4e3a\u6570\u636e\u96c6\u5728\u78c1\u76d8\u4e0a\u7684\u5927\u5c0f\u7684": 603, "\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7": 607, "\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u5185\u6dfb\u52a0\u4e00\u4e2a\u70b9\u6807\u7b7e": 610, "\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u4e00\u4e2a\u5b57\u5178": 601, "\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u672c\u6587\u6863\u7684\u4ee5\u4e0b\u6b65\u9aa4\u90e8\u7f72\u4e00\u4e2a\u672c\u5730": 607, "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5feb\u901f\u5730\u5b9e\u73b0\u4e0d\u540c\u7684\u56fe\u5b66\u4e60\u7b97\u6cd5": 609, "\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5df2\u7ecf\u770b\u5230\u8fc7\u4e86": 610, "\u6211\u4eec\u5b9e\u73b0": 609, "\u6211\u4eec\u5b9e\u73b0\u4e86gcn": 609, "\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u7cfb\u5217\u53ef\u4ee5\u5728\u56fe\u4e0a\u8fdb\u884c\u65b0\u589e": 605, "\u6211\u4eec\u5c06\u4f7f\u7528": 610, "\u6211\u4eec\u5c06\u5176\u4ee5": 610, "\u6211\u4eec\u5c06\u8f7d\u5165\u548c\u4e0a\u9762\u540c\u6837\u7684\u4e00\u5f20\u56fe": 610, "\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5c06\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u52a0\u56de\u5230\u56fe\u4e2d\u53bb": 605, "\u6211\u4eec\u5df2\u7ecf\u5728": 605, "\u6211\u4eec\u5df2\u7ecf\u8f7d\u5165\u4e86\u4e00\u5f20\u56fe": 605, "\u6211\u4eec\u6269\u5c55\u4e86\u4e00\u4e9b\u8bed\u6cd5\u7cd6\u6765\u8fdb\u4e00\u6b65\u5f15\u5165\u4e00\u4e9b\u7b80\u6d01\u660e\u4e86\u7684expression\u8868\u793a": 608, "\u6211\u4eec\u62bd\u8c61\u4e86": 609, "\u6211\u4eec\u62bd\u8c61\u4e864\u4e2a\u57fa\u672c\u7684\u51fd\u6570": 609, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 610, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728aws\u6216\u963f\u91cc\u4e91\u4e0a\u521b\u5efa": 601, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728\u672c\u5730\u5b89\u88c5graphscope\u76f8\u5173\u4f9d\u8d56\u7684\u811a\u672c": 601, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u8f6c\u6362\u811a\u672c": 609, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6765\u6ee1\u8db3\u7528\u6237\u7684": 600, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u56fe\u5206\u6790\u7b97\u6cd5\u7684\u793a\u4f8b\u5b9e\u73b0": 600, "\u6211\u4eec\u63d0\u4f9b\u4e86\u5b89\u88c5\u4e86\u6240\u9700\u4f9d\u8d56\u7684": 602, "\u6211\u4eec\u63d0\u4f9b\u4e86\u9009\u9879\u4f9b\u7528\u6237\u5c06\u672c\u673a\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u96c6\u7fa4\u4e0a": 601, "\u6211\u4eec\u6536\u96c6\u4e86\u7528\u6237\u4f7f\u7528": 603, "\u6211\u4eec\u70ed\u5ff1\u6b22\u8fce\u6765\u81ea\u5f00\u6e90\u793e\u533a\u7684": 602, "\u6211\u4eec\u73b0\u5728\u8f7d\u5165\u5176\u4e2d\u4e00\u90e8\u5206\u6807\u7b7e": 605, "\u6211\u4eec\u7528jupyt": 611, "\u6211\u4eec\u8bad\u7ec3\u4e86": 604, "\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u5f00\u53d1\u4e00\u4e2agnn\u6a21\u578b": 609, "\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u5df2\u7ecf\u51c6\u5907\u597d\u7684jupyt": 611, "\u6211\u4eec\u9009\u62e9\u5bf9\u5e94\u7684tensorflow\u91cc\u7684\u5206\u7c7b\u635f\u5931\u51fd\u6570\u5373\u53ef": 609, "\u6211\u4eec\u901a\u8fc7": 603, "\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5165\u95e8\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528": 609, "\u6211\u4eec\u9700\u8981\u5728": 604, "\u6211\u4eec\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\u662f": 604, "\u6211\u4eec\u9700\u8981\u5c06\u4ece\u4e00\u5f20\u590d\u6742\u7684\u56fe\u63d0\u53d6\u51fa\u4e00\u4e2a\u5b50\u56fe": 605, "\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u57fa\u672c\u7684\u6570\u636e\u6a21\u578b": 609, "\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 610, "\u6211\u4eec\u9996\u5148\u5c06\u539f\u59cb\u7684\u70b9": 609, "\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u679c\u5728graphscop": 600, "\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u5176\u6295\u5f71\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u540c\u6784\u56fe\u4e2d": 604, "\u6216": [600, 601, 602, 603, 606, 608], "\u6216ip": 608, "\u6216\u4f9d\u636e\u7ed3\u679c\u503c\u4f5c\u4e3a\u6392\u5e8f\u4f9d\u636e": 608, "\u6216\u5199\u5165": 600, "\u6216\u5199\u5165\u672c\u5730\u7684": 600, "\u6216\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 605, "\u6216\u5bb9\u5668": 603, "\u6216\u5c1d\u8bd5\u901a\u8fc7": 603, "\u6216\u5f53\u524d\u96c6\u7fa4\u8d44\u6e90\u65e0\u6cd5\u6ee1\u8db3\u8bf7\u6c42\u7684\u8d44\u6e90\u65f6": 603, "\u6216\u662f\u5199\u5165\u4e91\u4e2d\u67d0\u4f4d\u7f6e\u6216\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf": 600, "\u6216\u672c\u5730\u76ee\u5f55\u4e2d": 600, "\u6216\u76ee\u6807\u70b9": 610, "\u6216\u8005": [600, 602, 609, 610], "\u6216\u8005\u4f7f\u7528\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 603, "\u6216\u8005\u53ef\u4ee5\u662f\u4e00\u4e2a\u6b63\u6574\u6570": 610, "\u6216\u8005\u5728": 603, "\u6216\u8005\u5728\u914d\u7f6e\u4e2d\u5c06\u8def\u5f84\u63d0\u524d\u6302\u8f7d\u5230\u865a\u62df\u4e3b\u673a\u4e0a\u53bb": 601, "\u6216\u8005\u662f": 610, "\u6216\u8005\u9762\u5411\u5b9e\u9645\u573a\u666f\u5b9a\u5236\u5316\u4e00\u79cd\u56fe\u7b97\u5b50": 609, "\u6240\u4ee5\u4e0d\u7528\u7ed9\u51fa": 321, "\u6240\u4ee5\u5e76\u4e0d\u4f1a\u5c06\u539f\u56fe\u7684\u6570\u636e\u590d\u5236\u4e00\u4efd": 605, "\u6240\u4ee5\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6302\u8f7d\u4e86": 610, "\u6240\u4ee5\u82e5\u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u6807\u7b7e": 610, "\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528": 609, "\u6240\u4ee5\u91c7\u6837\u51fa\u7684": 609, "\u6240\u5728\u7684\u4f01\u4e1a\u7f51\u7edc\u5185\u8981\u6c42\u76f8\u5e94\u7684\u4ee3\u7406\u8bbe\u7f6e\u65b9\u53ef\u6b63\u5e38\u4f7f\u7528\u7f51\u7edc": 603, "\u6240\u6709\u5fc5\u8981\u7684\u4f9d\u8d56\u90fd\u88ab\u5305\u62ec\u5230": 600, "\u6240\u6709\u7684\u56fe\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4f7f\u7528\u7f16\u7801\u5668\u5c06": 609, "\u6240\u6709\u7684\u9876\u70b9": 604, "\u6240\u6709\u8d44\u6e90": 604, "\u624b\u52a8\u914d\u7f6e\u56fe": 606, "\u624d\u5e94\u8be5\u4f7f\u7528": 610, "\u624d\u80fd\u4f7f\u7528": 609, "\u6253\u4e0a\u4e00\u4e2a\u6709\u540d\u6807\u7b7e": 608, "\u6267\u884c": 602, "\u6267\u884c\u56fe\u7b97\u6cd5\u505a\u56fe\u5206\u6790": 604, "\u6267\u884c\u57fa\u4e8e\u56fe\u6570\u636e\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1": 604, "\u627e\u51fa\u672cfragment\u5168\u90e8\u5916\u90e8\u70b9\u7684gid": 321, "\u627e\u5230\u4e0d\u91cd\u590d\u7684\u4e24\u4e2agid": 321, "\u627e\u5230\u6240\u6709\u4ece": 608, "\u627e\u5230\u6240\u6709\u76ee\u524d\u652f\u6301\u7684\u6570\u636e\u96c6": 610, "\u627e\u5230\u6e90\u6570\u636e": 610, "\u6280\u672f\u9884\u89c8\u7248\u5229\u7528\u4e86": 608, "\u6295\u5f71": 606, "\u6295\u5f71\u7684\u65b9\u6cd5": 605, "\u6307\u4ee3": 608, "\u6307\u5411\u5305\u542b\u7528\u6237\u60f3\u8981\u8fd0\u884c\u7684\u7b97\u6cd5\u7684jar\u5305": 600, "\u6307\u5411\u6e90\u9876\u70b9\u7684\u4e0b\u4e00\u6761\u51fa\u8fb9": 321, "\u6307\u5b9a\u5176\u7c7b\u578b\u6216\u89d2\u8272": 608, "\u6307\u5b9a\u7528\u65b0\u7f16\u8bd1\u7684\u955c\u50cf": 602, "\u6307\u5b9a\u91c7\u6837\u6a21\u5f0f": 609, "\u6307\u793a": 610, "\u6307\u793a\u662f\u5426\u4e3a\u6bcf\u6761\u8fb9\u5206\u914d\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684id": 610, "\u6307\u793a\u662f\u5426\u662f\u5426\u5c06\u70b9\u539f\u59cbid\u4fdd\u7559\u4e3a\u5c5e\u6027": 610, "\u6307\u793a\u8f7d\u5165\u65e0\u5411\u56fe\u8fd8\u662f\u6709\u5411\u56fe": 610, "\u6309\u7167elabel\u904d\u5386\u6bcf\u4e00\u5f20edg": 321, "\u6309\u7167vertex": 321, "\u6309\u7167\u6267\u884c\u6d41\u7a0b\u7f16\u53f7": 321, "\u6309\u7167\u76ee\u7684\u9876\u70b9\u7684lid": 321, "\u6392\u5e8f": 608, "\u6392\u5e8fgid": 321, "\u63a2\u7d22\u6027": 604, "\u63a5\u4e0b\u6765": [607, 608, 609], "\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u8fd9\u5f20\u56fe\u4e0a\u518d\u6dfb\u52a0\u51e0\u4e2a\u6807\u7b7e": 605, "\u63a5\u53e3": [608, 609], "\u63a5\u6536\u6765\u81ea": 601, "\u63a5\u7740\u4e0a\u4e00\u6b65": 604, "\u63a5\u7740\u4f7f\u7528\u5c01\u88c5\u7684\u5355\u673a\u8bad\u7ec3\u8fc7\u7a0b": 609, "\u63a7\u5236\u53f0\u4fbf\u53ef\u4ee5\u521b\u5efa\u56fe": 610, "\u63a8\u8350\u603b\u662f\u4f7f\u7528\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6807\u7b7e\u540d": 610, "\u63cf\u8ff0\u4e86\u8f7d\u56fe\u7684\u4e3b\u8981\u903b\u8f91": 321, "\u63d0\u4f9b\u4e00\u7ad9\u5f0f\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848": 606, "\u63d0\u4f9b\u4e86": 606, "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u7edf\u4e00\u7f16\u7a0b\u6846\u67b6": 609, "\u63d0\u4f9b\u4e86\u4e24\u4e2a\u589e\u52a0\u6807\u7b7e\u7684\u51fd\u6570": 605, "\u63d0\u4f9b\u4e86\u4f01\u4e1a\u7ea7\u573a\u666f\u4e0b\u7684\u6781\u81f4\u6027\u80fd\u7b49": 606, "\u63d0\u4f9b\u4e86\u5982\u4f55\u805a\u5408\u90bb\u5c45\u4fe1\u606f\u5230\u81ea\u8eab\u8282\u70b9\u6216\u8005\u8fb9\u7684\u62bd\u8c61": 609, "\u63d0\u4f9b\u7684\u57fa\u672capi\u914d\u5408\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce": 609, "\u63d0\u4f9b\u7684\u6807\u4ef7": 608, "\u63d0\u4f9b\u8bad\u7ec3\u6240\u9700\u8981\u7684\u6570\u636e": 609, "\u63d0\u51fa\u4f60\u7684\u95ee\u9898": 603, "\u63d0\u70bc\u548c\u62bd\u8c61\u4e86\u4e00\u5957\u9002\u5408\u4e8e\u5f53\u4e0b\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u7f16\u7a0b\u8303\u5f0f": 609, "\u63d0\u793a\u7b26\u4e0b": 608, "\u6458\u8981\u62bd\u53d6\u7684": 604, "\u64b0\u5199": 604, "\u64cd\u4f5c\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u904d\u5386\u4f5c\u4e3a\u5faa\u73af\u4f53": 608, "\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6574\u578b\u5e38\u91cf": 608, "\u64cd\u4f5c\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u67e5\u8be2": 608, "\u64cd\u4f5c\u5404\u81ea\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5957\u67e5\u8be2\u8bb2\u6bcf\u4e00\u4e2a\u8f93\u5165\u5355\u72ec\u6620\u5c04\u5230\u4ece\u5b83\u5f00\u59cb\u7684\u5b50\u904d\u5386\u5f97\u5230\u7684\u7ed3\u679c": 608, "\u64cd\u4f5c\u548c\u968f\u540e\u7684": 608, "\u64cd\u4f5c\u5c55\u793a\u6bcf\u4e2a\u904d\u5386\u5668\u7684\u5b8c\u6210\u8def\u5f84\u4fe1\u606f": 608, "\u64cd\u4f5c\u662f\u4e00\u4e2a": 608, "\u64cd\u4f5c\u68c0\u67e5\u6b64\u65f6\u904d\u5386\u8def\u5f84\u7684\u4e0b\u4e00\u8df3\u662f\u5426\u53ef\u4ee5\u56de\u5230\u8d77\u70b9": 608, "\u64cd\u4f5c\u7528\u6237\u5728": 601, "\u64cd\u4f5c\u7c7b\u4f3c": 608, "\u64cd\u4f5c\u7c7b\u4f3csql\u4e2d\u7684top": 608, "\u652f\u6301\u4e86\u56fe\u5206\u6790": 606, "\u652f\u6301\u4e86\u7b97\u6cd5\u7684\u81ea\u52a8\u5e76\u884c\u5316": 606, "\u652f\u6301\u4ece": 610, "\u652f\u6301\u5728\u5355\u673a\u6a21\u5f0f\u5b89\u88c5\u8fd0\u884c": 603, "\u652f\u6301\u591a\u79cd\u6570\u636e\u6e90": 610, "\u652f\u6301\u5c06\u4e32\u884c\u56fe\u7b97\u6cd5\u81ea\u52a8\u5e76\u884c\u5316": 600, "\u652f\u6301\u5e38\u89c1\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5f00\u53d1": 609, "\u652f\u6301\u62bd\u53d6\u5b50\u56fe\u5199\u5165vineyard\u5b58\u50a8": 608, "\u652f\u6301\u6d77\u91cf\u590d\u6742\u56fe\u6570\u636e\u4e0a\u7684": 608, "\u652f\u6301\u7528\u6237\u4ee5": 604, "\u652f\u6301\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u901a\u8fc7": 600, "\u652f\u6301\u7528\u6237\u7f16\u5199java\u7684pi": 600, "\u652f\u6301\u7528\u6237\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6765\u83b7\u53d6\u7ed3\u679c\u6570\u636e": 600, "\u6570\u636e": 604, "\u6570\u636e\u6587\u4ef6": 604, "\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u8981\u5bf9": 603, "\u6570\u636e\u7531": 610, "\u6570\u636e\u7ed3\u6784": 600, "\u6570\u636e\u96c6": 604, "\u6570\u7ec4\u7b49": 610, "\u6574\u5408\u4e86\u8fbe\u6469\u9662\u7684\u591a\u9879\u5b66\u672f\u7814\u7a76\u6210\u679c": 606, "\u6587\u4ef6\u4e2d\u5305\u62ec\u8be6\u7ec6\u7684\u4ecb\u7ecd\u548c\u7528\u6cd5": 610, "\u6587\u4ef6\u8def\u5f84\u5e94\u9075\u5faa": 610, "\u65b9\u4fbf\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5206\u6790\u56fe\u6570\u636e": 604, "\u65b9\u5f0f\u6765\u63a2\u7d22": 604, "\u65b9\u6cd5\u5c06\u7b97\u6cd5\u4fdd\u5b58\u6210": 600, "\u65e0\u9700\u4efb\u4f55\u66f4\u6539\u4f60\u5c31\u53ef\u4ee5\u5728": 600, "\u65f6": [603, 604], "\u65f6\u9047\u5230\u4e86": 603, "\u6620\u5c04": 608, "\u662f": 604, "\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf": 608, "\u662f\u4e0e": 600, "\u662f\u5426\u4e3a\u6709\u5411\u56fe": 321, "\u662f\u5426\u5f3a\u4f9d\u8d56": 603, "\u662f\u56fe\u5b66\u4e60\u7b97\u6cd5\u7f16\u7a0b\u7684\u57fa\u672c\u6570\u636e\u5bf9\u8c61": 609, "\u662f\u56fe\u6570\u636e\u5e93\u5417": 603, "\u662f\u57fa\u4e8egremlin\u8bed\u8a00\u5f00\u53d1\u4ea4\u4e92\u5f0f\u56fe\u5e94\u7528\u7684\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\u548c\u4e8b\u5b9e\u6807\u51c6": 608, "\u662f\u6211\u4eec\u901a\u8fc7": 610, "\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684java": 600, "\u662f\u7531\u5fae\u8f6f\u5b66\u672f\u5173\u7cfb\u56fe": 604, "\u662f\u8fd9\u4e2a\u6570\u636e\u96c6\u6240\u5728\u7684\u6587\u4ef6\u5939\u7684\u540d\u5b57": 610, "\u662f\u963f\u91cc\u5df4\u5df4\u8fbe\u6469\u9662\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u7814\u53d1\u5e76\u5f00\u6e90\u7684\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u5e73\u53f0": 606, "\u662f\u9762\u5411\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u7814\u53d1\u548c\u5e94\u7528\u800c\u8bbe\u8ba1\u7684\u4e00\u6b3e\u5206\u5e03\u5f0f\u6846\u67b6": 609, "\u66f4\u591aencoder\u8bf7\u53c2\u8003": 609, "\u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u770b": 604, "\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u7528\u6237\u9700\u8981\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\u96c6": 610, "\u66f4\u65b0offset": 321, "\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb": 600, "\u66f4\u8be6\u7ec6\u548c\u5b8c\u6574\u7684\u4ecb\u7ecd": 608, "\u66f4\u8be6\u7ec6\u7684\u6307\u5f15\u8bf7\u53c2\u770b": 604, "\u66ff\u6362\u6389\u539fetable\u7684oid\u6570\u7ec4": 321, "\u6700\u4f4epip\u7248\u672c\u662f": 603, "\u6700\u4f73\u6f14\u793a\u5956": 606, "\u6700\u4f73\u8bba\u6587\u5956": 606, "\u6700\u4f73\u8bba\u6587\u5956\u4e9a\u519b": 606, "\u6700\u540e": [604, 605, 608], "\u6700\u540e\u5c06": 609, "\u6700\u540e\u901a\u8fc7": 610, "\u6700\u7ec8\u6240\u6709\u505c\u6b62\u7684\u904d\u5386\u5668\u96c6\u5408": 608, "\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a\u6570\u636e\u8fed\u4ee3\u5668\u548c\u635f\u5931\u51fd\u6570": 609, "\u6709\u4e00\u4e2a\u540d\u4e3a": 610, "\u6709\u4e09\u4e2a\u914d\u7f6e\u5143\u4fe1\u606f\u7684\u53c2\u6570": 610, "\u6709\u4e86\u8fd9\u4e00url\u4fe1\u606f": 608, "\u6709\u4ec0\u4e48\u533a\u522b": 603, "\u6709\u51e0\u4e2a\u65b9\u6cd5\u6765\u914d\u7f6e": 610, "\u6709\u56db\u79cd\u8fde\u63a5\u5b83\u4eec\u7684\u8fb9": 604, "\u670d\u52a1\u63a5\u53e3": 608, "\u670d\u52a1\u7c7b\u578b": 604, "\u672c\u5730": 610, "\u672c\u5730id": 321, "\u672c\u5730\u90e8\u7f72": 601, "\u672c\u5730\u90e8\u7f72graphscop": 606, "\u672c\u7ae0\u8282\u5c06\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u4ecb\u7ecd\u5982\u4f55\u57fa\u4e8e": 604, "\u673a\u6784": 604, "\u673a\u6784\u548c\u7814\u7a76\u9886\u57df": 604, "\u6761\u4ef6\u7ec8\u6b62": 608, "\u6765": 609, "\u6765\u4fdd\u5b58\u8de8superstep\u7684\u6570\u636e": 600, "\u6765\u5236\u5b9acontext\u521d\u59cb\u5316\u9700\u8981\u7684\u53c2\u6570": 600, "\u6765\u5b8c\u6210": 605, "\u6765\u5b9a\u4e49\u5c06\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e9b\u90e8\u5206\u5199\u56de\u56fe\u6570\u636e": 600, "\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7b97\u6cd5": 600, "\u6765\u5bfc\u51fa\u4e00\u4e2a\u5b50\u56fe": 604, "\u6765\u5c01\u88c5\u8fd9\u4e00\u8f6c\u6362\u8fc7\u7a0b": 609, "\u6765\u5c06": 600, "\u6765\u5c1d\u8bd5\u4f7f\u7528\u7cfb\u7edf\u5b89\u88c5\u7684": 603, "\u6765\u628a": 609, "\u6765\u628a\u672c\u673a\u76ee\u5f55\u6302\u8f7d\u5230": 603, "\u6765\u6784\u5efa\u56fe\u5b66\u4e60\u7b97\u6cd5": 609, "\u6765\u6784\u5efa\u7528\u6237\u81ea\u5df1\u7684cnn\u6a21\u578b": 609, "\u6765\u67e5\u770b\u56fe\u7684\u6a21\u578b": 610, "\u6765\u67e5\u770b\u65e5\u5fd7": 603, "\u6765\u67e5\u770b\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001": 603, "\u6765\u6807\u8bb0\u521d\u59cb\u8282\u70b9\u662f6": 600, "\u6765\u6a21\u62df": 607, "\u6765\u6e90\u7801\u7f16\u8bd1": 603, "\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 610, "\u6765\u786e\u4fdd": 600, "\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898": 603, "\u6765\u8fdb\u884c\u8bad\u7ec3": 609, "\u6765\u91c7\u6837\u90bb\u5c45": 609, "\u6765\u964d\u4f4e\u5185\u5b58\u5f00\u9500": 610, "\u6784\u5efa": 606, "\u6784\u5efacsr": 321, "\u6784\u5efarow": 321, "\u6784\u5efa\u4e5f\u4e0e\u5f15\u64ce\u6709\u6240\u4e0d\u540c": 602, "\u6784\u5efa\u5165\u8fb9csr\u548c\u51fa\u8fb9\u540c\u7406": 321, "\u6784\u5efa\u51fa\u8fb9\u548c\u5165\u8fb9\u4e24\u4e2acsr": 321, "\u6784\u5efa\u56fe\u6570\u636e\u6d41": 609, "\u67d0\u4e00\u7c7b\u9876\u70b9\u5728\u67d0\u4e2a": 321, "\u67e5\u770b\u548c\u663e\u793a\u56fe\u6570\u636e": 604, "\u67e5\u770b\u66f4\u591a\u7ec6\u8282": 601, "\u67e5\u770b\u8be6\u7ec6\u7684\u652f\u6301\u4fe1\u606f": 603, "\u67e5\u8be2g2l": 321, "\u67e5\u8be2\u6216\u904d\u5386\u88ab\u5305\u542b\u5728\u53e6\u4e00\u4e2a\u64cd\u4f5c\u4e2d": 608, "\u67e5\u8be2\u6267\u884c\u6027\u80fd\u5206\u6790": 608, "\u67e5\u8be2\u65b9\u6cd5\u91c7\u6837\u5b50\u56fe\u5e76\u7ec4\u7ec7\u6210": 609, "\u67e5\u8be2\u6cbf\u7740": 608, "\u67e5\u8be2\u8ba1\u5212\u89e3\u91ca": 608, "\u67e5\u8be2\u8fd8\u901a\u8fc7": 608, "\u6807\u51c6": 610, "\u6807\u7b7e": 321, "\u6807\u7b7e\u8bbe\u7f6e\u7b49\u90fd\u548c\u4e4b\u524d\u63d0\u5230\u7684\u4fdd\u6301\u4e00\u81f4": 610, "\u6807\u8bc6": 608, "\u6838": 603, "\u6839\u636efid": 321, "\u6839\u636efrag\u6570\u91cf": 321, "\u6839\u636emetadata\u4ecevineyard\u67e5\u8be2\u548c\u6784\u5efa\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784\u4f5c\u4e3aarrowfragment\u7684\u6210\u5458": 321, "\u6839\u636eoid\u67e5\u8be2partit": 321, "\u6839\u636epartitioner\u83b7\u53d6fid": 321, "\u6839\u636esrc\u548cdst\u5217\u7684gid\u751f\u6210lid": 321, "\u6839\u636e\u4e0a\u4e00\u6b65\u6784\u6210\u7684gid\u5230lid\u7684\u6620\u5c04": 321, "\u6839\u636e\u5916\u90e8\u70b9\u7684gid": 321, "\u6839\u636e\u9876\u70b9lid\u83b7\u53d6\u9876\u70b9\u7c7b\u578b": 321, "\u683c\u5f0f": 608, "\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801": 602, "\u68c0\u6d4bgraphscope\u670d\u52a1\u53ef\u7528\u6027": 601, "\u6a21\u5757": 602, "\u6a21\u578b": 604, "\u6a21\u578b\u4e0b\u7684\u7b97\u6cd5\u5982\u4e0b\u6240\u793a": 600, "\u6a21\u578b\u4e0d\u540c": 600, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u5728\u56fe\u5206\u533a\u4e0a": 600, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684": 600, "\u6a21\u578b\u4e2d\u5f00\u53d1\u7b97\u6cd5": 600, "\u6a21\u578b\u4e4b\u5916": 600, "\u6a21\u578b\u548c": 604, "\u6a21\u578b\u6784\u5efa\u7b49\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b8c\u6210gcn\u7684\u6784\u5efa": 609, "\u6a21\u578b\u81ea\u5b9a\u4e49\u56fe\u7b97\u6cd5": 604, "\u6a21\u5f0f": [600, 608], "\u6b21": 608, "\u6b64\u5217\u5c06\u5728\u8f7d\u5165\u8fb9\u65f6\u88ab\u7528\u505a\u8d77\u59cb\u70b9": 610, "\u6b64\u5916": [600, 604], "\u6b64\u6559\u7a0b": 603, "\u6b64\u65f6\u6307\u4ee3\u5217\u540d": 610, "\u6b64\u65f6\u65e5\u5fd7\u663e\u793a": 603, "\u6b64\u8def\u5f84\u76f8\u5bf9\u4e8e": 610, "\u6b65\u9aa4": 604, "\u6bcf\u4e00\u4e2a\u8f7d\u5165graphscope\u7684\u56fe\u90fd\u5305\u542b\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 608, "\u6bcf\u4e00\u4e2a\u8f93\u5165\u90fd\u4f1a\u91cd\u590d\u9001\u5165\u8fd9\u4e00\u5b50\u67e5\u8be2": 608, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u5c5e\u6027\u5217\u5730\u5740": 321, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u6e90\u9876\u70b9fid": 321, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u5c5e\u6027\u5217\u5730\u5740": 321, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u6bcf\u4e00\u79cd\u5165": 321, "\u6bcf\u4e2a\u56fe\u7684\u6570\u636e\u9700\u8981\u6ee1\u8db3\u4e8b\u5148\u5b9a\u4e49\u7684schema": 608, "\u6bcf\u4e2a\u5c5e\u6027\u662f\u4e00\u4e2a\u5305\u542b\u5c5e\u6027\u540d\u548c\u5c5e\u6027\u503c\u7684": 608, "\u6bcf\u4e2a\u6807\u7b7e\u90fd\u53ef\u80fd\u5e26\u6709\u8bb8\u591a\u5c5e\u6027": 610, "\u6bcf\u4e2a\u70b9\u6216\u8fb9\u7684\u5c5e\u6027": 608, "\u6bcf\u4e2a\u7c7b\u522b\u4ee3\u8868\u4e00\u4e2a\u51fa\u5904": 604, "\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u5305\u542b\u4e86\u4e00\u4e2a\u4ece\u8bba\u6587\u6807\u9898": 604, "\u6bcf\u4e2a\u8fdb\u7a0b\u6301\u6709\u90e8\u5206\u7684\u6570\u636e": 321, "\u6bcf\u4e2a\u8fdb\u7a0b\u6784\u5efavertex": 321, "\u6bcf\u4e2a\u8fdb\u7a0b\u8bfb\u53d6\u4e00\u90e8\u5206\u70b9": 321, "\u6bcf\u4e2a\u904d\u5386\u5668\u90fd\u7ef4\u62a4\u5b83\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e": 608, "\u6bcf\u4e2a\u9876\u70b9\u7c7b\u578b\u9700\u8981\u5305\u542b\u4e00\u4e2a\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u7684\u4e3b\u952e": 608, "\u6bcf\u6761\u51fa\u8fb9\u8fd8\u5305\u542b\u4e86\u8fb9id": 321, "\u6bcf\u6b21\u8bad\u7ec3\u4e00\u4e2a\u5b50\u56fe": 609, "\u6bcf\u79cd\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 604, "\u6bd4\u5982": [602, 610], "\u6bd4\u5982\u53c2\u7167": 610, "\u6bd4\u5982\u8bf4": 610, "\u6ce8\u518c\u81ea\u5b9a\u4e49\u7684resolv": 610, "\u6ce8\u610f": [604, 607], "\u6ce8\u610f\u5c5e\u6027\u540d\u5b57\u548c\u7c7b\u578b\u9700\u8981\u5728\u540c\u4e00\u4e2a\u5143\u7ec4\u4e2d": 610, "\u6ce8\u610f\u6bcf\u4e2a\u6570\u7ec4\u90fd\u4ee3\u8868\u4e00\u5217": 610, "\u6ce8\u610f\u8fd9\u91cc\u7684\u672c\u673a\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e": 601, "\u6d4b\u8bd5\u65b0\u6784\u5efa\u7684\u955c\u50cf": 602, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 606, "\u6e90\u8282\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u8282\u70b9\u6807\u7b7e\u90fd\u4e3a": 610, "\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9fid\u6784\u6210\u7684csr\u7ed3\u6784": 321, "\u6ee1\u8db3\u6761\u4ef6\u7684\u904d\u5386\u5668\u5c31\u4f1a\u79bb\u5f00\u5faa\u73af": 608, "\u70b9": 608, "\u70b9\u4e0d\u91cd\u590d": 608, "\u70b9\u53ef\u91cd\u590d": 608, "\u70b9\u548c\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 604, "\u70b9\u5f00\u59cb\u627e\u5230\u957f\u5ea6\u4e3a": 608, "\u70b9\u6216\u8fb9": 608, "\u70b9\u6807\u7b7e\u7684\u540d\u5b57": 610, "\u7136\u540e": [601, 609], "\u7136\u540e\u4ecelid\u83b7\u53d6\u5230\u9876\u70b9\u5e8f\u53f7": 321, "\u7136\u540e\u4f60\u9700\u8981\u6253\u5f00graphscope\u7684python": 600, "\u7136\u540e\u53ef\u4ee5\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u6784\u5efa\u56fe": 609, "\u7136\u540e\u5728": 609, "\u7136\u540e\u5728\u4ee3\u7801\u7684\u6839\u76ee\u5f55": 602, "\u7136\u540e\u5728\u6b64\u4f1a\u8bdd\u5185\u521b\u5efa\u56fe": 610, "\u7136\u540e\u5c06": 603, "\u7136\u540e\u5c06\u6570\u636e\u96c6\u6876\u6302\u8f7d\u5230": 610, "\u7136\u540e\u5c06\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u540e\u7684": 609, "\u7136\u540e\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u5e76\u6267\u884c": 604, "\u7136\u540e\u6211\u4eec\u5c06\u4f1a\u8bdd\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165": 610, "\u7136\u540e\u6211\u4eec\u5c06\u5c55\u793a\u5982\u679c\u5b9e\u73b0\u5e76\u8fd0\u884c\u81ea\u5b9a\u4e49\u7684java\u56fe\u7b97\u6cd5": 600, "\u7136\u540e\u7528": 609, "\u7136\u540e\u7528\u56fe\u7f16\u7801\u5668\u5904\u7406": 609, "\u7136\u540e\u8f93\u51fa\u96c6\u7fa4\u7684\u914d\u7f6e\u6587\u4ef6": 601, "\u7136\u540e\u8fd0\u884c": 604, "\u7136\u540e\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6784\u5efa": 602, "\u7136\u800c": 610, "\u7136\u800c\u8fd9\u79cd\u65b9\u6cd5\u5728\u5927\u89c4\u6a21\u56fe\u4e0a\u4f1a\u6d88\u8017\u5927\u91cf\u5185\u5b58": 609, "\u7248\u672c": [602, 607], "\u7248\u672c\u662f3": 603, "\u7248\u672c\u6784\u5efa": 602, "\u7248\u672c\u9700\u8981\u6ee1\u8db3": 608, "\u7279\u522b\u662f\u5176\u4e2d\u5305\u542b\u7684\u56fe\u6570\u636e\u6a21\u578b\u548c\u67e5\u8be2\u8bed\u8a00\u7b49\u5173\u952e\u6982\u5ff5": 608, "\u73af\u5883": [607, 611], "\u73af\u5883\u4e0b\u5b89\u88c5": 603, "\u73af\u5883\u4e0b\u6784\u5efa\u7684": 602, "\u73af\u5883\u4e0b\u7684": 602, "\u73af\u5883\u4e0b\u8fd0\u884c": 607, "\u73af\u5883\u518d\u63a2\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [606, 611], "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 606, "\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u7b80\u5355\u7684gremlin\u67e5\u8be2\u4e86": 608, "\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6807\u7b7e": 610, "\u73b0\u5728\u70b9\u4e0a\u6ca1\u6709\u5c5e\u6027": 605, "\u751f\u6210adjlist\u5bf9\u8c61": 321, "\u751f\u6210gid": 321, "\u751f\u6210gid\u6570\u7ec4": 321, "\u751f\u6210lid\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u8303\u56f4": 321, "\u751f\u6210\u5185\u90e8\u70b9lid": 321, "\u751f\u6210\u5916\u90e8\u70b9\u7684lid": 321, "\u751f\u6210\u7684\u955c\u50cf\u5c06\u88ab\u6807\u8bb0": 602, "\u7528": [606, 608, 611], "\u7528\u4e0d\u540c\u7684\u56fe\u5377\u79ef\u5c42\u5b9e\u73b0": 609, "\u7528\u4e8e\u5b58\u50a8gid": 321, "\u7528\u56fe\u91c7\u6837": 609, "\u7528\u6237": 608, "\u7528\u6237\u4e5f\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528gremlin": 608, "\u7528\u6237\u4ec5\u9700\u8981\u5b9e\u73b0": 610, "\u7528\u6237\u4ec5\u9700\u8981\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5355\u5206\u533a\u7684\u4e32\u884c\u7b97\u6cd5": 600, "\u7528\u6237\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4": 600, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528maven\u63d2\u4ef6": 600, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5230\u4e0d\u540c\u7c7b\u578b\u7684context\u6240\u62e5\u6709\u7684\u7279\u6027": 600, "\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2ajupyt": 611, "\u7528\u6237\u53ef\u4ee5\u591a\u6b21\u63d0\u4ea4\u76f8\u540c\u7684jar\u5305\u4f46\u662f\u8fd0\u884c\u4e0d\u540c": 600, "\u7528\u6237\u53ef\u4ee5\u5c06\u8ba1\u7b97\u7ed3\u679c\u52a0\u56de\u5230\u8be5\u56fe\u6570\u636e\u4e2d\u4f5c\u4e3a\u9876\u70b9": 600, "\u7528\u6237\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7\u4f1a\u8bdd\u6765\u62c9\u8d77\u4e00\u4e2a": 601, "\u7528\u6237\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7python\u8fde\u4e0a\u4e00\u4e2a\u8f7d\u5165graphscope\u7cfb\u7edf\u7684\u56fe\u5e76\u53d1\u8d77gremlin\u67e5\u8be2": 608, "\u7528\u6237\u53ef\u4ee5\u624b\u52a8\u6253\u5f00\u4e00\u4e2a\u4f1a\u8bdd": 602, "\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u81ea\u5df1\u7684driver\u6765\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u6e90": 610, "\u7528\u6237\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 600, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7": 600, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728python": 600, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5668": 600, "\u7528\u6237\u53ef\u80fd\u4f1a\u60f3\u5728\u63d0\u4ea4\u5230graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u8fd0\u884c\u524d": 600, "\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u5c06\u7ed3\u679c\u4f20\u5230\u5ba2\u6237\u7aef\u8fdb\u884c\u5904\u7406": 600, "\u7528\u6237\u548c\u7528\u6237\u7ec4": 603, "\u7528\u6237\u5728": 600, "\u7528\u6237\u5728\u5f00\u53d1\u81ea\u5df1\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d": 600, "\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5\u65f6": 600, "\u7528\u6237\u5b9a\u4e49\u7684\u4e3b\u952e\u4f1a\u88ab\u81ea\u52a8\u7d22\u5f15": 608, "\u7528\u6237\u5e94\u5f53\u6ce8\u610f\u5728": 600, "\u7528\u6237\u5fc5\u987b\u6307\u5b9a\u6807\u7b7e\u540d\u5b57": 610, "\u7528\u6237\u6709\u65f6\u9700\u8981\u4f7f\u7528\u5728\u672c\u673a\u78c1\u76d8\u4e0a\u7684\u6570\u636e": 601, "\u7528\u6237\u6709\u65f6\u9700\u8981\u66f4\u591a\u7684\u81ea\u5b9a\u4e49\u80fd\u529b": 610, "\u7528\u6237\u8fd8\u53ef\u4ee5\u5728": 604, "\u7528\u6237\u9700\u8981\u4f7f\u7528\u786e\u4fdd\u81ea\u5df1\u751f\u6210\u7684jar\u5305\u5305\u542b\u6240\u6709\u4f9d\u8d56\u7684jar\u5305": 600, "\u7528\u6237\u9700\u8981\u501f\u52a9\u4e8e": 600, "\u7528\u6237\u9700\u8981\u5728\u5b9a\u4e49\u7b97\u6cd5\u540e\u8c03\u7528\u7b97\u6cd5": 600, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u4ee5": 600, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u6b64\u7c7b": 600, "\u7528\u6237\u9700\u8981\u6309\u7167": 600, "\u7528\u6237\u9700\u8981\u7ee7\u627f": 610, "\u7528\u6765\u904d\u5386\u56fe\u6570\u636e\u4ea7\u751f": 609, "\u7528\u6cd5\u5982\u4e0b": 601, "\u7528\u6df1\u5ea6\u5b66\u4e60\u91cc\u5e38\u7528\u7684\u6279\u6b21\u8bad\u7ec3\u65b9\u6cd5\u8fdb\u884c\u8bad\u7ec3": 609, "\u7531\u4e8e": 602, "\u7531\u4e8e\u5143\u6570\u636e\u6bd4\u6570\u636e\u96c6\u5c0f\u5f97\u591a": 603, "\u7531\u4e8e\u8bb8\u591a\u7b97\u6cd5\u53ef\u80fd\u4ec5\u9002\u7528\u4e8e\u540c\u6784\u56fe": 604, "\u7531\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u5230\u7684\u6570\u636e\u7ec4\u6210": 609, "\u7535\u5546\u63a8\u8350": 606, "\u7684": [601, 602, 603, 606, 611], "\u7684app": 600, "\u7684\u4e00\u4e2a\u5b9e\u4f8b": 608, "\u7684\u4e8c\u90e8\u56fe\u65e0\u76d1\u7763\u5b66\u4e60": [606, 611], "\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce\u7684\u8bba\u6587\u5df2\u88ab": 606, "\u7684\u4f9d\u8d56": 602, "\u7684\u4f9d\u8d56\u6dfb\u52a0\u5230\u4f60\u7684maven\u9879\u76ee\u4f9d\u8d56\u4e2d": 600, "\u7684\u4f9d\u8d56\u914d\u7f6e\u4e0a\u5e94\u5f53\u6dfb\u52a0": 600, "\u7684\u5143\u4fe1\u606f": 603, "\u7684\u5171\u4eab\u76ee\u5f55\u4e2d": 604, "\u7684\u5217": 600, "\u7684\u5341\u591a\u9879\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728\u9886\u57df\u9876\u7ea7\u7684\u5b66\u672f\u4f1a\u8bae\u6216\u671f\u520a\u4e0a": 606, "\u7684\u53c2\u6570\u4f20\u7ed9\u4f1a\u8bdd\u7684\u6784\u9020\u51fd\u6570": 601, "\u7684\u53c2\u6570\u6307\u5b9a\u7684\u6302\u8f7d\u8def\u5f84": 610, "\u7684\u53d8\u79cd": 606, "\u7684\u540c\u6837\u5927\u5c0f": 603, "\u7684\u547d\u4ee4\u4ece\u6211\u4eec\u7684\u5f00\u6e90\u4ee3\u7801\u5e93": 602, "\u7684\u5546\u54c1": 608, "\u7684\u56fe\u5206\u6790\u5f15\u64ce\u7ee7\u627f\u4e86": 600, "\u7684\u56fe\u6a21\u578b\u6570\u636e": 608, "\u7684\u5b50\u96c6\u7ec4\u6210\u7684\u5f02\u6784\u56fe\u7f51\u7edc": 604, "\u7684\u5b89\u88c5\u548c\u90e8\u7f72\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51\u7684": 607, "\u7684\u5bb9\u5668\u4e2d\u6784\u5efa\u5f53\u524d\u6e90\u4ee3\u7801": 602, "\u7684\u5efa\u7acb\u8fc7\u7a0b\u4e2d": 604, "\u7684\u5f00\u53d1\u5de5\u5177\u6216\u901a\u8fc7java\u548cpython\u7b49\u591a\u79cd\u8bed\u8a00\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u903b\u8f91": 608, "\u7684\u5f00\u6e90\u534f\u8bae": 602, "\u7684\u5f62\u5f0f\u5206\u53d1": 603, "\u7684\u5f62\u5f0f\u53d1\u5e03": 607, "\u7684\u652f\u6301": 608, "\u7684\u6570\u636e\u96c6\u6876\u7684\u4e00\u4e2a\u5bb9\u5668": 610, "\u7684\u6587\u672c\u6587\u4ef6\u4ee5\u914d\u7f6eurl": 608, "\u7684\u65b0\u5c5e\u6027": 600, "\u7684\u65b9\u5f0f\u5b89\u88c5": 603, "\u7684\u6620\u5c04": 321, "\u7684\u6709\u5411\u73af\u8def": 608, "\u7684\u672c\u5730\u5b58\u50a8\u6bd4\u8f83\u590d\u6742": 610, "\u7684\u672c\u5730\u8def\u5f84": 610, "\u7684\u6784\u5efa\u8fc7\u7a0b": 602, "\u7684\u70b9": 608, "\u7684\u7248\u672c": 602, "\u7684\u73af": 608, "\u7684\u73af\u5883\u4e0a\u6d4b\u8bd5\u901a\u8fc7": 603, "\u7684\u751f\u547d\u5468\u671f": 601, "\u7684\u7528\u6237": 607, "\u7684\u7684\u5b50\u7c7b": 600, "\u7684\u78c1\u76d8": 603, "\u7684\u7b2c\u4e00\u6b65": 604, "\u7684\u7c7b": 610, "\u7684\u7c7b\u578b\u5c06\u4f1a\u662f": 610, "\u7684\u80cc\u540e\u6709\u4e00\u7fa4\u6d3b\u8dc3\u7684\u5de5\u7a0b\u4eba\u5458\u548c\u7814\u7a76\u4eba\u5458\u56e2\u961f\u6765\u63a8\u8fdb\u65e5\u5e38\u7684\u5f00\u53d1\u548c\u7ef4\u62a4": 602, "\u7684\u8282\u70b9": 321, "\u7684\u865a\u62df\u4e3b\u673a\u7684\u76f8\u5e94\u8def\u5f84\u4e0a": 601, "\u7684\u8def\u5f84\u6302\u8f7d\u5230": 601, "\u7684\u8f6c\u6362": 609, "\u7684\u8f93\u51fa": 608, "\u7684\u8fb9": [604, 610], "\u7684\u8fb9\u6807\u7b7e": 610, "\u7684\u8fd0\u884c\u65f6\u4fe1\u606f": 603, "\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a\u5c5e\u6027\u56fe": 605, "\u7684\u96c6\u7fa4\u673a\u5668\u4e0a\u4e0d\u5b58\u5728\u8be5\u955c\u50cf": 601, "\u7684\u9876\u70b9": 321, "\u7684\u9884\u7f16\u8bd1\u5305\u4ee5": 603, "\u7684\u9ad8\u7ea7\u8bed\u8a00\u8fdb\u884c\u56fe\u904d\u5386": 604, "\u76ee\u524d": [603, 610], "\u76ee\u524d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5316\u7248\u672c": 608, "\u76ee\u524d\u6211\u4eec\u5b9e\u73b0\u4e86\u57fa\u4e8etensorflow\u7684\u6a21\u578b": 609, "\u76ee\u524d\u652f\u6301\u7684\u5e73\u53f0\u5982\u4e0b": 607, "\u76ee\u524d\u7684": 608, "\u76ee\u5f55": 609, "\u76ee\u5f55\u4e0a\u4f7f\u7528": 603, "\u76ee\u5f55\u4e0b\u67e5\u770b\u8fd0\u884c\u65f6\u65e5\u5fd7": 603, "\u76ee\u7684\u9876\u70b9fid": 321, "\u76f4\u5230\u7ec8\u6b62\u6761\u4ef6\u6ee1\u8db3": 608, "\u76f8\u5173\u7684\u53c2\u6570\u542b\u4e49\u5982\u4e0b": 610, "\u76f8\u5173\u7684\u5b8c\u6574": 600, "\u76f8\u5173\u8bba\u6587": 600, "\u76f8\u5bf9\u5e94\u7684": 600, "\u770b\u8d77\u6765\u50cf\u5361\u4f4f": 603, "\u770b\u8d77\u6765\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5361\u4f4f\u4e86": 603, "\u77e5\u8bc6\u56fe\u8c31\u6a21\u578b": 609, "\u77e5\u8bc6\u56fe\u8c31\u7b49": 606, "\u77e5\u8bc6\u56fe\u8c31\u7b49\u4f17\u591a\u573a\u666f": 609, "\u77e9\u9635\u7684\u65b9\u5f0f\u4f20\u5165": 610, "\u7814\u7a76\u9886\u57df": 604, "\u793a\u4f8b": 606, "\u793e\u533a\u68c0\u6d4b\u548c\u4e2d\u5fc3\u5ea6\u8ba1\u7b97\u7b49\u7c7b\u578b": 600, "\u79f0\u4e3a": 609, "\u7a0b\u5e8f\u5305": 607, "\u7b2c\u4e00\u5217\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9id": 610, "\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u4ee5\u5168\u56fe\u4e3a\u8ba1\u7b97\u5bf9\u8c61": 609, "\u7b2c\u4e8c\u5217\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9id": 610, "\u7b2c\u4e8c\u6761\u547d\u4ee4\u5207\u6362\u5230\u8fdc\u7a0b\u6a21\u5f0f": 608, "\u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u5c06\u5168\u56fe\u5206\u6210\u82e5\u5e72\u5b50\u56fe": 609, "\u7b49\u6743\u9650": 603, "\u7b49\u7c7b\u578b": 610, "\u7b49\u8868\u8fbe\u5f0f\u6216java\u8c03\u7528\u7b49\u7b49": 608, "\u7b80\u79f0gie": 608, "\u7b97\u6cd5\u53ca\u5176\u589e\u91cf\u7248\u672c\u5c31\u53ef\u4ee5\u7528\u4e8e\u5728\u96c6\u7fa4\u4e0a\u7684\u5927\u89c4\u6a21\u56fe\u6570\u636e\u8ba1\u7b97": 600, "\u7b97\u6cd5\u53ef\u5982\u4e0b\u6240\u793a": 600, "\u7b97\u6cd5\u6a21\u578b\u57fa\u4e8e\u7c7b\u4f3ctensorflow\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u6784\u5efa": 609, "\u7b97\u6cd5\u6a21\u578b\u6784\u6210": 609, "\u7b97\u6cd5\u6a21\u578b\u901a\u8fc7\u8c03\u7528\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u63a5\u53e3\u83b7\u53d6\u5b50\u56fe\u5e76\u8fdb\u884c\u8ba1\u7b97": 609, "\u7b97\u6cd5\u7684\u652f\u6301\u5217\u8868\u4f1a\u968f\u7740\u4e0d\u65ad\u589e\u52a0\u6301\u7eed\u66f4\u65b0\u4e2d": 600, "\u7b97\u6cd5\u7c7b\u7684\u88c5\u9970\u5668\u4e3a": 600, "\u7ba1\u7406": 609, "\u7ba1\u7406\u7684\u539f\u59cb\u6570\u636e\u7684": 603, "\u7ba1\u7406\u7740": 601, "\u7c7b": [600, 610], "\u7c7b\u4f3c": 610, "\u7c7b\u4f3c\u7684": 600, "\u7c7b\u578b\u7684\u51fa\u8fb9\u5faa\u73af\u6e38\u8d70": 608, "\u7c7b\u7528\u6765\u505ascheme\u5bf9\u5e94\u7684resolv": 610, "\u7cfb\u7edf\u652f\u6301\u4ee5\u5355\u673a\u6216\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u90e8\u7f72": 603, "\u7cfb\u7edf\u9700\u8981\u7684\u6700\u5c0f\u8d44\u6e90\u662f\u591a\u5c11": 603, "\u7d27\u968f\u5176\u540e\u7684": 608, "\u7ea6\u675f": 608, "\u7ec4\u6210": 609, "\u7ec8\u6b62\u6761\u4ef6": 608, "\u7ec8\u6b62\u70b9\u7684\u6807\u8bb0\u4e3a": 604, "\u7ecf\u5178\u7684": 600, "\u7ed3\u5408\u4e86\u56fe\u7ed3\u6784\u548c\u673a\u5668\u5b66\u4e60\u7684\u4f18\u52bf": 604, "\u7ed3\u5408\u4f7f\u7528": 604, "\u7ed3\u675f\u5730\u5740": 321, "\u7ed3\u675f\u8303\u56f4\u662f\u5f00\u533a\u95f4": 321, "\u7ed3\u679c\u4e0e\u4e0a\u4e00\u6b65\u7ed3\u679c\u9664\u4e86\u6807\u7b7e\u540d\u5b8c\u5168\u4e00\u81f4": 610, "\u7ed9\u51fa\u5f02\u6784\u7684": 604, "\u7edf\u8ba1\u6bcf\u79cd\u6e90\u9876\u70b9\u7684\u51fa\u5ea6": 321, "\u7ef4": 604, "\u7f16\u5199\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 609, "\u7f16\u5199\u81ea\u5b9a\u4e49\u56fe\u5206\u6790\u7b97\u6cd5": [606, 611], "\u7f16\u7801\u5668\u548c\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801": 609, "\u7f16\u7801\u6210\u6700\u7ec8\u7684\u70b9": 609, "\u7f16\u7a0b\u6a21\u578b": 600, "\u7f16\u7a0b\u6a21\u578b\u7f16\u5199\u7b97\u6cd5": 600, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 606, "\u7f16\u8bd1": 603, "\u7f16\u8bd1\u6784\u5efa\u5e94\u7528\u7684\u5e93\u65f6\u4f1a\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4": 603, "\u7f51\u7edc\u5b89\u5168": [606, 609], "\u800c": 608, "\u800c\u4e0d\u540c\u4e8e": 600, "\u800c\u4e0d\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u7684\u5206\u533a\u901a\u4fe1\u548c\u6d88\u606f\u4f20\u9012": 600, "\u800c\u5f97\u5230\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 605, "\u800c\u662f\u4f1a\u8fd4\u56de\u57fa\u4e8e\u539f\u56fe\u4e4b\u4e0a": 605, "\u800c\u6e90\u9876\u70b9\u7684\u7c7b\u578b\u5df2\u7ecf\u88ablid\u7f16\u7801\u6240\u5305\u542b": 321, "\u800c\u7ed3\u6784\u4fe1\u606f\u662f\u5728\u4ee5\u4e0b\u8fc7\u7a0b\u4e2d\u5373\u65f6\u8ba1\u7b97\u7684": 604, "\u800c\u8fd9\u4e00\u7c7b\u5c01\u88c5\u4e86\u7528python\u5b9e\u73b0\u7684\u5b8c\u6574gremlin\u5ba2\u6237\u7aef\u7c7b\u5e93": 608, "\u800c\u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7684\u8bdd\u4e3a": 610, "\u805a\u5408": 608, "\u80cc\u540e\u57fa\u4e8e": 604, "\u80fd\u5341\u5206\u65b9\u4fbf\u7684\u5bf9\u63a5\u4e0a\u4e0b\u6e38\u5de5\u4f5c\u6d41": 606, "\u80fd\u591f\u786e\u5b9a\u9876\u70b9oid\u5230\u5206\u533aid": 321, "\u80fd\u591f\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u9876\u70b9": 321, "\u81ea\u52a8\u5206\u914d\u4ea7\u751f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u552f\u4e00\u6807\u8bc6": 608, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 606, "\u81ea\u5b9a\u4e49\u72b6\u6001\u8ba1\u7b97": 608, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 606, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 606, "\u81f4\u529b\u4e8e\u9488\u5bf9\u5b9e\u9645\u751f\u4ea7\u573a\u666f\u4e2d\u56fe\u8ba1\u7b97\u7684\u6311\u6218": 606, "\u8282\u70b9\u7684age\u5c5e\u6027": 608, "\u8282\u70b9\u7684\u6982\u5ff5": 601, "\u8303\u56f4\u5185\u7684\u90bb\u70b9": 608, "\u83b7\u53d6edg": 321, "\u83b7\u53d6\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 321, "\u83b7\u53d6\u5230src\u548cdst\u7684label": 321, "\u83b7\u53d6\u5230\u5217\u6307\u9488": 321, "\u83b7\u53d6\u548c\u524d\u9762": 609, "\u83b7\u53d6\u5c5e\u6027\u5217\u7684\u5730\u5740": 321, "\u83b7\u53d6\u5e76\u6dfb\u52a0\u4ed3\u5e93\u4fe1\u606f": 601, "\u83b7\u53d6\u66f4\u591a\u7ec6\u8282": 600, "\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 601, "\u83b7\u53d6\u6e90\u9876\u70b9lid": 321, "\u83b7\u53d6\u6e90\u9876\u70b9\u5e8f\u53f7": 321, "\u83b7\u53d6\u6e90\u9876\u70b9\u7c7b\u578b": 321, "\u83b7\u53d6\u76ee\u7684\u9876\u70b9\u6307\u9488": 321, "\u83b7\u53d6\u9876\u70b9\u4e0a\u7684\u7ed3\u679c": 600, "\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 601, "\u865a\u62df\u7684": 603, "\u884c\u53f7": 321, "\u8868\u793a\u65f6": 610, "\u8868\u793a\u67d0\u4e00\u7c7b\u9876\u70b9\u6216\u8005\u8fb9": 321, "\u8868\u793a\u9876\u70b9\u6216\u8fb9\u6240\u5173\u8054\u7684\u6570\u636e": 321, "\u8868\u8fbe": 608, "\u8868\u8fbe\u56fa\u5b9a\u8fed\u4ee3\u8f6e\u6b21\u540e\u7ec8\u6b62\u5faa\u73af": 608, "\u8868\u8fbe\u7684\u7b80\u5355\u8fc7\u6ee4": 608, "\u88abfragment\u5171\u8bc6": 321, "\u88c5\u9970\u5668": 600, "\u88c5\u9970\u7684\u7c7b": 600, "\u8981\u5728\u5c5e\u6027\u56fe\u4e0a\u4f7f\u7528\u8fd9\u4e9b\u7b97\u6cd5": 604, "\u8981\u5c06\u6b64\u56fe\u52a0\u8f7d\u5230": 604, "\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5de5\u4f5c\u6d41\u7a0b": 604, "\u89e3\u538b\u7f29\u4e0b\u8f7d\u7684\u6587\u4ef6": 608, "\u89e3\u6790\u4e0d\u540c\u7684\u6570\u636e\u683c\u5f0f\u4ee5\u53ca\u53c2\u6570": 610, "\u8ba1\u7b97\u5b50\u56fe": 608, "\u8ba1\u7b97\u6e90\u9876\u70b9\u7684\u5ea6": 321, "\u8ba1\u7b97\u7ed3\u679c\u4f1a\u88ab\u5305\u88c5\u6210": 600, "\u8ba9\u6211\u4eec\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u56fe\u7684\u5b9a\u4e49": 610, "\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 610, "\u8bad\u7ec3\u7684\u6b63\u6837\u672c": 609, "\u8bb8\u591a\u7b97\u6cd5": 604, "\u8bba\u6587": 604, "\u8bba\u6587\u5f15\u7528\u5173\u7cfb\u7f51\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [606, 611], "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 606, "\u8bbf\u95eerow": 321, "\u8bbf\u95eevtable\u7684oid\u5217": 321, "\u8bbf\u95ee\u51fa\u8fb9\u9700\u8981\u7ed9\u51fa\u6e90\u9876\u70b9lid\u548c\u67d0\u4e00\u79cd\u8fb9\u7684\u7c7b\u578b": 321, "\u8bbf\u95ee\u6bcf\u4e2asrc\u7684oid": 321, "\u8bbf\u95ee\u6bcf\u6761\u8fb9": 321, "\u8bbf\u95ee\u81ea\u5b9a\u4e49\u72b6\u6001": 608, "\u8be5": 604, "\u8be5app\u5bf9\u5e94\u7684context\u7684\u5b9e\u73b0": 600, "\u8be5\u4efb\u52a1\u53ef\u4ee5\u5f52\u7c7b\u5728\u5404\u4e2a\u9886\u57df": 604, "\u8be5\u547d\u4ee4\u4f1a\u5f00\u59cb": 602, "\u8be5\u56fe\u4e2d\u5305\u542b4\u79cd\u7c7b\u578b\u7684\u5b9e\u4f53": 604, "\u8be5\u56fe\u5177\u6709\u56db\u79cd\u9876\u70b9": 604, "\u8be5\u5f15\u64ce\u652f\u6301": 608, "\u8be5\u6587\u6863": 603, "\u8be5\u6b65\u9aa4\u4f1a\u544a\u77e5\u80cc\u540e\u7684": 604, "\u8be5\u7c7b\u65b9\u6cd5\u662f": 600, "\u8be5\u7cfb\u7edf\u4e8e": 600, "\u8be5\u811a\u672c\u53ef\u4ee5\u8fd0\u884c\u5728": 601, "\u8be5\u8868\u5f81\u662f\u7ecf\u8fc7": 604, "\u8be5\u8fc7\u7a0b\u5c06\u5728": 602, "\u8be5\u94fe\u63a5": 601, "\u8be5\u95ee\u9898\u51fa\u73b0\u5728\u4f7f\u7528": 603, "\u8be6\u60c5\u53ef\u53c2\u8003": 603, "\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u67e5\u770b": 603, "\u8be6\u89c1gremlin": 608, "\u8bed\u6cd5\u7cd6": 608, "\u8bed\u8a00\u8868\u8fbe\u7684\u4ea4\u4e92\u56fe\u67e5\u8be2": 608, "\u8bf7\u4e0b\u8f7d\u6570\u636e\u5e76\u5c06\u5176\u89e3\u538b\u7f29\u5230\u672c\u5730\u7684\u6302\u8f7d\u76ee\u5f55": 604, "\u8bf7\u53c2\u8003": [600, 608], "\u8bf7\u5728": 601, "\u8bf7\u6ce8\u610f": 603, "\u8bf7\u786e\u4fdd\u60a8\u7684\u96c6\u7fa4\u53ef\u4ee5\u8bbf\u95ee\u516c\u5171\u955c\u50cf\u4ed3\u5e93": 601, "\u8bf7\u8010\u5fc3\u7b49\u5f85\u8ba1\u7b97\u5b8c\u6210": 600, "\u8c03\u7528\u76f8\u5e94\u7684\u8f7d\u56fe\u6a21\u5757": 610, "\u8d1f\u8d23\u5143\u4fe1\u606f\u7684\u540c\u6b65": 601, "\u8d1f\u8d23\u5bf9": 601, "\u8d1f\u8d23\u7ba1\u7406\u8be5\u6b21\u4f1a\u8bdd\u7684": 604, "\u8d1f\u8d23\u8f7d\u5165": 610, "\u8d2d\u4e70": 608, "\u8d2d\u4e70\u4e86\u4e00\u4e2a\u5356\u5bb6": 608, "\u8d3e\u5b9d\u7389": 336, "\u8d3e\u5b9d\u7389\u662f\u8c01\u7684\u513f\u5b50": 336, "\u8d3e\u653f": 336, "\u8d44\u6e90\u9700\u6c42": 603, "\u8d77\u59cbgid": 321, "\u8d77\u70b9\u7684": 610, "\u8d77\u70b9\u7684\u6807\u7b7e\u540d\u4e0e\u7ec8\u70b9\u7684\u6807\u7b7e\u540d": 610, "\u8d85\u65f6\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5728": 603, "\u8def\u5f84": [601, 610], "\u8def\u5f841": 608, "\u8def\u5f84\u5206\u6790\u7b97\u6cd5": 600, "\u8def\u5f84\u548c\u8fde\u63a5\u6027": 604, "\u8df3\u7684\u6240\u6709\u4efb\u610f\u8def\u5f84": 608, "\u8df3\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84": 608, "\u8f6c\u5316\u4e3a\u76f8\u5e94\u6570\u636e\u7c7b\u578b": 600, "\u8f6c\u6362\u4e0d\u5408\u6cd5": 605, "\u8f6c\u6362\u4e3a": [600, 609], "\u8f6c\u6362\u6210\u5bf9\u5e94\u7684": 609, "\u8f7d\u5165ldbc\u793a\u4f8b\u56fe\u6570\u636e": 608, "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 606, "\u8f7d\u5165\u56fe\u6570\u636e": [606, 611], "\u8f7d\u5165\u6570\u636e": 610, "\u8f7d\u56fe": [604, 605, 606], "\u8f7d\u56fe\u9636\u6bb5": 603, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u53ef\u4ee5\u9000\u51fagremlin": 608, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u542f\u52a8gremlin": 608, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u8fde\u63a5\u5230\u5bf9\u5e94\u7684graphscope\u4f1a\u8bdd": 608, "\u8f93\u5165\u56fe": 608, "\u8f93\u5165\u56fe\u64cd\u4f5c": 608, "\u8f93\u51fahops\u5728": 608, "\u8f93\u51fa\u6240\u6709\u5c5e\u6027": 608, "\u8fb9": [321, 600], "\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5c5e\u6027": 605, "\u8fb9\u5c5e\u6027": 321, "\u8fb9\u5c5e\u6027\u5217\u5730\u5740": 321, "\u8fb9\u6216\u5c5e\u6027": 608, "\u8fb9\u6216\u8005\u5b50\u56fe\u7684": 609, "\u8fb9\u6570\u636e\u7b49\u4fe1\u606f": 321, "\u8fb9\u6587\u4ef6": 321, "\u8fb9\u6807\u7b7e": 605, "\u8fb9\u7279\u5f81\u7528\u4e00\u4e9b\u5e38\u89c1\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u6210\u539f\u59cb\u5411\u91cf": 609, "\u8fb9\u7684\u6807\u7b7e\u540d": 610, "\u8fb9\u7684\u7c7b\u578b\u540d\u79f0": 608, "\u8fb9\u79cd\u7c7b\u6570\u91cf": 321, "\u8fb9\u7c7b\u578b\u5411\u5916\u6269\u5c55": 608, "\u8fb9\u8868": 321, "\u8fb9\u8868\u4ee5\u53ca\u7528\u6765\u533a\u5206\u8bad\u7ec3": 609, "\u8fb9\u90fd\u5e26\u6709\u6807\u7b7e": 610, "\u8fc7\u6ee4": 608, "\u8fc7\u7a0b\u4e2d": 603, "\u8fc7\u7a0b\u4e2d\u7684\u5e38\u89c1\u95ee\u9898": 603, "\u8fd0\u884c": 603, "\u8fd0\u884cdijkstra\u7b97\u6cd5\u4f5c\u4e3a\u90e8\u5206\u8ba1\u7b97": 600, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 606, "\u8fd0\u884c\u4e0d\u6253\u5370\u65e5\u5fd7\u4fe1\u606f": 603, "\u8fd0\u884c\u5b8c\u8fd9\u4e2a\u811a\u672c\u540e\u4f60\u53ef\u4ee5\u5f97\u5230\u4e0b\u97625\u4e2a\u6587\u4ef6": 609, "\u8fd0\u884c\u65f6\u57fa\u7840\u955c\u50cf": 602, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 606, "\u8fd4\u56de": 609, "\u8fd4\u56de\u56fe\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684": 608, "\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\u52a0\u5230\u88ab": 605, "\u8fd8\u662f\u4ee5": 600, "\u8fd8\u6709\u5176\u5b83\u56f4\u7ed5": 606, "\u8fd8\u88ab\u8bbe\u8ba1\u4e3a\u9ad8\u6548\u4e14\u53ef\u62d3\u5c55\u7684\u7cfb\u7edf": 600, "\u8fd9\u4e00\u6b65\u901a\u5e38\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4": 603, "\u8fd9\u4e00\u811a\u672c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4f7f\u7528\u5df2\u6709\u7684\u96c6\u7fa4\u6216\u521b\u5efa\u65b0\u7684": 601, "\u8fd9\u4e24\u4e2a\u51fd\u6570": 605, "\u8fd9\u4e24\u8005\u53ef\u4ee5\u53d6\u4e0d\u540c\u7684\u503c": 610, "\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684": 608, "\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u501f\u52a9": 605, "\u8fd9\u4e2a\u9700\u6c42": 600, "\u8fd9\u4e9b\u4ee3\u7406\u8bbe\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u5730\u5740\u89e3\u6790\u4ee5\u53ca\u7aef\u53e3\u5360\u7528": 603, "\u8fd9\u4e9b\u53c2\u6570\u4f1a\u76f4\u63a5\u88ab\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u7c7b\u4e2d": 610, "\u8fd9\u4e9b\u5d4c\u5165\u548c\u8868\u5f81\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f93\u5165\u5230\u4e0b\u6e38\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u4e2d": 604, "\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u589e\u91cf\u7684\u6784\u5efa\u4e00\u4e2a\u5c5e\u6027\u56fe": 610, "\u8fd9\u51e0\u4e2a\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u57fa\u672c\u7684read": 610, "\u8fd9\u53ef\u4ee5\u4f7f\u7528\u6237\u4ec5\u901a\u8fc7": 610, "\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4f60\u6240\u4f7f\u7528\u7684\u673a\u5668": 603, "\u8fd9\u5c06\u4f1a\u4ece\u6587\u4ef6": 610, "\u8fd9\u5c06\u4f1a\u5c06\u5c5e\u6027\u7684\u7c7b\u578b\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b": 610, "\u8fd9\u5c06\u4f1a\u8f7d\u5165\u4e00\u4e2a\u6807\u7b7e\u540d\u4e3a": 610, "\u8fd9\u662f\u4e00\u4e2a\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 604, "\u8fd9\u662f\u4e00\u4e9b\u7528\u6765\u5904\u7406\u7279\u522b\u7b80\u5355\u6216\u7279\u522b\u590d\u6742\u7684\u9ad8\u7ea7\u4e00\u4e9b\u7684\u7528\u6cd5": 610, "\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2agcn\u6a21\u578b\u7684\u7f16\u5199": 609, "\u8fd9\u79cd\u6807\u7b7e\u7684\u8fb9\u8fde\u63a5\u4e24\u4e2a": 604, "\u8fd9\u7bc7\u6587\u6863\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u7528": 609, "\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u4ee5\u96c6\u7fa4\u65b9\u5f0f\u90e8\u7f72\u8fd0\u884c": 603, "\u8fd9\u90e8\u5206\u529f\u80fdgraphscope\u901a\u8fc7\u56fe\u5206\u6790\u5f15\u64ce\u548cnetworkx\u517c\u5bb9\u63a5\u53e3\u63d0\u4f9b": 608, "\u8fd9\u91cc": [600, 601, 610], "\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u90bb\u5c45\u91c7\u6837\u65b9\u6cd5": 609, "\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528": 609, "\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u4e00\u4e2a\u7b80\u5355\u7684app\u7684\u5b9e\u73b0": 600, "\u8fd9\u91cc\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u8f7d\u5165": 610, "\u8fd9\u91cc\u7684": 604, "\u8fdb\u4e00\u6b65\u7684": 605, "\u8fdb\u5165\u89e3\u538b\u7f29\u7684\u76ee\u5f55": 608, "\u8fdb\u884c\u4ea4\u4e92\u5f0f\u67e5\u8be2": [606, 611], "\u8fdb\u884c\u5220\u9664": 603, "\u8fdb\u884c\u56fe\u64cd\u4f5c": [606, 611], "\u8fdb\u884c\u65e0\u76d1\u7763\u56fe\u5b66\u4e60": [606, 611], "\u8fdb\u884c\u6709\u76d1\u7763\u56fe\u5b66\u4e60": [606, 611], "\u8fdc\u7a0b": 608, "\u8fde\u63a5": 601, "\u8fde\u63a5graphscop": 606, "\u8fde\u63a5\u4e86\u4e24\u79cd\u70b9\u6807\u7b7e": 610, "\u8fed\u4ee3\u8f6e\u6b21\u7ec8\u6b62": 608, "\u9002\u5f53\u7684\u589e\u52a0\u8d85\u65f6\u7b49\u5f85\u65f6\u95f4\u6765\u89e3\u51b3\u8be5\u95ee\u9898": 603, "\u9009\u62e9\u5668\u6307\u5b9a\u4e86\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e00\u90e8\u5206\u4f1a\u88ab\u5904\u7406": 600, "\u9009\u62e9\u9002\u5f53\u7684\u635f\u5931\u51fd\u6570": 609, "\u9009\u9879\u5b9e\u73b0": 608, "\u9012\u9001": 608, "\u901a\u5e38\u4e3a": 604, "\u901a\u5e38\u5f53\u4f7f\u7528": 603, "\u901a\u5e38\u60c5\u51b5\u4e0b": 603, "\u901a\u5e38\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f": 603, "\u901a\u5e38\u6765\u8bf4": 609, "\u901a\u8fc7": [601, 604], "\u901a\u8fc7expression\u5b9e\u73b0\u4f4d\u8fd0\u7b97": 608, "\u901a\u8fc7expression\u5b9e\u73b0\u6307\u6570\u8fd0\u7b97": 608, "\u901a\u8fc7expression\u5b9e\u73b0\u7b97\u6570\u8fd0\u7b97": 608, "\u901a\u8fc7expression\u5b9e\u73b0\u8fc7\u6ee4": 608, "\u901a\u8fc7gid\u627e\u5230\u5916\u90e8\u70b9lid": 321, "\u901a\u8fc7src": 321, "\u901a\u8fc7\u4e0b\u9762\u5c55\u793a\u7684\u4f8b\u5b50": 600, "\u901a\u8fc7\u5207\u8fb9\u5f97\u5230\u7684\u5b50\u56fe": 321, "\u901a\u8fc7\u5728": 608, "\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u8fd0\u884ctravers": 600, "\u901a\u8fc7\u5bf9\u8bba\u6587\u5c5e\u6027\u548c\u5f15\u7528\u56fe\u4e0a\u7684\u7ed3\u6784\u4fe1\u606f\u5bf9\u8bba\u6587\u8fdb\u884c\u5206\u7c7b": 604, "\u901a\u8fc7\u7ee7\u627f": 600, "\u901a\u8fc7\u8fd9\u4e24\u79cdcontext\u63d0\u4f9b\u7684\u501f\u53e3\u6240\u5b58\u50a8\u7684\u6570\u636e\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u4e4b\u540e\u53ef\u4ee5\u88ab\u7528\u6237\u8bbf\u95ee": 600, "\u903b\u8f91\u548c\u6709\u5411\u56fe\u7c7b\u4f3c": 321, "\u904d\u5386\u5168\u90e8\u5185\u90e8\u70b9": 321, "\u904d\u5386\u5668": 608, "\u904d\u5386\u67e5\u8be2": 608, "\u904d\u5386\u6bcf\u4e00\u79cd\u8fb9": 321, "\u904d\u5386\u6bcf\u4e00\u79cd\u9876\u70b9": 321, "\u9075\u5faa": 602, "\u90a3\u4e48": 602, "\u90a3\u4e48\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u76ee\u5f55\u62f7\u8d1d\u5230": 601, "\u90a3\u4e48\u53ef\u4ee5\u7701\u7565\u6307\u5b9a\u70b9\u6807\u7b7e": 610, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u501f\u53e3": 600, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u63a5\u53e3": 600, "\u90a3\u4e48\u5c06\u4e0d\u4f1a\u8f7d\u5165\u4efb\u4f55\u5c5e\u6027": 610, "\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519": 605, "\u90bb\u5c45\u4ee5\u7a00\u758f\u683c\u5f0f\u7ec4\u7ec7": 609, "\u90bb\u5c45\u5bf9\u9f50\u7684\u6a21\u578b\u53ef\u4ee5\u53c2\u8003graphsage\u7684\u5b9e\u73b0": 609, "\u90e8\u7f72": [603, 606], "\u90e8\u7f72\u4e00\u4e2a\u672c\u5730\u7684": 607, "\u90e8\u7f72\u5728\u96c6\u7fa4\u4e2d": 610, "\u90e8\u7f72\u7684": 603, "\u90fd\u4f1a\u4ea7\u751f\u4e00\u5f20\u65b0\u7684\u56fe": 605, "\u90fd\u6709\u4e00\u4e2a": 604, "\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6": 608, "\u91c7\u6837\u5b8c\u540e\u5c06\u7ed3\u679c\u7ec4\u7ec7": 609, "\u91c7\u6837\u7684\u6570\u636e\u7ec4\u7ec7\u6210numpy\u683c\u5f0f\u7684": 609, "\u91c7\u6837\u90bb\u5c45\u5e76\u7ec4\u7ec7": 609, "\u91c7\u7528\u79f0\u4e3a": 604, "\u91c7\u7528\u91c7\u6837\u5b50\u56fe\u518d\u8ba1\u7b97\u7684\u65b9\u5f0f\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b": 609, "\u91ca\u653e\u5f53\u524d\u6240\u6709\u7684\u8d44\u6e90": 604, "\u91cc\u7684\u6587\u4ef6\u505a\u5b8c\u6b64\u7bc7\u6559\u7a0b\u7684\u793a\u4f8b": 610, "\u9519\u8bef": [603, 605], "\u952e": 608, "\u955c\u50cf": 602, "\u955c\u50cf\u662f\u4e0d\u9700\u8981\u91cd\u5efa\u7684": 602, "\u955c\u50cf\u7684\u65b9\u5f0f\u5206\u53d1\u5f15\u64ce\u7b49\u7ec4\u4ef6": 601, "\u95ee\u9898": 603, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 606, "\u9664id\u5217\u4e4b\u5916\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f1a\u4f5c\u4e3a\u5c5e\u6027\u8f7d\u5165": 610, "\u9664\u4e86": 610, "\u9664\u4e86\u57fa\u4e8e\u5b50\u56fe\u7684": 600, "\u9664\u4e86\u6613\u4e8e\u7f16\u7a0b\u5916": 600, "\u9664\u6b64\u4e4b\u5916": 608, "\u968f\u540e\u8fd4\u56de\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 608, "\u96c6\u4e2d\u6027": 604, "\u96c6\u7fa4": [601, 603, 607], "\u96c6\u7fa4\u4e0a\u62c9\u8d77": 603, "\u96c6\u7fa4\u4e0a\u7684": 601, "\u96c6\u7fa4\u62c9\u8d77": 603, "\u96c6\u7fa4\u6a21\u5f0f\u4e0b": 610, "\u96c6\u7fa4\u7684\u4ea4\u4e92\u5f0f\u811a\u672c": 601, "\u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u7684\u5de5\u5177\u548c\u4f9d\u8d56": 602, "\u9700\u8981\u5148\u8f6c\u6362\u6210tensor\u683c\u5f0f": 609, "\u9700\u8981\u5206\u522b\u66ff\u6362\u4e3a\u4ecegraphscope\u4f1a\u8bdd\u5f97\u5230\u7684url\u4e2d\u5bf9\u5e94\u7684\u4e3b\u673a\u540d": 608, "\u9700\u8981\u6ce8\u610f\u7684\u662f": [602, 604], "\u9700\u8981\u6ee1\u8db3": 607, "\u9700\u8981\u7528\u6237\u62e5\u6709\u4e00\u4e2a": 603, "\u9700\u8981\u7684\u6700\u4f4e": 603, "\u9700\u8981\u7684\u683c\u5f0f": 609, "\u9700\u8981\u9996\u5148\u5c06\u6b64\u8def\u5f84\u52a0\u5165\u5230": 604, "\u975edocker": 602, "\u9876\u70b9": 604, "\u9876\u70b9\u5177\u6709\u8bf8\u5982\u53d1\u5e03\u5e74\u4efd": 604, "\u9876\u70b9\u5c5e\u6027\u8868": 321, "\u9876\u70b9\u5e8f\u53f7\u4eceivnum\u5f00\u59cb\u8ba1\u6570": 321, "\u9876\u70b9\u6570\u636e": 321, "\u9876\u70b9\u6570\u636e\u548c\u8fb9\u6570\u636e\u7684api\u548c\u5b9e\u73b0": 321, "\u9876\u70b9\u7684": 600, "\u9876\u70b9\u79cd\u7c7b\u6570\u91cf": 321, "\u9879\u76ee\u63d0\u4f9b\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u5b58\u50a8\u4f5c\u4e3a\u8f93\u5165\u56fe": 608, "\u9884\u8bad\u7ec3\u63d0\u524d\u83b7\u53d6\u7684": 604, "\u98ce\u683c": 602, "\u9996\u5148": [608, 610], "\u9996\u5148\u4f60\u9700\u8981\u4ece\u4e0b\u8f7d\u6211\u4eec\u63d0\u4f9b\u7684\u793a\u4f8bapp\u7684\u5408\u96c6": 600, "\u9996\u5148\u4f7f\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7279\u5f81": 609, "\u9996\u5148\u5229\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7684\u70b9\u548c\u8fb9\u4e0a\u7684\u7279\u5f81": 609, "\u9996\u5148\u6784\u5efa\u51fa\u8fb9csr": 321, "\u9996\u5148\u9700\u8981\u542f\u52a8\u5b66\u4e60\u5f15\u64ce\u5e76\u6784\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5f81\u7684\u6570\u636e\u56fe": 604, "\u9996\u5148\u9700\u8981\u9884\u5148\u5b89\u88c5\u4ee5\u4e0b\u4f9d\u8d56": 607, "\u9996\u9009\u4f1a\u5728\u80cc\u540e\u5c1d\u8bd5\u62c9\u8d77\u4e00\u4e2a": 604, "\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u96c6\u7684\u70b9\u8868": 609, "\u9ad8\u6027\u80fd\u548c\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u7b49\u7279\u70b9": 604, "\u9ad8\u7ea7\u7528\u6cd5": 606, "\u9ed8\u8ba4\u4e3a": 610, "\u9ed8\u8ba4\u4e3a\u7b2c0\u5217": 610, "\u9ed8\u8ba4\u5206\u522b\u4e3a": 610, "\u9ed8\u8ba4\u60c5\u51b5\u4e0b": [601, 603], "\u9ed8\u8ba4\u662f": 604}, "titles": ["Built-in Algorithms", "Customized Algorithms", "Deployment for GAE", "Design of Analytical Engine", "Dev and Test", "FAQs", "Programming Model: FLASH", "Getting Started", "Guide and Examples", "Ingress: Incrementalize Graph Algorithms", "Key Concepts", "NetworkX Compatibility", "Overview and Architecture", "Performance Tuning", "Programming Model: PIE", "Tutorial: Develop Your Algorithms in C++ with FLASH Model", "Tutorial: Develop your Algorithm in C++ with PIE Model", "Tutorial: Develop your Algorithm in Java with PIE Model", "Tutorial: Develop algorithms in Python", "Tutorial: Graph Algorithms with NetworkX APIs", "Tutorial: Graph Operations with NetworkX APIs", "Tutorial: Running Builtin Algorithms", "Tutorial: Run Giraph Applications on GraphScope", "Tutorial: Run GraphX Applications on GraphScope", "Vertex-Centric Model", "Contact Us", "Deploy GraphScope on Clouds", "Deploy on K8s Cluster", "Deploy GraphScope Operator", "Deploy GraphScope with <code class=\"docutils literal notranslate\"><span class=\"pre\">helm</span></code>", "Deploy with Existing Vineyard Cluster", "Install GraphScope in offline environment", "Install GraphScope on Local", "Persistent storage of graphs on the Kubernetes cluster", "Design of Analytical Engine", "Code Style Guide", "Development Guide", "How to Contribute", "Debugging on local deployment", "How to instrument", "How to Submit Pull-requests", "How to Test", "Error Codes", "Coordinator", "Development guide", "Dev and Test", "Coordinator Python SDK Reference", "graphscope.flex.rest.AlertApi", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "ColumnMappingColumn", "CreateAlertReceiverRequest", "CreateAlertRuleRequest", "CreateDataloadingJobResponse", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreatePropertyMeta", "CreateStoredProcRequest", "CreateStoredProcResponse", "CreateVertexType", "graphscope.flex.rest.DataSourceApi", "DataloadingJobConfig", "DataloadingJobConfigEdgesInner", "DataloadingJobConfigLoadingConfig", "DataloadingJobConfigLoadingConfigFormat", "DataloadingJobConfigVerticesInner", "DataloadingMRJobConfig", "DateType", "graphscope.flex.rest.DeploymentApi", "EdgeMapping", "EdgeMappingTypeTriplet", "Error", "FixedChar", "FixedCharChar", "GSDataType", "GetAlertMessageResponse", "GetAlertReceiverResponse", "GetAlertRuleResponse", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetPodLogResponse", "GetPropertyMeta", "GetResourceUsageResponse", "GetStorageUsageResponse", "GetStoredProcResponse", "GetVertexType", "graphscope.flex.rest.GraphApi", "graphscope.flex.rest.JobApi", "JobStatus", "LongText", "NodeStatus", "Parameter", "PodStatus", "PrimitiveType", "ResourceUsage", "RunningDeploymentInfo", "RunningDeploymentStatus", "SchemaMapping", "graphscope.flex.rest.ServiceApi", "ServiceStatus", "ServiceStatusSdkEndpoints", "StartServiceRequest", "graphscope.flex.rest.StoredProcedureApi", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "TypedValue", "UpdateAlertMessageStatusRequest", "UpdateStoredProcRequest", "UploadFileResponse", "graphscope.flex.rest.UtilsApi", "VarChar", "VarCharVarChar", "VertexMapping", "FLEX Coordinator Python SDK", "Getting Started", "Coordinator RESTFul API", "Configuration", "Using Custom Graph", "Data Import Configuration", "Data Model", "Deployment", "Development guide", "Dev and Test", "APIResponseWithCode", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreateProcedureRequest", "CreateProcedureResponse", "CreatePropertyMeta", "CreateVertexType", "DateType", "DeleteEdgeRequest", "DeleteVertexRequest", "EdgeAPI", "EdgeData", "EdgeMapping", "EdgeMappingDestinationVertexMappingsInner", "EdgeMappingSourceVertexMappingsInner", "EdgeMappingSourceVertexMappingsInnerColumn", "EdgeMappingTypeTriplet", "EdgeRequest", "EdgeStatistics", "FixedChar", "FixedCharChar", "GSDataType", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetGraphStatisticsResponse", "GetProcedureResponse", "GetPropertyMeta", "GetVertexType", "GraphManagementApi", "GraphServiceRegistryRecord", "JobManagementApi", "JobResponse", "JobStatus", "LongText", "Parameter", "PrimitiveType", "ProcedureManagementApi", "Property", "QueryRequest", "QueryServiceApi", "RegistryInstanceRecord", "SchemaMapping", "SchemaMappingLoadingConfig", "SchemaMappingLoadingConfigDataSource", "SchemaMappingLoadingConfigFormat", "SchemaMappingLoadingConfigXCsrParams", "ServiceManagementApi", "ServiceMetrics", "ServiceRegistryRecord", "ServiceStatus", "SnapshotStatus", "StartServiceRequest", "StopServiceRequest", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "TypedValue", "UpdateProcedureRequest", "UploadFileResponse", "VarChar", "VarCharVarChar", "VertexApi", "VertexData", "VertexEdgeRequest", "VertexMapping", "VertexRequest", "VertexStatistics", "VertexTypePairStatistics", "Java SDK Reference", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "APIResponseWithCode", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreateProcedureRequest", "CreateProcedureResponse", "CreatePropertyMeta", "CreateVertexType", "DateType", "DeleteEdgeRequest", "DeleteVertexRequest", "EdgeApi", "EdgeData", "EdgeMapping", "EdgeMappingDestinationVertexMappingsInner", "EdgeMappingSourceVertexMappingsInner", "EdgeMappingSourceVertexMappingsInnerColumn", "EdgeMappingTypeTriplet", "EdgeRequest", "EdgeStatistics", "FixedChar", "FixedCharChar", "GSDataType", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetGraphStatisticsResponse", "GetProcedureResponse", "GetPropertyMeta", "GetVertexType", "GraphManagementApI", "GraphServiceRegistryRecord", "gs_interactive.AdminServiceJobManagementApi", "JobResponse", "JobStatus", "LongText", "ModelProperty", "Parameter", "PrimitiveType", "gs_interactive.AdminServiceProcedureManagementApi", "QueryRequest", "gs_interactive.QueryServiceApi", "RegistryInstanceRecord", "SchemaMapping", "SchemaMappingLoadingConfig", "SchemaMappingLoadingConfigDataSource", "SchemaMappingLoadingConfigFormat", "SchemaMappingLoadingConfigXCsrParams", "gs_interactive.AdminServiceServiceManagementApi", "ServiceMetrics", "ServiceRegistryRecord", "ServiceStatus", "SnapshotStatus", "StartServiceRequest", "StopServiceRequest", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "TypedValue", "UpdateProcedureRequest", "UploadFileResponse", "VarChar", "VarCharVarChar", "VertexApi", "VertexData", "VertexEdgeRequest", "VertexMapping", "VertexRequest", "VertexStatistics", "VertexTypePairStatistics", "Driver", "Encoder and Decoder", "Python SDK Guide", "Python SDK Reference", "Result", "Session", "Status", "Interactive RESTFul API", "Create c++ Stored Procedures on GraphScope Interactive", "Getting Started", "Glossary", "Installation", "Overview", "Stored Procedures", "GraphScope Interactive", "Introduction to ArrowFragment", "Frequently Asked Questions", "Getting Started for GLE", "Graph Workloads", "GraphScope for Data Scientists", "How to Report Bugs", "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba", "A Generic Benchmark Tool", "Standalone Deployment for GIE", "Design of GIE", "Dev and Test", "Getting Started", "GOpt: A Graph-Native Query Optimization Framework", "Graph Planner Interface by JNI and RESTful API", "GIE for Cypher", "Using LLM as an Assistant in GIE", "Cypher Support", "Neo4j Ecosystem", "FAQs for GIE Gremlin Usage", "Guide and Examples", "Supported Gremlin Steps", "GIE for Gremlin", "Tutorial: LDBC Gremlin", "Apache TinkerPop Ecosystem", "Tutorials for Java Users", "Key Features", "Design of GLE", "Dev and Test", "Getting Started", "Graph Sampling", "Guide and Examples", "Tutorial: Training a Node Classification Model on K8s Cluster", "Tutorial: Training a Node Classification Model on Your Local Machine", "Tutorial: Training a Node Classification Model (PyG) on a K8S Cluster", "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine", "Loading Graphs", "Design of GraphScope", "Getting Started", "Glossary", "Graph Analytics Workloads", "Graph Interactive Workloads", "Graph Learning Workloads", "Introducing GraphScope", "Positioning of GraphScope", "Performance and Benchmark", "Tutorials for Python Users", "Analytical Engine API Reference", "Analytical App", "Context", "Cython SDK API", "Flex API Reference", "About Grape JDK", "Java Reference (javadoc)", "graphscope.Vertex", "graphscope.declare", "graphscope.framework.app.load_app", "graphscope.framework.dag_utils.add_column", "graphscope.framework.dag_utils.add_labels_to_graph", "graphscope.framework.dag_utils.arrow_to_dynamic", "graphscope.framework.dag_utils.bind_app", "graphscope.framework.dag_utils.clear_edges", "graphscope.framework.dag_utils.clear_graph", "graphscope.framework.dag_utils.context_to_dataframe", "graphscope.framework.dag_utils.context_to_numpy", "graphscope.framework.dag_utils.copy_graph", "graphscope.framework.dag_utils.create_app", "graphscope.framework.dag_utils.create_graph", "graphscope.framework.dag_utils.create_graph_view", "graphscope.framework.dag_utils.create_loader", "graphscope.framework.dag_utils.create_subgraph", "graphscope.framework.dag_utils.create_unload_op", "graphscope.framework.dag_utils.dynamic_to_arrow", "graphscope.framework.dag_utils.get_context_data", "graphscope.framework.dag_utils.graph_to_dataframe", "graphscope.framework.dag_utils.graph_to_numpy", "graphscope.framework.dag_utils.gremlin_to_subgraph", "graphscope.framework.dag_utils.modify_edges", "graphscope.framework.dag_utils.modify_vertices", "graphscope.framework.dag_utils.output", "graphscope.framework.dag_utils.project_arrow_property_graph", "graphscope.framework.dag_utils.project_to_simple", "graphscope.framework.dag_utils.report_graph", "graphscope.framework.dag_utils.run_app", "graphscope.framework.dag_utils.to_data_sink", "graphscope.framework.dag_utils.to_directed", "graphscope.framework.dag_utils.to_undirected", "graphscope.framework.dag_utils.to_vineyard_dataframe", "graphscope.framework.dag_utils.to_vineyard_tensor", "graphscope.framework.dag_utils.unload_app", "graphscope.framework.dag_utils.unload_context", "graphscope.framework.dag_utils.unload_graph", "graphscope.framework.operation.Operation.__init__", "graphscope.framework.operation.Operation.as_op_def", "graphscope.framework.operation.Operation.eval", "graphscope.framework.operation.Operation.evaluated", "graphscope.framework.operation.Operation.key", "graphscope.framework.operation.Operation.signature", "graphscope.g", "graphscope.get_default_session", "graphscope.graphlearn", "graphscope.gremlin", "graphscope.has_default_session", "graphscope.session", "graphscope.set_option", "Developing Your Own Model", "Data Source", "Graph Object", "Graph Query", "Graph Sampling", "Graph Traversal", "Graph Sampling Language\uff08GSL)", "Install from pip", "Graph Learning Model", "Negative Sampling", "Defining Your Own Operator", "Integrating Other Data Sources", "Quick Start", "System configuration", "Graph", "Interactive Query", "Graph Learning", "Builtin algorithms", "Functions", "graphscope.nx.classes.function.add_cycle", "graphscope.nx.classes.function.add_path", "graphscope.nx.classes.function.add_star", "graphscope.nx.classes.function.all_neighbors", "graphscope.nx.classes.function.common_neighbors", "graphscope.nx.classes.function.create_empty_copy", "graphscope.nx.classes.function.degree", "graphscope.nx.classes.function.degree_histogram", "graphscope.nx.classes.function.density", "graphscope.nx.classes.function.edge_subgraph", "graphscope.nx.classes.function.edges", "graphscope.nx.classes.function.freeze", "graphscope.nx.classes.function.induced_subgraph", "graphscope.nx.classes.function.info", "graphscope.nx.classes.function.is_directed", "graphscope.nx.classes.function.is_empty", "graphscope.nx.classes.function.is_frozen", "graphscope.nx.classes.function.is_negatively_weighted", "graphscope.nx.classes.function.is_weighted", "graphscope.nx.classes.function.neighbors", "graphscope.nx.classes.function.nodes", "graphscope.nx.classes.function.nodes_with_selfloops", "graphscope.nx.classes.function.non_edges", "graphscope.nx.classes.function.non_neighbors", "graphscope.nx.classes.function.number_of_edges", "graphscope.nx.classes.function.number_of_nodes", "graphscope.nx.classes.function.number_of_selfloops", "graphscope.nx.classes.function.selfloop_edges", "graphscope.nx.classes.function.subgraph", "graphscope.nx.classes.function.to_directed", "graphscope.nx.classes.function.to_undirected", "graphscope.nx.generators.atlas.graph_atlas", "graphscope.nx.generators.atlas.graph_atlas_g", "graphscope.nx.generators.classic.balanced_tree", "graphscope.nx.generators.classic.barbell_graph", "graphscope.nx.generators.classic.binomial_tree", "graphscope.nx.generators.classic.circulant_graph", "graphscope.nx.generators.classic.circular_ladder_graph", "graphscope.nx.generators.classic.complete_graph", "graphscope.nx.generators.classic.complete_multipartite_graph", "graphscope.nx.generators.classic.cycle_graph", "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "graphscope.nx.generators.classic.empty_graph", "graphscope.nx.generators.classic.full_rary_tree", "graphscope.nx.generators.classic.ladder_graph", "graphscope.nx.generators.classic.lollipop_graph", "graphscope.nx.generators.classic.null_graph", "graphscope.nx.generators.classic.path_graph", "graphscope.nx.generators.classic.star_graph", "graphscope.nx.generators.classic.trivial_graph", "graphscope.nx.generators.classic.turan_graph", "graphscope.nx.generators.classic.wheel_graph", "graphscope.nx.generators.community.LFR_benchmark_graph", "graphscope.nx.generators.community.caveman_graph", "graphscope.nx.generators.community.connected_caveman_graph", "graphscope.nx.generators.community.gaussian_random_partition_graph", "graphscope.nx.generators.community.planted_partition_graph", "graphscope.nx.generators.community.random_partition_graph", "graphscope.nx.generators.community.relaxed_caveman_graph", "graphscope.nx.generators.community.ring_of_cliques", "graphscope.nx.generators.community.stochastic_block_model", "graphscope.nx.generators.community.windmill_graph", "graphscope.nx.generators.degree_seq.configuration_model", "graphscope.nx.generators.degree_seq.degree_sequence_tree", "graphscope.nx.generators.degree_seq.directed_configuration_model", "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "graphscope.nx.generators.degree_seq.expected_degree_graph", "graphscope.nx.generators.degree_seq.havel_hakimi_graph", "graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "graphscope.nx.generators.directed.gn_graph", "graphscope.nx.generators.directed.gnc_graph", "graphscope.nx.generators.directed.gnr_graph", "graphscope.nx.generators.directed.random_k_out_graph", "graphscope.nx.generators.directed.scale_free_graph", "graphscope.nx.generators.duplication.duplication_divergence_graph", "graphscope.nx.generators.duplication.partial_duplication_graph", "graphscope.nx.generators.ego.ego_graph", "graphscope.nx.generators.expanders.chordal_cycle_graph", "graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "graphscope.nx.generators.expanders.paley_graph", "graphscope.nx.generators.geometric.geographical_threshold_graph", "graphscope.nx.generators.geometric.random_geometric_graph", "graphscope.nx.generators.geometric.soft_random_geometric_graph", "graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "graphscope.nx.generators.geometric.waxman_graph", "graphscope.nx.generators.harary_graph.hkn_harary_graph", "graphscope.nx.generators.harary_graph.hnm_harary_graph", "graphscope.nx.generators.intersection.general_random_intersection_graph", "graphscope.nx.generators.intersection.k_random_intersection_graph", "graphscope.nx.generators.intersection.uniform_random_intersection_graph", "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "graphscope.nx.generators.mycielski.mycielski_graph", "graphscope.nx.generators.mycielski.mycielskian", "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "graphscope.nx.generators.small.LCF_graph", "graphscope.nx.generators.small.bull_graph", "graphscope.nx.generators.small.chvatal_graph", "graphscope.nx.generators.small.cubical_graph", "graphscope.nx.generators.small.desargues_graph", "graphscope.nx.generators.small.diamond_graph", "graphscope.nx.generators.small.dodecahedral_graph", "graphscope.nx.generators.small.frucht_graph", "graphscope.nx.generators.small.heawood_graph", "graphscope.nx.generators.small.house_graph", "graphscope.nx.generators.small.house_x_graph", "graphscope.nx.generators.small.icosahedral_graph", "graphscope.nx.generators.small.krackhardt_kite_graph", "graphscope.nx.generators.small.make_small_graph", "graphscope.nx.generators.small.moebius_kantor_graph", "graphscope.nx.generators.small.octahedral_graph", "graphscope.nx.generators.small.pappus_graph", "graphscope.nx.generators.small.petersen_graph", "graphscope.nx.generators.small.sedgewick_maze_graph", "graphscope.nx.generators.small.tetrahedral_graph", "graphscope.nx.generators.small.truncated_cube_graph", "graphscope.nx.generators.small.truncated_tetrahedron_graph", "graphscope.nx.generators.small.tutte_graph", "graphscope.nx.generators.social.davis_southern_women_graph", "graphscope.nx.generators.social.florentine_families_graph", "graphscope.nx.generators.social.karate_club_graph", "graphscope.nx.generators.social.les_miserables_graph", "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "graphscope.nx.generators.sudoku.sudoku_graph", "graphscope.nx.generators.trees.prefix_tree", "graphscope.nx.generators.trees.random_tree", "graphscope.nx.generators.triads.triad_graph", "networkx.generators.internet_as_graphs.random_internet_as_graph", "networkx.generators.stochastic.stochastic_graph", "Graph generators", "Graph types", "NetworkX-style API", "Reading graphs", "Graph Transformation", "Operation", "Python API Reference", "Selector", "Session", "Resources Estimator", "GART: Bridging the Gap between Relational OLTP and Graph Workloads", "Getting Started", "GraphAr: Standard Graph Data File Format", "GRIN: Graph Retrieval INterface", "Groot: Persistent Graph Store", "In-memory immutable graphs on Vineyard", "Applications and algorithms", "Scaling and repartitioning", "User Guide and Examples of GAE", "User Guide and Examples of GLE", "Error Codes", "Command-line Utility <code class=\"docutils literal notranslate\"><span class=\"pre\">gsctl</span></code>", "How to Find logs", "Monitoring", "\u56fe\u5206\u6790\u5f15\u64ce", "\u90e8\u7f72", "\u5f00\u53d1\u8005\u6307\u5357", "\u5e38\u89c1\u95ee\u9898", "\u5feb\u901f\u4e0a\u624b", "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c", "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf", "\u5b89\u88c5", "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce", "\u56fe\u5b66\u4e60\u5f15\u64ce", "\u8f7d\u56fe", "\u5165\u95e8\u6559\u7a0b"], "titleterms": {"": [7, 332, 339, 349, 367, 597], "0": [321, 336], "1": [16, 129, 321, 334, 336, 426, 427, 429, 437, 590], "101": 608, "2": [16, 129, 321, 334, 336, 426, 427, 437, 590], "3": [16, 129, 321, 334, 336, 426, 427, 437, 590], "4": [16, 129, 321, 334, 336, 426, 437], "5": [321, 336, 426], "6": 321, "A": [15, 129, 318, 327, 328, 333], "AS": 576, "For": [46, 309, 338, 344, 589], "In": 591, "Not": 341, "One": [327, 358, 583], "The": [6, 19, 30, 318, 330, 588], "To": 341, "Will": 341, "__init__": 412, "about": [339, 372], "access": [20, 317, 334], "across": 346, "ad": [20, 356], "add_column": 377, "add_cycl": 444, "add_edg": 244, "add_labels_to_graph": 378, "add_path": 445, "add_star": 446, "add_vertex": 299, "addedg": 154, "addvertex": 209, "adjac": 579, "adminservic": 134, "adminservicejobmanagementapi": 265, "adminserviceproceduremanagementapi": 272, "adminserviceservicemanagementapi": 281, "advanc": 356, "after": 343, "aggreg": [1, 339, 341, 343, 347], "alertapi": 47, "algorithm": [0, 1, 2, 6, 9, 11, 15, 16, 17, 18, 19, 21, 22, 23, 34, 346, 425, 442, 592, 594], "alibaba": [327, 426], "all": [0, 31, 32, 36, 41], "all_neighbor": 447, "alon": 427, "along": 23, "alongedgetooutervertex": 10, "alongincomingedgetooutervertex": 10, "alongoutgoingedgetooutervertex": 10, "ambigu": [333, 356], "an": [20, 336, 435], "analysi": [19, 357], "analyt": [2, 3, 4, 7, 10, 13, 24, 31, 34, 324, 327, 346, 357, 358, 360, 365, 367, 368, 598], "analyz": [20, 333], "anoth": 30, "apach": [344, 608], "api": [6, 9, 12, 19, 20, 46, 127, 216, 309, 313, 334, 336, 367, 370, 371, 426, 437, 578, 582, 606], "apiresponsewithcod": [135, 225], "app": [22, 23, 367, 368, 376], "appasset": 368, "appli": [343, 362], "applic": [12, 15, 22, 23, 343, 357, 592], "appropri": 339, "ar": 363, "architectur": [6, 12, 330, 586], "arrai": [131, 589], "arrow_to_dynam": 379, "arrowfrag": 321, "artifacthub": 590, "as_op_def": 413, "ask": 322, "assist": 336, "assort": 0, "atla": [475, 476, 576], "attribut": [0, 20, 426, 443], "author": [46, 47, 67, 75, 94, 95, 106, 110, 121, 154, 173, 175, 181, 184, 191, 209, 216, 244, 263, 265, 272, 274, 281, 299, 309], "automat": 39, "avail": [128, 590], "averag": 0, "balanced_tre": 477, "barbell_graph": 478, "base": 347, "baseedgetyp": [48, 136, 226], "baseedgetypevertextypepairrelationsinn": [49, 137, 227], "baseedgetypevertextypepairrelationsinnerxcsrparam": [50, 138, 228], "basepropertymeta": [51, 139, 229], "basevertextyp": [52, 140, 230], "basevertextypexcsrparam": [53, 141, 231], "basic": [31, 343, 426], "basicarrowfragmentbuild": 321, "basicarrowvertexmapbuild": 321, "basicevfragmentload": 321, "benchmark": [328, 333, 365], "between": [0, 339, 586], "bi": 357, "bi11": 343, "bi14": 343, "bi2": 343, "bi3": 343, "bi4": 343, "binari": 334, "bind": [129, 592], "bind_app": 380, "bind_datasource_in_batch": 67, "binomial_tre": 479, "both": [341, 343], "bothinout": 10, "bothv": [341, 343], "branch": [37, 341], "breadth": 0, "breakdown": 130, "bridg": 586, "bug": [37, 326], "build": [4, 17, 32, 36, 41, 45, 134, 328, 331, 334, 348, 372, 425, 432, 590, 610], "built": [0, 6, 132, 346, 356, 437, 592], "builtin": [21, 319, 368, 442, 581], "bulkload": [173, 263], "bull_graph": 543, "bytestreamaccessfil": 436, "c": [15, 16, 35, 314, 594], "call": [314, 319], "callprocedur": [184, 274], "callprocedureoncurrentgraph": [184, 274], "can": [360, 362], "canceljob": [175, 265], "case": 363, "caveman_graph": 497, "cdlp": 0, "central": [0, 17], "centric": [24, 347], "challeng": [325, 360, 362], "chang": [37, 597], "check": [126, 315], "checker": 35, "chordal_cycle_graph": 521, "chvatal_graph": 544, "circulant_graph": 480, "circular_ladder_graph": 481, "class": [16, 306, 307, 310, 311, 312, 435, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474], "classic": [477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 576], "classif": [352, 353, 354, 355], "claus": 337, "clean": [27, 30, 33], "clear_edg": 381, "clear_graph": 382, "client": [15, 27, 30, 36, 354, 427, 597], "clone": 435, "close": [0, 126, 315, 597], "cloud": [26, 346, 426], "cluster": [0, 27, 30, 33, 41, 329, 352, 354], "cmake": 134, "code": [35, 37, 42, 132, 134, 435, 596], "codebas": [4, 45, 134], "coeffici": 0, "coin": 341, "collect": 328, "column": 130, "columnmap": [54, 142, 232], "columnmappingcolumn": 55, "command": [38, 597], "commit": [37, 590], "common": 590, "common_neighbor": 448, "commun": [37, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 576], "compar": [328, 364], "compat": [11, 339], "compil": [134, 316, 432, 435], "complet": 589, "complete_graph": 482, "complete_multipartite_graph": 483, "complex": 343, "complic": 129, "compon": 36, "comput": [12, 325, 327, 357, 589], "concept": [10, 589], "conduct": 37, "configur": [28, 29, 128, 130, 328, 329, 332, 333, 354, 438, 590], "configuration_model": 506, "connect": [0, 29, 30, 126, 132, 216, 308, 315, 335, 342, 590, 597], "connected_caveman_graph": 498, "consol": [342, 608], "constant": [341, 343], "constraint": 339, "construct": [337, 437], "constructor": 20, "consumpt": 356, "contact": 25, "contain": [36, 45, 134, 348], "content": 328, "context": [16, 367, 369, 583], "context_to_datafram": 383, "context_to_numpi": 384, "continu": 37, "contribut": 37, "convert": 11, "coordin": [28, 36, 43, 45, 46, 125, 126, 127], "copi": [20, 31], "copy_graph": 385, "core": [0, 333], "count": 341, "count_vertic": 319, "creat": [20, 33, 37, 45, 129, 216, 308, 314, 319, 352, 355, 590], "create_alert_receiv": 47, "create_app": 386, "create_edge_typ": 94, "create_empty_copi": 449, "create_graph": [94, 387], "create_graph_view": 388, "create_load": 389, "create_stored_procedur": 110, "create_subgraph": 390, "create_unload_op": 391, "create_vertex_typ": 94, "createalertreceiverrequest": 56, "createalertrulerequest": 57, "createdataloadingjobrespons": 58, "createedgetyp": [59, 143, 233, 263], "creategraph": [173, 263], "creategraphrequest": [60, 144, 234], "creategraphrespons": [61, 145, 235], "creategraphschemarequest": [62, 146, 236], "createprocedur": [181, 272], "createprocedurerequest": [147, 237], "createprocedurerespons": [148, 238], "createpropertymeta": [63, 149, 239], "createstoredprocrequest": 64, "createstoredprocrespons": 65, "createvertextyp": [66, 150, 240, 263], "csv": 130, "cubical_graph": 545, "curl": 334, "custom": [1, 23, 27, 128, 129, 132, 332], "cut": [10, 589], "cycle_graph": 484, "cypher": [216, 308, 315, 316, 318, 335, 337, 346, 361, 590], "cython": 370, "dag_util": [377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], "data": [13, 45, 129, 130, 131, 216, 308, 309, 325, 329, 333, 337, 339, 356, 426, 433, 436, 437, 588, 590], "databas": [314, 364], "dataloadingjobconfig": 68, "dataloadingjobconfigedgesinn": 69, "dataloadingjobconfigloadingconfig": 70, "dataloadingjobconfigloadingconfigformat": 71, "dataloadingjobconfigverticesinn": 72, "dataloadingmrjobconfig": 73, "dataset": [30, 336, 356], "datasourceapi": 67, "datetyp": [74, 151, 241], "davis_southern_women_graph": 565, "debug": 38, "declar": 375, "decod": [307, 314], "deduc": 356, "dedup": [341, 343], "deepcopi": 20, "default": 27, "defaultsess": 311, "defin": [15, 16, 314, 319, 353, 354, 355, 435, 586], "degre": [0, 450, 576], "degree_histogram": 451, "degree_seq": [506, 507, 508, 509, 510, 511, 512], "degree_sequence_tre": 507, "delet": [216, 308, 319, 590], "delete_alert_message_in_batch": 47, "delete_alert_receiver_by_id": 47, "delete_alert_rule_by_id": 47, "delete_edg": 244, "delete_edge_type_by_nam": 94, "delete_graph_by_id": 94, "delete_job_by_id": 95, "delete_stored_procedure_by_id": 110, "delete_vertex": 299, "delete_vertex_type_by_nam": 94, "deleteedgerequest": [152, 242], "deleteedgetyp": 263, "deletegraph": [173, 263], "deleteprocedur": [181, 272], "deletevertexrequest": [153, 243], "deletevertextyp": 263, "densiti": 452, "dep": [36, 45, 134, 348], "depend": [23, 31, 32, 134, 432], "deploi": [23, 26, 27, 28, 29, 30, 128, 132, 317, 329, 590], "deploy": [2, 27, 38, 132, 327, 329, 333], "deploymentapi": 75, "deploymodeenum": 194, "deprec": 359, "depth": 0, "desargues_graph": 546, "describ": 427, "design": [3, 9, 34, 330, 333, 346, 347, 357, 435, 589], "destin": 31, "destroi": [126, 315, 590], "detail": [47, 67, 75, 94, 95, 106, 110, 121, 154, 173, 175, 181, 184, 191, 209, 244, 263, 265, 272, 274, 281, 299, 333, 589], "dev": [4, 32, 36, 41, 45, 134, 331, 348], "develop": [15, 16, 17, 18, 22, 23, 36, 44, 45, 133, 134, 327, 425, 437, 590, 594], "diamond_graph": 547, "differ": [339, 583], "differenti": 9, "digraph": 577, "dimension": 583, "direct": [20, 513, 514, 515, 516, 517, 576], "directed_configuration_model": 508, "directed_havel_hakimi_graph": 509, "directed_joint_degree_graph": 534, "directori": 590, "disaggreg": 357, "discuss": [25, 37], "displai": 19, "distribut": [9, 325, 427, 435], "diverg": 576, "divers": 357, "do": [360, 362], "docker": [132, 134, 333, 348, 432, 602], "document": [37, 46, 216, 309], "dodecahedral_graph": 548, "doe": 19, "dorogovtsev_goltsev_mendes_graph": 485, "download": [31, 315, 336], "driven": 9, "driver": [306, 335], "dst_field": 610, "dst_label": 610, "duplic": [518, 519, 576], "duplication_divergence_graph": 518, "dynamic_to_arrow": 392, "e": 341, "eas": 346, "ecosystem": [325, 338, 344], "edg": [10, 20, 130, 343, 356, 443, 454, 579, 589, 610], "edge_subgraph": [20, 453], "edgeapi": [154, 244], "edgedata": [155, 245], "edgemap": [76, 156, 246], "edgemappingdestinationvertexmappingsinn": [157, 247], "edgemappingsourcevertexmappingsinn": [158, 248], "edgemappingsourcevertexmappingsinnercolumn": [159, 249], "edgemappingtypetriplet": [77, 160, 250], "edgerequest": [161, 251], "edgestatist": [162, 252], "edgestoragestrategyenum": 138, "ego": [520, 576], "ego_graph": 520, "egograph": 347, "egographsag": 353, "eigenvector": 0, "element": 20, "elementmap": 341, "empti": 20, "empty_graph": 486, "enabl": 134, "encod": [307, 314, 425, 433], "endpoint": [46, 336], "endv": 341, "engin": [3, 4, 7, 9, 10, 12, 24, 31, 34, 36, 128, 134, 314, 327, 332, 346, 348, 349, 353, 354, 355, 357, 365, 367, 589, 598], "entiti": 131, "enum": [137, 138, 147, 165, 167, 170, 177, 180, 187, 188, 194, 198], "environ": [31, 32, 36, 41, 45, 134, 331, 336, 348], "error": [42, 78, 134, 596], "estim": [13, 585], "eval": 414, "evalu": [355, 415], "examin": 20, "exampl": [8, 17, 22, 23, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 154, 173, 175, 181, 184, 191, 209, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 334, 340, 341, 351, 594, 595], "execut": [2, 34, 336, 357], "exist": 30, "expand": [339, 341, 521, 522, 523, 576], "expans": 343, "expected_degree_graph": 510, "express": [6, 341, 343], "extens": 346, "extract": [31, 334, 343], "faq": [5, 339], "featur": [37, 318, 333, 346, 588, 590], "fennel": 593, "ffi": 12, "file": [16, 27, 31, 130, 436, 588], "filter": [339, 341, 343], "find": [38, 598], "first": [0, 329], "fix": 37, "fixedchar": [79, 163, 253], "fixedcharchar": [80, 164, 254], "flash": [6, 15, 359], "flex": [47, 67, 75, 94, 95, 106, 110, 121, 125, 327, 371], "flexibl": [9, 34], "florentine_families_graph": 566, "fold": [341, 343], "footprint": 13, "fork": 37, "format": [37, 426, 588, 590], "foundat": 318, "fragment": 367, "fragmentbuilder\u6570\u636e\u521d\u59cb\u5316": 321, "fragment\u6784\u5efa": 321, "framework": [34, 333, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417], "freez": [443, 455], "frequent": [27, 322], "from": [17, 19, 20, 31, 32, 33, 130, 132, 327, 336, 343, 356, 372, 432, 586, 590], "frucht_graph": 549, "full_rary_tre": 487, "function": [15, 18, 354, 355, 368, 370, 425, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 584], "g": [31, 418], "ga": 24, "gae": [2, 359, 594, 598], "gaia": 359, "gap": 586, "gar": 16, "gart": [359, 586], "gaussian_random_partition_graph": 499, "gcc": 31, "gener": [328, 336, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576], "general_random_intersection_graph": 531, "geographical_threshold_graph": 524, "geometr": [524, 525, 526, 527, 528, 576], "get": [7, 17, 37, 46, 126, 216, 308, 314, 315, 323, 332, 333, 334, 341, 349, 358, 432, 587], "get_context_data": 393, "get_dataloading_job_config": 95, "get_datasource_by_id": 67, "get_default_sess": 419, "get_deployment_info": 75, "get_deployment_pod_log": 75, "get_deployment_resource_usag": 75, "get_deployment_statu": 75, "get_edg": 244, "get_graph_by_id": 94, "get_job_by_id": 95, "get_schema_by_id": 94, "get_service_status_by_id": 106, "get_storage_usag": 75, "get_stored_procedure_by_id": 110, "get_vertex": 299, "getalertmessagerespons": 82, "getalertreceiverrespons": 83, "getalertrulerespons": 84, "getedg": 154, "getedgetyp": [85, 166, 256], "getgraphmeta": [173, 263], "getgraphrespons": [86, 167, 257], "getgraphschema": [173, 263], "getgraphschemarespons": [87, 168, 258], "getgraphstatist": [173, 263], "getgraphstatisticsrespons": [169, 259], "getjobbyid": [175, 265], "getpodlogrespons": 88, "getprocedur": [181, 272], "getprocedurerespons": [170, 260], "getpropertymeta": [89, 171, 261], "getresourceusagerespons": 90, "getservicestatu": [191, 281], "getsnapshotstatu": 263, "getstorageusagerespons": 91, "getstoredprocrespons": 92, "getvertex": 209, "getvertextyp": [93, 172, 262], "gie": [329, 330, 331, 332, 335, 336, 338, 339, 342, 344, 359, 598], "giraph": 22, "git": 432, "github": [16, 17, 25, 37], "gl": 437, "gle": [323, 347, 595, 598], "glossari": [316, 359], "gn_graph": 513, "gnc_graph": 514, "gnn": [346, 352, 362, 437, 604], "gnr_graph": 515, "gopt": 333, "gpu": 365, "grape": [12, 17, 359, 372], "graph": [2, 9, 11, 13, 19, 20, 30, 33, 34, 45, 129, 130, 131, 134, 216, 308, 314, 318, 324, 325, 327, 333, 334, 336, 339, 343, 346, 347, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 425, 427, 428, 429, 430, 431, 433, 437, 439, 441, 443, 576, 577, 579, 580, 586, 588, 589, 590, 591, 592, 598], "graph_atla": 475, "graph_atlas_g": 476, "graph_to_datafram": 394, "graph_to_numpi": 395, "graphapi": 94, "graphar": [359, 588], "graphlearn": 420, "graphmanagementapi": [173, 263], "graphsag": 355, "graphscop": [7, 10, 15, 16, 17, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 36, 41, 47, 67, 75, 94, 95, 106, 110, 121, 314, 320, 325, 327, 332, 349, 357, 360, 362, 363, 364, 367, 370, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 588, 598, 602, 606, 607], "graphserviceregistryrecord": [174, 264], "graphx": 23, "gremlin": [339, 341, 342, 343, 346, 361, 421, 590, 608], "gremlin_to_subgraph": 396, "gremlin\u517c\u5bb9\u6027": 608, "gremlin\u7f16\u7a0b\u5165\u95e8": 608, "grin": [359, 589], "groot": [359, 590, 598], "group": [339, 341, 343], "groupcount": [341, 343], "gs_interact": [265, 272, 274, 281], "gsctl": [36, 45, 126, 128, 314, 597], "gsdatatyp": [81, 165, 255], "gsl": [350, 431], "guid": [8, 35, 36, 44, 133, 308, 340, 351, 590, 594, 595], "guidelin": 589, "gum": 359, "h": [18, 600], "h3": 341, "ha": 341, "handl": [325, 364], "handler": 589, "harari": 576, "harary_graph": [529, 530], "has_default_sess": 422, "hasid": [341, 343], "haslabel": 341, "hasnot": 341, "havel_hakimi_graph": 511, "header": [47, 67, 75, 94, 95, 106, 110, 121, 154, 173, 175, 181, 184, 191, 209, 244, 263, 265, 272, 274, 281, 299], "heawood_graph": 550, "helm": [2, 29, 132], "high": [34, 346, 357, 590], "hkn_harary_graph": 529, "hnm_harary_graph": 530, "house_graph": 551, "house_x_graph": 552, "how": [19, 37, 39, 40, 41, 326, 339, 348, 425, 435, 437, 598], "http": [47, 67, 75, 94, 95, 106, 110, 121, 154, 173, 175, 181, 184, 191, 209, 244, 263, 265, 272, 274, 281, 299], "hybrid": [333, 593], "hyperlink": 0, "i": [14, 341, 360, 362, 363], "icosahedral_graph": 553, "id": [339, 341, 343, 589], "ident": 341, "imag": [27, 32, 41, 432, 590], "immut": 591, "implement": [6, 15, 17, 37, 435, 589], "import": [45, 129, 130, 216, 308, 333, 354, 590], "import_schema_by_id": 94, "importoptionenum": 187, "improv": 37, "inE": [341, 343], "includ": 23, "increment": [9, 12], "index": 339, "indic": 327, "individu": 36, "induc": [0, 20], "induced_subgraph": 456, "infer": 346, "info": 457, "inform": 588, "ingress": [9, 359], "inner": 339, "innervertex": 10, "innervertexwithincomingedg": 10, "innervertexwithoutgoingedg": 10, "input": 314, "inspect": 27, "instal": [7, 27, 29, 30, 31, 32, 36, 37, 45, 46, 134, 216, 308, 315, 317, 327, 332, 333, 348, 349, 432, 590, 597], "instanc": [126, 315, 332, 590], "instrument": 39, "integr": [15, 37, 325, 333, 436], "interact": [45, 126, 128, 132, 134, 313, 314, 315, 317, 319, 320, 324, 327, 332, 358, 361, 365, 440, 590, 598], "interfac": [311, 314, 334, 346, 435, 436, 589], "internet_as_graph": 574, "intersect": [531, 532, 533, 576], "introduc": [333, 363], "introduct": [321, 333, 341, 429], "inv": [341, 343], "is_direct": 458, "is_empti": 459, "is_frozen": 460, "is_negatively_weight": 461, "is_valid_directed_joint_degre": 535, "is_valid_joint_degre": 536, "is_weight": 462, "isomorph": 576, "item": 128, "iter": 589, "jar": 17, "java": [17, 35, 39, 216, 314, 334, 342, 345, 373, 594], "javaapp": 368, "javadoc": 373, "javasdk": 17, "jdk": [17, 372], "jni": 334, "job": 129, "job_config": 129, "jobapi": 95, "jobmanagementapi": 175, "jobrespons": [176, 266], "jobstatu": [96, 177, 267], "joint": 576, "joint_degree_graph": 537, "joint_degree_seq": [534, 535, 536, 537], "k": 0, "k8": [27, 352, 354, 598], "k_hop_neighbor": 319, "k_random_intersection_graph": 532, "karate_club_graph": 567, "katz": 0, "keep": 37, "kei": [10, 318, 336, 339, 346, 416], "known": 590, "krackhardt_kite_graph": 554, "kubeconfig": 27, "kubernet": [27, 30, 33, 38, 41, 352, 602, 607], "label": [0, 341, 343, 356, 426, 589, 610], "labeledvertexdatacontext": 583, "labeledvertexpropertycontext": 583, "ladder_graph": 488, "languag": [34, 318, 431], "larg": [327, 356, 360, 362], "launch": [27, 45, 353, 354, 355], "layer": [12, 357], "lcc": 0, "lcf_graph": 542, "ldbc": 343, "learn": [324, 327, 347, 348, 349, 353, 355, 357, 358, 362, 364, 425, 433, 441, 598], "left": 343, "length": 0, "les_miserables_graph": 568, "lfr_benchmark_graph": 496, "librari": [34, 346, 432], "lifecycl": 30, "like": 339, "limit": [318, 341, 343, 363, 590], "line": 597, "linter": 35, "linux": [32, 602], "list": [579, 589], "list_alert_messag": 47, "list_alert_receiv": 47, "list_alert_rul": 47, "list_graph": 94, "list_job": 95, "list_service_statu": 106, "list_stored_procedur": 110, "listgraph": [173, 263], "listjob": [175, 265], "listprocedur": [181, 272], "llm": 336, "load": [30, 129, 130, 336, 343, 352, 353, 354, 355, 356, 586, 588, 590, 591], "load_app": 376, "loader": [354, 356, 439, 610], "loaderfor": 355, "loadstrategi": 10, "local": [1, 7, 32, 36, 38, 41, 45, 134, 331, 332, 333, 341, 348, 349, 353, 355, 589, 590], "locat": [31, 334], "log": [38, 586, 590, 598], "lollipop_graph": 489, "longtext": [97, 178, 268], "loop": 443, "loss": 425, "machin": [325, 353, 355], "maco": [32, 602], "macro": 589, "main": 354, "maintain": 37, "make": [4, 20], "make_small_graph": 555, "mani": 343, "manual": [45, 134, 331, 356], "map": [1, 130, 321, 586], "margulis_gabber_galil_graph": 522, "master": 589, "match": [333, 341, 343, 361], "math": [18, 600], "maven": [17, 216], "max": [341, 343], "maxcomput": 426, "maxgraph": 359, "mean": [341, 343], "memoiz": 9, "memori": [13, 356, 591], "merg": 37, "messag": [9, 347], "messagemanag": 10, "messagestrategi": 10, "method": 583, "min": [341, 343], "minor": 37, "mirror": 589, "mode": [427, 597], "model": [6, 12, 14, 15, 16, 17, 24, 34, 46, 131, 318, 347, 352, 353, 354, 355, 359, 362, 425, 433, 437, 589], "modelproperti": 269, "modern": 130, "modif": 4, "modifi": 590, "modify_edg": 397, "modify_vertic": 398, "moebius_kantor_graph": 556, "monitor": 599, "more": 129, "motiv": [6, 9, 330, 333, 357, 589], "mount": 27, "movi": 129, "movie_graph": 129, "multi": [34, 583], "multipl": [339, 343, 356], "mycielski": [538, 539, 576], "mycielski_graph": 538, "mycielskian": 539, "nativ": [319, 333, 346], "natur": 589, "neg": [350, 434], "neighbor": [20, 355, 463], "neighborhood": 350, "neo4j": [319, 333, 338, 361], "network": [352, 362, 576], "networkx": [11, 19, 20, 574, 575, 578], "neural": [352, 362], "new": [45, 129, 216, 308, 435, 590], "next": [7, 332, 349, 363, 597], "node": [20, 347, 352, 353, 354, 355, 443, 464], "nodes_with_selfloop": 465, "nodestatu": 98, "non": 576, "non_edg": 466, "non_neighbor": 467, "nonisomorphic_tre": [540, 541], "null_graph": 490, "number": 27, "number_of_edg": 468, "number_of_nod": 469, "number_of_nonisomorphic_tre": 541, "number_of_selfloop": 470, "numpi": [356, 610], "nx": [11, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573], "object": [20, 368, 369, 427, 439, 581, 584], "octahedral_graph": 557, "odp": 130, "offlin": [29, 31, 590], "oltp": 586, "onli": [2, 37], "onlyin": 10, "onlyout": 10, "oper": [11, 20, 28, 337, 343, 412, 413, 414, 415, 416, 417, 435, 581], "optim": [6, 13, 333, 339, 355], "option": [129, 134], "orchestr": 346, "order": [341, 343, 589], "other": [27, 129, 216, 329, 356, 436, 590], "otherv": [341, 343], "out": [341, 343, 437], "outervertex": 10, "output": [314, 399], "outv": [341, 343], "over": 19, "overview": [6, 9, 12, 318, 327, 328, 334, 433, 590], "own": [17, 18, 22, 132, 329, 356, 425, 435], "pack": 132, "packag": [16, 31, 32, 334, 354, 432], "pagerank": [0, 319], "pair": 0, "paley_graph": 523, "panda": [356, 610], "pappus_graph": 558, "paradigm": [347, 362], "parallel": 339, "paramet": [27, 47, 67, 75, 94, 95, 99, 106, 110, 121, 154, 173, 175, 179, 181, 184, 191, 209, 244, 263, 265, 270, 272, 274, 281, 299, 319, 354, 356], "part": 343, "parti": 31, "partial_duplication_graph": 519, "partit": [589, 590, 593], "partitionstrategi": 10, "pass": 347, "path": [0, 333, 339, 341, 343], "path_graph": 491, "pathexpand": 341, "pattern": [333, 343, 361], "pegasu": 359, "perform": [13, 19, 34, 339, 346, 365], "persist": [33, 590], "petersen_graph": 559, "pie": [14, 16, 17, 18, 359, 370, 600], "pip": [46, 308, 432], "pipelin": 347, "planner": 334, "planted_partition_graph": 500, "platform": 357, "pod": 354, "podstatu": 100, "point": 343, "port": [128, 132], "posit": 364, "pr": 37, "pre": 37, "predefin": 589, "predic": 341, "prefix_tre": 571, "pregel": [18, 24, 370, 600], "prepar": [17, 27, 30, 41, 45, 126, 315, 437], "prerequisit": [2, 16, 27, 29, 30, 32, 33, 317, 329, 590], "preview": 32, "primit": 131, "primitivetyp": [101, 180, 271], "primitivetypeenum": [165, 180], "procedur": [216, 308, 314, 316, 319], "proceduremanagementapi": 181, "process": [330, 353, 354, 358, 364, 425, 590], "program": [6, 12, 14, 34, 314, 325, 435], "project": [334, 341, 343, 372], "project_arrow_property_graph": 400, "project_to_simpl": 401, "propag": 0, "properti": [13, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 318, 337, 339, 341, 343, 356, 588, 589, 610], "provid": 27, "pull": [37, 40], "push": 132, "put": [356, 426], "pv": 33, "pvc": 33, "pydata": 325, "pyg": [354, 355], "python": [2, 15, 18, 31, 35, 36, 46, 125, 308, 309, 314, 335, 342, 346, 366, 582, 590, 594, 602], "qp": 357, "queri": [134, 216, 308, 314, 315, 318, 319, 324, 330, 333, 336, 339, 343, 357, 358, 428, 440, 590], "queryrequest": [183, 273], "queryserviceapi": [184, 274], "question": [322, 336], "quick": [333, 358, 437], "random_degree_sequence_graph": 512, "random_geometric_graph": 525, "random_internet_as_graph": 574, "random_k_out_graph": 516, "random_partition_graph": 501, "random_tre": 572, "rang": 583, "read": 579, "real": 343, "reduc": 356, "refer": [46, 216, 309, 327, 367, 371, 373, 582, 589], "regist": [314, 435, 436], "registri": 132, "registryinstancerecord": [185, 275], "relat": [333, 343, 356, 586], "relationenum": 137, "relaxed_caveman_graph": 502, "releas": [29, 37], "remov": [20, 329], "repartit": 593, "repeat": 341, "report": [37, 326], "report_graph": 402, "repositori": [17, 328], "reproduc": 365, "request": [37, 40, 47, 67, 75, 94, 95, 106, 110, 121, 154, 173, 175, 181, 184, 191, 209, 244, 263, 265, 272, 274, 281, 299], "requir": [46, 216, 308], "resourc": 585, "resourceusag": 102, "respons": [47, 67, 75, 94, 95, 106, 110, 121, 154, 173, 175, 181, 184, 191, 209, 244, 263, 265, 272, 274, 281, 299], "rest": [47, 67, 75, 94, 95, 106, 110, 121, 127, 313, 334], "restart": 590, "restart_servic": 106, "restartservic": [191, 281], "restor": 33, "result": [310, 328, 365, 583], "retriev": [343, 589], "return": [47, 67, 75, 94, 95, 106, 110, 121, 154, 173, 175, 181, 184, 191, 209, 244, 263, 265, 272, 274, 281, 299, 319], "review": 37, "right": 37, "ring_of_cliqu": 503, "rule": 333, "run": [7, 15, 16, 17, 18, 21, 22, 23, 37, 41, 45, 315, 325, 328, 332, 334, 341, 349, 354, 432], "run_app": 403, "runningdeploymentinfo": 103, "runningdeploymentstatu": 104, "runtim": [9, 34, 435], "rust": 35, "sampl": [0, 128, 130, 341, 350, 362, 425, 429, 431, 434, 437], "save": 588, "scale": [327, 593], "scale_free_graph": 517, "schema": 590, "schemamap": [105, 186, 276], "schemamappingloadingconfig": [187, 277], "schemamappingloadingconfigdatasourc": [188, 278], "schemamappingloadingconfigformat": [189, 279], "schemamappingloadingconfigxcsrparam": [190, 280], "scheme": 436, "schemeenum": 188, "scientist": 325, "scope": 597, "script": [35, 45, 354, 597], "sdk": [2, 16, 34, 46, 125, 216, 308, 309, 314, 319, 334, 342, 370, 590], "search": 0, "secondari": 590, "sedgewick_maze_graph": 560, "select": [341, 343], "selector": 583, "self": 443, "selfloop_edg": 471, "sentenc": 336, "sequenc": 576, "server": [354, 427, 597], "servic": [126, 128, 129, 134, 216, 308, 309, 315, 317, 329, 331, 333, 334, 590], "serviceapi": 106, "servicemanagementapi": 191, "servicemetr": [192, 282], "serviceregistryrecord": [193, 283], "servicestatu": [107, 194, 284], "servicestatussdkendpoint": 108, "session": [30, 311, 352, 423, 584], "set": [336, 339, 354], "set_opt": 424, "setup": [4, 32, 333], "setuptool": [46, 308], "shard": 128, "shell": [0, 315, 335], "ship": 37, "shortest": 0, "shortest_path_among_thre": 319, "shuffl": 321, "sideeffect": 341, "signatur": 417, "simpl": 315, "simul": 24, "singl": [0, 325], "slack": [25, 37], "small": [542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 576], "snapshotstatu": [195, 285], "social": [565, 566, 567, 568, 576], "soft_random_geometric_graph": 526, "solid": 318, "solut": 325, "some": [22, 343], "sourc": [0, 17, 31, 32, 129, 130, 132, 341, 372, 426, 432, 435, 436], "spark": 23, "specifi": [27, 356], "spectral": 576, "spectral_graph_forg": 569, "speed": 19, "sql": 339, "src_field": 610, "src_label": 610, "st": 333, "stabl": 32, "stand": 427, "standalon": 329, "standard": [341, 588], "star_graph": 492, "start": [7, 46, 126, 129, 134, 216, 308, 314, 315, 323, 331, 332, 333, 334, 343, 349, 358, 437, 587], "start_servic": 106, "startservic": [191, 281], "startservicerequest": [109, 196, 286], "statist": 341, "statu": [126, 312, 315], "statusenum": 177, "step": [16, 129, 333, 334, 341, 343, 362], "stochast": [575, 576], "stochastic_block_model": 504, "stochastic_graph": 575, "stop": [327, 358], "stop_servic": 106, "stopservic": [191, 281], "stopservicerequest": [197, 287], "storag": [12, 33, 34, 327, 357, 586, 589], "store": [33, 216, 308, 314, 316, 319, 331, 590], "storedprocedureapi": 110, "storedproceduremeta": [111, 198, 288], "storetypeenum": 167, "strategi": 589, "string": 131, "stringtyp": [112, 199, 289], "stringtypestr": [113, 200, 290], "strong": 6, "structur": [13, 216, 309, 337, 372, 443], "structuredaccessfil": 436, "style": [35, 37, 578, 589], "subgraph": [20, 339, 341, 347, 350, 362, 472], "submit": [17, 22, 23, 37, 40, 216, 308, 315, 590], "submit_dataloading_job": 95, "sudoku": [570, 576], "sudoku_graph": 570, "sugar": [341, 343], "suggest": 339, "suit": 37, "sum": [341, 343], "support": [1, 11, 23, 130, 337, 341, 346], "synconoutervertex": 10, "synconoutervertexassourc": 10, "synconoutervertexastarget": 10, "syntact": [341, 343], "syntax": 343, "system": [327, 328, 364, 436, 438], "tabl": [130, 321, 327, 426], "target": [36, 41, 356], "task": 358, "techniqu": [38, 356], "templat": [16, 17], "tempor": 131, "temporaltyp": [114, 201, 291], "temporaltypetempor": [115, 202, 292], "tensorcontext": 583, "tensorflow": 432, "test": [4, 36, 37, 41, 45, 46, 134, 308, 331, 348, 354, 355, 432], "tetrahedral_graph": 561, "than": 27, "them": [31, 356], "third": 31, "thresholded_random_geometric_graph": 527, "timestamptyp": [116, 203, 293], "tinkerpop": [338, 339, 344, 361, 608], "tip": 356, "to_data_sink": 404, "to_direct": [405, 473], "to_undirect": [406, 474], "to_vineyard_datafram": 407, "to_vineyard_tensor": 408, "todo": 128, "togeth": [356, 426], "tool": [319, 328, 333], "topic": 0, "topologi": 427, "toward": 23, "trace": 590, "train": [346, 352, 353, 354, 355, 362, 425], "trait": 589, "transact": 134, "transform": [20, 580], "travers": [341, 343, 346, 350, 361, 430], "tree": [571, 572, 576], "triad": [573, 576], "triad_graph": 573, "trivial_graph": 493, "troubleshoot": [327, 590], "truncated_cube_graph": 562, "truncated_tetrahedron_graph": 563, "try": [22, 129, 437], "tune": 13, "turan_graph": 494, "tutori": [15, 16, 17, 18, 19, 20, 21, 22, 23, 333, 343, 345, 352, 353, 354, 355, 366], "tutte_graph": 564, "type": [47, 67, 75, 94, 95, 106, 110, 121, 131, 154, 173, 175, 181, 184, 191, 209, 244, 263, 265, 272, 274, 281, 299, 337, 356, 364, 370, 426, 577, 588], "typedvalu": [117, 204, 294], "typeenum": [147, 170, 198], "typic": 362, "u": 25, "unbind_edge_datasourc": 67, "unbind_vertex_datasourc": 67, "understand": [4, 45, 134], "unfold": 341, "unifi": [357, 589], "uniform_random_intersection_graph": 533, "uninstal": [2, 29, 590], "union": 341, "unload_app": 409, "unload_context": 410, "unload_graph": 411, "up": [19, 27, 30, 33], "updat": [37, 597], "update_alert_message_in_batch": 47, "update_alert_receiver_by_id": 47, "update_alert_rule_by_id": 47, "update_edg": 244, "update_stored_procedure_by_id": 110, "update_vertex": 299, "updatealertmessagestatusrequest": 118, "updateedg": 154, "updateedgetyp": 263, "updateprocedur": [181, 272], "updateprocedurerequest": [205, 295], "updatestoredprocrequest": 119, "updatevertex": 209, "updatevertextyp": 263, "upload_fil": 121, "uploadfilerespons": [120, 206, 296], "uri": 27, "us": [18, 20, 27, 32, 129, 132, 329, 336, 339, 346, 363, 432, 435, 437, 583, 586, 591], "usag": [13, 46, 308, 328, 339, 356], "user": [216, 345, 366, 426, 590, 594, 595], "util": [216, 309, 327, 597], "utilsapi": 121, "v": 341, "v6d": 359, "valid": 355, "valu": [339, 341, 343], "valuemap": [341, 343], "varchar": [122, 207, 297], "varcharvarchar": [123, 208, 298], "variant": 356, "variou": 364, "version": 32, "vertex": [1, 10, 24, 130, 343, 356, 374, 583, 589, 610], "vertexapi": [209, 299], "vertexdata": [210, 300], "vertexdatacontext": 583, "vertexedgerequest": [211, 301], "vertexmap": [124, 212, 302], "vertexpropertycontext": 583, "vertexrequest": [213, 303], "vertexstatist": [214, 304], "vertextypepairstatist": [215, 305], "vertic": [10, 343, 356, 610], "via": [45, 126, 319, 335, 342], "vid_field": 610, "view": [319, 590], "vineyard": [30, 331, 359, 591], "volum": 27, "voterank": 0, "vtabl": 321, "waxman_graph": 528, "wcc": 0, "weight": 426, "what": [7, 14, 332, 339, 349, 360, 362, 363, 597], "wheel": [31, 432, 602], "wheel_graph": 495, "when": 356, "where": [341, 343], "why": [333, 363], "windmill_graph": 505, "worker": [27, 367], "workflow": [14, 346, 586], "workload": [324, 328, 360, 361, 362, 364, 586], "writablefil": 436, "write": [18, 354, 590], "xtrapulp": 593, "yaml": [129, 314], "your": [15, 16, 17, 18, 22, 37, 132, 329, 353, 355, 356, 425, 435, 594], "\u4e00\u4e2a\u4f8b\u5b50": 608, "\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 606, "\u4e2d\u7684\u51fd\u6570": 600, "\u4e2d\u8f7d\u56fe": 610, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 604, "\u4ece": 610, "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": 610, "\u4ee3\u7801\u98ce\u683c": 602, "\u4f7f\u7528": 600, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 601, "\u4f7f\u7528java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": 600, "\u5165\u95e8\u6559\u7a0b": 611, "\u5173\u95ed\u4f1a\u8bdd": 604, "\u5185\u7f6e\u7b97\u6cd5": 600, "\u521b\u5efa\u4f1a\u8bdd": 604, "\u521d\u59cb\u5316partition": 321, "\u5229\u7528java": 608, "\u5229\u7528python": 608, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 607, "\u53c2\u8003": 606, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 608, "\u56fe\u5206\u6790": 604, "\u56fe\u5206\u6790\u5f15\u64ce": 600, "\u56fe\u5b66\u4e60\u5f15\u64ce": 609, "\u56fe\u5b66\u4e60\u6a21\u578b": 609, "\u56fe\u6570\u636e\u6a21\u578b": 608, "\u56fe\u6570\u636e\u6d41": 609, "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": 610, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 605, "\u56fe\u795e\u7ecf\u7f51\u7edc": 604, "\u5728aw": 601, "\u57fa\u4e8e": [602, 607], "\u5904\u7406edg": 321, "\u591a\u79cd\u8fb9\u5173\u7cfb": 610, "\u5b89\u88c5": 607, "\u5b8c\u6574\u7684\u793a\u4f8b": 610, "\u5ba2\u6237\u7aef": 607, "\u5bf9\u6bd4tinkerpop": 608, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 600, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 605, "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": 608, "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": 608, "\u5df2\u77e5\u9650\u5236": 608, "\u5e38\u89c1\u95ee\u9898": 603, "\u5f00\u53d1\u63a7\u5236\u53f0": 608, "\u5f00\u53d1\u8005\u6307\u5357": 602, "\u5feb\u901f\u4e0a\u624b": 604, "\u6216": 610, "\u624b\u52a8\u914d\u7f6e\u56fe": 610, "\u6295\u5f71": 605, "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": 610, "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 609, "\u652f\u6301\u7684gremlin\u64cd\u4f5c": 608, "\u6570\u636e\u6a21\u578b": 609, "\u672c\u5730\u90e8\u7f72graphscop": 601, "\u672f\u8bed": 321, "\u6784\u5efa": 602, "\u6784\u5efafragment\u51c6\u5907": 321, "\u6784\u5efavertex": 321, "\u6784\u5efa\u539f\u59cbarrow": 321, "\u67e5\u8be2\u8bed\u8a00": 608, "\u6a21\u578b": 609, "\u6ca1\u6709\u6b67\u4e49\u65f6": 610, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 605, "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 602, "\u7684\u53d8\u79cd": 610, "\u76ee\u5f55": [606, 611], "\u793a\u4f8b": 604, "\u7d22\u5f15": 606, "\u7f16\u7801\u5668": 609, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 600, "\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": 610, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 605, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 609, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 600, "\u8303\u56f4\u5916\u90e8\u70b9": 321, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 604, "\u8bbf\u95eefragment": 321, "\u8bbf\u95ee\u5165\u8fb9": 321, "\u8bbf\u95ee\u5168\u90e8\u70b9": 321, "\u8bbf\u95ee\u5185\u90e8\u70b9": 321, "\u8bbf\u95ee\u51fa\u8fb9": 321, "\u8bbf\u95ee\u8fb9": 321, "\u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": 321, "\u8bbf\u95ee\u9876\u70b9": 321, "\u8bbf\u95ee\u9876\u70b9\u6570\u636e": 321, "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 610, "\u8f7d\u56fe": [321, 610], "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 600, "\u8fd0\u884c\u793a\u4f8b\u7684java\u7b97\u6cd5": 600, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 600, "\u8fde\u63a5graphscop": 608, "\u90e8\u7f72": 601, "\u91c7\u6837": 609, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 601, "\u9ad8\u7ea7\u7528\u6cd5": 610}})