name: GraphScope CI

on:
  # Trigger the workflow on push or pull request, but only for the main branch
  push:
    branches:
      - main
    paths-ignore:
      - 'gnn_engine/**'
      - '**.md'
      - '**.rst'
      - 'docs/**'
      - 'research/**'
      - 'scripts/**'
      - 'tutorials/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'gnn_engine/**'
      - '**.md'
      - '**.rst'
      - 'docs/**'
      - 'research/**'
      - 'scripts/**'
      - 'tutorials/**'

jobs:
  build-gss:

    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: scl enable devtoolset-7 -- bash --noprofile --norc -eo pipefail {0}
    container: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-vineyard:v0.2.2
    steps:
    - name: Install Dependencies
      run: |
        yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
        yum install -y git
        wget --no-verbose https://golang.org/dl/go1.15.5.linux-amd64.tar.gz
        tar -C /usr/local -xzf go1.15.5.linux-amd64.tar.gz
        curl -sf -L https://static.rust-lang.org/rustup.sh | sh -s -- -y --profile minimal --default-toolchain 1.48.0
        echo "source ~/.cargo/env" >> ~/.bashrc

    - uses: actions/checkout@v2.3.2

    - name: Build
      run: |
        export PATH=${PATH}:/usr/local/go/bin
        export CMAKE_PREFIX_PATH=/opt/graphscope
        export LIBRARY_PATH=$LIBRARY_PATH:/opt/graphscope/lib
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/graphscope/lib:/opt/graphscope/lib64
        source ~/.bashrc

        cd interactive_engine
        mvn clean package -Pv2 -Drust.compile.mode=debug -DskipTests --quiet
        cd ${GITHUB_WORKSPACE}
        mv interactive_engine/distribution/target/maxgraph.tar.gz ./
        tar -zcf lib.tar.gz /opt/graphscope

    - uses: actions/upload-artifact@v2
      with:
        name: gss-${{ github.sha }}
        path: |
          maxgraph.tar.gz
          lib.tar.gz
        retention-days: 5

  gss-test:
    runs-on: self-hosted
    needs: [build-gss]
    steps:
    - name: Clean up
      run: |
        echo "CI is running on host $(curl -s 'https://api.ipify.org')"
        sudo docker ps --no-trunc -aqf "status=exited" | xargs sudo docker rm || true
        sudo docker images --no-trunc -aqf "dangling=true" | xargs sudo docker rmi -f || true
        sudo rm -rf ./* || true
        find ./ -name "*.egg-info" | xargs sudo rm -rf || true
        find ./ -name "*.whl" | xargs sudo rm -rf || true
        find ./ -name "*_pb2.py" | xargs sudo rm -rf || true
        find ./ -name "*_pb2_grpc.py" | xargs sudo rm -rf || true

    - uses: actions/checkout@v2.3.2

    - uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: Prepare Image
      run: |
        cp k8s/ready_probe.sh artifacts/
        cp .github/workflows/graphstore.Dockerfile artifacts/
        cd artifacts
        tar -zxf ./gss-${{ github.sha }}/lib.tar.gz
        mv ./gss-${{ github.sha }}/maxgraph.tar.gz ./
        sudo docker pull registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-runtime:latest
        sudo docker build -t registry.cn-hongkong.aliyuncs.com/graphscope/graphstore:${{ github.sha }} \
                          --network=host \
                          -f ./graphstore.Dockerfile .
        kind load docker-image registry.cn-hongkong.aliyuncs.com/graphscope/graphstore:{{ github.sha }}

    - name: Helm test
      run: |
        cd charts
        helm install graphstore --set image.tag=${{ github.sha }} \
                                      ./graphscope-store-service
        helm test graphstore --timeout 2m0s

    - name: Clean
      if: always()
      run: |
        helm uninstall graphstore
        sudo docker rmi -f registry.cn-hongkong.aliyuncs.com/graphscope/graphstore:{{ github.sha }}
        kubectl delete pvc -l app.kubernetes.io/instance=graphstore


