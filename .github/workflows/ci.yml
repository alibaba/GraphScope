name: GraphScope CI

on:
  # Trigger the workflow on push or pull request, but only for the main branch
  push:
    branches:
      - main
    paths-ignore:
      - 'gnn_engine/**'
      - '**.md'
      - '**.rst'
      - 'docs/**'
      - 'scripts/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'gnn_engine/**'
      - '**.md'
      - '**.rst'
      - 'docs/**'
      - 'scripts/**'

jobs:
  build-gae:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: scl enable devtoolset-7 -- bash --noprofile --norc -eo pipefail {0}
    container:
      image: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-vineyard:v0.1.6
      options:
        --shm-size 4096m
    strategy:
      matrix:
        experimental: [ON, OFF]

    steps:
    - name: Install Dependencies
      run: |
        yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
        yum install -y git

    - uses: actions/checkout@v2.3.2

    - name: Cpp Format And Lint Check
      run: |
        # install clang-format
        if [ ! -f /usr/bin/clang-format ]; then
            curl -L https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-22538c65/clang-format-8_linux-amd64 --output /usr/bin/clang-format
            chmod +x /usr/bin/clang-format
        fi
        # run clang-format
        cd analytical_engine/
        find ./apps ./benchmarks ./core ./frame ./misc ./test  -name "*.h" | xargs clang-format -i --style=file
        find ./apps ./benchmarks ./core ./frame ./misc ./test  -name "*.cc" | xargs clang-format -i --style=file
        # validate format
        function prepend() { while read line; do echo "${1}${line}"; done; }
        GIT_DIFF=$(git diff --ignore-submodules)
        if [[ -n $GIT_DIFF ]]; then
            echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            echo "| clang-format failures found!"
            echo "|"
            echo "$GIT_DIFF" | prepend "| "
            echo "|"
            echo "| Run: "
            echo "|"
            echo "|    make gsa_clformat"
            echo "|"
            echo "| to fix this error."
            echo "|"
            echo "| Ensure you are working with clang-format-8, which can be obtained from"
            echo "|"
            echo "|    https://github.com/muttleyxd/clang-tools-static-binaries/releases"
            echo "|"
            echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            exit -1
        fi
        python3 ./misc/cpplint.py --recursive ./apps ./benchmarks ./core ./frame ./test

    - name: Python Format and Lint Check
      run: |
        echo "Checking formatting for $GITHUB_REPOSITORY"
        pip3 install black==20.8b1 flake8==3.8.4 isort==5.5.4
        pushd python
        python3 -m isort --check --diff .
        python3 -m black --check --diff .
        python3 -m flake8 .
        popd
        pushd coordinator
        python3 -m isort --check --diff .
        python3 -m black --check --diff .
        python3 -m flake8 .

    - name: Build
      run: |
        strip /opt/graphscope/lib/* || true
        strip /opt/graphscope/lib64/* || true

        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/graphscope/lib:/opt/graphscope/lib64
        cd analytical_engine
        mkdir build
        cd build
        cmake .. -DCMAKE_PREFIX_PATH=/opt/graphscope \
                 -DCMAKE_INSTALL_PREFIX=/opt/graphscope \
                 -DEXPERIMENTAL_ON=${{ matrix.experimental }}
        make -j`nproc`
        make install
        cd ${GITHUB_WORKSPACE}
        cp k8s/kube_ssh /opt/graphscope/bin/kube_ssh
        cp k8s/pre_stop.py /opt/graphscope/bin/pre_stop.py
        tar -cf gae.tar /opt/graphscope

    - name: Run GAE Tests
      run: |
        export GS_TEST_DIR=${GITHUB_WORKSPACE}/gstest
        export PATH=${PATH}:/opt/graphscope/bin/
        git clone -b master --single-branch --depth=1 https://github.com/7br/gstest.git ${GS_TEST_DIR}

        cd analytical_engine/build
        ../test/app_tests.sh --test_dir ${GITHUB_WORKSPACE}/gstest

    - name: Upload Artifact
      if: matrix.experimental == 'ON'
      uses: actions/upload-artifact@v2
      with:
        name: gae-${{ github.sha }}
        path: gae.tar
        retention-days: 5

  build-gie:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: scl enable devtoolset-7 -- bash --noprofile --norc -eo pipefail {0}
    container: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-vineyard:v0.1.6
    steps:
    - name: Install Dependencies
      run: |
        yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
        yum install -y git

        wget --no-verbose https://golang.org/dl/go1.15.5.linux-amd64.tar.gz
        tar -C /usr/local -xzf go1.15.5.linux-amd64.tar.gz
        curl -sf -L https://static.rust-lang.org/rustup.sh | sh -s -- -y --profile minimal --default-toolchain 1.48.0
        echo "source ~/.cargo/env" >> ~/.bashrc

    - uses: actions/checkout@v2.3.2

    - name: Build
      run: |
        export PATH=${PATH}:/usr/local/go/bin
        export CMAKE_PREFIX_PATH=/opt/graphscope
        export LIBRARY_PATH=$LIBRARY_PATH:/opt/graphscope/lib
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/graphscope/lib:/opt/graphscope/lib64
        source ~/.bashrc

        cd interactive_engine/src/executor
        ./exec.sh cargo build --all --release
        cd ${GITHUB_WORKSPACE}
        tar -cf gie.tar interactive_engine/src/executor/target/release/executor \
                        interactive_engine/src/executor/store/log4rs.yml \
                        interactive_engine/deploy/docker/dockerfile

    - uses: actions/upload-artifact@v2
      with:
        name: gie-${{ github.sha }}
        path: gie.tar
        retention-days: 5

  build-gle:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: scl enable devtoolset-7 -- bash --noprofile --norc -eo pipefail {0}
    container: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-vineyard:v0.1.6
    steps:
    - name: Install Dependencies
      run: |
        yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
        yum install -y git

    - uses: actions/checkout@v2.3.2
      with:
        submodules: true
    - name: Build
      run: |
        strip /opt/graphscope/lib/* || true
        strip /opt/graphscope/lib64/* || true
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/graphscope/lib:/opt/graphscope/lib64
        export PATH=${PATH}:/opt/rh/devtoolset-7/root/usr/bin
        cd learning_engine/graph-learn
        git submodule update --init third_party/pybind11
        mkdir cmake-build
        cd cmake-build
        cmake -DCMAKE_PREFIX_PATH=/opt/graphscope \
              -DCMAKE_INSTALL_PREFIX=/opt/graphscope \
              -DWITH_VINEYARD=ON \
              -DTESTING=OFF ..
        make graphlearn_shared install -j

    - name: build wheel
      run: |
        sed -i 's/p.error/logger.warning/g' /usr/local/lib/python3.6/site-packages/auditwheel/main_repair.py

        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/graphscope/lib:/opt/graphscope/lib64
        export WITH_LEARNING_ENGINE=ON
        pushd python
        pip3 install -U setuptools
        pip3 install -r requirements.txt -r requirements-dev.txt
        python3 setup.py bdist_wheel
        pushd ./dist
        auditwheel repair --plat=manylinux2014_x86_64 ./*.whl
        cp ./wheelhouse/* /opt/graphscope/dist/
        popd
        popd
        pushd coordinator
        pip3 install -r requirements.txt -r requirements-dev.txt
        python3 setup.py bdist_wheel
        cp ./dist/* /opt/graphscope/dist/

        cd ${GITHUB_WORKSPACE}
        tar -cf gle.tar /opt/graphscope

    - uses: actions/upload-artifact@v2
      with:
        name: gle-${{ github.sha }}
        path: gle.tar
        retention-days: 5

  build-manager:
    runs-on: ubuntu-20.04
    env:
      profile: release
    defaults:
      run:
        shell: scl enable devtoolset-7 -- bash --noprofile --norc -eo pipefail {0}
    container: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-runtime:latest

    steps:
    - name: Install Dependencies
      run: |
        yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
        yum install -y git

    - uses: actions/checkout@v2.3.2

    - name: Build
      run: |
        mkdir /root/.m2
        mv interactive_engine/deploy/docker/dockerfile/maven.settings.xml /root/.m2/settings.xml
        cd interactive_engine
        mvn clean package -DskipTests -Pjava-release --quiet
        cd ${GITHUB_WORKSPACE}
        tar -cf manager.tar interactive_engine/src/assembly/target/0.0.1-SNAPSHOT.tar.gz \
                            interactive_engine/src/instance-manager/target/0.0.1-SNAPSHOT.tar.gz \
                            interactive_engine/deploy/docker/dockerfile

    - uses: actions/upload-artifact@v2
      with:
        name: manager-${{ github.sha }}
        path: manager.tar
        retention-days: 5

  python-test:
    runs-on: ubuntu-20.04
    needs: [build-gae, build-gle]
    defaults:
      run:
        shell: scl enable devtoolset-7 -- bash --noprofile --norc -eo pipefail {0}
    container:
      image: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-runtime:latest
      options:
        --shm-size 4096m
    strategy:
      matrix:
        experimental: [ON, OFF]
    steps:
    - name: Install Dependencies
      run: |
        yum install -y http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
        yum install -y git

    - uses: actions/checkout@v2.3.2

    - uses: actions/download-artifact@v2

    - name: Prepare environment for dataset
      run: |
        export GS_TEST_DIR='/root/gstest'
        git clone -b master --single-branch --depth=1 https://github.com/7br/gstest.git ${GS_TEST_DIR}

    - name: Prepare environment for deps
      run: |
        python3 -m pip install pytest-cov
        tar -xf ./gae-${{ github.sha }}/gae.tar
        tar -xf ./gle-${{ github.sha }}/gle.tar
        cp -R -n opt/graphscope/* /usr/local/
        ls -la /usr/local/bin/
        pushd /usr/local/dist/ && pip3 install ./*.whl && popd
        python3 -m pip install -r python/requirements.txt
        python3 -m pip install -r python/requirements-dev.txt
        pushd python && python3 setup.py build_proto && popd
        pushd coordinator && python3 setup.py build_builtin && popd

    - name: App Test with Expr Off
      if: matrix.experimental == 'OFF'
      run: |
        # prelaunch the etcd
        /usr/local/bin/etcd --data-dir=/dev/shm/default.etcd &

        export GS_TEST_DIR='/root/gstest'
        cd python
        python3 -m pytest --cov=graphscope --cov-config=.coveragerc --cov-report=xml \
                          --cov-report=term --exitfirst -s -v tests

        pkill -TERM etcd || true

    - name: Upload Coverage
      if: matrix.experimental == 'OFF'
      uses: codecov/codecov-action@v1
      with:
        file: ./python/coverage.xml
        fail_ci_if_error: true

    - name: App Test with Expr On
      if: matrix.experimental == 'ON'
      run: |
        # prelaunch the etcd
        /usr/local/bin/etcd --data-dir=/dev/shm/default.etcd &

        export GS_TEST_DIR='/root/gstest'
        python3 -m pytest --exitfirst -s -v python/graphscope/experimental/nx/tests/classes
        python3 -m pytest --exitfirst -s -v python/graphscope/experimental/nx/tests/test_nx.py
        python3 -m pytest --exitfirst -s -v python/graphscope/experimental/nx/tests/algorithms/builtin \
                                            python/graphscope/experimental/nx/tests/test_utils.py

        pkill -TERM etcd || true

  k8s-test:
    runs-on: self-hosted
    needs: [build-gae, build-gie, build-gle, build-manager]
    steps:
    - name: Clean up
      run: |
        echo "CI is running on host $(curl -s 'https://api.ipify.org')"
        sudo docker ps --no-trunc -aqf "status=exited" | xargs sudo docker rm || true
        sudo docker images --no-trunc -aqf "dangling=true" | xargs sudo docker rmi -f || true
        sudo rm -rf ./* || true
        find ./ -name "*.egg-info" | xargs sudo rm -rf || true
        find ./ -name "*.whl" | xargs sudo rm -rf || true
        find ./ -name "*_pb2.py" | xargs sudo rm -rf || true
        find ./ -name "*_pb2_grpc.py" | xargs sudo rm -rf || true

    - uses: actions/checkout@v2.3.2

    - uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          /root/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: Prepare Image
      run: |
        cp .github/workflows/*.Dockerfile artifacts/
        pushd artifacts
        tar -xf ./gae-${{ github.sha }}/gae.tar
        tar -xf ./gle-${{ github.sha }}/gle.tar
        tar -xf ./gie-${{ github.sha }}/gie.tar
        tar -xf ./manager-${{ github.sha }}/manager.tar
        sudo docker build -t registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
                          --network=host \
                          -f ./graphscope.Dockerfile .
        sudo docker build -t registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }} \
                          --network=host \
                          -f ./manager.Dockerfile .
        popd
        python3 -m pip install -r python/requirements.txt --user
        python3 -m pip install -r python/requirements-dev.txt --user
        python3 -m pip install pytest-cov --user
        pushd python && sudo -E python3 setup.py develop && popd

    - name: Kubernetes test
      env:
        CHANGE_MINIKUBE_NONE_USER: true
        GS_IMAGE: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }}
        GIE_MANAGER_IMAGE: registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }}
      run: |
        export GS_TEST_DIR=${GITHUB_WORKSPACE}/gstest
        git clone -b master --single-branch --depth=1 https://github.com/7br/gstest.git ${GS_TEST_DIR}
        cd python
        python3 -m pytest --cov=graphscope --cov-config=.coveragerc --cov-report=xml \
                          --cov-report=term --exitfirst -s -vvv --log-cli-level=INFO \
                          ./graphscope/deploy/tests/
    - name: Upload Coverage
      uses: codecov/codecov-action@v1
      with:
        file: ./python/coverage.xml
        fail_ci_if_error: true
    - name: Clean
      run: |
        sudo docker rmi registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
                        registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }} || true

  gie-test:
    runs-on: self-hosted
    needs: [build-gae, build-gie, build-gle, build-manager]
    steps:
    - name: Clean up
      run: |
        echo "CI is running on host $(curl -s 'https://api.ipify.org')"
        sudo docker ps --no-trunc -aqf "status=exited" | xargs sudo docker rm || true
        sudo docker images --no-trunc -aqf "dangling=true" | xargs sudo docker rmi -f || true
        sudo rm -rf ./* || true
        sudo rm -rf /tmp/graphscope/app_* || true
        find ./ -name "*.egg-info" | xargs sudo rm -rf || true
        find ./ -name "*.whl" | xargs sudo rm -rf || true
        find ./ -name "*_pb2.py" | xargs sudo rm -rf || true
        find ./ -name "*_pb2_grpc.py" | xargs sudo rm -rf || true

    - uses: actions/checkout@v2.3.2

    - uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          /root/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - uses: actions/download-artifact@v2
      with:
        path: artifacts
    - name: Prepare Image
      run: |
        cp .github/workflows/*.Dockerfile artifacts/
        pushd artifacts
        tar -xf ./gae-${{ github.sha }}/gae.tar
        tar -xf ./gle-${{ github.sha }}/gle.tar
        tar -xf ./gie-${{ github.sha }}/gie.tar
        tar -xf ./manager-${{ github.sha }}/manager.tar
        sudo docker build -t registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
                          --network=host \
                          -f ./graphscope.Dockerfile .
        sudo docker build -t registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }} \
                          --network=host \
                          -f ./manager.Dockerfile .
        popd
        python3 -m pip install -r python/requirements.txt
        python3 -m pip install -r python/requirements-dev.txt
        python3 -m pip install pytest-cov
        pushd python && sudo -E python3 setup.py develop && popd

    - name: Run function test
      run: |
        export PYTHONPATH=${GITHUB_WORKSPACE}/python
        cd interactive_engine/tests
        ./function_test.sh 8111 1 registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
                           registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }}
        ./function_test.sh 8111 2 registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
                           registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }}
    - name: Clean
      run: |
        sudo docker rmi registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
                        registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }} || true

  release-image:
    runs-on: ubuntu-20.04
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: [ gie-test, python-test, k8s-test ]
    steps:
    - uses: actions/checkout@v2.3.2

    - uses: actions/download-artifact@v2
      with:
        path: artifacts
    - name: Prepare Image
      run: |
        cp .github/workflows/*.Dockerfile artifacts/
        cd artifacts
        tar -xf ./gae-${{ github.sha }}/gae.tar
        tar -xf ./gle-${{ github.sha }}/gle.tar
        tar -xf ./gie-${{ github.sha }}/gie.tar
        tar -xf ./manager-${{ github.sha }}/manager.tar
        sudo docker build -t registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
                          --network=host \
                          -f ./graphscope.Dockerfile .
        sudo docker build -t registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }} \
                          --network=host \
                          -f ./manager.Dockerfile .

    - name: Release images
      run: |
        echo ${{ secrets.ALIYUN_TOKEN }} | sudo docker login --username=grape_dev registry.cn-hongkong.aliyuncs.com --password-stdin
        sudo docker tag registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
                        registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:latest
        sudo docker push registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }}
        sudo docker push registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:latest

        sudo docker tag registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }} \
                        registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:latest
        sudo docker push registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }}
        sudo docker push registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:latest
