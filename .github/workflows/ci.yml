name: GraphScope CI

on:
  # Trigger the workflow on push or pull request, but only for the main branch
  push:
    branches:
      - main
    paths-ignore:
      - 'gnn_engine/**'
      - '**.md'
      - '**.rst'
      - 'docs/**'
      - 'scripts/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'gnn_engine/**'
      - '**.md'
      - '**.rst'
      - 'docs/**'
      - 'scripts/**'

jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        experimental: [ON, OFF]
        ci: [true]
        profile: [release]
    steps:
    - name: Clean up
      shell: bash
      run: |
        echo "CI is running on host $(curl -s 'https://api.ipify.org')"
        sudo docker ps --no-trunc -aqf "status=exited" | xargs sudo docker rm || true
        sudo docker images --no-trunc -aqf "dangling=true" | xargs sudo docker rmi -f || true
        sudo rm -rf ./* || true
        sudo rm -rf /tmp/graphscope/app_* || true
        find ./ -name "*.egg-info" | xargs sudo rm -rf || true
        find ./ -name "*.whl" | xargs sudo rm -rf || true
        find ./ -name "*_pb2.py" | xargs sudo rm -rf || true
        find ./ -name "*_pb2_grpc.py" | xargs sudo rm -rf || true

    - name: Check out code
      uses: actions/checkout@v2.3.2
      with:
        submodules: true

    - name: Cpp Format And Lint Check
      run: |
        # install clang-format
        if [ ! -f /usr/bin/clang-format ]; then
            sudo curl -L https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-22538c65/clang-format-8_linux-amd64 --output /usr/bin/clang-format
            sudo chmod +x /usr/bin/clang-format
        fi

        # run clang-format
        cd analytical_engine/
        find ./apps ./benchmarks ./core ./frame ./misc ./test  -name "*.h" | xargs clang-format -i --style=file
        find ./apps ./benchmarks ./core ./frame ./misc ./test  -name "*.cc" | xargs clang-format -i --style=file

        # validate format
        function prepend() { while read line; do echo "${1}${line}"; done; }

        GIT_DIFF=$(git diff --ignore-submodules)
        if [[ -n $GIT_DIFF ]]; then
            echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            echo "| clang-format failures found!"
            echo "|"
            echo "$GIT_DIFF" | prepend "| "
            echo "|"
            echo "| Run: "
            echo "|"
            echo "|    make gsa_clformat"
            echo "|"
            echo "| to fix this error."
            echo "|"
            echo "| Ensure you are working with clang-format-8, which can be obtained from"
            echo "|"
            echo "|    https://github.com/muttleyxd/clang-tools-static-binaries/releases"
            echo "|"
            echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            exit -1
        fi

        # run cpplint
        python3 ./misc/cpplint.py --recursive ./apps ./benchmarks ./core ./frame ./test


    - name: Python Format and Lint Check
      run: |
        echo "Checking formatting for $GITHUB_REPOSITORY"
        pip3 install black==20.8b1 flake8==3.8.4 isort==5.5.4
        pushd python
        python3 -m isort --check --diff .
        python3 -m black --check --diff .
        python3 -m flake8 .
        popd
        pushd coordinator
        python3 -m isort --check --diff .
        python3 -m black --check --diff .
        python3 -m flake8 .

    - name: Install dependencies
      shell: bash
      run: |
        sudo pip3 install vineyard==0.1.3 -i https://pypi.org/simple

        # Install pip dependencies, build builtin gar, and generate proto stuffs.
        pushd python && sudo python3 setup.py develop && popd
        pushd coordinator && sudo python3 setup.py develop && popd

    - name: Get Test Data
      shell: bash
      run: |
        export GS_TEST_DIR=${GITHUB_WORKSPACE}/gstest
        git clone -b master --single-branch --depth=1 https://github.com/7br/gstest.git ${GS_TEST_DIR} || true
        cd ${GS_TEST_DIR}

    - name: Build image
      env:
        ALIYUN_TOKEN: ${{ secrets.ALIYUN_TOKEN }}
      shell: bash
      run: |
        echo "$ALIYUN_TOKEN" | sudo docker login --username=grape_dev registry.cn-hongkong.aliyuncs.com --password-stdin

        sudo docker pull registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-vineyard:latest

        sudo docker pull registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-runtime:latest

        sudo docker build --build-arg EXPERIMENTAL_ON=${{ matrix.experimental }} \
                          --build-arg profile=${{ matrix.profile }} \
                          -t registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }}  \
                          --network=host \
                          -f ./k8s/graphscope.Dockerfile .

        sudo docker run --rm --shm-size=4096m \
             -v ${GS_TEST_DIR}:/root/gstest \
             -v `pwd`:/root/gs \
             registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
             sh -c "echo Container id $(hostname) && \
                    set pipefail && \
                    export GS_TEST_DIR='/root/gstest' && \
                    cd /root/gs/analytical_engine && mkdir build && \
                    cd build && \
                    cmake -DEXPERIMENTAL_ON=${{ matrix.experimental }} .. && make -j`nproc` && \
                    bash /root/gs/analytical_engine/test/app_tests.sh --test_dir /root/gstest"

    - name: Push
      env:
        ALIYUN_TOKEN: ${{ secrets.ALIYUN_TOKEN }}
      if: matrix.experimental == 'ON'
      shell: bash
      run: |
        echo "$ALIYUN_TOKEN" | sudo docker login --username=grape_dev registry.cn-hongkong.aliyuncs.com --password-stdin
        sudo docker push registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }}

    - name: Clean up
      shell: bash
      run: |
        sudo docker rmi registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} || true

  build-manager:
    runs-on: self-hosted
    steps:
    - name: Clean up
      shell: bash
      run: |
        echo "CI is running on host $(curl -s 'https://api.ipify.org')"
        sudo docker ps --no-trunc -aqf "status=exited" | xargs sudo docker rm || true
        sudo docker images --no-trunc -aqf "dangling=true" | xargs sudo docker rmi -f || true
        sudo rm -rf ./* || true
        sudo rm -rf /tmp/graphscope/app_* || true
        find ./ -name "*.egg-info" | xargs sudo rm -rf || true
        find ./ -name "*.whl" | xargs sudo rm -rf || true
        find ./ -name "*_pb2.py" | xargs sudo rm -rf || true
        find ./ -name "*_pb2_grpc.py" | xargs sudo rm -rf || true

    - name: Check out code
      uses: actions/checkout@v2.3.2
      with:
        submodules: true

    - name: Build manager
      env:
        ALIYUN_TOKEN: ${{ secrets.ALIYUN_TOKEN }}
      shell: bash
      run: |
        echo "$ALIYUN_TOKEN" | sudo docker login --username=grape_dev registry.cn-hongkong.aliyuncs.com --password-stdin
        cd ./k8s && sudo make manager
        sudo docker tag registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:1.0 \
                        registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }}
        sudo docker push registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }}

    - name: Clean
      shell: bash
      run: |
        sudo docker rmi registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:1.0 \
                        registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }} \
                        || true

  gae-and-python-tests:
    runs-on: self-hosted
    needs: [build, build-manager]
    strategy:
      matrix:
        experimental: [ON, OFF]

    steps:
    - name: Clean up
      shell: bash
      run: |
        echo "CI is running on host $(curl -s 'https://api.ipify.org')"
        sudo docker ps --no-trunc -aqf "status=exited" | xargs sudo docker rm || true
        sudo docker images --no-trunc -aqf "dangling=true" | xargs sudo docker rmi -f || true
        sudo rm -rf ./* || true
        sudo rm -rf /tmp/graphscope/app_* || true
        find ./ -name "*.egg-info" | xargs sudo rm -rf || true
        find ./ -name "*.whl" | xargs sudo rm -rf || true
        find ./ -name "*_pb2.py" | xargs sudo rm -rf || true
        find ./ -name "*_pb2_grpc.py" | xargs sudo rm -rf || true

    - name: Check out code
      uses: actions/checkout@v2.3.2
      with:
        submodules: true

    - name: Get Test Data
      shell: bash
      run: |
        export GS_TEST_DIR=${GITHUB_WORKSPACE}/gstest
        git clone -b master --single-branch --depth=1 https://github.com/7br/gstest.git ${GS_TEST_DIR} || true

    - name: Prepare environment
      env:
        ALIYUN_TOKEN: ${{ secrets.ALIYUN_TOKEN }}
      shell: bash
      run: |
        echo "$ALIYUN_TOKEN" | sudo docker login --username=grape_dev registry.cn-hongkong.aliyuncs.com --password-stdin
        sudo docker pull registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }}

        # generate proto, and builtin gar
        sudo pip3 install -r python/requirements-dev.txt
        pushd python && sudo -E python3 setup.py build_proto && popd
        pushd coordinator && sudo -E python3 setup.py build_builtin && popd

    - name: App Test with Expr Off
      shell: bash
      if: matrix.experimental == 'OFF'
      run: |
        sudo docker run --rm --shm-size=4096m \
             -v ${GITHUB_WORKSPACE}/gstest:/root/gstest \
             -v `pwd`:/root/gs \
             registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
             sh -c "echo Container id $(hostname) && \
                    set pipefail && \
                    export GS_TEST_DIR='/root/gstest' && \
                    python3 -m pytest --exitfirst -s -v /root/gs/python/tests"

    - name: App Test with Expr On
      shell: bash
      if: matrix.experimental == 'ON'
      run: |
        sudo docker run --rm --shm-size=4096m \
             -v ${GITHUB_WORKSPACE}/gstest:/root/gstest \
             -v `pwd`/python:/root/python \
             registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
             sh -c "echo Container id $(hostname) && \
                    set pipefail && \
                    cd /root/python && \
                    export GS_TEST_DIR='/root/gstest' && \
                    python3 -m pytest --exitfirst -s -v ./graphscope/experimental/nx/tests/classes && \
                    python3 -m pytest --exitfirst -s -v ./graphscope/experimental/nx/tests/test_nx.py && \
                    python3 -m pytest --exitfirst -s -v ./graphscope/experimental/nx/tests/algorithms/builtin \
                                                        ./graphscope/experimental/nx/tests/test_utils.py"

    - name: NetworkX algo test
      shell: bash
      if:  matrix.experimental == 'ON'
      run: |
        info=$(git log -1 --pretty=%B)
        if echo ${info} | grep -iqFw ci-algo; then echo ''run nx-algo-ci''; else exit 0; fi
        sudo docker run --rm --shm-size=4096m \
             -v ${GITHUB_WORKSPACE}/gstest:/root/gstest \
             -v `pwd`/python:/root/python \
             registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
             sh -c "set pipefail && \
                    cd /root/python && \
                    export GS_TEST_DIR='/root/gstest' && \
                    python3 -m pytest --exitfirst -s -v graphscope/experimental/nx/tests/algorithms/forward"

    - name: Clean
      shell: bash
      run: |
        sudo docker rmi registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} || true

  k8s-test:
    runs-on: self-hosted
    strategy:
      matrix:
        ci: [true]

    needs: [build, build-manager]
    steps:
    - name: Clean up
      shell: bash
      run: |
        echo "CI is running on host $(curl -s 'https://api.ipify.org')"
        sudo docker ps --no-trunc -aqf "status=exited" | xargs sudo docker rm || true
        sudo docker images --no-trunc -aqf "dangling=true" | xargs sudo docker rmi -f || true
        sudo rm -rf ./* || true
        find ./ -name "*.egg-info" | xargs sudo rm -rf || true
        find ./ -name "*.whl" | xargs sudo rm -rf || true
        find ./ -name "*_pb2.py" | xargs sudo rm -rf || true
        find ./ -name "*_pb2_grpc.py" | xargs sudo rm -rf || true

    - name: Check out code
      uses: actions/checkout@v2.3.2
      with:
        submodules: true

    - name: Get Test Data
      shell: bash
      run: |
        export GS_TEST_DIR=${GITHUB_WORKSPACE}/gstest
        git clone -b master --single-branch --depth=1 https://github.com/7br/gstest.git ${GS_TEST_DIR} || true

    - name: Prepare environment
      env:
        ALIYUN_TOKEN: ${{ secrets.ALIYUN_TOKEN }}
      shell: bash
      run: |
        echo "$ALIYUN_TOKEN" | sudo docker login --username=grape_dev registry.cn-hongkong.aliyuncs.com --password-stdin
        sudo docker pull registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }}
        sudo docker pull registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }}
        sudo docker tag registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }} registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:1.0

        sudo pip3 install kubernetes

        sudo pip3 install vineyard==0.1.3 -i https://pypi.org/simple

        pushd python && sudo -E python3 setup.py develop && popd

    - name: Kubernetes test
      env:
        CHANGE_MINIKUBE_NONE_USER: true
        GS_IMAGE: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }}
      shell: bash
      run: |
        export GS_TEST_DIR=${GITHUB_WORKSPACE}/gstest
        export PYTHONPATH=${GITHUB_WORKSPACE}/python
        python3 -m pytest --exitfirst -s -vvv --log-cli-level=INFO \
                          ./python/graphscope/deploy/tests/

    - name: Clean
      shell: bash
      run: |
        sudo docker rmi registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
                        registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }} \
                        registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:1.0 || true

  gie-test:
    runs-on: self-hosted
    needs: [build, build-manager]
    steps:
    - name: Clean up
      shell: bash
      run: |
        echo "CI is running on host $(curl -s 'https://api.ipify.org')"
        sudo docker ps --no-trunc -aqf "status=exited" | xargs sudo docker rm || true
        sudo docker images --no-trunc -aqf "dangling=true" | xargs sudo docker rmi -f || true
        sudo rm -rf ./* || true
        sudo rm -rf /tmp/graphscope/app_* || true
        find ./ -name "*.egg-info" | xargs sudo rm -rf || true
        find ./ -name "*.whl" | xargs sudo rm -rf || true
        find ./ -name "*_pb2.py" | xargs sudo rm -rf || true
        find ./ -name "*_pb2_grpc.py" | xargs sudo rm -rf || true

    - name: Check out code
      uses: actions/checkout@v2.3.2
      with:
        submodules: true

    - name: Prepare environment
      env:
        ALIYUN_TOKEN: ${{ secrets.ALIYUN_TOKEN }}
      shell: bash
      run: |
        echo "$ALIYUN_TOKEN" | sudo docker login --username=grape_dev registry.cn-hongkong.aliyuncs.com --password-stdin
        sudo docker pull registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }}
        sudo docker pull registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }}
        sudo docker tag registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }} \
                        registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:1.0

        pushd python && sudo -E python3 setup.py develop && popd

    - name: Run function test
      shell: bash
      run: |
        export PYTHONPATH=${GITHUB_WORKSPACE}/python
        cd interactive_engine/tests
        ./function_test.sh 8111 1 registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }}
        ./function_test.sh 8111 2 registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }}

    - name: Clean
      shell: bash
      run: |
        sudo docker rmi registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
                        registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }} \
                        registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:1.0 || true

  release-image:
    runs-on: self-hosted
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: [ gie-test, gae-and-python-tests, k8s-test ]
    steps:
    - name: Release images
      env:
        ALIYUN_TOKEN: ${{ secrets.ALIYUN_TOKEN }}
      shell: bash
      run: |
        echo "$ALIYUN_TOKEN" | sudo docker login --username=grape_dev registry.cn-hongkong.aliyuncs.com --password-stdin

        sudo docker pull registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }}
        sudo docker tag registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
                        registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:latest
        sudo docker push registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:latest

        sudo docker pull registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }}
        sudo docker tag registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }} \
                        registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:1.0
        sudo docker push registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:1.0

        sudo docker rmi registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:${{ github.sha }} \
                        registry.cn-hongkong.aliyuncs.com/graphscope/graphscope:latest \
                        registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:${{ github.sha }} \
                        registry.cn-hongkong.aliyuncs.com/graphscope/maxgraph_standalone_manager:1.0 || true

