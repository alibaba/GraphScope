from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gscoordinator.flex.models.base_model import Model
from gscoordinator.flex.models.create_edge_type import CreateEdgeType
from gscoordinator.flex.models.create_vertex_type import CreateVertexType
from gscoordinator.flex import util

from gscoordinator.flex.models.create_edge_type import CreateEdgeType  # noqa: E501
from gscoordinator.flex.models.create_vertex_type import CreateVertexType  # noqa: E501

class CreateGraphSchemaRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vertex_types=None, edge_types=None):  # noqa: E501
        """CreateGraphSchemaRequest - a model defined in OpenAPI

        :param vertex_types: The vertex_types of this CreateGraphSchemaRequest.  # noqa: E501
        :type vertex_types: List[CreateVertexType]
        :param edge_types: The edge_types of this CreateGraphSchemaRequest.  # noqa: E501
        :type edge_types: List[CreateEdgeType]
        """
        self.openapi_types = {
            'vertex_types': List[CreateVertexType],
            'edge_types': List[CreateEdgeType]
        }

        self.attribute_map = {
            'vertex_types': 'vertex_types',
            'edge_types': 'edge_types'
        }

        self._vertex_types = vertex_types
        self._edge_types = edge_types

    @classmethod
    def from_dict(cls, dikt) -> 'CreateGraphSchemaRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateGraphSchemaRequest of this CreateGraphSchemaRequest.  # noqa: E501
        :rtype: CreateGraphSchemaRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vertex_types(self) -> List[CreateVertexType]:
        """Gets the vertex_types of this CreateGraphSchemaRequest.


        :return: The vertex_types of this CreateGraphSchemaRequest.
        :rtype: List[CreateVertexType]
        """
        return self._vertex_types

    @vertex_types.setter
    def vertex_types(self, vertex_types: List[CreateVertexType]):
        """Sets the vertex_types of this CreateGraphSchemaRequest.


        :param vertex_types: The vertex_types of this CreateGraphSchemaRequest.
        :type vertex_types: List[CreateVertexType]
        """
        if vertex_types is None:
            raise ValueError("Invalid value for `vertex_types`, must not be `None`")  # noqa: E501

        self._vertex_types = vertex_types

    @property
    def edge_types(self) -> List[CreateEdgeType]:
        """Gets the edge_types of this CreateGraphSchemaRequest.


        :return: The edge_types of this CreateGraphSchemaRequest.
        :rtype: List[CreateEdgeType]
        """
        return self._edge_types

    @edge_types.setter
    def edge_types(self, edge_types: List[CreateEdgeType]):
        """Sets the edge_types of this CreateGraphSchemaRequest.


        :param edge_types: The edge_types of this CreateGraphSchemaRequest.
        :type edge_types: List[CreateEdgeType]
        """
        if edge_types is None:
            raise ValueError("Invalid value for `edge_types`, must not be `None`")  # noqa: E501

        self._edge_types = edge_types
