from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gscoordinator.flex.models.base_model import Model
from gscoordinator.flex.models.running_deployment_status_nodes_inner import RunningDeploymentStatusNodesInner
from gscoordinator.flex import util

from gscoordinator.flex.models.running_deployment_status_nodes_inner import RunningDeploymentStatusNodesInner  # noqa: E501

class RunningDeploymentStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_type=None, nodes=None):  # noqa: E501
        """RunningDeploymentStatus - a model defined in OpenAPI

        :param cluster_type: The cluster_type of this RunningDeploymentStatus.  # noqa: E501
        :type cluster_type: str
        :param nodes: The nodes of this RunningDeploymentStatus.  # noqa: E501
        :type nodes: List[RunningDeploymentStatusNodesInner]
        """
        self.openapi_types = {
            'cluster_type': str,
            'nodes': List[RunningDeploymentStatusNodesInner]
        }

        self.attribute_map = {
            'cluster_type': 'cluster_type',
            'nodes': 'nodes'
        }

        self._cluster_type = cluster_type
        self._nodes = nodes

    @classmethod
    def from_dict(cls, dikt) -> 'RunningDeploymentStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunningDeploymentStatus of this RunningDeploymentStatus.  # noqa: E501
        :rtype: RunningDeploymentStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_type(self) -> str:
        """Gets the cluster_type of this RunningDeploymentStatus.


        :return: The cluster_type of this RunningDeploymentStatus.
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type: str):
        """Sets the cluster_type of this RunningDeploymentStatus.


        :param cluster_type: The cluster_type of this RunningDeploymentStatus.
        :type cluster_type: str
        """
        allowed_values = ["HOSTS", "KUBERNETES"]  # noqa: E501
        if cluster_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_type` ({0}), must be one of {1}"
                .format(cluster_type, allowed_values)
            )

        self._cluster_type = cluster_type

    @property
    def nodes(self) -> List[RunningDeploymentStatusNodesInner]:
        """Gets the nodes of this RunningDeploymentStatus.


        :return: The nodes of this RunningDeploymentStatus.
        :rtype: List[RunningDeploymentStatusNodesInner]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes: List[RunningDeploymentStatusNodesInner]):
        """Sets the nodes of this RunningDeploymentStatus.


        :param nodes: The nodes of this RunningDeploymentStatus.
        :type nodes: List[RunningDeploymentStatusNodesInner]
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes
