from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gscoordinator.flex.models.base_model import Model
from gscoordinator.flex.models.fixed_char import FixedChar
from gscoordinator.flex.models.fixed_char_char import FixedCharChar
from gscoordinator.flex.models.long_text import LongText
from gscoordinator.flex.models.var_char import VarChar
from gscoordinator.flex.models.var_char_var_char import VarCharVarChar
from gscoordinator.flex import util

from gscoordinator.flex.models.fixed_char import FixedChar  # noqa: E501
from gscoordinator.flex.models.fixed_char_char import FixedCharChar  # noqa: E501
from gscoordinator.flex.models.long_text import LongText  # noqa: E501
from gscoordinator.flex.models.var_char import VarChar  # noqa: E501
from gscoordinator.flex.models.var_char_var_char import VarCharVarChar  # noqa: E501

class StringTypeString(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, long_text=None, char=None, var_char=None):  # noqa: E501
        """StringTypeString - a model defined in OpenAPI

        :param long_text: The long_text of this StringTypeString.  # noqa: E501
        :type long_text: str
        :param char: The char of this StringTypeString.  # noqa: E501
        :type char: FixedCharChar
        :param var_char: The var_char of this StringTypeString.  # noqa: E501
        :type var_char: VarCharVarChar
        """
        self.openapi_types = {
            'long_text': str,
            'char': FixedCharChar,
            'var_char': VarCharVarChar
        }

        self.attribute_map = {
            'long_text': 'long_text',
            'char': 'char',
            'var_char': 'var_char'
        }

        self._long_text = long_text
        self._char = char
        self._var_char = var_char

    @classmethod
    def from_dict(cls, dikt) -> 'StringTypeString':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StringType_string of this StringTypeString.  # noqa: E501
        :rtype: StringTypeString
        """
        return util.deserialize_model(dikt, cls)

    @property
    def long_text(self) -> str:
        """Gets the long_text of this StringTypeString.


        :return: The long_text of this StringTypeString.
        :rtype: str
        """
        return self._long_text

    @long_text.setter
    def long_text(self, long_text: str):
        """Sets the long_text of this StringTypeString.


        :param long_text: The long_text of this StringTypeString.
        :type long_text: str
        """
        if long_text is None:
            raise ValueError("Invalid value for `long_text`, must not be `None`")  # noqa: E501

        self._long_text = long_text

    @property
    def char(self) -> FixedCharChar:
        """Gets the char of this StringTypeString.


        :return: The char of this StringTypeString.
        :rtype: FixedCharChar
        """
        return self._char

    @char.setter
    def char(self, char: FixedCharChar):
        """Sets the char of this StringTypeString.


        :param char: The char of this StringTypeString.
        :type char: FixedCharChar
        """
        if char is None:
            raise ValueError("Invalid value for `char`, must not be `None`")  # noqa: E501

        self._char = char

    @property
    def var_char(self) -> VarCharVarChar:
        """Gets the var_char of this StringTypeString.


        :return: The var_char of this StringTypeString.
        :rtype: VarCharVarChar
        """
        return self._var_char

    @var_char.setter
    def var_char(self, var_char: VarCharVarChar):
        """Sets the var_char of this StringTypeString.


        :param var_char: The var_char of this StringTypeString.
        :type var_char: VarCharVarChar
        """
        if var_char is None:
            raise ValueError("Invalid value for `var_char`, must not be `None`")  # noqa: E501

        self._var_char = var_char
