from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gscoordinator.flex.models.base_model import Model
from gscoordinator.flex.models.dataloading_job_config_edges_inner import DataloadingJobConfigEdgesInner
from gscoordinator.flex.models.dataloading_job_config_loading_config import DataloadingJobConfigLoadingConfig
from gscoordinator.flex.models.dataloading_job_config_vertices_inner import DataloadingJobConfigVerticesInner
from gscoordinator.flex import util

from gscoordinator.flex.models.dataloading_job_config_edges_inner import DataloadingJobConfigEdgesInner  # noqa: E501
from gscoordinator.flex.models.dataloading_job_config_loading_config import DataloadingJobConfigLoadingConfig  # noqa: E501
from gscoordinator.flex.models.dataloading_job_config_vertices_inner import DataloadingJobConfigVerticesInner  # noqa: E501

class DataloadingJobConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, loading_config=None, vertices=None, edges=None, schedule=None, repeat=None):  # noqa: E501
        """DataloadingJobConfig - a model defined in OpenAPI

        :param loading_config: The loading_config of this DataloadingJobConfig.  # noqa: E501
        :type loading_config: DataloadingJobConfigLoadingConfig
        :param vertices: The vertices of this DataloadingJobConfig.  # noqa: E501
        :type vertices: List[DataloadingJobConfigVerticesInner]
        :param edges: The edges of this DataloadingJobConfig.  # noqa: E501
        :type edges: List[DataloadingJobConfigEdgesInner]
        :param schedule: The schedule of this DataloadingJobConfig.  # noqa: E501
        :type schedule: str
        :param repeat: The repeat of this DataloadingJobConfig.  # noqa: E501
        :type repeat: str
        """
        self.openapi_types = {
            'loading_config': DataloadingJobConfigLoadingConfig,
            'vertices': List[DataloadingJobConfigVerticesInner],
            'edges': List[DataloadingJobConfigEdgesInner],
            'schedule': str,
            'repeat': str
        }

        self.attribute_map = {
            'loading_config': 'loading_config',
            'vertices': 'vertices',
            'edges': 'edges',
            'schedule': 'schedule',
            'repeat': 'repeat'
        }

        self._loading_config = loading_config
        self._vertices = vertices
        self._edges = edges
        self._schedule = schedule
        self._repeat = repeat

    @classmethod
    def from_dict(cls, dikt) -> 'DataloadingJobConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataloadingJobConfig of this DataloadingJobConfig.  # noqa: E501
        :rtype: DataloadingJobConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def loading_config(self) -> DataloadingJobConfigLoadingConfig:
        """Gets the loading_config of this DataloadingJobConfig.


        :return: The loading_config of this DataloadingJobConfig.
        :rtype: DataloadingJobConfigLoadingConfig
        """
        return self._loading_config

    @loading_config.setter
    def loading_config(self, loading_config: DataloadingJobConfigLoadingConfig):
        """Sets the loading_config of this DataloadingJobConfig.


        :param loading_config: The loading_config of this DataloadingJobConfig.
        :type loading_config: DataloadingJobConfigLoadingConfig
        """
        if loading_config is None:
            raise ValueError("Invalid value for `loading_config`, must not be `None`")  # noqa: E501

        self._loading_config = loading_config

    @property
    def vertices(self) -> List[DataloadingJobConfigVerticesInner]:
        """Gets the vertices of this DataloadingJobConfig.


        :return: The vertices of this DataloadingJobConfig.
        :rtype: List[DataloadingJobConfigVerticesInner]
        """
        return self._vertices

    @vertices.setter
    def vertices(self, vertices: List[DataloadingJobConfigVerticesInner]):
        """Sets the vertices of this DataloadingJobConfig.


        :param vertices: The vertices of this DataloadingJobConfig.
        :type vertices: List[DataloadingJobConfigVerticesInner]
        """
        if vertices is None:
            raise ValueError("Invalid value for `vertices`, must not be `None`")  # noqa: E501

        self._vertices = vertices

    @property
    def edges(self) -> List[DataloadingJobConfigEdgesInner]:
        """Gets the edges of this DataloadingJobConfig.


        :return: The edges of this DataloadingJobConfig.
        :rtype: List[DataloadingJobConfigEdgesInner]
        """
        return self._edges

    @edges.setter
    def edges(self, edges: List[DataloadingJobConfigEdgesInner]):
        """Sets the edges of this DataloadingJobConfig.


        :param edges: The edges of this DataloadingJobConfig.
        :type edges: List[DataloadingJobConfigEdgesInner]
        """
        if edges is None:
            raise ValueError("Invalid value for `edges`, must not be `None`")  # noqa: E501

        self._edges = edges

    @property
    def schedule(self) -> str:
        """Gets the schedule of this DataloadingJobConfig.

        format with '2023-02-21 11:56:30'  # noqa: E501

        :return: The schedule of this DataloadingJobConfig.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule: str):
        """Sets the schedule of this DataloadingJobConfig.

        format with '2023-02-21 11:56:30'  # noqa: E501

        :param schedule: The schedule of this DataloadingJobConfig.
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def repeat(self) -> str:
        """Gets the repeat of this DataloadingJobConfig.


        :return: The repeat of this DataloadingJobConfig.
        :rtype: str
        """
        return self._repeat

    @repeat.setter
    def repeat(self, repeat: str):
        """Sets the repeat of this DataloadingJobConfig.


        :param repeat: The repeat of this DataloadingJobConfig.
        :type repeat: str
        """
        allowed_values = [None,"once", "day", "week"]  # noqa: E501
        if repeat not in allowed_values:
            raise ValueError(
                "Invalid value for `repeat` ({0}), must be one of {1}"
                .format(repeat, allowed_values)
            )

        self._repeat = repeat
