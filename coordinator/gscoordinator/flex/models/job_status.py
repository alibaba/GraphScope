from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gscoordinator.flex.models.base_model import Model
from gscoordinator.flex import util


class JobStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, type=None, status=None, start_time=None, end_time=None, log=None, detail=None):  # noqa: E501
        """JobStatus - a model defined in OpenAPI

        :param id: The id of this JobStatus.  # noqa: E501
        :type id: str
        :param type: The type of this JobStatus.  # noqa: E501
        :type type: str
        :param status: The status of this JobStatus.  # noqa: E501
        :type status: str
        :param start_time: The start_time of this JobStatus.  # noqa: E501
        :type start_time: str
        :param end_time: The end_time of this JobStatus.  # noqa: E501
        :type end_time: str
        :param log: The log of this JobStatus.  # noqa: E501
        :type log: str
        :param detail: The detail of this JobStatus.  # noqa: E501
        :type detail: Dict[str, object]
        """
        self.openapi_types = {
            'id': str,
            'type': str,
            'status': str,
            'start_time': str,
            'end_time': str,
            'log': str,
            'detail': Dict[str, object]
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'status': 'status',
            'start_time': 'start_time',
            'end_time': 'end_time',
            'log': 'log',
            'detail': 'detail'
        }

        self._id = id
        self._type = type
        self._status = status
        self._start_time = start_time
        self._end_time = end_time
        self._log = log
        self._detail = detail

    @classmethod
    def from_dict(cls, dikt) -> 'JobStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobStatus of this JobStatus.  # noqa: E501
        :rtype: JobStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this JobStatus.


        :return: The id of this JobStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this JobStatus.


        :param id: The id of this JobStatus.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this JobStatus.


        :return: The type of this JobStatus.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this JobStatus.


        :param type: The type of this JobStatus.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def status(self) -> str:
        """Gets the status of this JobStatus.


        :return: The status of this JobStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this JobStatus.


        :param status: The status of this JobStatus.
        :type status: str
        """
        allowed_values = ["RUNNING", "SUCCESS", "FAILED", "CANCELLED", "WAITING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def start_time(self) -> str:
        """Gets the start_time of this JobStatus.


        :return: The start_time of this JobStatus.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this JobStatus.


        :param start_time: The start_time of this JobStatus.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def end_time(self) -> str:
        """Gets the end_time of this JobStatus.


        :return: The end_time of this JobStatus.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: str):
        """Sets the end_time of this JobStatus.


        :param end_time: The end_time of this JobStatus.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def log(self) -> str:
        """Gets the log of this JobStatus.

        logview URL or log string  # noqa: E501

        :return: The log of this JobStatus.
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log: str):
        """Sets the log of this JobStatus.

        logview URL or log string  # noqa: E501

        :param log: The log of this JobStatus.
        :type log: str
        """

        self._log = log

    @property
    def detail(self) -> Dict[str, object]:
        """Gets the detail of this JobStatus.


        :return: The detail of this JobStatus.
        :rtype: Dict[str, object]
        """
        return self._detail

    @detail.setter
    def detail(self, detail: Dict[str, object]):
        """Sets the detail of this JobStatus.


        :param detail: The detail of this JobStatus.
        :type detail: Dict[str, object]
        """

        self._detail = detail
