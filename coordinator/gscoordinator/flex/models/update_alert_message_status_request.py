from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gscoordinator.flex.models.base_model import Model
from gscoordinator.flex import util


class UpdateAlertMessageStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_ids=None, status=None):  # noqa: E501
        """UpdateAlertMessageStatusRequest - a model defined in OpenAPI

        :param message_ids: The message_ids of this UpdateAlertMessageStatusRequest.  # noqa: E501
        :type message_ids: List[str]
        :param status: The status of this UpdateAlertMessageStatusRequest.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {
            'message_ids': List[str],
            'status': str
        }

        self.attribute_map = {
            'message_ids': 'message_ids',
            'status': 'status'
        }

        self._message_ids = message_ids
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateAlertMessageStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateAlertMessageStatusRequest of this UpdateAlertMessageStatusRequest.  # noqa: E501
        :rtype: UpdateAlertMessageStatusRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_ids(self) -> List[str]:
        """Gets the message_ids of this UpdateAlertMessageStatusRequest.


        :return: The message_ids of this UpdateAlertMessageStatusRequest.
        :rtype: List[str]
        """
        return self._message_ids

    @message_ids.setter
    def message_ids(self, message_ids: List[str]):
        """Sets the message_ids of this UpdateAlertMessageStatusRequest.


        :param message_ids: The message_ids of this UpdateAlertMessageStatusRequest.
        :type message_ids: List[str]
        """
        if message_ids is None:
            raise ValueError("Invalid value for `message_ids`, must not be `None`")  # noqa: E501

        self._message_ids = message_ids

    @property
    def status(self) -> str:
        """Gets the status of this UpdateAlertMessageStatusRequest.


        :return: The status of this UpdateAlertMessageStatusRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this UpdateAlertMessageStatusRequest.


        :param status: The status of this UpdateAlertMessageStatusRequest.
        :type status: str
        """
        allowed_values = ["unsolved", "solved", "dealing"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
