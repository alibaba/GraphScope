from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gscoordinator.flex.models.base_model import Model
from gscoordinator.flex import util


class EdgeMappingTypeTriplet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, edge=None, source_vertex=None, destination_vertex=None):  # noqa: E501
        """EdgeMappingTypeTriplet - a model defined in OpenAPI

        :param edge: The edge of this EdgeMappingTypeTriplet.  # noqa: E501
        :type edge: str
        :param source_vertex: The source_vertex of this EdgeMappingTypeTriplet.  # noqa: E501
        :type source_vertex: str
        :param destination_vertex: The destination_vertex of this EdgeMappingTypeTriplet.  # noqa: E501
        :type destination_vertex: str
        """
        self.openapi_types = {
            'edge': str,
            'source_vertex': str,
            'destination_vertex': str
        }

        self.attribute_map = {
            'edge': 'edge',
            'source_vertex': 'source_vertex',
            'destination_vertex': 'destination_vertex'
        }

        self._edge = edge
        self._source_vertex = source_vertex
        self._destination_vertex = destination_vertex

    @classmethod
    def from_dict(cls, dikt) -> 'EdgeMappingTypeTriplet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EdgeMapping_type_triplet of this EdgeMappingTypeTriplet.  # noqa: E501
        :rtype: EdgeMappingTypeTriplet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edge(self) -> str:
        """Gets the edge of this EdgeMappingTypeTriplet.


        :return: The edge of this EdgeMappingTypeTriplet.
        :rtype: str
        """
        return self._edge

    @edge.setter
    def edge(self, edge: str):
        """Sets the edge of this EdgeMappingTypeTriplet.


        :param edge: The edge of this EdgeMappingTypeTriplet.
        :type edge: str
        """
        if edge is None:
            raise ValueError("Invalid value for `edge`, must not be `None`")  # noqa: E501

        self._edge = edge

    @property
    def source_vertex(self) -> str:
        """Gets the source_vertex of this EdgeMappingTypeTriplet.


        :return: The source_vertex of this EdgeMappingTypeTriplet.
        :rtype: str
        """
        return self._source_vertex

    @source_vertex.setter
    def source_vertex(self, source_vertex: str):
        """Sets the source_vertex of this EdgeMappingTypeTriplet.


        :param source_vertex: The source_vertex of this EdgeMappingTypeTriplet.
        :type source_vertex: str
        """
        if source_vertex is None:
            raise ValueError("Invalid value for `source_vertex`, must not be `None`")  # noqa: E501

        self._source_vertex = source_vertex

    @property
    def destination_vertex(self) -> str:
        """Gets the destination_vertex of this EdgeMappingTypeTriplet.


        :return: The destination_vertex of this EdgeMappingTypeTriplet.
        :rtype: str
        """
        return self._destination_vertex

    @destination_vertex.setter
    def destination_vertex(self, destination_vertex: str):
        """Sets the destination_vertex of this EdgeMappingTypeTriplet.


        :param destination_vertex: The destination_vertex of this EdgeMappingTypeTriplet.
        :type destination_vertex: str
        """
        if destination_vertex is None:
            raise ValueError("Invalid value for `destination_vertex`, must not be `None`")  # noqa: E501

        self._destination_vertex = destination_vertex
