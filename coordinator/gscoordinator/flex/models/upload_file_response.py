from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gscoordinator.flex.models.base_model import Model
from gscoordinator.flex import util


class UploadFileResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_path=None, metadata=None):  # noqa: E501
        """UploadFileResponse - a model defined in OpenAPI

        :param file_path: The file_path of this UploadFileResponse.  # noqa: E501
        :type file_path: str
        :param metadata: The metadata of this UploadFileResponse.  # noqa: E501
        :type metadata: Dict[str, object]
        """
        self.openapi_types = {
            'file_path': str,
            'metadata': Dict[str, object]
        }

        self.attribute_map = {
            'file_path': 'file_path',
            'metadata': 'metadata'
        }

        self._file_path = file_path
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'UploadFileResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UploadFileResponse of this UploadFileResponse.  # noqa: E501
        :rtype: UploadFileResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_path(self) -> str:
        """Gets the file_path of this UploadFileResponse.


        :return: The file_path of this UploadFileResponse.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path: str):
        """Sets the file_path of this UploadFileResponse.


        :param file_path: The file_path of this UploadFileResponse.
        :type file_path: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")  # noqa: E501

        self._file_path = file_path

    @property
    def metadata(self) -> Dict[str, object]:
        """Gets the metadata of this UploadFileResponse.


        :return: The metadata of this UploadFileResponse.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict[str, object]):
        """Sets the metadata of this UploadFileResponse.


        :param metadata: The metadata of this UploadFileResponse.
        :type metadata: Dict[str, object]
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata
