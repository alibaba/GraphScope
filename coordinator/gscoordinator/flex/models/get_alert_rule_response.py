from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gscoordinator.flex.models.base_model import Model
from gscoordinator.flex import util


class GetAlertRuleResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, severity=None, metric_type=None, conditions_description=None, frequency=None, enable=None, id=None):  # noqa: E501
        """GetAlertRuleResponse - a model defined in OpenAPI

        :param name: The name of this GetAlertRuleResponse.  # noqa: E501
        :type name: str
        :param severity: The severity of this GetAlertRuleResponse.  # noqa: E501
        :type severity: str
        :param metric_type: The metric_type of this GetAlertRuleResponse.  # noqa: E501
        :type metric_type: str
        :param conditions_description: The conditions_description of this GetAlertRuleResponse.  # noqa: E501
        :type conditions_description: str
        :param frequency: The frequency of this GetAlertRuleResponse.  # noqa: E501
        :type frequency: int
        :param enable: The enable of this GetAlertRuleResponse.  # noqa: E501
        :type enable: bool
        :param id: The id of this GetAlertRuleResponse.  # noqa: E501
        :type id: str
        """
        self.openapi_types = {
            'name': str,
            'severity': str,
            'metric_type': str,
            'conditions_description': str,
            'frequency': int,
            'enable': bool,
            'id': str
        }

        self.attribute_map = {
            'name': 'name',
            'severity': 'severity',
            'metric_type': 'metric_type',
            'conditions_description': 'conditions_description',
            'frequency': 'frequency',
            'enable': 'enable',
            'id': 'id'
        }

        self._name = name
        self._severity = severity
        self._metric_type = metric_type
        self._conditions_description = conditions_description
        self._frequency = frequency
        self._enable = enable
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'GetAlertRuleResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetAlertRuleResponse of this GetAlertRuleResponse.  # noqa: E501
        :rtype: GetAlertRuleResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this GetAlertRuleResponse.


        :return: The name of this GetAlertRuleResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GetAlertRuleResponse.


        :param name: The name of this GetAlertRuleResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def severity(self) -> str:
        """Gets the severity of this GetAlertRuleResponse.


        :return: The severity of this GetAlertRuleResponse.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity: str):
        """Sets the severity of this GetAlertRuleResponse.


        :param severity: The severity of this GetAlertRuleResponse.
        :type severity: str
        """
        allowed_values = ["warning", "emergency"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def metric_type(self) -> str:
        """Gets the metric_type of this GetAlertRuleResponse.


        :return: The metric_type of this GetAlertRuleResponse.
        :rtype: str
        """
        return self._metric_type

    @metric_type.setter
    def metric_type(self, metric_type: str):
        """Sets the metric_type of this GetAlertRuleResponse.


        :param metric_type: The metric_type of this GetAlertRuleResponse.
        :type metric_type: str
        """
        allowed_values = ["node", "service"]  # noqa: E501
        if metric_type not in allowed_values:
            raise ValueError(
                "Invalid value for `metric_type` ({0}), must be one of {1}"
                .format(metric_type, allowed_values)
            )

        self._metric_type = metric_type

    @property
    def conditions_description(self) -> str:
        """Gets the conditions_description of this GetAlertRuleResponse.


        :return: The conditions_description of this GetAlertRuleResponse.
        :rtype: str
        """
        return self._conditions_description

    @conditions_description.setter
    def conditions_description(self, conditions_description: str):
        """Sets the conditions_description of this GetAlertRuleResponse.


        :param conditions_description: The conditions_description of this GetAlertRuleResponse.
        :type conditions_description: str
        """
        if conditions_description is None:
            raise ValueError("Invalid value for `conditions_description`, must not be `None`")  # noqa: E501

        self._conditions_description = conditions_description

    @property
    def frequency(self) -> int:
        """Gets the frequency of this GetAlertRuleResponse.

        (mins)  # noqa: E501

        :return: The frequency of this GetAlertRuleResponse.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: int):
        """Sets the frequency of this GetAlertRuleResponse.

        (mins)  # noqa: E501

        :param frequency: The frequency of this GetAlertRuleResponse.
        :type frequency: int
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501

        self._frequency = frequency

    @property
    def enable(self) -> bool:
        """Gets the enable of this GetAlertRuleResponse.


        :return: The enable of this GetAlertRuleResponse.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable: bool):
        """Sets the enable of this GetAlertRuleResponse.


        :param enable: The enable of this GetAlertRuleResponse.
        :type enable: bool
        """
        if enable is None:
            raise ValueError("Invalid value for `enable`, must not be `None`")  # noqa: E501

        self._enable = enable

    @property
    def id(self) -> str:
        """Gets the id of this GetAlertRuleResponse.


        :return: The id of this GetAlertRuleResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this GetAlertRuleResponse.


        :param id: The id of this GetAlertRuleResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id
