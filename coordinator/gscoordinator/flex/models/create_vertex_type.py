from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gscoordinator.flex.models.base_model import Model
from gscoordinator.flex.models.base_vertex_type_x_csr_params import BaseVertexTypeXCsrParams
from gscoordinator.flex.models.create_property_meta import CreatePropertyMeta
from gscoordinator.flex import util

from gscoordinator.flex.models.base_vertex_type_x_csr_params import BaseVertexTypeXCsrParams  # noqa: E501
from gscoordinator.flex.models.create_property_meta import CreatePropertyMeta  # noqa: E501

class CreateVertexType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type_name=None, primary_keys=None, x_csr_params=None, properties=None, description=None):  # noqa: E501
        """CreateVertexType - a model defined in OpenAPI

        :param type_name: The type_name of this CreateVertexType.  # noqa: E501
        :type type_name: str
        :param primary_keys: The primary_keys of this CreateVertexType.  # noqa: E501
        :type primary_keys: List[str]
        :param x_csr_params: The x_csr_params of this CreateVertexType.  # noqa: E501
        :type x_csr_params: BaseVertexTypeXCsrParams
        :param properties: The properties of this CreateVertexType.  # noqa: E501
        :type properties: List[CreatePropertyMeta]
        :param description: The description of this CreateVertexType.  # noqa: E501
        :type description: str
        """
        self.openapi_types = {
            'type_name': str,
            'primary_keys': List[str],
            'x_csr_params': BaseVertexTypeXCsrParams,
            'properties': List[CreatePropertyMeta],
            'description': str
        }

        self.attribute_map = {
            'type_name': 'type_name',
            'primary_keys': 'primary_keys',
            'x_csr_params': 'x_csr_params',
            'properties': 'properties',
            'description': 'description'
        }

        self._type_name = type_name
        self._primary_keys = primary_keys
        self._x_csr_params = x_csr_params
        self._properties = properties
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'CreateVertexType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateVertexType of this CreateVertexType.  # noqa: E501
        :rtype: CreateVertexType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type_name(self) -> str:
        """Gets the type_name of this CreateVertexType.


        :return: The type_name of this CreateVertexType.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name: str):
        """Sets the type_name of this CreateVertexType.


        :param type_name: The type_name of this CreateVertexType.
        :type type_name: str
        """
        if type_name is None:
            raise ValueError("Invalid value for `type_name`, must not be `None`")  # noqa: E501

        self._type_name = type_name

    @property
    def primary_keys(self) -> List[str]:
        """Gets the primary_keys of this CreateVertexType.


        :return: The primary_keys of this CreateVertexType.
        :rtype: List[str]
        """
        return self._primary_keys

    @primary_keys.setter
    def primary_keys(self, primary_keys: List[str]):
        """Sets the primary_keys of this CreateVertexType.


        :param primary_keys: The primary_keys of this CreateVertexType.
        :type primary_keys: List[str]
        """
        if primary_keys is None:
            raise ValueError("Invalid value for `primary_keys`, must not be `None`")  # noqa: E501

        self._primary_keys = primary_keys

    @property
    def x_csr_params(self) -> BaseVertexTypeXCsrParams:
        """Gets the x_csr_params of this CreateVertexType.


        :return: The x_csr_params of this CreateVertexType.
        :rtype: BaseVertexTypeXCsrParams
        """
        return self._x_csr_params

    @x_csr_params.setter
    def x_csr_params(self, x_csr_params: BaseVertexTypeXCsrParams):
        """Sets the x_csr_params of this CreateVertexType.


        :param x_csr_params: The x_csr_params of this CreateVertexType.
        :type x_csr_params: BaseVertexTypeXCsrParams
        """

        self._x_csr_params = x_csr_params

    @property
    def properties(self) -> List[CreatePropertyMeta]:
        """Gets the properties of this CreateVertexType.


        :return: The properties of this CreateVertexType.
        :rtype: List[CreatePropertyMeta]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: List[CreatePropertyMeta]):
        """Sets the properties of this CreateVertexType.


        :param properties: The properties of this CreateVertexType.
        :type properties: List[CreatePropertyMeta]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def description(self) -> str:
        """Gets the description of this CreateVertexType.


        :return: The description of this CreateVertexType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CreateVertexType.


        :param description: The description of this CreateVertexType.
        :type description: str
        """

        self._description = description
