from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gscoordinator.flex.models.base_model import Model
from gscoordinator.flex.models.get_graph_schema_response import GetGraphSchemaResponse
from gscoordinator.flex.models.get_stored_proc_response import GetStoredProcResponse
from gscoordinator.flex import util

from gscoordinator.flex.models.get_graph_schema_response import GetGraphSchemaResponse  # noqa: E501
from gscoordinator.flex.models.get_stored_proc_response import GetStoredProcResponse  # noqa: E501

class GetGraphResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, store_type=None, creation_time=None, data_update_time=None, schema_update_time=None, stored_procedures=None, _schema=None):  # noqa: E501
        """GetGraphResponse - a model defined in OpenAPI

        :param id: The id of this GetGraphResponse.  # noqa: E501
        :type id: str
        :param name: The name of this GetGraphResponse.  # noqa: E501
        :type name: str
        :param description: The description of this GetGraphResponse.  # noqa: E501
        :type description: str
        :param store_type: The store_type of this GetGraphResponse.  # noqa: E501
        :type store_type: str
        :param creation_time: The creation_time of this GetGraphResponse.  # noqa: E501
        :type creation_time: str
        :param data_update_time: The data_update_time of this GetGraphResponse.  # noqa: E501
        :type data_update_time: str
        :param schema_update_time: The schema_update_time of this GetGraphResponse.  # noqa: E501
        :type schema_update_time: str
        :param stored_procedures: The stored_procedures of this GetGraphResponse.  # noqa: E501
        :type stored_procedures: List[GetStoredProcResponse]
        :param _schema: The _schema of this GetGraphResponse.  # noqa: E501
        :type _schema: GetGraphSchemaResponse
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'store_type': str,
            'creation_time': str,
            'data_update_time': str,
            'schema_update_time': str,
            'stored_procedures': List[GetStoredProcResponse],
            '_schema': GetGraphSchemaResponse
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'store_type': 'store_type',
            'creation_time': 'creation_time',
            'data_update_time': 'data_update_time',
            'schema_update_time': 'schema_update_time',
            'stored_procedures': 'stored_procedures',
            '_schema': 'schema'
        }

        self._id = id
        self._name = name
        self._description = description
        self._store_type = store_type
        self._creation_time = creation_time
        self._data_update_time = data_update_time
        self._schema_update_time = schema_update_time
        self._stored_procedures = stored_procedures
        self.__schema = _schema

    @classmethod
    def from_dict(cls, dikt) -> 'GetGraphResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetGraphResponse of this GetGraphResponse.  # noqa: E501
        :rtype: GetGraphResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this GetGraphResponse.


        :return: The id of this GetGraphResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this GetGraphResponse.


        :param id: The id of this GetGraphResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this GetGraphResponse.


        :return: The name of this GetGraphResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GetGraphResponse.


        :param name: The name of this GetGraphResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this GetGraphResponse.


        :return: The description of this GetGraphResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this GetGraphResponse.


        :param description: The description of this GetGraphResponse.
        :type description: str
        """

        self._description = description

    @property
    def store_type(self) -> str:
        """Gets the store_type of this GetGraphResponse.


        :return: The store_type of this GetGraphResponse.
        :rtype: str
        """
        return self._store_type

    @store_type.setter
    def store_type(self, store_type: str):
        """Sets the store_type of this GetGraphResponse.


        :param store_type: The store_type of this GetGraphResponse.
        :type store_type: str
        """
        allowed_values = ["mutable_csr"]  # noqa: E501
        if store_type not in allowed_values:
            raise ValueError(
                "Invalid value for `store_type` ({0}), must be one of {1}"
                .format(store_type, allowed_values)
            )

        self._store_type = store_type

    @property
    def creation_time(self) -> str:
        """Gets the creation_time of this GetGraphResponse.


        :return: The creation_time of this GetGraphResponse.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time: str):
        """Sets the creation_time of this GetGraphResponse.


        :param creation_time: The creation_time of this GetGraphResponse.
        :type creation_time: str
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def data_update_time(self) -> str:
        """Gets the data_update_time of this GetGraphResponse.


        :return: The data_update_time of this GetGraphResponse.
        :rtype: str
        """
        return self._data_update_time

    @data_update_time.setter
    def data_update_time(self, data_update_time: str):
        """Sets the data_update_time of this GetGraphResponse.


        :param data_update_time: The data_update_time of this GetGraphResponse.
        :type data_update_time: str
        """
        if data_update_time is None:
            raise ValueError("Invalid value for `data_update_time`, must not be `None`")  # noqa: E501

        self._data_update_time = data_update_time

    @property
    def schema_update_time(self) -> str:
        """Gets the schema_update_time of this GetGraphResponse.


        :return: The schema_update_time of this GetGraphResponse.
        :rtype: str
        """
        return self._schema_update_time

    @schema_update_time.setter
    def schema_update_time(self, schema_update_time: str):
        """Sets the schema_update_time of this GetGraphResponse.


        :param schema_update_time: The schema_update_time of this GetGraphResponse.
        :type schema_update_time: str
        """
        if schema_update_time is None:
            raise ValueError("Invalid value for `schema_update_time`, must not be `None`")  # noqa: E501

        self._schema_update_time = schema_update_time

    @property
    def stored_procedures(self) -> List[GetStoredProcResponse]:
        """Gets the stored_procedures of this GetGraphResponse.


        :return: The stored_procedures of this GetGraphResponse.
        :rtype: List[GetStoredProcResponse]
        """
        return self._stored_procedures

    @stored_procedures.setter
    def stored_procedures(self, stored_procedures: List[GetStoredProcResponse]):
        """Sets the stored_procedures of this GetGraphResponse.


        :param stored_procedures: The stored_procedures of this GetGraphResponse.
        :type stored_procedures: List[GetStoredProcResponse]
        """

        self._stored_procedures = stored_procedures

    @property
    def _schema(self) -> GetGraphSchemaResponse:
        """Gets the _schema of this GetGraphResponse.


        :return: The _schema of this GetGraphResponse.
        :rtype: GetGraphSchemaResponse
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema: GetGraphSchemaResponse):
        """Sets the _schema of this GetGraphResponse.


        :param _schema: The _schema of this GetGraphResponse.
        :type _schema: GetGraphSchemaResponse
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")  # noqa: E501

        self.__schema = _schema
