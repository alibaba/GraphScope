from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gscoordinator.flex.models.base_model import Model
from gscoordinator.flex import util


class PodStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, image=None, labels=None, node=None, status=None, restart_count=None, cpu_usage=None, memory_usage=None, timestamp=None, creation_time=None, component_belong_to=None):  # noqa: E501
        """PodStatus - a model defined in OpenAPI

        :param name: The name of this PodStatus.  # noqa: E501
        :type name: str
        :param image: The image of this PodStatus.  # noqa: E501
        :type image: List[str]
        :param labels: The labels of this PodStatus.  # noqa: E501
        :type labels: Dict[str, object]
        :param node: The node of this PodStatus.  # noqa: E501
        :type node: str
        :param status: The status of this PodStatus.  # noqa: E501
        :type status: str
        :param restart_count: The restart_count of this PodStatus.  # noqa: E501
        :type restart_count: int
        :param cpu_usage: The cpu_usage of this PodStatus.  # noqa: E501
        :type cpu_usage: int
        :param memory_usage: The memory_usage of this PodStatus.  # noqa: E501
        :type memory_usage: int
        :param timestamp: The timestamp of this PodStatus.  # noqa: E501
        :type timestamp: str
        :param creation_time: The creation_time of this PodStatus.  # noqa: E501
        :type creation_time: str
        :param component_belong_to: The component_belong_to of this PodStatus.  # noqa: E501
        :type component_belong_to: str
        """
        self.openapi_types = {
            'name': str,
            'image': List[str],
            'labels': Dict[str, object],
            'node': str,
            'status': str,
            'restart_count': int,
            'cpu_usage': int,
            'memory_usage': int,
            'timestamp': str,
            'creation_time': str,
            'component_belong_to': str
        }

        self.attribute_map = {
            'name': 'name',
            'image': 'image',
            'labels': 'labels',
            'node': 'node',
            'status': 'status',
            'restart_count': 'restart_count',
            'cpu_usage': 'cpu_usage',
            'memory_usage': 'memory_usage',
            'timestamp': 'timestamp',
            'creation_time': 'creation_time',
            'component_belong_to': 'component_belong_to'
        }

        self._name = name
        self._image = image
        self._labels = labels
        self._node = node
        self._status = status
        self._restart_count = restart_count
        self._cpu_usage = cpu_usage
        self._memory_usage = memory_usage
        self._timestamp = timestamp
        self._creation_time = creation_time
        self._component_belong_to = component_belong_to

    @classmethod
    def from_dict(cls, dikt) -> 'PodStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PodStatus of this PodStatus.  # noqa: E501
        :rtype: PodStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this PodStatus.


        :return: The name of this PodStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PodStatus.


        :param name: The name of this PodStatus.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def image(self) -> List[str]:
        """Gets the image of this PodStatus.


        :return: The image of this PodStatus.
        :rtype: List[str]
        """
        return self._image

    @image.setter
    def image(self, image: List[str]):
        """Sets the image of this PodStatus.


        :param image: The image of this PodStatus.
        :type image: List[str]
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def labels(self) -> Dict[str, object]:
        """Gets the labels of this PodStatus.


        :return: The labels of this PodStatus.
        :rtype: Dict[str, object]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, object]):
        """Sets the labels of this PodStatus.


        :param labels: The labels of this PodStatus.
        :type labels: Dict[str, object]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def node(self) -> str:
        """Gets the node of this PodStatus.


        :return: The node of this PodStatus.
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node: str):
        """Sets the node of this PodStatus.


        :param node: The node of this PodStatus.
        :type node: str
        """
        if node is None:
            raise ValueError("Invalid value for `node`, must not be `None`")  # noqa: E501

        self._node = node

    @property
    def status(self) -> str:
        """Gets the status of this PodStatus.


        :return: The status of this PodStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this PodStatus.


        :param status: The status of this PodStatus.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def restart_count(self) -> int:
        """Gets the restart_count of this PodStatus.


        :return: The restart_count of this PodStatus.
        :rtype: int
        """
        return self._restart_count

    @restart_count.setter
    def restart_count(self, restart_count: int):
        """Sets the restart_count of this PodStatus.


        :param restart_count: The restart_count of this PodStatus.
        :type restart_count: int
        """
        if restart_count is None:
            raise ValueError("Invalid value for `restart_count`, must not be `None`")  # noqa: E501

        self._restart_count = restart_count

    @property
    def cpu_usage(self) -> int:
        """Gets the cpu_usage of this PodStatus.


        :return: The cpu_usage of this PodStatus.
        :rtype: int
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage: int):
        """Sets the cpu_usage of this PodStatus.


        :param cpu_usage: The cpu_usage of this PodStatus.
        :type cpu_usage: int
        """
        if cpu_usage is None:
            raise ValueError("Invalid value for `cpu_usage`, must not be `None`")  # noqa: E501

        self._cpu_usage = cpu_usage

    @property
    def memory_usage(self) -> int:
        """Gets the memory_usage of this PodStatus.


        :return: The memory_usage of this PodStatus.
        :rtype: int
        """
        return self._memory_usage

    @memory_usage.setter
    def memory_usage(self, memory_usage: int):
        """Sets the memory_usage of this PodStatus.


        :param memory_usage: The memory_usage of this PodStatus.
        :type memory_usage: int
        """
        if memory_usage is None:
            raise ValueError("Invalid value for `memory_usage`, must not be `None`")  # noqa: E501

        self._memory_usage = memory_usage

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this PodStatus.


        :return: The timestamp of this PodStatus.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this PodStatus.


        :param timestamp: The timestamp of this PodStatus.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def creation_time(self) -> str:
        """Gets the creation_time of this PodStatus.


        :return: The creation_time of this PodStatus.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time: str):
        """Sets the creation_time of this PodStatus.


        :param creation_time: The creation_time of this PodStatus.
        :type creation_time: str
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def component_belong_to(self) -> str:
        """Gets the component_belong_to of this PodStatus.


        :return: The component_belong_to of this PodStatus.
        :rtype: str
        """
        return self._component_belong_to

    @component_belong_to.setter
    def component_belong_to(self, component_belong_to: str):
        """Sets the component_belong_to of this PodStatus.


        :param component_belong_to: The component_belong_to of this PodStatus.
        :type component_belong_to: str
        """

        self._component_belong_to = component_belong_to
