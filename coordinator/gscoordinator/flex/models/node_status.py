from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gscoordinator.flex.models.base_model import Model
from gscoordinator.flex import util


class NodeStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, cpu_usage=None, memory_usage=None, disk_usage=None):  # noqa: E501
        """NodeStatus - a model defined in OpenAPI

        :param name: The name of this NodeStatus.  # noqa: E501
        :type name: str
        :param cpu_usage: The cpu_usage of this NodeStatus.  # noqa: E501
        :type cpu_usage: float
        :param memory_usage: The memory_usage of this NodeStatus.  # noqa: E501
        :type memory_usage: float
        :param disk_usage: The disk_usage of this NodeStatus.  # noqa: E501
        :type disk_usage: float
        """
        self.openapi_types = {
            'name': str,
            'cpu_usage': float,
            'memory_usage': float,
            'disk_usage': float
        }

        self.attribute_map = {
            'name': 'name',
            'cpu_usage': 'cpu_usage',
            'memory_usage': 'memory_usage',
            'disk_usage': 'disk_usage'
        }

        self._name = name
        self._cpu_usage = cpu_usage
        self._memory_usage = memory_usage
        self._disk_usage = disk_usage

    @classmethod
    def from_dict(cls, dikt) -> 'NodeStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NodeStatus of this NodeStatus.  # noqa: E501
        :rtype: NodeStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this NodeStatus.


        :return: The name of this NodeStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this NodeStatus.


        :param name: The name of this NodeStatus.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cpu_usage(self) -> float:
        """Gets the cpu_usage of this NodeStatus.


        :return: The cpu_usage of this NodeStatus.
        :rtype: float
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage: float):
        """Sets the cpu_usage of this NodeStatus.


        :param cpu_usage: The cpu_usage of this NodeStatus.
        :type cpu_usage: float
        """
        if cpu_usage is None:
            raise ValueError("Invalid value for `cpu_usage`, must not be `None`")  # noqa: E501

        self._cpu_usage = cpu_usage

    @property
    def memory_usage(self) -> float:
        """Gets the memory_usage of this NodeStatus.


        :return: The memory_usage of this NodeStatus.
        :rtype: float
        """
        return self._memory_usage

    @memory_usage.setter
    def memory_usage(self, memory_usage: float):
        """Sets the memory_usage of this NodeStatus.


        :param memory_usage: The memory_usage of this NodeStatus.
        :type memory_usage: float
        """
        if memory_usage is None:
            raise ValueError("Invalid value for `memory_usage`, must not be `None`")  # noqa: E501

        self._memory_usage = memory_usage

    @property
    def disk_usage(self) -> float:
        """Gets the disk_usage of this NodeStatus.


        :return: The disk_usage of this NodeStatus.
        :rtype: float
        """
        return self._disk_usage

    @disk_usage.setter
    def disk_usage(self, disk_usage: float):
        """Sets the disk_usage of this NodeStatus.


        :param disk_usage: The disk_usage of this NodeStatus.
        :type disk_usage: float
        """
        if disk_usage is None:
            raise ValueError("Invalid value for `disk_usage`, must not be `None`")  # noqa: E501

        self._disk_usage = disk_usage
