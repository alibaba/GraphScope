###############################################################################
###########      Generated by GRAPE Python SDK         ########################
###############################################################################

project(example C CXX)
cmake_minimum_required(VERSION 3.5)

option(CYTHON_PREGEL_APP "Whether to build cython pregel app." False)
option(CYTHON_PIE_APP "Whether to build cython pie app" False)
option(PROPERTY_GRAPH_FRAME "Whether to build property graph frame" False)
option(PROJECT_FRAME "Whether to build project frame" False)

option(ENABLE_PREGEL_COMBINE "Whether enable combinator in pregel app." False)

if (EXPERIMENTAL_ON)
    add_definitions(-DEXPERIMENTAL_ON)
endif ()

if (ENABLE_PREGEL_COMBINE)
    add_definitions(-D_ENABLE_COMBINE)
endif ()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -Wall -O0 -g")
if (APPLE)
    set(CMAKE_MACOSX_RPATH ON)
else ()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp -Wl,-rpath,$ORIGIN")
endif ()

include_directories(${CMAKE_SOURCE_DIR})

# find MPI----------------------------------------------------------------------
find_package(MPI REQUIRED)
include_directories(SYSTEM ${MPI_CXX_INCLUDE_PATH})

# find Threads------------------------------------------------------------------
set(CMAKE_THREAD_PREFER_PTHREAD ON)
find_package(Threads REQUIRED)

# find vineyard-----------------------------------------------------------------
find_package(vineyard 0.1.8 REQUIRED)
include_directories(${VINEYARD_INCLUDE_DIRS})
add_compile_options(-DENABLE_SELECTOR)

# find libgrape-lite------------------------------------------------------------
find_package(libgrapelite REQUIRED)
include_directories(${LIBGRAPELITE_INCLUDE_DIRS})
include_directories("${LIBGRAPELITE_INCLUDE_DIRS}/grape/analytical_apps")

# find graphscope analytical engine---------------------------------------------
find_package(graphscope-analytical)
if(GRAPHSCOPE_ANALYTICAL_HOME)
    set(ANALYTICAL_ENGINE_HOME ${GRAPHSCOPE_ANALYTICAL_HOME})
else()
    set(ANALYTICAL_ENGINE_HOME $_analytical_engine_home)
endif()

set(FRAME_NAME $_frame_name)

# find Glog---------------------------------------------------------------------
if(GRAPHSCOPE_ANALYTICAL_HOME)
    include("${ANALYTICAL_ENGINE_HOME}/lib/cmake/FindGlog.cmake")
else()
    include("${ANALYTICAL_ENGINE_HOME}/cmake/FindGlog.cmake")
endif()
include_directories(SYSTEM ${GLOG_INCLUDE_DIRS})

# find Arrow--------------------------------------------------------------------
if(GRAPHSCOPE_ANALYTICAL_HOME)
    include("${ANALYTICAL_ENGINE_HOME}/lib/cmake/FindArrow.cmake")
else()
    include("${ANALYTICAL_ENGINE_HOME}/cmake/FindArrow.cmake")
endif()

# find Libunwind----------------------------------------------------------------
if(GRAPHSCOPE_ANALYTICAL_HOME)
    include("${ANALYTICAL_ENGINE_HOME}/lib/cmake/FindLibUnwind.cmake")
else()
    include("${ANALYTICAL_ENGINE_HOME}/cmake/FindLibUnwind.cmake")
endif()

if(LIBUNWIND_FOUND)
    add_definitions(-DWITH_LIBUNWIND)
endif()

# find Python-------------------------------------------------------------------
if (${CYTHON_PREGEL_APP} OR ${CYTHON_PIE_APP})
  find_package(PythonLibs REQUIRED)
  include_directories(SYSTEM ${PYTHON_INCLUDE_DIRS})
endif ()

# include Analytical Engine-----------------------------------------------------
if(GRAPHSCOPE_ANALYTICAL_HOME)
    include_directories("${GRAPHSCOPE_ANALYTICAL_INCLUDE_DIRS}")
    include_directories("${GRAPHSCOPE_ANALYTICAL_HOME}/include/graphscope/apps")
else()
    include_directories("${ANALYTICAL_ENGINE_HOME}")
    include_directories("${ANALYTICAL_ENGINE_HOME}/apps")
endif()

if(GRAPHSCOPE_ANALYTICAL_HOME)
    find_library(PROTO NAMES gs_proto HINTS "${GRAPHSCOPE_ANALYTICAL_HOME}/lib")
else()
    find_library(PROTO NAMES gs_proto HINTS "${ANALYTICAL_ENGINE_HOME}/build")
endif()

if(GRAPHSCOPE_ANALYTICAL_HOME)
    set(ANALYTICAL_ENGINE_FRAME_DIR "${GRAPHSCOPE_ANALYTICAL_HOME}/include/graphscope/frame")
else()
    set(ANALYTICAL_ENGINE_FRAME_DIR "${ANALYTICAL_ENGINE_HOME}/frame")
endif()

if (APPLE AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} -undefined dynamic_lookup")
endif()

if (CYTHON_PREGEL_APP)
    file(GLOB_RECURSE FILES_NEED_COMPILE "*.cc")
    add_library(${FRAME_NAME} SHARED ${FILES_NEED_COMPILE}
                                     ${ANALYTICAL_ENGINE_FRAME_DIR}/cython_app_frame.cc)
    target_compile_definitions(${FRAME_NAME} PRIVATE _VD_TYPE=$_vd_type
                                                     _MD_TYPE=$_md_type
                                                     _MODULE_NAME=$_module_name
                                                     _GRAPH_TYPE=$_graph_type
                                                     _GRAPH_HEADER=$_graph_header
                                                     _APP_HEADER=$_app_header)
    target_link_libraries(${FRAME_NAME} ${MPI_CXX_LIBRARIES}
                                        ${PYTHON_LIBRARIES}
                                        ${VINEYARD_LIBRARIES}
                                        ${LIBGRAPELITE_LIBRARIES}
                                        ${GLOG_LIBRARIES}
                                        ${ARROW_SHARED_LIB})
    set_target_properties(${FRAME_NAME} PROPERTIES COMPILE_FLAGS "-fPIC")
elseif (CYTHON_PIE_APP)
    file(GLOB_RECURSE FILES_NEED_COMPILE "*.cc")
    add_library(${FRAME_NAME} SHARED ${FILES_NEED_COMPILE}
                                     ${ANALYTICAL_ENGINE_FRAME_DIR}/cython_pie_app_frame.cc)
    target_compile_definitions(${FRAME_NAME} PRIVATE _VD_TYPE=$_vd_type
                                                     _MD_TYPE=$_md_type
                                                     _MODULE_NAME=$_module_name
                                                     _GRAPH_TYPE=$_graph_type
                                                     _GRAPH_HEADER=$_graph_header
                                                     _APP_HEADER=$_app_header)
    target_link_libraries(${FRAME_NAME} ${MPI_CXX_LIBRARIES}
                                        ${PYTHON_LIBRARIES}
                                        ${VINEYARD_LIBRARIES}
                                        ${LIBGRAPELITE_LIBRARIES}
                                        ${GLOG_LIBRARIES}
                                        ${ARROW_SHARED_LIB})
    set_target_properties(${FRAME_NAME} PROPERTIES COMPILE_FLAGS "-fPIC")
elseif (PROPERTY_GRAPH_FRAME)
    add_library(${FRAME_NAME} SHARED ${ANALYTICAL_ENGINE_FRAME_DIR}/property_graph_frame.cc)
    target_compile_definitions(${FRAME_NAME} PRIVATE _GRAPH_TYPE=$_graph_type)
    target_include_directories(${FRAME_NAME} PRIVATE utils)
    target_link_libraries(${FRAME_NAME} ${LIBGRAPELITE_LIBRARIES} ${VINEYARD_LIBRARIES} ${PROTO})
    set_target_properties(${FRAME_NAME} PROPERTIES COMPILE_FLAGS "-fPIC")
elseif (PROJECT_FRAME)
    add_library(${FRAME_NAME} SHARED ${ANALYTICAL_ENGINE_FRAME_DIR}/project_frame.cc)
    target_compile_definitions(${FRAME_NAME} PRIVATE _PROJECTED_GRAPH_TYPE=$_graph_type)
    target_include_directories(${FRAME_NAME} PRIVATE utils)
    target_link_libraries(${FRAME_NAME} ${LIBGRAPELITE_LIBRARIES} ${VINEYARD_LIBRARIES} ${PROTO})
    set_target_properties(${FRAME_NAME} PROPERTIES COMPILE_FLAGS "-fPIC")
else ()
    add_library(${FRAME_NAME} SHARED ${ANALYTICAL_ENGINE_FRAME_DIR}/app_frame.cc)
    target_compile_definitions(${FRAME_NAME} PRIVATE _GRAPH_TYPE=$_graph_type _GRAPH_HEADER=$_graph_header
                                                     _APP_TYPE=$_app_type _APP_HEADER=$_app_header)
    target_include_directories(${FRAME_NAME} PRIVATE utils apps)
    target_link_libraries(${FRAME_NAME} ${LIBGRAPELITE_LIBRARIES} ${PROTO})
    set_target_properties(${FRAME_NAME} PROPERTIES COMPILE_FLAGS "-fPIC")
endif ()
