###############################################################################
###########      Generated by GRAPE Python SDK         ########################
###############################################################################

project(example C CXX)
cmake_minimum_required(VERSION 3.5)

option(CYTHON_PREGEL_APP "Whether to build cython pregel app." False)
option(CYTHON_PIE_APP "Whether to build cython pie app" False)
option(PROPERTY_GRAPH_FRAME "Whether to build property graph frame" False)
option(PROJECT_FRAME "Whether to build project frame" False)
option(ENABLE_PREGEL_COMBINE "Whether enable combinator in pregel app." False)
option(NETWORKX "networkx on?" ON)
option(ENABLE_JAVA_SDK "Build with support for java sdk" OFF)

if (ENABLE_JAVA_SDK)
    #check whether we are using clang.
    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        message(STATUS "Using Clang compiler: ${CMAKE_CXX_COMPILER}")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flto -fforce-emit-vtables")
        message(STATUS "Try to find ld.lld under same directory..")
        get_filename_component(COMPILER_DIR ${CMAKE_CXX_COMPILER} DIRECTORY)
        message(STATUS "Obtain directory: ${COMPILER_DIR}")
        set(CMAKE_JNI_LINKER_FLAGS "-fuse-ld=${COMPILER_DIR}/ld.lld -Xlinker -mllvm=-lto-embed-bitcode")
    else()
         message(WARNING "Compiling with ENABLE_JAVA_SDK ON expects a minimum Clang-11 compiler,"
                        "your compiler is ${CMAKE_CXX_COMPILER}. Continue building,"
                        "BUT llvm4jni-based accerleration will be unavailable for generated libs.")
    endif()
endif()

set(DEFAULT_BUILD_TYPE "RelWithDebInfo")
if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message(STATUS "Setting build type to '${DEFAULT_BUILD_TYPE}' as none was specified.")
    set(CMAKE_BUILD_TYPE "${DEFAULT_BUILD_TYPE}" CACHE STRING "Choose the type of build." FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif ()

if (NETWORKX)
    add_definitions(-DNETWORKX)
    add_definitions(-DRAPIDJSON_HAS_CXX11=1)
    add_definitions(-DRAPIDJSON_HAS_STDSTRING=1)
    add_definitions(-DRAPIDJSON_HAS_CXX11_RVALUE_REFS=1)
    add_definitions(-DRAPIDJSON_HAS_CXX11_RANGE_FOR=1)
endif ()

if (ENABLE_PREGEL_COMBINE)
    add_definitions(-D_ENABLE_COMBINE)
endif ()

include(CheckCXXCompilerFlag)
include(GNUInstallDirs)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -O0 -g")
if (APPLE)
    set(CMAKE_MACOSX_RPATH ON)
else ()
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,$ORIGIN")
endif ()

check_cxx_compiler_flag(-Wno-deprecated-declarations W_NO_DEPRECATED_DECLARATIONS)
check_cxx_compiler_flag(-Wno-attributes W_NO_ATTRIBUTES)
check_cxx_compiler_flag(-Wno-sign-compare W_NO_SIGN_COMPARE)
check_cxx_compiler_flag(-Wno-class-memaccess W_NO_CLASS_MEMACCESS)
check_cxx_compiler_flag(-Wno-undef-prefix W_NO_UNDEF_PREFIX)
check_cxx_compiler_flag(-Wno-unused-result W_NO_UNUSED_RESULT)
check_cxx_compiler_flag(-Wno-unused-lambda-capture W_NO_UNUSED_LAMBDA_CAPTURE)
check_cxx_compiler_flag(-Wno-unused-but-set-variable W_NO_UNUSED_BUT_SET_VARIABLE)
check_cxx_compiler_flag(-Wno-unknown-pragmas W_NO_UNKNOWN_PRAGMAS)
check_cxx_compiler_flag(-Wno-stringop-overflow W_NO_STRINGOP_OVERFLOW)
check_cxx_compiler_flag(-Wno-unused-variable W_NO_UNUSED_VARIABLE)
check_cxx_compiler_flag(-Wno-redundant-move W_NO_REDUNDANT_MOVE)

if(W_NO_CLASS_MEMACCESS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-class-memaccess")
endif()
if (W_NO_DEPRECATED_DECLARATIONS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations")
endif()
if (W_NO_ATTRIBUTES)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-attributes")
endif()
if (W_NO_SIGN_COMPARE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-sign-compare")
endif()
if (W_NO_UNDEF_PREFIX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-undef-prefix")
endif()
if (W_NO_UNUSED_RESULT)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-result")
endif()
if (W_NO_UNUSED_LAMBDA_CAPTURE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-lambda-capture")
endif()
if (W_NO_UNUSED_BUT_SET_VARIABLE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-but-set-variable")
endif()
if (W_NO_UNKNOWN_PRAGMAS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unknown-pragmas")
endif()
if (W_NO_STRINGOP_OVERFLOW)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-stringop-overflow")
endif()
if (W_NO_UNUSED_VARIABLE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-variable")
endif()
if(W_NO_REDUNDANT_MOVE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-redundant-move")
endif()

# eliminate a lot of warnings for newer version of boost library.
add_compile_options(-DBOOST_BIND_GLOBAL_PLACEHOLDERS)

# set analytical engine home--------------------------------------------------
set(ANALYTICAL_ENGINE_HOME $_analytical_engine_home)

# force load the config make if it exists
include("${ANALYTICAL_ENGINE_HOME}/${CMAKE_INSTALL_LIBDIR}/cmake/graphscope-analytical/graphscope-analytical-config.cmake" OPTIONAL)
if("${GRAPHSCOPE_GCC_ABI_BACKWARDS_COMPATIBLE}" STREQUAL "0")
    add_definitions(-D_GLIBCXX_USE_CXX11_ABI=1)
elseif("${GRAPHSCOPE_GCC_ABI_BACKWARDS_COMPATIBLE}" STREQUAL "1")
    add_definitions(-D_GLIBCXX_USE_CXX11_ABI=0)
endif()

# try to find headers from package first----------------------------------------
include_directories(${CMAKE_SOURCE_DIR})
include_directories("${ANALYTICAL_ENGINE_HOME}/openmpi/include"
                    "${ANALYTICAL_ENGINE_HOME}/open-mpi/include"
                    "${ANALYTICAL_ENGINE_HOME}/include"
                    "${ANALYTICAL_ENGINE_HOME}/include/vineyard"
                    "${ANALYTICAL_ENGINE_HOME}/include/graphscope"
                    "${ANALYTICAL_ENGINE_HOME}/include/graphscope/apps"
                    "${ANALYTICAL_ENGINE_HOME}/include/graphscope/proto"
                    "${ANALYTICAL_ENGINE_HOME}/include/grape/analytical_apps")

# find Threads------------------------------------------------------------------
set(CMAKE_THREAD_PREFER_PTHREAD ON)
find_package(Threads REQUIRED)

# find Python-------------------------------------------------------------------
if (${CYTHON_PREGEL_APP} OR ${CYTHON_PIE_APP})
  find_package (Python COMPONENTS Interpreter Development REQUIRED)
  include_directories(SYSTEM ${Python_INCLUDE_DIRS})
endif ()

# find MPI----------------------------------------------------------------------
find_package(MPI QUIET)
if (MPI_FOUND)
  include_directories(AFTER SYSTEM ${MPI_CXX_INCLUDE_PATH})
endif()

# find libgrape-lite------------------------------------------------------------
find_package(libgrapelite QUIET)
if (libgrapelite_FOUND)
  include_directories(AFTER SYSTEM "${LIBGRAPELITE_INCLUDE_DIRS}")
  include_directories(AFTER SYSTEM "${LIBGRAPELITE_INCLUDE_DIRS}/grape/analytical_apps")
endif()

# find vineyard-----------------------------------------
find_package(vineyard 0.3.13 QUIET)
if (vineyard_FOUND)
  include_directories(AFTER SYSTEM ${VINEYARD_INCLUDE_DIRS})
endif()
add_compile_options(-DENABLE_SELECTOR)

# find Glog---------------------------------------------------------------------
include("${ANALYTICAL_ENGINE_HOME}/${CMAKE_INSTALL_LIBDIR}/cmake/graphscope-analytical/cmake/FindGlog.cmake")
if (GLOG_FOUND)
  include_directories(AFTER SYSTEM ${GLOG_INCLUDE_DIRS})
endif()

# include jni------------------------------------------------------------------
if(ENABLE_JAVA_SDK)
    find_package(JNI REQUIRED)
    include_directories(SYSTEM ${JAVA_INCLUDE_PATH})
    include_directories(SYSTEM ${JAVA_INCLUDE_PATH2})
endif()

# force load the config make if it exists
include("${ANALYTICAL_ENGINE_HOME}/${CMAKE_INSTALL_LIBDIR}/cmake/graphscope-analytical/graphscope-analytical-config.cmake" OPTIONAL)
if("${GRAPHSCOPE_GCC_ABI_BACKWARDS_COMPATIBLE}" STREQUAL "0")
    add_definitions(-D_GLIBCXX_USE_CXX11_ABI=1)
elseif("${GRAPHSCOPE_GCC_ABI_BACKWARDS_COMPATIBLE}" STREQUAL "1")
    add_definitions(-D_GLIBCXX_USE_CXX11_ABI=0)
endif()

# we still need openmp, as we use it in ParallelMessageManager from libgrape-lite. But we just need
# the preprocessor options
if (APPLE)
    if (POLICY CMP0056)
        cmake_policy(SET CMP0056 NEW)
    endif ()
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -L/usr/local/lib")
endif ()
find_package(OpenMP QUIET)

# set frame dir--------------------------------------------------------------
set(ANALYTICAL_ENGINE_FRAME_DIR "${ANALYTICAL_ENGINE_HOME}/include/graphscope/frame")
set(FRAME_NAME $_frame_name)

# find Glog---------------------------------------------------------------------
if(GRAPHSCOPE_ANALYTICAL_HOME)
    include("${ANALYTICAL_ENGINE_HOME}/${CMAKE_INSTALL_LIBDIR}/cmake/graphscope-analytical/cmake/FindGlog.cmake")
else()
    include("${ANALYTICAL_ENGINE_HOME}/cmake/FindGlog.cmake")
endif()
include_directories(SYSTEM ${GLOG_INCLUDE_DIRS})

# find Arrow--------------------------------------------------------------------
if(NOT Arrow_FOUND)
    if(GRAPHSCOPE_ANALYTICAL_HOME)
        include("${ANALYTICAL_ENGINE_HOME}/${CMAKE_INSTALL_LIBDIR}/cmake/graphscope-analytical/cmake/FindArrow.cmake")
    else()
        include("${ANALYTICAL_ENGINE_HOME}/cmake/FindArrow.cmake")
    endif()
endif()

# find Libunwind----------------------------------------------------------------
if(GRAPHSCOPE_ANALYTICAL_HOME)
    include("${ANALYTICAL_ENGINE_HOME}/${CMAKE_INSTALL_LIBDIR}/cmake/graphscope-analytical/cmake/FindLibUnwind.cmake")
else()
    include("${ANALYTICAL_ENGINE_HOME}/cmake/FindLibUnwind.cmake")
endif()

if(LIBUNWIND_FOUND)
    add_definitions(-DWITH_LIBUNWIND)
endif()

# include Analytical Engine-----------------------------------------------------
if(GRAPHSCOPE_ANALYTICAL_HOME)
    include_directories("${GRAPHSCOPE_ANALYTICAL_INCLUDE_DIRS}")
    include_directories("${GRAPHSCOPE_ANALYTICAL_HOME}/include/graphscope/apps")
    # include vineyard----------------------------------------------------------
    include_directories("${GRAPHSCOPE_ANALYTICAL_HOME}/include/vineyard")
else()
    include_directories("${ANALYTICAL_ENGINE_HOME}")
    include_directories("${ANALYTICAL_ENGINE_HOME}/apps")
endif()

# include jni------------------------------------------------------------------
if(ENABLE_JAVA_SDK)
    find_package(JNI REQUIRED)
    include_directories(SYSTEM ${JAVA_INCLUDE_PATH})
    include_directories(SYSTEM ${JAVA_INCLUDE_PATH2})
endif()

if(GRAPHSCOPE_ANALYTICAL_HOME)
    find_library(PROTO NAMES gs_proto HINTS "${GRAPHSCOPE_ANALYTICAL_HOME}/lib")
else()
    find_library(PROTO NAMES gs_proto HINTS "${ANALYTICAL_ENGINE_HOME}/build")
endif()

if(GRAPHSCOPE_ANALYTICAL_HOME)
    set(ANALYTICAL_ENGINE_FRAME_DIR "${GRAPHSCOPE_ANALYTICAL_HOME}/include/graphscope/frame")
else()
    set(ANALYTICAL_ENGINE_FRAME_DIR "${ANALYTICAL_ENGINE_HOME}/frame")
endif()

if (APPLE AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} -undefined dynamic_lookup")
endif()

if (CYTHON_PREGEL_APP)
    file(GLOB_RECURSE FILES_NEED_COMPILE "*.cc")
    add_library(${FRAME_NAME} SHARED ${FILES_NEED_COMPILE}
                                     ${ANALYTICAL_ENGINE_FRAME_DIR}/cython_app_frame.cc)
    target_compile_definitions(${FRAME_NAME} PRIVATE _OID_TYPE=$_oid_type
                                                     _VD_TYPE=$_vd_type
                                                     _MD_TYPE=$_md_type
                                                     _MODULE_NAME=$_module_name
                                                     _GRAPH_TYPE=$_graph_type
                                                     _GRAPH_HEADER=$_graph_header
                                                     _APP_HEADER=$_app_header)
    target_link_libraries(${FRAME_NAME} ${Python_LIBRARIES})
    set_target_properties(${FRAME_NAME} PROPERTIES COMPILE_FLAGS "-fPIC")
elseif (CYTHON_PIE_APP)
    file(GLOB_RECURSE FILES_NEED_COMPILE "*.cc")
    add_library(${FRAME_NAME} SHARED ${FILES_NEED_COMPILE}
                                     ${ANALYTICAL_ENGINE_FRAME_DIR}/cython_pie_app_frame.cc)
    target_compile_definitions(${FRAME_NAME} PRIVATE _OID_TYPE=$_oid_type
                                                     _VD_TYPE=$_vd_type
                                                     _MD_TYPE=$_md_type
                                                     _MODULE_NAME=$_module_name
                                                     _GRAPH_TYPE=$_graph_type
                                                     _GRAPH_HEADER=$_graph_header
                                                     _APP_HEADER=$_app_header)
    target_link_libraries(${FRAME_NAME} ${Python_LIBRARIES})
    set_target_properties(${FRAME_NAME} PROPERTIES COMPILE_FLAGS "-fPIC")
elseif (JAVA_PIE_APP)
    # 0. codegen
    execute_process(COMMAND java -cp ${PRE_CP} ${PROCESSOR_MAIN_CLASS} ${JAR_PATH} ${OUTPUT_DIR} $_graph_type
                    RESULT_VARIABLE ret)
    message(STATUS "java -cp ${PRE_CP} ${PROCESSOR_MAIN_CLASS} ${JAR_PATH} ${OUTPUT_DIR} $_graph_type")
    if (ret EQUAL "1")
        message(FATAL_ERROR "Preprocess failed")
    endif()

    # 1. cmake
    file(GLOB_RECURSE FILES_NEED_COMPILE "${OUTPUT_DIR}/SOURCE_OUTPUT/*.cc")
    add_library(${FRAME_NAME} SHARED ${FILES_NEED_COMPILE}
                                    ${ANALYTICAL_ENGINE_FRAME_DIR}/app_frame.cc)
    target_include_directories(${FRAME_NAME} PRIVATE ${OUTPUT_DIR}/SOURCE_OUTPUT/)
    target_compile_definitions(${FRAME_NAME} PRIVATE ENABLE_JAVA_SDK
                                                    _GRAPH_TYPE=$_graph_type
                                                    _GRAPH_HEADER=$_graph_header
                                                    _APP_TYPE=$_app_type
                                                    _APP_HEADER=$_app_header)
    target_link_libraries(${FRAME_NAME} ${MPI_CXX_LIBRARIES}
                    ${VINEYARD_LIBRARIES}
                    ${LIBGRAPELITE_LIBRARIES}
                    ${JAVA_JVM_LIBRARY}
                    ${JNI_LIBRARIES}
                    ${CMAKE_DL_LIBS}
                    ${CMAKE_JNI_LINKER_FLAGS})
    set_target_properties(${FRAME_NAME} PROPERTIES COMPILE_FLAGS "-fPIC")
    # 2.Post build after compilation, run run-llvm4jni.sh to generate bitcode, if clang enabled.
    if ((CMAKE_CXX_COMPILER_ID MATCHES "Clang") AND RUN_LLVM4JNI_SH)
        add_custom_command(TARGET ${FRAME_NAME}
                        POST_BUILD COMMAND bash ${RUN_LLVM4JNI_SH}
                                            "-output" ${LLVM4JNI_OUTPUT}
                                            "-cp" ${OUTPUT_DIR}/CLASS_OUTPUT
                                            "-lib" $<TARGET_FILE:${FRAME_NAME}>
                                            "-v" "WARN" "-no-verify"
                        COMMENT "Running run-llvm4jni.sh: ${RUN_LLVM4JNI_SH}
                                -output ${LLVM4JNI_OUTPUT}
                                -cp ${OUTPUT_DIR}/CLASS_OUTPUT
                                -lib ${LIB_PATH} -v WARN -no-verify")
    else()
        message(STATUS "Skip llvm4jni bitcode gen since lib is not compiled with clang or run-llvm4jni.sh not found")
    endif()
elseif (PROPERTY_GRAPH_FRAME)
    add_library(${FRAME_NAME} SHARED ${ANALYTICAL_ENGINE_FRAME_DIR}/property_graph_frame.cc)
    target_compile_definitions(${FRAME_NAME} PRIVATE _GRAPH_TYPE=$_graph_type)
    target_include_directories(${FRAME_NAME} PRIVATE utils)
    set_target_properties(${FRAME_NAME} PROPERTIES COMPILE_FLAGS "-fPIC")
elseif (PROJECT_FRAME)
    add_library(${FRAME_NAME} SHARED ${ANALYTICAL_ENGINE_FRAME_DIR}/project_frame.cc)
    target_compile_definitions(${FRAME_NAME} PRIVATE _PROJECTED_GRAPH_TYPE=$_graph_type)
    target_include_directories(${FRAME_NAME} PRIVATE utils)
    set_target_properties(${FRAME_NAME} PROPERTIES COMPILE_FLAGS "-fPIC")
else ()
    add_library(${FRAME_NAME} SHARED ${ANALYTICAL_ENGINE_FRAME_DIR}/app_frame.cc)
    target_compile_definitions(${FRAME_NAME} PRIVATE _GRAPH_TYPE=$_graph_type _GRAPH_HEADER=$_graph_header
                                                     _APP_TYPE=$_app_type _APP_HEADER=$_app_header)
    target_include_directories(${FRAME_NAME} PRIVATE utils apps)
    set_target_properties(${FRAME_NAME} PROPERTIES COMPILE_FLAGS "-fPIC")
endif ()

if (OpenMP_FOUND)
    target_link_libraries(${FRAME_NAME} OpenMP::OpenMP_CXX)
endif ()

