// Copyright 2020 Alibaba Group Holding Limited. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package gs.rpc;

import "proto/error_codes.proto";
import "proto/op_def.proto";
import "proto/types.proto";

message ResponseStatus {
  enum NullDetail { NULL_DETAIL = 0; }

  Code code = 1;
  string error_msg = 2;
  oneof detail {
    NullDetail null = 3;
    OpDef op = 4;
    // pickle coordinator python exception
    bytes full_exception = 5;
  }
}

////////////////////////////////////////////////////////////////////////////////
//
// ConnectSession method request/response protos.
//
////////////////////////////////////////////////////////////////////////////////

message ConnectSessionRequest {
  bool cleanup_instance = 1;
  int32 dangling_timeout_seconds = 2;
  // check version compatibility
  string version = 3;
}

message ConnectSessionResponse {
  ResponseStatus status = 1;

  // The session handle to be used in subsequent calls for the created session.
  //
  // The client must arrange to call CloseSession with this returned
  // session handle to close the session.
  string session_id = 2;
  ClusterType cluster_type = 3;
  string engine_config = 4;
  repeated string pod_name_list = 5;
  int32 num_workers = 6;
  string namespace = 7;
}

////////////////////////////////////////////////////////////////////////////////
//
// HeartBeat method request/response protos.
//
////////////////////////////////////////////////////////////////////////////////

message HeartBeatRequest {
}

message HeartBeatResponse {
  ResponseStatus status = 1;
}

////////////////////////////////////////////////////////////////////////////////
//
// RunStep method request/response protos.
//
// The caller should provide the feeds needed by the graph and specify
// what nodes should be fetched.
//
////////////////////////////////////////////////////////////////////////////////

message RunStepRequest {
  // REQUIRED: session_id must be returned by a CreateSession call
  // to the same master service.
  string session_id = 1;

  // REQUIRED: A Dag with op that will be evaluated.
  // A DagDef will contain only 1 op(ideally).
  DagDef dag_def = 2;
}

message RunStepResponse {
  ResponseStatus status = 1;

  // list of result of ops in dag
  repeated OpResult results = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
// FetchLogs method request/response protos.
//
////////////////////////////////////////////////////////////////////////////////

message FetchLogsRequest {
  string session_id = 1;
}

message FetchLogsResponse {
  ResponseStatus status = 1;

  // log info.
  string message = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
// CloseSession method request/response protos.
//
////////////////////////////////////////////////////////////////////////////////

message CloseSessionRequest {
  // REQUIRED: session_id must be returned by a CreateSession call
  // to the same master service.
  string session_id = 1;
}

message CloseSessionResponse {
  ResponseStatus status = 1;
}
