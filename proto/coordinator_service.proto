// Copyright 2020 Alibaba Group Holding Limited. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";
package gs.rpc;

import "flex.proto";
import "message.proto";

service CoordinatorService {
  // Connect a session.
  rpc ConnectSession(ConnectSessionRequest) returns (ConnectSessionResponse);

  // Heart Beat between client and coordinator
  rpc HeartBeat(HeartBeatRequest) returns (HeartBeatResponse);

  // Drives the graph computation.
  rpc RunStep(stream RunStepRequest) returns (stream RunStepResponse);

  // Fetch analytical engine logs.
  rpc FetchLogs(FetchLogsRequest) returns (stream FetchLogsResponse);

  // Closes a session.
  rpc CloseSession(CloseSessionRequest) returns (CloseSessionResponse);

  // Distribute the specified libary to servers
  rpc AddLib(AddLibRequest) returns (AddLibResponse);

  rpc CreateAnalyticalInstance (CreateAnalyticalInstanceRequest) returns (CreateAnalyticalInstanceResponse);

  rpc CreateInteractiveInstance (CreateInteractiveInstanceRequest) returns (CreateInteractiveInstanceResponse);

  rpc CreateLearningInstance (CreateLearningInstanceRequest) returns (CreateLearningInstanceResponse);

  rpc CloseAnalyticalInstance (CloseAnalyticalInstanceRequest) returns (CloseAnalyticalInstanceResponse);

  rpc CloseInteractiveInstance (CloseInteractiveInstanceRequest) returns (CloseInteractiveInstanceResponse);

  rpc CloseLearningInstance (CloseLearningInstanceRequest) returns (CloseLearningInstanceResponse);

  // service functions under FLEX architecture
  rpc Connect(ConnectRequest) returns (ConnectResponse);

  rpc ListGraph(ListGraphRequest) returns (ListGraphResponse);

  // end

  rpc CreateInteractiveGraph(CreateInteractiveGraphRequest) returns (ApiResponse);

  rpc RemoveInteractiveGraph(RemoveInteractiveGraphRequest) returns (ApiResponse);

  rpc ImportInteractiveGraph(ImportInteractiveGraphRequest) returns (ApiResponse);

  rpc ListInteractiveJob(ListInteractiveJobRequest) returns (ListInteractiveJobResponse);

  rpc CreateInteractiveProcedure(CreateInteractiveProcedureRequest) returns (ApiResponse);

  rpc ListInteractiveProcedure(ListInteractiveProcedureRequest) returns (ListInteractiveProcedureResponse);

  rpc UpdateInteractiveProcedure(UpdateInteractiveProcedureRequest) returns (ApiResponse);

  rpc RemoveInteractiveProcedure(RemoveInteractiveProcedureRequest) returns (ApiResponse);

  rpc GetInteractiveServiceStatus(GetInteractiveServiceStatusRequest) returns (GetInteractiveServiceStatusResponse);

  rpc StartInteractiveService(StartInteractiveServiceRequest) returns (ApiResponse);

  rpc StopInteractiveService(StopInteractiveServiceRequest) returns (ApiResponse);

  rpc RestartInteractiveService(RestartInteractiveServiceRequest) returns (ApiResponse);

  rpc GetNodeStatus(GetNodeStatusRequest) returns (GetNodeStatusResponse);
}
