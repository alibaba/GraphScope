/**
 * Copyright 2020 Alibaba Group Holding Limited.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
package gs.rpc.groot;

import "groot/sdk/model.proto";

option java_package = "com.alibaba.graphscope.proto.groot";
option java_multiple_files = true;

service Client {
  rpc getSchema(GetSchemaRequest) returns (GetSchemaResponse);
  rpc ingestData(IngestDataRequest) returns (IngestDataResponse);
  rpc getMetrics(GetMetricsRequest) returns (GetMetricsResponse);
  rpc loadSchema(LoadSchemaRequest) returns (LoadSchemaResponse);
  rpc dropSchema(DropSchemaRequest) returns (DropSchemaResponse);
  rpc prepareDataLoad(PrepareDataLoadRequest) returns (PrepareDataLoadResponse);
  rpc commitDataLoad(CommitDataLoadRequest) returns (CommitDataLoadResponse);
  rpc getPartitionNum(GetPartitionNumRequest) returns (GetPartitionNumResponse);
  rpc getLoggerInfo(GetLoggerInfoRequest) returns (GetLoggerInfoResponse);
  rpc clearIngest(ClearIngestRequest) returns (ClearIngestResponse);
  rpc getStoreState(GetStoreStateRequest) returns (GetStoreStateResponse);
  rpc compactDB(CompactDBRequest) returns (CompactDBResponse);
  rpc reopenSecondary(ReopenSecondaryRequest) returns (ReopenSecondaryResponse);
  rpc replayRecordsV2(ReplayRecordsRequestV2) returns(ReplayRecordsResponseV2);
}

message GetSchemaRequest {

}

message GetSchemaResponse {
  GraphDefPb graphDef = 1;
}

message GetMetricsRequest {
  string roleNames = 1;
}

message GetMetricsResponse {
  string metricsJson = 1;
}

message LoadSchemaRequest {
  string schemaStr = 1;
  // 0 for json, 1 for unified yaml
  int32 schemaType = 2;
}

message LoadSchemaResponse {
  GraphDefPb graphDef = 1;
}

message DropSchemaRequest {

}

message DropSchemaResponse {
  GraphDefPb graphDef = 1;
}

message PrepareDataLoadRequest {
  repeated DataLoadTargetPb dataLoadTargets = 1;
}

message PrepareDataLoadResponse {
  GraphDefPb graphDef = 1;
}

message CommitDataLoadRequest {
  map<int64, DataLoadTargetPb> tableToTarget = 1;
  string path = 2;
}

message CommitDataLoadResponse {

}

message GetPartitionNumRequest {

}

message GetPartitionNumResponse {
  int32 partitionNum = 1;
}

message GetLoggerInfoRequest {

}

message GetLoggerInfoResponse {
  string loggerServers = 1;
  string loggerTopic = 2;
  int32 loggerQueueCount = 3;
}
