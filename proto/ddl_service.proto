// Copyright 2020 Alibaba Group Holding Limited. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
syntax = "proto3";
package gs.rpc.groot;

import "graph_def.proto";
import "schema_common.proto";

option java_package = "com.alibaba.graphscope.proto.groot";
option java_multiple_files = true;

service GrootDdlService {
  rpc batchSubmit(BatchSubmitRequest) returns(BatchSubmitResponse);
  rpc getGraphDef(GetGraphDefRequest) returns(GetGraphDefResponse);
}

message BatchSubmitRequest {
  int32 format_version = 1;
  bool simple_response = 2;
  message DDLRequest {
    oneof value {
      CreateVertexTypeRequest create_vertex_type_request = 1;
      CreateEdgeTypeRequest create_edge_type_request = 2;
      AddEdgeKindRequest add_edge_kind_request = 3;
      RemoveEdgeKindRequest remove_edge_kind_request = 4;
      DropVertexTypeRequest drop_vertex_type_request = 5;
      DropEdgeTypeRequest drop_edge_type_request = 6;
      AddVertexTypePropertiesRequest add_vertex_type_properties_request = 7;
      AddEdgeTypePropertiesRequest add_edge_type_properties_request = 8;
    }
  }
  repeated DDLRequest value = 3;
}

message BatchSubmitResponse {
  int32 format_version = 1;
  // If `simple_response` of BatchSubmitRequest is set to True, 
  // only `version` and `key` fields will be filled
  gs.rpc.graph.GraphDefPb graph_def = 2;
}

message CreateVertexTypeRequest {
    gs.rpc.graph.TypeDefPb type_def = 1;
}

message AddVertexTypePropertiesRequest {
    gs.rpc.graph.TypeDefPb type_def = 1;
}

message CreateEdgeTypeRequest {
    gs.rpc.graph.TypeDefPb type_def = 1;
}

message AddEdgeTypePropertiesRequest {
    gs.rpc.graph.TypeDefPb type_def = 1;
}

message AddEdgeKindRequest {
    string edge_label = 1;
    string src_vertex_label = 2;
    string dst_vertex_label = 3;
}

message RemoveEdgeKindRequest {
    string edge_label = 1;
    string src_vertex_label = 2;
    string dst_vertex_label = 3;
}

message DropVertexTypeRequest {
    string label = 1;
}

message DropEdgeTypeRequest {
    string label = 1;
}

message GetGraphDefRequest {
    string key = 1;
}

message GetGraphDefResponse {
    gs.rpc.graph.GraphDefPb graph_def = 1;
}

