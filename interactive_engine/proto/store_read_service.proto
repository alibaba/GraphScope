/**
 * Copyright 2020 Alibaba Group Holding Limited.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

import "sdk/common.proto";
import "model.proto";

option java_package = "com.alibaba.maxgraph.proto.groot";
option java_multiple_files = true;

service StoreRead {
  rpc scanVertices(ScanStoreRequest) returns(StoreVerticesResponse);
  rpc scanEdges(ScanStoreRequest) returns(StoreEdgesResponse);
  rpc getOutVertices(VertexLabelIdsRequest) returns(StoreVertexIdsResponse);
  rpc getInVertices(VertexLabelIdsRequest) returns(StoreVertexIdsResponse);
  rpc getOutEdges(VertexLabelIdsRequest) returns(StoreTargetEdgesResponse);
  rpc getInEdges(VertexLabelIdsRequest) returns(StoreTargetEdgesResponse);
  rpc queryVertices(VertexLabelIdsRequest) returns(StoreVerticesResponse);
  rpc queryEdges(EdgeIdsRequest) returns(StoreEdgesResponse);
}

message ScanStoreRequest {
  int64 requestId = 1;
  int64 snapshotId = 2;
  repeated int32 labelId = 3;
}

message LabelVertexEdgeId {
  int32 labelId = 1;
  int64 id = 2;
}
message CompositeEdgeId {
  LabelVertexEdgeId srcId = 1;
  LabelVertexEdgeId dstId = 2;
  LabelVertexEdgeId edgeId = 3;
}

message StoreVertexResult {
  LabelVertexEdgeId vertexId = 1;
  bytes properties = 2;
}

message StoreVerticesResponse {
  int32 errorCode = 1;
  string errorMessage = 2;
  repeated StoreVertexResult results = 3;
}

message StoreEdgeResult {
  CompositeEdgeId edgeId = 1;
  bytes properties = 2;
}

message StoreEdgesResponse {
  int32 errorCode = 1;
  string errorMessage = 2;
  repeated StoreEdgeResult results = 3;
}

message VertexIdsRequest {
  int64 requestId = 1;
  int64 snapshotId = 2;
  repeated LabelVertexEdgeId vertexId = 3;
}

message VertexLabelIdsRequest {
  int64 requestId = 1;
  int64 snapshotId = 2;
  repeated LabelVertexEdgeId vertexId = 3;
  repeated int32 edgeLabels = 4;
}

message StoreVertexIdsResult {
  LabelVertexEdgeId vertexId = 1;
  repeated LabelVertexEdgeId targetVertexIds = 2;
}

message StoreVertexIdsResponse {
  int32 errorCode = 1;
  string errorMessage = 2;
  repeated StoreVertexIdsResult results = 3;
}

message StoreTargetEdgeResult {
  LabelVertexEdgeId targetId = 1;
  LabelVertexEdgeId edgeId = 2;
  bytes properties = 3;
}

message StoreTargetEdgesResult {
  LabelVertexEdgeId vertexId = 1;
  repeated StoreTargetEdgeResult targetEdges = 2;
}

message StoreTargetEdgesResponse {
  int32 errorCode = 1;
  string errorMessage = 2;
  repeated StoreTargetEdgesResult results = 3;
}

message EdgeIdsRequest {
  int64 requestId = 1;
  int64 snapshotId = 2;
  repeated CompositeEdgeId edgeIds = 3;
}

