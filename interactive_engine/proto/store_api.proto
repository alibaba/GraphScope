/**
 * Copyright 2020 Alibaba Group Holding Limited.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option java_package = "com.alibaba.maxgraph.proto";

package tinkerpop;
import "gremlin_query.proto";
import "sdk/message.proto";

// The store service definition.
service StoreService {
    rpc getOutEdges(GetOutEdgesRequest) returns (stream GraphEdgeReponse);
    rpc getBatchOutTarget(BatchVertexEdgeRequest) returns (stream BatchVertexEdgeResponse);
    rpc getBatchOutCount(BatchVertexEdgeRequest) returns (stream BatchVertexCountResponse);
    rpc getInEdges(GetInEdgesRequest) returns (stream GraphEdgeReponse);
    rpc getBatchInTarget(BatchVertexEdgeRequest) returns (stream BatchVertexEdgeResponse);
    rpc getBatchInCount(BatchVertexEdgeRequest) returns (stream BatchVertexCountResponse);
    rpc getVertexs(GetVertexsRequest) returns (stream VertexResponse);
    rpc getEdges(GetEdgesRequest) returns (stream GraphEdgeReponse);
    rpc scanEdges(ScanEdgeRequest) returns (stream GraphEdgeReponse);
    rpc scan(ScanRequest) returns (stream VertexResponse);
}

message ScanRequest {
    int64 snapshot_id           = 1;
    int32 type_id               = 2;
    int32 offset                = 3;
    int32 limit                 = 4;
    int32 partition_id          = 5;
    repeated int32 property_ids = 6;
}

message ScanEdgeRequest {
    int64 snapshot_id           = 1;
    int32 type_id               = 2;
    int32 offset                = 3;
    int32 limit                 = 4;
    int32 partition_id          = 5;
    repeated int32 property_ids = 6;
}

message GetOutEdgesRequest {
    int64 snapshot_id           = 1;
    int64 src_id                = 2;
    int32 type_id               = 3;
    repeated int32 property_ids = 4;
}

message GetInEdgesRequest {
    int64 snapshot_id           = 1;
    int64 dst_id                = 2;
    int32 type_id               = 3;
    repeated int32 property_ids = 4;
}

message GraphEdgeReponse {
    VertexId src_id             = 1;
    VertexId dst_id             = 2;
    int64 edge_id               = 3;
    int32 type_id               = 4;
    bytes pros                  = 5;
}

message GetVertexsRequest {
    int64 snapshot_id           = 1;
    int32 type_id               = 2;
    repeated int64 ids          = 3;
    repeated int32 prop_ids     = 4;
}

message GetEdgesRequest {
    int64 snapshot_id           = 1;
    int32 type_id               = 2;
    repeated int64 ids          = 3;
}

message BatchVertexEdgeRequest {
    int64 snapshot_id                                   = 1;
    repeated VertexId vertex_id                         = 2;
    repeated int64 seq                                  = 3;
    repeated uint32 label_list                          = 4;
    bool edge_prop_flag                                 = 5;
    uint64 limit_count                                  = 6;
    repeated maxgraph.LogicalCompare logical_compare    = 7;
}

message BatchVertexEdgeResponse {
    int64 seq                   = 1;
    int64 edge_id               = 2;
    int32 edge_label_id         = 3;
    VertexId target_vid         = 4;
    bytes edge_props            = 5;
}

message BatchVertexCountResponse {
    int64 vid                   = 1;
    int64 count_val             = 2;
}

message QueryResponse {
    repeated bytes value        = 1;
    int32 error_code            = 2;
    string message              = 3;
}
