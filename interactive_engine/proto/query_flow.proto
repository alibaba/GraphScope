/**
 * Copyright 2020 Alibaba Group Holding Limited.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option java_package = "com.alibaba.maxgraph";
import "sdk/message.proto";

package maxgraph;

message QueryFlow {
    string query_id                         = 1;
    QueryPlan query_plan                    = 2;
    SinkOperator sink_op                    = 3;
    map<string, string> config              = 4;
    string graph_name                       = 5;
    int32 parallelism                       = 6;
    repeated string host_ip                 = 7;
    int64 snapshot                          = 8;
    string script                           = 9;
    uint64 timeout_ms                       = 10;
    repeated int32 global_stop_op_list      = 11;
    map<string, ListInt> scop_stop_op_list  = 12;
    InputBatchLevel input_batch_level       = 13;
    bool debug_log_flag                     = 14;
    uint64 start_timestamp_ms               = 15;
    uint32 front_id                         = 16;
    bool exec_local_flag                    = 17;
    bool lambda_existed                     = 18;
    bytes bytecode                          = 20;
}

enum InputBatchLevel {
    // the default level, 64 batches of message per schedule loop.
    Medium            = 0;
    // 16 batches
    Small             = 1;
    // 4 batches
    VerySmall         = 2;
    // 256 batches
    Large             = 3;
    // 1024 batches
    VeryLarge         = 4;
}

message QueryPlan {
    SourceOperator source_op                = 1;
    repeated UnaryOperator unary_op         = 2;
    repeated BinaryOperator binary_op       = 3;
    repeated int32 operator_id_list         = 4;
}

enum OperatorType {
    V                               = 0;
    E                               = 1;
    OUT                             = 2;
    IN                              = 3;
    BOTH                            = 4;
    OUT_E                           = 5;
    IN_E                            = 6;
    BOTH_E                          = 7;
    OUT_V                           = 8;
    IN_V                            = 9;
    BOTH_V                          = 10;
    SELECT_ONE                      = 11;
    COUNT_LOCAL                     = 12;
    JOIN_LABEL                      = 13;
    ORDER                           = 14;
    RANGE                           = 15;
    FIRST_BY_LABEL                  = 16;
    UNION                           = 17;
    DEDUP                           = 18;
    GROUP_COUNT                     = 19;
    HAS                             = 20;
    REPEAT_START                    = 21;
    REPEAT                          = 22;
    SELECT                          = 23;
    WHERE                           = 24;
    PROP_VALUE                      = 25;
    PROP_KEY_VALUE                  = 26;
    WHERE_LABEL                     = 27;
    UNFOLD                          = 28;
    PATH_OUT                        = 29;
    FILTER                          = 30;
    JOIN_COUNT_LABEL                = 31;
    SIMPLE_PATH                     = 32;
    PROP_MAP_VALUE                  = 33;
    SOURCE_CHAIN                    = 34;
    UNARY_CHAIN                     = 35;
    BINARY_CHAIN                    = 36;
    FOLD                            = 37;
    RANGE_LOCAL                     = 38;
    ORDER_LOCAL                     = 39;
    SACK_OUT                        = 40;
    COUNT_BY_KEY                    = 41;
    PROP_FILL                       = 42;
    DEDUP_COUNT_LABEL               = 43;
    DUPLICATE_LABEL                 = 44;
    COUNT                           = 45;
    JOIN_DIRECT_FILTER              = 46;
    NOT                             = 47;
    OTHER_V                         = 48;
    SUM                             = 49;
    COLUMN                          = 50;
    CONSTANT                        = 51;
    FOLD_BY_KEY                     = 52;
    SUM_BY_KEY                      = 53;
    MAX                             = 54;
    MIN                             = 55;
    MAX_BY_KEY                      = 56;
    MIN_BY_KEY                      = 57;
    ENTRY_OUT                       = 58;
    FOLDMAP                         = 59;
    PROPERTIES                      = 60;
    WRITE_ODPS                      = 61;
    RANGE_BY_KEY                    = 62;
    DEDUP_BY_KEY                    = 63;
    V_COUNT                         = 64;
    E_COUNT                         = 65;
    OUT_COUNT                       = 66;
    IN_COUNT                        = 67;
    BOTH_COUNT                      = 68;
    COUNT_LIMIT                     = 69;
    JOIN_DIRECT_FILTER_NEGATE       = 70;
    JOIN_DIRECT_FILTER_KEY_NEGATE   = 71;
    DFS_SOURCE                      = 72;
    DFS_REPEAT_GRAPH                = 73;
    DFS_FINISH_JOIN                 = 74;
    SAMPLE                          = 75;
    GRAPH_SOURCE                    = 76;
    BRANCH_OPTION                   = 77;
    JOIN_RATIO                      = 78;
    JOIN_STORE_FILTER               = 79;
    SUBGRAPH                        = 80;
    SUBGRAPH_SOURCE                 = 81;
    JOIN_CASE_WHEN                  = 82;
    CACHE                           = 83;
    MATH                            = 84;
    JOIN_RIGHT_ZERO_JOIN            = 85;
    ENTER_KEY                       = 86;
    JOIN_RIGHT_VALUE_KEY            = 87;
    BYKEY_ENTRY                     = 88;
    KEY_MESSAGE                     = 89;
    RANGE_SUM                       = 90;
    LABEL_VALUE                     = 91;
    FOLD_STORE                      = 92;
    COMBINER_SUM                    = 93;
    ESTIMATE_COUNT                  = 94;
    COMBINER_RANGE                  = 95;
    DFS_REPEAT_CMD                  = 96;
    DFS_REPEAT_DATA                 = 97;
    BARRIER                         = 98;

    LAMBDA_FILTER                   = 1000;
    LAMBDA_MAP                      = 1001;
    LAMBDA_FLATMAP                  = 1002;

    GRAPH_VINEYARD_BUILDER          = 2000;
    GRAPH_VINEYARD_STREAM           = 2001;
    OUTPUT_VINEYARD_VERTEX          = 2002;
    OUTPUT_VINEYARD_EDGE            = 2003;

    PROGRAM_CC                      = 10000;
    PROGRAM_GRAPH_CC                = 10001;
    PROGRAM_GRAPH_LPA               = 10002;
    PROGRAM_GRAPH_PAGERANK          = 10003;
    PROGRAM_GRAPH_HITS              = 10004;
    PROGRAM_GRAPH_ALLPATH           = 10005;
    PROGRAM_GRAPH_SHORTESTPATH      = 10006;
    PROGRAM_GRAPH_PEERPRESSURE      = 10007;
}

enum RequirementType {
    LABEL_START     = 0;
    LABEL_DEL       = 1;
    PATH_START      = 2;
    PATH_ADD        = 3;
    KEY_DEL         = 4;
}

enum ColumnType {
    COLUMN_KEYS     = 0;
    COLUMN_VALUES   = 1;
}

message RequirementValue {
    RequirementType req_type    = 1;
    Value req_argument          = 2;
}

enum SourceType {
    GRAPH       = 0;
    ODPS        = 1;
}

message RangeLimit {
    int64 range_start       = 1;
    int64 range_end         = 2;
}

enum LoopType {
    LOOP_ENTER      = 0;
    LOOP_LEAVE      = 1;
    LOOP_FEEDBACK   = 2;
    LOOP_LEAVE_LAST = 3;
}

message OperatorBase {
    int32 id                                        = 1;
    OperatorType operator_type                      = 2;
    Value argument                                  = 3;
    AssignHint assign_hint                          = 4;
    repeated LoopType loop_type                     = 5;
    int32 loop_limit                                = 6;
    repeated LogicalCompare logical_compare         = 7;
    repeated OperatorBase chained_function          = 8;
    RangeLimit range_limit                          = 9;
    repeated RequirementValue before_requirement    = 10;
    repeated RequirementValue after_requirement     = 11;
    EarlyStopArgument early_stop_argument           = 12;
    repeated int32 early_scope_list                 = 13;
    bytes argument_payload                          = 14;
}

message EarlyStopArgument {
    bool global_stop_flag       = 1;
    bool global_filter_flag     = 2;
}

message SourceOperator {
    OperatorBase base                       = 1;
    DistributionPattern distribute_pattern  = 2;
    OdpsQueryInput odps_input               = 3;
    SourceType source_type                  = 4;
}

enum InputShuffleType {
    FORWARD_TYPE            = 0;
    SHUFFLE_BY_KEY_TYPE     = 1;
    SHUFFLE_BY_ID_TYPE      = 2;
    SHUFFLE_BY_CONST_TYPE   = 3;
    BROADCAST_TYPE          = 4;
}

message InputEdgeShuffle {
    InputShuffleType shuffle_type   = 1;
    int32 shuffle_value             = 2;
}

message UnaryOperator {
    OperatorBase base                       = 1;
    int32 input_operator_id                 = 2;
    DistributionPattern distribute_pattern  = 3;
    InputShuffleType shuffle_type           = 4;
    InputEdgeShuffle input_shuffle          = 5;
    int32 input_stream_index                = 6;
}

message BinaryOperator {
    OperatorBase base                      = 1;
    int32 left_input_operator_id           = 2;
    int32 right_input_operator_id          = 3;
    DistributionPattern distribute_pattern = 4;
    InputShuffleType left_shuffle_type     = 5;
    InputEdgeShuffle left_input_shuffle    = 6;
    InputShuffleType right_shuffle_type    = 7;
    InputEdgeShuffle right_input_shuffle   = 8;
    int32 left_stream_index                = 9;
    int32 right_stream_index               = 10;
}

message SinkOperator {
    OperatorBase base       = 1;
    int32 input_operator_id = 2;
}

enum AssignHint {
    VERTEX_HASH = 0;
    EDGE_HASH   = 1;
    ARBITRARILY = 2;
}

enum DistributionPattern {
    ALL_TO_ALL          = 0;
    POINT_WISE_VERTEX   = 1;
    POINT_WISE_EDGE     = 2;
    BROADCAST           = 3;
}

message OdpsQueryInput {
    string project                                  = 1;
    string table_name                               = 2;
    string endpoint                                 = 3;
    string access_id                                = 4;
    string access_key                               = 5;
    string ds                                       = 6;
    repeated string pk_name_list                    = 7;
    repeated ColumnLogicalCompare logical_compare   = 8;
}

message OdpsGraphInput {
    string endpoint                     = 1;
    string access_id                    = 2;
    string access_key                   = 3;
    repeated EdgeInput edge_input       = 4;
}

message OdpsOutputConfig {
    string project              = 1;
    string table_name           = 2;
    string endpoint             = 3;
    string access_id            = 4;
    string access_key           = 5;
    string ds                   = 6;
    repeated int32 prop_id      = 7;
}

message QueryInput {
    Value value                              = 1;
    repeated LogicalCompare logical_compare  = 2;
}

message Query {
    string dataflow_id    = 1;
    QueryInput input      = 2;
    int64 timeout_seconds = 3;
    string query_id       = 4;
}

message LogicalCompareListProto {
    repeated LogicalCompare logical_compare_list    = 1;
}

message WhenCompareListProto {
    repeated LogicalCompareListProto when_compare_list  = 1;
    bool else_end_flag                                  = 2;
}

message WhenThenArgumentProto {
    repeated LogicalCompare when_compare    = 1;
    QueryPlan then_plan                     = 2;
}

message CaseWhenArgumentProto {
    QueryPlan case_plan                                 = 1;
    repeated WhenThenArgumentProto when_then_list       = 2;
    QueryPlan else_end_plan                             = 3;
}

enum MathTokenType {
    TOKEN_ERROR                 = 0;
    TOKEN_NUMBER                = 1;
    TOKEN_OPERATOR              = 2;
    TOKEN_FUNCTION              = 3;
    TOKEN_PARENTHESES_OPEN      = 4;
    TOKEN_PARENTHESES_CLOSE     = 5;
    TOKEN_VARIABLE              = 6;
    TOKEN_SEPARATOR             = 7;
}

enum MathFunctionType {
    FUNC_SIN    = 0;
    FUNC_COS    = 1;
    FUNC_TAN    = 2;
    FUNC_COT    = 3;
    FUNC_LOG    = 4;
    FUNC_LOG1P  = 5;
    FUNC_ABS    = 6;
    FUNC_ACOS   = 7;
    FUNC_ASIN   = 8;
    FUNC_ATAN   = 9;
    FUNC_CBRT   = 10;
    FUNC_CEIL   = 11;
    FUNC_FLOOR  = 12;
    FUNC_SINH   = 13;
    FUNC_SQRT   = 14;
    FUNC_TANH   = 15;
    FUNC_COSH   = 16;
    FUNC_POW    = 17;
    FUNC_EXP    = 18;
    FUNC_EXPM1  = 19;
    FUNC_LOG10  = 20;
    FUNC_LOG2   = 21;
    FUNC_SIGNUM = 22;
}

enum MathOperatorTokenType {
    OP_ADDITION         = 0;
    OP_SUBTRACTION      = 1;
    OP_MUTLIPLICATION   = 2;
    OP_DIVISION         = 3;
    OP_POWER            = 4;
    OP_MODULO           = 5;
    OP_UNARYMINUS       = 6;
    OP_UNARYPLUS        = 7;
}

message MathOperatorProto {
    MathTokenType math_token_type           = 1;
    MathOperatorValueProto operator_value   = 2;
}

message MathFunctionArgumentProto {
    MathFunctionType function_type  = 1;
    int32 argument_number           = 2;
}

message MathOpTokenArgumentProto {
    MathOperatorTokenType op_token_type     = 1;
    int32 num_operands                      = 2;
}

message MathOperatorValueProto {
    double double_value                     = 1;
    string string_value                     = 2;
    int32 int_value                         = 3;
    MathFunctionArgumentProto func_arg      = 4;
    MathOpTokenArgumentProto op_token_arg   = 5;
}

message MathArgumentProto {
    repeated MathOperatorProto  math_token_list     = 1;
}

message CountArgumentProto {
    bool limit_flag     = 1;
    int64 limit_count   = 2;

}

enum EnterKeyTypeProto {
    KEY_SELF            = 0;
    KEY_PROP_LABEL      = 1;
    KEY_PROP_VAL_MAP    = 2;
}

message EnterKeyArgumentProto {
    EnterKeyTypeProto enter_key_type    = 1;
    int32 prop_label_id                 = 2;
    repeated int32 prop_id_list         = 3;
    bool uniq_flag                      = 4;
}

message RepeatArgumentProto {
    int32 leave_id      = 1;
    int32 feedback_id   = 2;
    int32 loop_limit    = 3;
    bool emit_flag      = 4;
    QueryPlan plan      = 5;
}

message BarrierArgumentProto {
    int32 barrier_size  = 1;
}

enum CreateGraphTypeProto {
    VINEYARD        = 0;
}

message CreateGraphArgumentProto {
    string graph_name                       = 1;
    CreateGraphTypeProto crate_graph_type   = 2;
    string graph_schema                     = 3;
}

message RuntimePropertyProto {
    int32 id                                        = 1;
    string name                                     = 2;
    string data_type                                = 3;
}

message RuntimeVertexTypeProto {
    int32 label_id                                  = 1;
    string label_name                               = 2;
    repeated RuntimePropertyProto properties        = 3;
    repeated string primary_keys                    = 4;
}

message RuntimeEdgeRelationProto {
    string source_label                             = 1;
    string target_label                             = 2;
}

message RuntimeEdgeTypeProto {
    int32 label_id                                  = 1;
    string label_name                               = 2;
    repeated RuntimePropertyProto properties        = 3;
    repeated RuntimeEdgeRelationProto relations     = 4;
}

message RuntimeGraphSchemaProto {
    repeated RuntimeVertexTypeProto vertex_types    = 1;
    repeated RuntimeEdgeTypeProto edge_types        = 2;
}

message VertexPrimaryKeyListProto {
    repeated VertexPrimaryKeyProto primary_keys     = 1;
}

message VertexPrimaryKeyProto {
    int32 label_id                                  = 1;
    string primary_key_value                        = 2;
}
