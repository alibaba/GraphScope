/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.alibaba.graphscope.groot.service.api;

import com.alibaba.graphscope.groot.service.models.APIResponseWithCode;
import com.alibaba.graphscope.groot.service.models.CreateGraphRequest;
import com.alibaba.graphscope.groot.service.models.CreateGraphResponse;
import com.alibaba.graphscope.groot.service.models.CreateProcedureRequest;
import com.alibaba.graphscope.groot.service.models.CreateProcedureResponse;
import com.alibaba.graphscope.groot.service.models.DeleteEdgeRequest;
import com.alibaba.graphscope.groot.service.models.EdgeData;
import com.alibaba.graphscope.groot.service.models.EdgeRequest;
import com.alibaba.graphscope.groot.service.models.GetGraphResponse;
import com.alibaba.graphscope.groot.service.models.GetGraphSchemaResponse;
import com.alibaba.graphscope.groot.service.models.GetGraphStatisticsResponse;
import com.alibaba.graphscope.groot.service.models.GetProcedureResponse;
import com.alibaba.graphscope.groot.service.models.JobResponse;
import com.alibaba.graphscope.groot.service.models.JobStatus;
import com.alibaba.graphscope.groot.service.models.Property;
import com.alibaba.graphscope.groot.service.models.SchemaMapping;
import com.alibaba.graphscope.groot.service.models.ServiceStatus;
import com.alibaba.graphscope.groot.service.models.StartServiceRequest;
import com.alibaba.graphscope.groot.service.models.StopServiceRequest;
import com.alibaba.graphscope.groot.service.models.UpdateProcedureRequest;
import com.alibaba.graphscope.groot.service.models.UploadFileResponse;
import com.alibaba.graphscope.groot.service.models.VertexData;
import com.alibaba.graphscope.groot.service.models.VertexRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-19T17:10:03.937738+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "GraphService/EdgeManagement", description = "EdgeManagement")
public interface V1Api {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /v1/graph/{graph_id}/edge : Add edge to the graph
     * Add the edge to graph. 
     *
     * @param graphId  (required)
     * @param edgeRequest  (required)
     * @return Successfully insert the edge (status code 200)
     *         or Invalid input edge (status code 400)
     *         or edge already exists (status code 409)
     *         or Server internal error (status code 500)
     */
    @Operation(
        operationId = "addEdge",
        summary = "Add edge to the graph",
        description = "Add the edge to graph. ",
        tags = { "GraphService/EdgeManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully insert the edge", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input edge", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "409", description = "edge already exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server internal error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/graph/{graph_id}/edge",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> addEdge(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @Parameter(name = "EdgeRequest", description = "", required = true) @Valid @RequestBody List<@Valid EdgeRequest> edgeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Response string\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/graph/{graph_id}/vertex : Add vertex to the graph
     * Add the provided vertex to the specified graph. 
     *
     * @param graphId  (required)
     * @param vertexRequest  (required)
     * @return Successfully created vertex (status code 200)
     *         or Invalid input vertex (status code 400)
     *         or Graph not found (status code 404)
     *         or Vertex already exists (status code 409)
     *         or Server internal error (status code 500)
     */
    @Operation(
        operationId = "addVertex",
        summary = "Add vertex to the graph",
        description = "Add the provided vertex to the specified graph. ",
        tags = { "GraphService/VertexManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully created vertex", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input vertex", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "404", description = "Graph not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "409", description = "Vertex already exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server internal error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/graph/{graph_id}/vertex",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> addVertex(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @Parameter(name = "VertexRequest", description = "", required = true) @Valid @RequestBody List<@Valid VertexRequest> vertexRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Response string\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/graph/{graph_id}/query : run queries on graph
     * After the procedure is created, user can use this API to run the procedure. 
     *
     * @param graphId  (required)
     * @param body  (optional)
     * @return Successfully runned. (status code 200)
     *         or Server internal error (status code 500)
     */
    @Operation(
        operationId = "callProc",
        summary = "run queries on graph",
        description = "After the procedure is created, user can use this API to run the procedure. ",
        tags = { "QueryService" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully runned.", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = byte[].class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "500", description = "Server internal error", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = APIResponseWithCode.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/graph/{graph_id}/query",
        produces = { "text/plain", "application/json" },
        consumes = { "text/plain" }
    )
    
    default ResponseEntity<byte[]> callProc(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) byte[] body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/graph/current/query : run queries on the running graph
     * Submit a query to the running graph. 
     *
     * @param body  (optional)
     * @return Successfully runned. Empty if failed? (status code 200)
     *         or Server internal error (status code 500)
     */
    @Operation(
        operationId = "callProcCurrent",
        summary = "run queries on the running graph",
        description = "Submit a query to the running graph. ",
        tags = { "QueryService" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully runned. Empty if failed?", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = byte[].class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "500", description = "Server internal error", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = APIResponseWithCode.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/graph/current/query",
        produces = { "text/plain", "application/json" },
        consumes = { "text/plain" }
    )
    
    default ResponseEntity<byte[]> callProcCurrent(
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) byte[] body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/graph/{graph_id}/dataloading
     * Create a dataloading job
     *
     * @param graphId The id of graph to do bulk loading. (required)
     * @param schemaMapping  (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "createDataloadingJob",
        description = "Create a dataloading job",
        tags = { "AdminService/GraphManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JobResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/graph/{graph_id}/dataloading",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<JobResponse> createDataloadingJob(
        @Parameter(name = "graph_id", description = "The id of graph to do bulk loading.", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @Parameter(name = "SchemaMapping", description = "", required = true) @Valid @RequestBody SchemaMapping schemaMapping
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"job_id\" : \"job_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/graph
     * Create a new graph
     *
     * @param createGraphRequest  (required)
     * @return successful operation (status code 200)
     *         or BadRequest (status code 400)
     *         or Internal error (status code 500)
     */
    @Operation(
        operationId = "createGraph",
        description = "Create a new graph",
        tags = { "AdminService/GraphManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateGraphResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "BadRequest", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/graph",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateGraphResponse> createGraph(
        @Parameter(name = "CreateGraphRequest", description = "", required = true) @Valid @RequestBody CreateGraphRequest createGraphRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"graph_id\" : \"1\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/graph/{graph_id}/procedure
     * Create a new procedure on a graph
     *
     * @param graphId  (required)
     * @param createProcedureRequest  (required)
     * @return successful operation (status code 200)
     *         or Bad request (status code 400)
     *         or not found (status code 404)
     *         or Internal Error (status code 500)
     */
    @Operation(
        operationId = "createProcedure",
        description = "Create a new procedure on a graph",
        tags = { "AdminService/ProcedureManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateProcedureResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "404", description = "not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/graph/{graph_id}/procedure",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateProcedureResponse> createProcedure(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @Parameter(name = "CreateProcedureRequest", description = "", required = true) @Valid @RequestBody CreateProcedureRequest createProcedureRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"procedure_id\" : \"proc1\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/graph/{graph_id}/edge : Remove edge from the graph
     * Remove the edge from current graph. 
     *
     * @param graphId  (required)
     * @param edgeLabel The label name of edge. (required)
     * @param srcLabel The label name of src vertex. (required)
     * @param dstLabel The label name of dst vertex. (required)
     * @param deleteEdgeRequest The primary key values of the src and dst vertices. (required)
     * @return Successfully delete edge (status code 200)
     *         or Invalid input edge (status code 400)
     *         or Edge not exists or Graph not exits (status code 404)
     *         or Server internal error (status code 500)
     */
    @Operation(
        operationId = "deleteEdge",
        summary = "Remove edge from the graph",
        description = "Remove the edge from current graph. ",
        tags = { "GraphService/EdgeManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully delete edge", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input edge", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "404", description = "Edge not exists or Graph not exits", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server internal error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/graph/{graph_id}/edge",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> deleteEdge(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @NotNull @Parameter(name = "edge_label", description = "The label name of edge.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "edge_label", required = true) String edgeLabel,
        @NotNull @Parameter(name = "src_label", description = "The label name of src vertex.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "src_label", required = true) String srcLabel,
        @NotNull @Parameter(name = "dst_label", description = "The label name of dst vertex.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "dst_label", required = true) String dstLabel,
        @Parameter(name = "DeleteEdgeRequest", description = "The primary key values of the src and dst vertices.", required = true) @Valid @RequestBody DeleteEdgeRequest deleteEdgeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Response string\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/graph/{graph_id}
     * Delete a graph by id
     *
     * @param graphId The id of graph to delete (required)
     * @return Successful operation (status code 200)
     *         or Not Found (status code 404)
     *         or Internal Error (status code 500)
     */
    @Operation(
        operationId = "deleteGraph",
        description = "Delete a graph by id",
        tags = { "AdminService/GraphManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/graph/{graph_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> deleteGraph(
        @Parameter(name = "graph_id", description = "The id of graph to delete", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Response string\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/job/{job_id}
     *
     * @param jobId  (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "deleteJobById",
        tags = { "AdminService/JobManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/job/{job_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> deleteJobById(
        @Parameter(name = "job_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("job_id") String jobId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Response string\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/graph/{graph_id}/procedure/{procedure_id}
     * Delete a procedure on a graph by id
     *
     * @param graphId  (required)
     * @param procedureId  (required)
     * @return Successful operation (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "deleteProcedure",
        description = "Delete a procedure on a graph by id",
        tags = { "AdminService/ProcedureManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/graph/{graph_id}/procedure/{procedure_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> deleteProcedure(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @Parameter(name = "procedure_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("procedure_id") String procedureId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Response string\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/graph/{graph_id}/vertex : Remove vertex from the graph
     * Remove the vertex from the specified graph. 
     *
     * @param graphId  (required)
     * @param label The label name of querying vertex. (required)
     * @param property The primary key values of the vertex to delete. (required)
     * @return Successfully delete vertex (status code 200)
     *         or Invalid input vertex (status code 400)
     *         or Vertex not exists or Graph not exits. (status code 404)
     *         or Server internal error (status code 500)
     */
    @Operation(
        operationId = "deleteVertex",
        summary = "Remove vertex from the graph",
        description = "Remove the vertex from the specified graph. ",
        tags = { "GraphService/VertexManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully delete vertex", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input vertex", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "404", description = "Vertex not exists or Graph not exits.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server internal error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/graph/{graph_id}/vertex",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> deleteVertex(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @NotNull @Parameter(name = "label", description = "The label name of querying vertex.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "label", required = true) String label,
        @Parameter(name = "Property", description = "The primary key values of the vertex to delete.", required = true) @Valid @RequestBody List<@Valid Property> property
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Response string\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/graph/{graph_id}/edge : Get the edge&#39;s properties with src and dst vertex primary keys.
     * Get the properties for the specified vertex. 
     *
     * @param graphId  (required)
     * @param edgeLabel The label name of querying edge. (required)
     * @param srcLabel The label name of src vertex. (required)
     * @param srcPrimaryKeyValue The primary key value of src vertex. (required)
     * @param dstLabel The label name of dst vertex. (required)
     * @param dstPrimaryKeyValue The value of dst vertex&#39;s primary key (required)
     * @return Found Edge (status code 200)
     *         or Bad input parameter (status code 400)
     *         or Edge not found or Graph not found (status code 404)
     *         or Server internal error (status code 500)
     */
    @Operation(
        operationId = "getEdge",
        summary = "Get the edge's properties with src and dst vertex primary keys.",
        description = "Get the properties for the specified vertex. ",
        tags = { "GraphService/EdgeManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Found Edge", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EdgeData.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad input parameter", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "404", description = "Edge not found or Graph not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server internal error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/graph/{graph_id}/edge",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EdgeData> getEdge(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @NotNull @Parameter(name = "edge_label", description = "The label name of querying edge.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "edge_label", required = true) String edgeLabel,
        @NotNull @Parameter(name = "src_label", description = "The label name of src vertex.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "src_label", required = true) String srcLabel,
        @NotNull @Parameter(name = "src_primary_key_value", description = "The primary key value of src vertex.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "src_primary_key_value", required = true) Object srcPrimaryKeyValue,
        @NotNull @Parameter(name = "dst_label", description = "The label name of dst vertex.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "dst_label", required = true) String dstLabel,
        @NotNull @Parameter(name = "dst_primary_key_value", description = "The value of dst vertex's primary key", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "dst_primary_key_value", required = true) Object dstPrimaryKeyValue
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"src_label\" : \"person\", \"src_primary_key_value\" : \"\", \"dst_label\" : \"software\", \"edge_label\" : \"created\", \"dst_primary_key_value\" : \"\", \"properties\" : [ { \"name\" : \"id\", \"value\" : \"\" }, { \"name\" : \"id\", \"value\" : \"\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/graph/{graph_id}
     * Get a graph by name
     *
     * @param graphId The id of graph to get (required)
     * @return Successful operation (status code 200)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "getGraph",
        description = "Get a graph by name",
        tags = { "AdminService/GraphManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetGraphResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/graph/{graph_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetGraphResponse> getGraph(
        @Parameter(name = "graph_id", description = "The id of graph to get", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"creation_time\" : 11223444, \"schema\" : { \"vertex_types\" : [ null, null ], \"edge_types\" : [ null, null ] }, \"stored_procedures\" : [ null, null ], \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"store_type\" : \"mutable_csr\", \"data_import_config\" : { \"loading_config\" : { \"x_csr_params\" : { \"parallelism\" : 0, \"build_csr_in_mem\" : true, \"use_mmap_vector\" : true }, \"format\" : { \"metadata\" : { \"key\" : \"\" }, \"type\" : \"type\" }, \"import_option\" : \"init\", \"data_source\" : { \"scheme\" : \"odps\", \"location\" : \"location\" } }, \"edge_mappings\" : [ { \"inputs\" : [ \"inputs\", \"inputs\" ], \"source_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"destination_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ], \"type_triplet\" : { \"edge\" : \"edge\", \"source_vertex\" : \"source_vertex\", \"destination_vertex\" : \"destination_vertex\" } }, { \"inputs\" : [ \"inputs\", \"inputs\" ], \"source_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"destination_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ], \"type_triplet\" : { \"edge\" : \"edge\", \"source_vertex\" : \"source_vertex\", \"destination_vertex\" : \"destination_vertex\" } } ], \"vertex_mappings\" : [ { \"type_name\" : \"type_name\", \"inputs\" : [ \"file:///path/to/person.csv\", \"file:///path/to/person.csv\" ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ] }, { \"type_name\" : \"type_name\", \"inputs\" : [ \"file:///path/to/person.csv\", \"file:///path/to/person.csv\" ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ] } ] }, \"version\" : \"version\", \"data_update_time\" : 11123445 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/graph/{graph_id}/statistics
     * Get the statics info of a graph, including number of vertices for each label, number of edges for each label.
     *
     * @param graphId The id of graph to get statistics (required)
     * @return successful operation (status code 200)
     *         or Server Internal Error (status code 500)
     *         or Not Found (status code 404)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "getGraphStatistic",
        description = "Get the statics info of a graph, including number of vertices for each label, number of edges for each label.",
        tags = { "AdminService/GraphManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetGraphStatisticsResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server Internal Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/graph/{graph_id}/statistics",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetGraphStatisticsResponse> getGraphStatistic(
        @Parameter(name = "graph_id", description = "The id of graph to get statistics", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"edge_type_statistics\" : [ { \"type_name\" : \"type_name\", \"type_id\" : 5, \"vertex_type_pair_statistics\" : [ { \"source_vertex\" : \"source_vertex\", \"destination_vertex\" : \"destination_vertex\", \"count\" : 2 }, { \"source_vertex\" : \"source_vertex\", \"destination_vertex\" : \"destination_vertex\", \"count\" : 2 } ] }, { \"type_name\" : \"type_name\", \"type_id\" : 5, \"vertex_type_pair_statistics\" : [ { \"source_vertex\" : \"source_vertex\", \"destination_vertex\" : \"destination_vertex\", \"count\" : 2 }, { \"source_vertex\" : \"source_vertex\", \"destination_vertex\" : \"destination_vertex\", \"count\" : 2 } ] } ], \"total_vertex_count\" : 0, \"vertex_type_statistics\" : [ { \"type_name\" : \"type_name\", \"type_id\" : 1, \"count\" : 5 }, { \"type_name\" : \"type_name\", \"type_id\" : 1, \"count\" : 5 } ], \"total_edge_count\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/job/{job_id}
     *
     * @param jobId The id of the job, returned from POST /v1/graph/{graph_id}/dataloading (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getJobById",
        tags = { "AdminService/JobManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JobStatus.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/job/{job_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<JobStatus> getJobById(
        @Parameter(name = "job_id", description = "The id of the job, returned from POST /v1/graph/{graph_id}/dataloading", required = true, in = ParameterIn.PATH) @PathVariable("job_id") String jobId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"start_time\" : 0, \"log\" : \"log\", \"end_time\" : 6, \"id\" : \"id\", \"detail\" : { \"key\" : \"\" }, \"type\" : \"type\", \"status\" : \"RUNNING\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/graph/{graph_id}/procedure/{procedure_id}
     * Get a procedure by id
     *
     * @param graphId  (required)
     * @param procedureId  (required)
     * @return successful operation (status code 200)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "getProcedure",
        description = "Get a procedure by id",
        tags = { "AdminService/ProcedureManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetProcedureResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/graph/{graph_id}/procedure/{procedure_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetProcedureResponse> getProcedure(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @Parameter(name = "procedure_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("procedure_id") String procedureId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/graph/{graph_id}/schema
     * Get schema by graph id
     *
     * @param graphId The id of graph to delete (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getSchema",
        description = "Get schema by graph id",
        tags = { "AdminService/GraphManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetGraphSchemaResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/graph/{graph_id}/schema",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetGraphSchemaResponse> getSchema(
        @Parameter(name = "graph_id", description = "The id of graph to delete", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"vertex_types\" : [ null, null ], \"edge_types\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/service/status
     * Get service status
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getServiceStatus",
        description = "Get service status",
        tags = { "AdminService/ServiceManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceStatus.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/service/status",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ServiceStatus> getServiceStatus(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"start_time\" : 5, \"statistics_enabled\" : true, \"bolt_port\" : 0, \"hqps_port\" : 6, \"gremlin_port\" : 1, \"graph\" : { \"creation_time\" : 11223444, \"schema\" : { \"vertex_types\" : [ null, null ], \"edge_types\" : [ null, null ] }, \"stored_procedures\" : [ null, null ], \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"store_type\" : \"mutable_csr\", \"data_import_config\" : { \"loading_config\" : { \"x_csr_params\" : { \"parallelism\" : 0, \"build_csr_in_mem\" : true, \"use_mmap_vector\" : true }, \"format\" : { \"metadata\" : { \"key\" : \"\" }, \"type\" : \"type\" }, \"import_option\" : \"init\", \"data_source\" : { \"scheme\" : \"odps\", \"location\" : \"location\" } }, \"edge_mappings\" : [ { \"inputs\" : [ \"inputs\", \"inputs\" ], \"source_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"destination_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ], \"type_triplet\" : { \"edge\" : \"edge\", \"source_vertex\" : \"source_vertex\", \"destination_vertex\" : \"destination_vertex\" } }, { \"inputs\" : [ \"inputs\", \"inputs\" ], \"source_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"destination_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ], \"type_triplet\" : { \"edge\" : \"edge\", \"source_vertex\" : \"source_vertex\", \"destination_vertex\" : \"destination_vertex\" } } ], \"vertex_mappings\" : [ { \"type_name\" : \"type_name\", \"inputs\" : [ \"file:///path/to/person.csv\", \"file:///path/to/person.csv\" ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ] }, { \"type_name\" : \"type_name\", \"inputs\" : [ \"file:///path/to/person.csv\", \"file:///path/to/person.csv\" ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ] } ] }, \"version\" : \"version\", \"data_update_time\" : 11123445 }, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/graph/{graph_id}/vertex : Get the vertex&#39;s properties with vertex primary key.
     * Get the properties for the specified vertex. example: &#x60;&#x60;&#x60;http GET /endpoint?param1&#x3D;value1&amp;param2&#x3D;value2 HTTP/1.1 Host: example.com &#x60;&#x60;&#x60; 
     *
     * @param graphId The id of the graph (required)
     * @param label The label name of querying vertex. (required)
     * @param primaryKeyValue The primary key value of querying vertex. (required)
     * @return Found vertex (status code 200)
     *         or Bad input parameter (status code 400)
     *         or Vertex not found or graph not found (status code 404)
     *         or Server internal error (status code 500)
     */
    @Operation(
        operationId = "getVertex",
        summary = "Get the vertex's properties with vertex primary key.",
        description = "Get the properties for the specified vertex. example: ```http GET /endpoint?param1=value1&param2=value2 HTTP/1.1 Host: example.com ``` ",
        tags = { "GraphService/VertexManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Found vertex", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VertexData.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad input parameter"),
            @ApiResponse(responseCode = "404", description = "Vertex not found or graph not found"),
            @ApiResponse(responseCode = "500", description = "Server internal error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/graph/{graph_id}/vertex",
        produces = { "application/json" }
    )
    
    default ResponseEntity<VertexData> getVertex(
        @Parameter(name = "graph_id", description = "The id of the graph", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @NotNull @Parameter(name = "label", description = "The label name of querying vertex.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "label", required = true) String label,
        @NotNull @Parameter(name = "primary_key_value", description = "The primary key value of querying vertex.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "primary_key_value", required = true) Object primaryKeyValue
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"values\" : [ { \"name\" : \"id\", \"value\" : \"\" }, { \"name\" : \"id\", \"value\" : \"\" } ], \"label\" : \"person\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/graph
     * List all graphs
     *
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "listGraphs",
        description = "List all graphs",
        tags = { "AdminService/GraphManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GetGraphResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/graph",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GetGraphResponse>> listGraphs(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"creation_time\" : 11223444, \"schema\" : { \"vertex_types\" : [ null, null ], \"edge_types\" : [ null, null ] }, \"stored_procedures\" : [ null, null ], \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"store_type\" : \"mutable_csr\", \"data_import_config\" : { \"loading_config\" : { \"x_csr_params\" : { \"parallelism\" : 0, \"build_csr_in_mem\" : true, \"use_mmap_vector\" : true }, \"format\" : { \"metadata\" : { \"key\" : \"\" }, \"type\" : \"type\" }, \"import_option\" : \"init\", \"data_source\" : { \"scheme\" : \"odps\", \"location\" : \"location\" } }, \"edge_mappings\" : [ { \"inputs\" : [ \"inputs\", \"inputs\" ], \"source_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"destination_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ], \"type_triplet\" : { \"edge\" : \"edge\", \"source_vertex\" : \"source_vertex\", \"destination_vertex\" : \"destination_vertex\" } }, { \"inputs\" : [ \"inputs\", \"inputs\" ], \"source_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"destination_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ], \"type_triplet\" : { \"edge\" : \"edge\", \"source_vertex\" : \"source_vertex\", \"destination_vertex\" : \"destination_vertex\" } } ], \"vertex_mappings\" : [ { \"type_name\" : \"type_name\", \"inputs\" : [ \"file:///path/to/person.csv\", \"file:///path/to/person.csv\" ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ] }, { \"type_name\" : \"type_name\", \"inputs\" : [ \"file:///path/to/person.csv\", \"file:///path/to/person.csv\" ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ] } ] }, \"version\" : \"version\", \"data_update_time\" : 11123445 }, { \"creation_time\" : 11223444, \"schema\" : { \"vertex_types\" : [ null, null ], \"edge_types\" : [ null, null ] }, \"stored_procedures\" : [ null, null ], \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"store_type\" : \"mutable_csr\", \"data_import_config\" : { \"loading_config\" : { \"x_csr_params\" : { \"parallelism\" : 0, \"build_csr_in_mem\" : true, \"use_mmap_vector\" : true }, \"format\" : { \"metadata\" : { \"key\" : \"\" }, \"type\" : \"type\" }, \"import_option\" : \"init\", \"data_source\" : { \"scheme\" : \"odps\", \"location\" : \"location\" } }, \"edge_mappings\" : [ { \"inputs\" : [ \"inputs\", \"inputs\" ], \"source_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"destination_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ], \"type_triplet\" : { \"edge\" : \"edge\", \"source_vertex\" : \"source_vertex\", \"destination_vertex\" : \"destination_vertex\" } }, { \"inputs\" : [ \"inputs\", \"inputs\" ], \"source_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"destination_vertex_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"id\" } ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ], \"type_triplet\" : { \"edge\" : \"edge\", \"source_vertex\" : \"source_vertex\", \"destination_vertex\" : \"destination_vertex\" } } ], \"vertex_mappings\" : [ { \"type_name\" : \"type_name\", \"inputs\" : [ \"file:///path/to/person.csv\", \"file:///path/to/person.csv\" ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ] }, { \"type_name\" : \"type_name\", \"inputs\" : [ \"file:///path/to/person.csv\", \"file:///path/to/person.csv\" ], \"column_mappings\" : [ { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" }, { \"column\" : { \"name\" : \"name\", \"index\" : 6 }, \"property\" : \"property\" } ] } ] }, \"version\" : \"version\", \"data_update_time\" : 11123445 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/job
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "listJobs",
        tags = { "AdminService/JobManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = JobStatus.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/job",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<JobStatus>> listJobs(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"start_time\" : 0, \"log\" : \"log\", \"end_time\" : 6, \"id\" : \"id\", \"detail\" : { \"key\" : \"\" }, \"type\" : \"type\", \"status\" : \"RUNNING\" }, { \"start_time\" : 0, \"log\" : \"log\", \"end_time\" : 6, \"id\" : \"id\", \"detail\" : { \"key\" : \"\" }, \"type\" : \"type\", \"status\" : \"RUNNING\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/graph/{graph_id}/procedure
     * List all procedures
     *
     * @param graphId  (required)
     * @return Successful operation (status code 200)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "listProcedures",
        description = "List all procedures",
        tags = { "AdminService/ProcedureManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GetProcedureResponse.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/graph/{graph_id}/procedure",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GetProcedureResponse>> listProcedures(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ null, null ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/service/restart
     * Start current service
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "restartService",
        description = "Start current service",
        tags = { "AdminService/ServiceManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/service/restart",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> restartService(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Response string\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/graph/{graph_id}/adhoc_query : Submit adhoc query to the Interactive Query Service.
     * Submit a adhoc query to the running graph. The adhoc query should be represented by the physical plan: https://github.com/alibaba/GraphScope/blob/main/interactive_engine/executor/ir/proto/physical.proto 
     *
     * @param graphId  (required)
     * @param body  (optional)
     * @return Successfully runned. (status code 200)
     *         or Server internal error (status code 500)
     */
    @Operation(
        operationId = "runAdhoc",
        summary = "Submit adhoc query to the Interactive Query Service.",
        description = "Submit a adhoc query to the running graph. The adhoc query should be represented by the physical plan: https://github.com/alibaba/GraphScope/blob/main/interactive_engine/executor/ir/proto/physical.proto ",
        tags = { "QueryService" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully runned.", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = byte[].class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "500", description = "Server internal error", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = APIResponseWithCode.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/graph/{graph_id}/adhoc_query",
        produces = { "text/plain", "application/json" },
        consumes = { "text/plain" }
    )
    
    default ResponseEntity<byte[]> runAdhoc(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) byte[] body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/graph/current/adhoc_query : Submit adhoc query to the Interactive Query Service.
     * Submit a adhoc query to the running graph. The adhoc query should be represented by the physical plan: https://github.com/alibaba/GraphScope/blob/main/interactive_engine/executor/ir/proto/physical.proto 
     *
     * @param body  (optional)
     * @return Successfully runned. Empty if failed? (status code 200)
     *         or Server internal error (status code 500)
     */
    @Operation(
        operationId = "runAdhocCurrent",
        summary = "Submit adhoc query to the Interactive Query Service.",
        description = "Submit a adhoc query to the running graph. The adhoc query should be represented by the physical plan: https://github.com/alibaba/GraphScope/blob/main/interactive_engine/executor/ir/proto/physical.proto ",
        tags = { "QueryService" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully runned. Empty if failed?", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = byte[].class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "500", description = "Server internal error", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = APIResponseWithCode.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/graph/current/adhoc_query",
        produces = { "text/plain", "application/json" },
        consumes = { "text/plain" }
    )
    
    default ResponseEntity<byte[]> runAdhocCurrent(
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) byte[] body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/service/start
     * Start service on a specified graph
     *
     * @param startServiceRequest Start service on a specified graph (optional)
     * @return successful operation (status code 200)
     *         or Internal Error (status code 500)
     */
    @Operation(
        operationId = "startService",
        description = "Start service on a specified graph",
        tags = { "AdminService/ServiceManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/service/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> startService(
        @Parameter(name = "StartServiceRequest", description = "Start service on a specified graph") @Valid @RequestBody(required = false) StartServiceRequest startServiceRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Response string\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/service/stop
     * Stop current service
     *
     * @param stopServiceRequest Stop service on a specified graph (optional)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "stopService",
        description = "Stop current service",
        tags = { "AdminService/ServiceManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/service/stop",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> stopService(
        @Parameter(name = "StopServiceRequest", description = "Stop service on a specified graph") @Valid @RequestBody(required = false) StopServiceRequest stopServiceRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Response string\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /v1/graph/{graph_id}/edge : Update edge&#39;s property
     * Update the edge on the running graph. 
     *
     * @param graphId  (required)
     * @param edgeRequest  (optional)
     * @return Successfully update edge (status code 200)
     *         or Invalid input parameters (status code 400)
     *         or Edge not exists (status code 404)
     *         or Server internal error (status code 500)
     */
    @Operation(
        operationId = "updateEdge",
        summary = "Update edge's property",
        description = "Update the edge on the running graph. ",
        tags = { "GraphService/EdgeManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully update edge", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "404", description = "Edge not exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server internal error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/graph/{graph_id}/edge",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> updateEdge(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @Parameter(name = "EdgeRequest", description = "") @Valid @RequestBody(required = false) EdgeRequest edgeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Response string\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /v1/graph/{graph_id}/procedure/{procedure_id}
     * Update procedure on a graph by id
     *
     * @param graphId  (required)
     * @param procedureId  (required)
     * @param updateProcedureRequest  (optional)
     * @return Successful operation (status code 200)
     *         or Bad request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal error (status code 500)
     */
    @Operation(
        operationId = "updateProcedure",
        description = "Update procedure on a graph by id",
        tags = { "AdminService/ProcedureManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/graph/{graph_id}/procedure/{procedure_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> updateProcedure(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @Parameter(name = "procedure_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("procedure_id") String procedureId,
        @Parameter(name = "UpdateProcedureRequest", description = "") @Valid @RequestBody(required = false) UpdateProcedureRequest updateProcedureRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Response string\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /v1/graph/{graph_id}/vertex : Update vertex&#39;s property
     * Remove the vertex from the specified graph. 
     *
     * @param graphId  (required)
     * @param vertexRequest  (optional)
     * @return Successfully update vertex (status code 200)
     *         or Invalid input parameters (status code 400)
     *         or Vertex not exists (status code 404)
     *         or Server internal error (status code 500)
     */
    @Operation(
        operationId = "updateVertex",
        summary = "Update vertex's property",
        description = "Remove the vertex from the specified graph. ",
        tags = { "GraphService/VertexManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully update vertex", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "404", description = "Vertex not exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server internal error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/graph/{graph_id}/vertex",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> updateVertex(
        @Parameter(name = "graph_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("graph_id") String graphId,
        @Parameter(name = "VertexRequest", description = "") @Valid @RequestBody(required = false) VertexRequest vertexRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Response string\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/file/upload
     *
     * @param filestorage  (optional)
     * @return successful operation (status code 200)
     *         or Server Internal Error (status code 500)
     */
    @Operation(
        operationId = "uploadFile",
        tags = { "Utils" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UploadFileResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server Internal Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = APIResponseWithCode.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/file/upload",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<UploadFileResponse> uploadFile(
        @Parameter(name = "filestorage", description = "") @RequestPart(value = "filestorage", required = false) MultipartFile filestorage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"file_path\" : \"file_path\", \"metadata\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
