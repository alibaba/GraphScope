/**
 * Copyright 2020 Alibaba Group Holding Limited.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option java_package = "com.alibaba.maxgraph";
import "sdk/schema.proto";

package maxgraph;

enum ClassType{
    VERTEX          = 0;
    EDGE            = 1;
    PROPERTY        = 2;
    LIST            = 3;
    MAP             = 4;
    ENTRY           = 5;
    PATH_ENTRY      = 6;
    ERROR           = 7;
    DFS_CMD         = 8;
}


enum ErrorCode {
    OK                     = 0;
    UNIMPLEMENT            = 1;
    LABEL_NOT_FOUND        = 2;
    DATA_TYPE_NOT_SUPPORT  = 3;
    CLASS_TYPE_NOT_SUPPORT = 4;
    INTERNAL_ERROR         = 5;
    PROPERTY_NOT_FOUND     = 6;
    DATAFLOW_ERROR         = 7;
}

message Error {
    ErrorCode code = 1;
    bytes message  = 2;
}

message Property {
    int32 id                        = 1;
    VariantType type                = 2;
    bytes value                     = 3;
    repeated LabelValue label_value = 4;
    repeated PathValue path        = 5;
    bool not_vertex_property        = 6;
}

message Vertex {
    int64 id                        = 1;
    int32 type_id                   = 2;
    repeated PathValue path        = 3;
    repeated LabelValue label_value = 4;
    repeated Property property      = 5;
}

message Edge {
    Vertex src                      = 1;
    Vertex dst                      = 2;
    bool out_direction              = 3;
    int32 type_id                   = 4;
    repeated Property property      = 5;
    repeated PathValue path         = 6;
    repeated LabelValue label_value = 7;
    int64 id                        = 8;
}

message DfsCommand {
    int64 batch_size    = 1;
    int64 send_count    = 2;
}

message Object {
    repeated Property field = 1;
}

message ClassValue {
    ClassType class_type = 1;
    bytes payload        = 2;
}

message LabelValue {
    ClassValue class_value = 1;
    int32 label_id         = 2;
}

message PathValue {
    ClassValue class_value          = 1;
    repeated int32 label_id_list    = 2;
    repeated LabelValue label_value = 3;
    repeated PathValue path         = 4;
}

message List {
    repeated ClassValue value       = 1;
    repeated LabelValue label_value = 2;
    repeated PathValue path        = 3;
}

message Entry {
    ClassValue key                  = 1;
    ClassValue value                = 2;
    repeated LabelValue label_value = 3;
    repeated PathValue path        = 4;
}

message Map {
    repeated Entry entry_list       = 1;
    repeated LabelValue label_value = 2;
    repeated PathValue path        = 3;
}

message Value {
    int32 index                             = 1;
    int32 int_value                         = 2;
    int64 long_value                        = 3;
    float float_value                       = 4;
    double double_value                     = 5;
    bool bool_value                         = 6;
    string str_value                        = 7;
    repeated int32 int_value_list           = 8;
    repeated int64 long_value_list          = 9;
    repeated string str_value_list          = 10;
    bytes payload                           = 11;
    VariantType value_type                  = 12;
    repeated PathOutValue path_out_value    = 13;
    bool bool_flag                          = 14;
    bool order_flag                         = 15;
    bool subquery_flag                      = 16;
    bool dedup_local_flag                   = 17;
    bool exec_local_disable                 = 18;
}

message QueryResponse {
    repeated bytes value                = 1;
    int32 error_code                    = 2;
    string message                      = 3;
}

message ListInt {
    repeated int32 value = 1;
}

message ListLong {
    repeated int64 value = 1;
}

message ListString {
    repeated string value = 1;
}

message ListFloat {
    repeated float value = 1;
}

message ListDouble {
    repeated double value = 1;
}

message ListBinary {
    repeated bytes value = 1;
}

enum PopType {
    FIRST           = 0;
    LAST            = 1;
    ALL             = 2;
    POP_EMPTY       = 3;
}

enum PropKeyValueType {
    PROP_KEY_TYPE    = 0;
    PROP_VALUE_TYPE  = 1;
}

enum PathOutType {
    PATH_VALUE  = 0;
    PATH_PROP   = 1;
}

message PathOutValue {
    PathOutType path_out_type   = 1;
    int32 path_prop_id          = 2;
}

enum PropertyType {
    PROP_TYPE    = 0;
    VALUE_TYPE   = 1;
}

enum OrderType {
    INCR    = 0;
    DECR    = 1;
    SHUFFLE = 2;
    ASC     = 3;
    DESC    = 4;
}

message OrderComparator {
    int32 prop_id           = 1;
    OrderType order_type    = 2;
    VariantType prop_type   = 3;
}

message OrderComparatorList {
    repeated OrderComparator order_comparator   = 1;
}

enum VariantType {
    VT_BOOL                     = 0;
    VT_CHAR                     = 1;
    VT_SHORT                    = 2;
    VT_INTEGER                  = 3;
    VT_LONG                     = 4;
    VT_FLOAT                    = 5;
    VT_DOUBLE                   = 6;
    VT_BINARY                   = 7;
    VT_STRING                   = 8;
    VT_DATE                     = 9;
    VT_INTEGER_LIST             = 10;
    VT_LONG_LIST                = 11;
    VT_FLOAT_LIST               = 12;
    VT_DOUBLE_LIST              = 13;
    VT_STRING_LIST              = 14;
    VT_BYTES_LIST               = 15;
    VT_DIM_ODPS                 = 900;
    VT_UNKNOWN                  = 1001;
}

message CountMap {
    map<int32, int32> int_map     = 1;
    map<int64, int32> long_map    = 2;
    map<string, int32> string_map = 3;
}

message OperationResponse {
    bool success    = 1;
    string message  = 2;
}

message RemoveDataflowRequest {
    string dataflow_id = 1;
}

message TimelyMessage {
    int64 id             = 1;
    ClassType class_type = 2;
    bytes payload        = 3;
}

enum EdgeDirection {
    DIR_OUT  = 0;
    DIR_IN   = 1;
    DIR_NONE = 2;
}

enum CompareType {
    GT                      = 0;
    LT                      = 1;
    GTE                     = 2;
    LTE                     = 3;
    EQ                      = 4;
    NEQ                     = 5;
    WITHIN                  = 6;
    WITHOUT                 = 7;
    REGEX                   = 8;
    STARTSWITH              = 9;
    ENDSWITH                = 10;
    CONTAINS                = 11;
    LIST_CONTAINS           = 12;
    LIST_CONTAINS_ANY       = 13;
    LIST_CONTAINS_ALL       = 14;
    DIM_WITHIN              = 15;
    DIM_WITHOUT             = 16;
    EXIST                   = 17;
    OR_RELATION             = 18;
    AND_RELATION            = 19;
}

message ColumnLogicalCompare {
    string column_name      = 1;
    CompareType compare     = 2;
    Value value             = 3;
    VariantType type        = 4;
}

message LogicalCompare {
    int32 prop_id                                  = 1;
    CompareType compare                            = 2;
    Value value                                    = 3;
    VariantType type                               = 4;
    int32 index                                    = 5;
    repeated LogicalCompare child_compare_list     = 6;
}

message EdgeInput {
    string project                                = 1;
    string ds                                     = 2;
    string table                                  = 3;
    string type_name                              = 4;
    string src_primary_key                        = 5;
    string src_type_name                          = 6;
    string dst_primary_key                        = 7;
    string dst_type_name                          = 8;
    EdgeDirection direction                       = 9;
    repeated string column_name                   = 10;
    repeated ColumnLogicalCompare logical_compare = 11;
    bool not_output_vertex_id                     = 12;
}

message BranchOptionList {
    repeated Value option_value             = 1;
    bool none_flag                          = 2;
    bool any_flag                           = 3;
}

enum MessageType {
    MSG_VERTEX_TYPE         = 0;
    MSG_EDGE_TYPE           = 1;
    MSG_PROP_TYPE           = 2;
    MSG_ENTRY_TYPE          = 3;
    MSG_PATH_ENTRY_TYPE     = 4;
    MSG_VALUE_TYPE          = 5;
    MSG_DFS_CMD_TYPE        = 6;
    MSG_LIST_TYPE           = 7;
    MSG_MAP_TYPE            = 8;
    MSG_ERROR_TYPE          = 100;
}

message RawMessageProto {
    int32 type_id               = 1;
    int64 id                    = 2;
    MessageType message_type    = 3;
    ExtraMessageProto extra     = 4;
    int64 bulk                  = 5;
    int32 store_id              = 6;
}

message ExtraEdgeEntityProto {
    int32 src_type_id       = 1;
    int64 src_id            = 2;
    int32 dst_type_id       = 3;
    int64 dst_id            = 4;
    bool is_out             = 5;
}

message PathEntityProto {
    RawMessageProto message     = 1;
    repeated int32 label_list   = 2;
}

message LabelEntityProto {
    RawMessageProto message     = 1;
    int32 label_id              = 2;
}

message PathEntityListProto {
    repeated PathEntityProto path_val_list     = 1;
}

message ValuePropertyEntityProto {
    repeated PropertyEntityProto prop_list  = 1;
    ValueEntityProto value_entity           = 2;
}

message ValueEntityProto {
    VariantType value_type      = 1;
    bytes payload               = 2;
}

message PropertyEntityProto {
    int32 prop_id               = 1;
    ValueEntityProto prop_value = 2;
}

message ExtraPathLabelEntityProto {
    repeated PathEntityListProto path_list      = 1;
    repeated LabelEntityProto label_list    = 2;
}

message ExtraMessageProto {
    ExtraEdgeEntityProto extra_edge                     = 1;
    ValuePropertyEntityProto extra_value_prop           = 2;
    ExtraPathLabelEntityProto extra_path_label          = 3;
    bytes extra_key                                     = 4;
}

message ExtraKeyEntityProto {
    RawMessageProto message     = 1;
    int64 key_rand              = 2;
}

message EntryProto {
    RawMessageProto key     = 1;
    RawMessageProto value   = 2;
}

message MapProto {
    repeated EntryProto entry_list  = 1;
}

message ListProto {
    repeated RawMessageProto value  = 1;
}

message SubgraphVertexList {
    repeated int32 source_vertex_list       = 1;
    repeated int32 target_vertex_list       = 2;
}

message ProgramCCArg{
    int32 property_cc_id = 1;
    int32 loop_limit     = 2;
    repeated int32 edge_labels   = 3;
    EdgeDirection direction   = 4;
}

message ProgramLPAArg {
    EdgeDirection direction   = 1;
    int32 seed_label          = 2;
    int32 target_label        = 3;
    repeated int32 edge_labels = 4;
    int32 iteration           = 5;
}

message ProgramGraphHITSArg {
    int32 property_auth_id  = 1;
    int32 property_hub_id  = 2;
    int32 loop_limit        = 3;
    repeated int32 edge_labels   = 4;
}

message ProgramPageRankArg{
    int32 property_pr_id = 1;
    double alpha         = 2;
    int32 loop_limit     = 3;
    EdgeDirection direction     = 4;
    repeated int32 edge_labels   = 5;
}

message ProgramShortestPathArg{
    int64 sid                       = 1;
    int64 tid                       = 2;
    int32 property_id_id            = 3;
    int32 property_path_id          = 4;
    int32 property_edge_weight_id   = 5;
    int32 loop_limit                = 6;
}

message VertexProgramShortestPathArg{
    int32 property_edge_weight_id   = 1;
    int32 loop_limit                = 2;
    Value target                    = 3;
    bool has_target                 = 4;
    EdgeDirection direction         = 5;
    repeated int32 edge_labels      = 6;
    double weight_lb                = 7;
    bool weight_flag                = 8;
}

message ProgramAllPathArg{
    int64 sid                       = 1;
    int64 tid                       = 2;
    int32 property_id_id            = 3;
    int32 property_path_id          = 4;
    int32 loop_limit                = 5;
}

message ProgramPeerPressureArg{
    int32 property_pp_id            = 1;
    int32 loop_limit                = 2;
    EdgeDirection direction         = 3;
    repeated int32 edge_labels       = 4;
}

message MetapathSampleArg{
    int32 amountToSample            = 1;
}
