/**
 * Copyright 2020 Alibaba Group Holding Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package common;
option java_package = "com.alibaba.graphscope.gaia.proto";
option java_outer_classname = "DataType";

import "common.proto";
import "google/protobuf/wrappers.proto";


// GraphDataType, including structured data types of vertices or edges.
message GraphDataType {
  // The Option of the graph element, i.e., vertex or edge
  enum GraphElementOpt {
    VERTEX = 0;
    EDGE = 1;
  }
  // The label of the graph element. i.e., the label of vertex or edge.
  // Specifically, for an edge, the labels of its src and dst vertices can be further specified.
  message GraphElementLabel {
    // the label of vertex or edge
    int32 label = 1;
    // optional field, denoting the label of the src vertex of the edge
    google.protobuf.Int32Value src_label  = 2;
    // optional field, denoting the label of the dst vertex of the edge
    google.protobuf.Int32Value dst_label  = 3;
  }
  // GraphElementTypeField represents the definition of a field in the structured GraphElementType
  // In common, it denotes the type of properties.
  message GraphElementTypeField {
    common.NameOrId prop_id = 1;
    common.DataType type = 2;
  }
  // GraphElementType represents the type of the graph element,
  // consisting the GraphElementLabel (of vertex or edge), and the corresponding property types.
  message GraphElementType {
    GraphElementLabel label = 1;
    repeated GraphElementTypeField props = 2;
  }
  GraphElementOpt element_opt = 1;
  repeated GraphElementType graph_data_type = 2;
}

// IrDataType, which could be either basic DataType or GraphDataType
message IrDataType {
  oneof type {
    common.DataType data_type = 1;
    GraphDataType graph_type = 2;
  }
}
