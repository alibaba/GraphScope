//
//! Copyright 2020 Alibaba Group Holding Limited.
//!
//! Licensed under the Apache License, Version 2.0 (the "License");
//! you may not use this file except in compliance with the License.
//! You may obtain a copy of the License at
//!
//! http://www.apache.org/licenses/LICENSE-2.0
//!
//! Unless required by applicable law or agreed to in writing, software
//! distributed under the License is distributed on an "AS IS" BASIS,
//! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//! See the License for the specific language governing permissions and
//! limitations under the License.

mod common;

#[cfg(test)]
mod tests {
    use crate::common::pattern_cases::*;

    #[test]
    fn vertex_grouping_case1() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case1();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case2() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case2();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case3() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case3();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case4() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case4();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            1
        );
    }

    #[test]
    fn vertex_grouping_case5() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case5();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case6() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case6();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case7() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case7();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case8() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case8();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case9() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case9();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case10() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case10();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case11() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case11();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B2").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case12() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case12();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B2").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B3").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case13() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case13();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B2").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case14() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case14();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B2").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B3").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("C0").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case15() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case15();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B2").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("C0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("C1").unwrap())
                .unwrap(),
            1
        );
    }

    #[test]
    fn vertex_grouping_case16() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case16();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B2").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("C0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("C1").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("D0").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case17() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case17();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            5
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            4
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A4").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A5").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case17_even_num_chain() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case17_even_num_chain();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            5
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            6
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A4").unwrap())
                .unwrap(),
            4
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A5").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A6").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case17_long_chain() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case17_long_chain();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            5
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            7
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A4").unwrap())
                .unwrap(),
            9
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A5").unwrap())
                .unwrap(),
            10
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A6").unwrap())
                .unwrap(),
            8
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A7").unwrap())
                .unwrap(),
            6
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A8").unwrap())
                .unwrap(),
            4
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A9").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A10").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case17_special_id_situation_1() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case17_special_id_situation_1();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            5
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            4
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A4").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A5").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case17_special_id_situation_2() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case17_special_id_situation_2();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            5
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            4
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A4").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A5").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case18() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case18();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A4").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A5").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case19() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case19();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            8
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            9
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A4").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A5").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A6").unwrap())
                .unwrap(),
            4
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A7").unwrap())
                .unwrap(),
            6
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A8").unwrap())
                .unwrap(),
            5
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A9").unwrap())
                .unwrap(),
            7
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("C0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("D0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("E0").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn vertex_grouping_case20() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case20();
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_group(*vertex_id_map.get("A4").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn pattern_ranking_case1() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case1();
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn pattern_ranking_case3() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case3();
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            2
        );
    }

    #[test]
    fn pattern_ranking_case4() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case4();
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            2
        );
    }

    #[test]
    fn pattern_ranking_case6() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case6();
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            2
        );
    }

    #[test]
    fn pattern_ranking_case9() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case9();
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            2
        );
    }

    #[test]
    fn pattern_ranking_case11() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case11();
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B2").unwrap())
                .unwrap(),
            4
        );
    }

    #[test]
    fn pattern_ranking_case13() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case13();
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            4
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            5
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B2").unwrap())
                .unwrap(),
            3
        );
    }

    #[test]
    fn pattern_ranking_case14() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case14();
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            4
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B2").unwrap())
                .unwrap(),
            5
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B3").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("C0").unwrap())
                .unwrap(),
            6
        );
    }

    #[test]
    fn pattern_ranking_case15() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case15();
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            4
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            7
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            5
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B2").unwrap())
                .unwrap(),
            8
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("C0").unwrap())
                .unwrap(),
            6
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("C1").unwrap())
                .unwrap(),
            3
        );
    }

    #[test]
    fn pattern_ranking_case16() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case16();
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            5
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            8
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            6
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B1").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B2").unwrap())
                .unwrap(),
            9
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("C0").unwrap())
                .unwrap(),
            7
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("C1").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("D0").unwrap())
                .unwrap(),
            4
        );
    }

    #[test]
    fn pattern_ranking_case17() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case17();
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            5
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            4
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A4").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A5").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn pattern_ranking_case17_variant_long_chain() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case17_long_chain();
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            10
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            9
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            8
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            7
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A4").unwrap())
                .unwrap(),
            6
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A5").unwrap())
                .unwrap(),
            5
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A6").unwrap())
                .unwrap(),
            4
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A7").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A8").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A9").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A10").unwrap())
                .unwrap(),
            0
        );
    }

    #[test]
    fn pattern_ranking_case19() {
        let (pattern, vertex_id_map) = build_pattern_rank_ranking_case19();
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A0").unwrap())
                .unwrap(),
            3
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A1").unwrap())
                .unwrap(),
            7
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A2").unwrap())
                .unwrap(),
            0
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A3").unwrap())
                .unwrap(),
            4
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A4").unwrap())
                .unwrap(),
            8
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A5").unwrap())
                .unwrap(),
            11
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A6").unwrap())
                .unwrap(),
            1
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A7").unwrap())
                .unwrap(),
            5
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A8").unwrap())
                .unwrap(),
            9
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("A9").unwrap())
                .unwrap(),
            12
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("B0").unwrap())
                .unwrap(),
            2
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("C0").unwrap())
                .unwrap(),
            10
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("D0").unwrap())
                .unwrap(),
            6
        );
        assert_eq!(
            pattern
                .get_vertex_rank(*vertex_id_map.get("E0").unwrap())
                .unwrap(),
            13
        );
    }
}
