# set engine type
# engine.type: pegasus

# pegasus service config
pegasus.worker.num: 2
pegasus.batch.size: 1024
pegasus.output.capacity: 16
pegasus.hosts: localhost:1234

# hiactor service config
# set address to connect to hiactor service
# hiactor.hosts: localhost:1000
# set timeout in milliseconds to connect to hiactor service
# hiactor.timeout: 6000000

# set schema access uri, two formats are supported:
# 1. local file path: file://<absolute path to the local schema file>, i.e. file:///path/to/your/schema.json
# 2. remote http path: http://<host>:<port>/<query>, i.e. http://localhost:8080/schema
# we specifically support reading from a relative path if it is a local file.
graph.schema: ../executor/ir/core/resource/modern_schema.json
graph.store: exp

graph.planner.is.on: true
graph.planner.opt: RBO
graph.planner.rules: FilterIntoJoinRule, FilterMatchRule, ExtendIntersectRule, ExpandGetVFusionRule

# set statistics access uri
# graph.statistics: src/test/resources/statistics/modern_statistics.json

# set stored procedures directory path
# graph.stored.procedures: <your stored procedures directory path>

# set stored procedures enable list
# graph.stored.procedures.enable.lists: <your stored procedures enable list>

# disable the authentication if username or password not set
# auth.username: default
# auth.password: default

# disable gremlin server
# gremlin.server.disabled: true
# set gremlin server port if gremlin server is enabled
# gremlin.server.port: 8182

# disable neo4j server
neo4j.bolt.server.disabled: false
# set neo4j server port if neo4j server is enabled
# neo4j.bolt.server.port: 7687

# set timeout in system config, can be overridden by session config per query
# query.execution.timeout.ms: 3000000

calcite.default.charset: UTF-8

# frontend.query.per.second.limit: 2147483647

# graph.type.inference.enabled: true

# antlr_gremlin_traversal(default) or antlr_gremlin_calcite
# gremlin.script.language.name: antlr_gremlin_traversal

# the output plan format, can be ffi(default) or proto
# graph.physical.opt: ffi

# set the max capacity of the result streaming buffer for each query
# per.query.stream.buffer.max.capacity: 256

# set the interval in milliseconds to fetch graph schema
# graph.meta.schema.fetch.interval.ms: 1000

# set the timeout in milliseconds to fetch graph statistics
# graph.meta.statistics.fetch.interval.ms: 86400000l
