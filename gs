#!/usr/bin/env bash
# This script was generated by bashly 0.9.4 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  printf "If you are using MacOS, run the following command to get a newer bash: \\n  brew install bash && bash\\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
gs_usage() {
  if [[ -n $long_usage ]]; then
    printf "gs - A bash utility for GraphScope\n"
    echo

  else
    printf "gs - A bash utility for GraphScope\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  gs COMMAND\n"
  printf "  gs [COMMAND] --help | -h\n"
  printf "  gs --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Build GraphScope on local.\n" "build       "
  printf "  %s   Build GraphScope docker images.\n" "build-image "
  printf "  %s   Open a develop environment with docker.\n" "dev         "
  printf "  %s   Install dependencies on local machine.\n" "install-deps"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "GRAPHSCOPE_HOME (required)"
    printf "    Installed HOME for GraphScope.\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "GRAPHSCOPE_ENV"
    printf "    One of dev, prod.\n"
    printf "    Default: dev\n"
    echo

    # :command.footer
    printf "GraphScope is open sourced at https://github.com/alibaba/GraphScope\nby DAMO Academy, Alibaba Group.\n\n"
    echo

  fi
}

# :command.usage
gs_build_usage() {
  if [[ -n $long_usage ]]; then
    printf "gs build - Build GraphScope on local.\n"
    echo

  else
    printf "gs build - Build GraphScope on local.\n"
    echo

  fi

  printf "Alias: b\n"
  echo

  printf "%s\n" "Usage:"
  printf "  gs build [COMPONENT]\n"
  printf "  gs build --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "COMPONENT"
    printf "    component to build.\n"
    printf "    Allowed: all, analytical, interactive, learning, client, coordinator\n"
    echo

  fi
}

# :command.usage
gs_build_image_usage() {
  if [[ -n $long_usage ]]; then
    printf "gs build-image - Build GraphScope docker images.\n"
    echo

  else
    printf "gs build-image - Build GraphScope docker images.\n"
    echo

  fi

  printf "Alias: bi\n"
  echo

  printf "%s\n" "Usage:"
  printf "  gs build-image IMAGE [OPTIONS]\n"
  printf "  gs build-image --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--cn CN"
    printf "    Whether to use CN located mirrors to speed up download.\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "IMAGE"
    printf "    Images to build.\n"
    printf "    Allowed: graphscope-dev-base, graphscope-dev, coordinator, analytical, analytical-java, interactive, interactive-frontend, interactive-executor, learning, vineyard-dev, vineyard-runtime\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  gs build-image graphscope-dev\n"
    printf "  gs build-image graphscope-dev --cn\n"
    printf "  gs build-image analytical\n"
    echo

  fi
}

# :command.usage
gs_dev_usage() {
  if [[ -n $long_usage ]]; then
    printf "gs dev - Open a develop environment with docker.\n"
    echo

  else
    printf "gs dev - Open a develop environment with docker.\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  gs dev [OPTIONS]\n"
  printf "  gs dev --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--local, -l LOCAL"
    printf "    Local path to the source code of GraphScope.\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  gs dev\n"
    printf "  gs dev --local /home/bar/graphscope\n"
    echo

  fi
}

# :command.usage
gs_install_deps_usage() {
  if [[ -n $long_usage ]]; then
    printf "gs install-deps - Install dependencies on local machine.\n"
    echo

  else
    printf "gs install-deps - Install dependencies on local machine.\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  gs install-deps TYPE [OPTIONS]\n"
  printf "  gs install-deps --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--cn"
    printf "    Whether to use CN located mirrors to speed up download.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--from-local, -l DIRECTORY"
    printf "    Find raw dependencies of GraphScope from a local directory. The raw\n    dependencies would then be built and installed to [prefix]. If the directory\n    is empty or not exists, dependency files would be downloaded to [directory].\n"
    printf "    Default: /tmp/gs-local-deps\n"
    echo

    # :flag.usage
    printf "  %s\n" "--install-prefix PREFIX"
    printf "    Install dependency files to [prefix]. By default, './gs install-deps dev'\n    will install all the files in '/opt/graphscope/bin', '/opt/graphscope/lib'\n    etc. You can specify an installation prefix other than '/opt/graphscope'\n    using '--install-prefix', for instance '--install-prefix=\$HOME'.\n"
    printf "    Default: /opt/graphscope\n"
    echo

    # :flag.usage
    printf "  %s\n" "--no-grape-v6d, -n"
    printf "    Install deps but not grape/v6d, for building a docker images relatively\n    stable.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--only-grape-v6d, -o"
    printf "    Only install latest grape and v6d.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--v6d-version V6D-VERSION"
    printf "    v6d version to clone\n"
    printf "    Default: main\n"
    echo

    # :flag.usage
    printf "  %s\n" "--jobs, -j JOBS"
    printf "    Concurrent jobs in building, i.e., -j argument passed to make.\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TYPE"
    printf "    dependencies for development or client\n"
    printf "    Allowed: dev, client\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  gs install-deps client\n"
    printf "  gs install-deps dev\n"
    printf "  gs install-deps dev --cn\n"
    printf "  gs install-deps dev --cn -j 6\n"
    printf "  gs install-deps dev --from-local ~/Downloads/gs-all-deps\n"
    printf "  gs install-deps dev --install-prefix ~/gs\n"
    printf "  gs install-deps dev --no-grape-v6d\n"
    printf "  gs install-deps dev --only-grape-v6d\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if ((${#args[@]})); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*";
  else
    printf "%b\n" "$*";
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/lib/get_os_version.sh
get_os_version() {
  if [ -f /etc/os-release ]; then
    # freedesktop.org and systemd
    . /etc/os-release
    PLATFORM="${NAME}"
    OS_VERSION="${VERSION_ID}"
  elif type lsb_release >/dev/null 2>&1; then
    # linuxbase.org
    PLATFORM=$(lsb_release -si)
    OS_VERSION=$(lsb_release -sr)
  elif [ -f /etc/lsb-release ]; then
    # For some versions of Debian/Ubuntu without lsb_release command
    . /etc/lsb-release
    PLATFORM="${DISTRIB_ID}"
    OS_VERSION="${DISTRIB_RELEASE}"
  elif [ -f /etc/debian_version ]; then
    # Older Debian/Ubuntu/etc.
    PLATFORM=Debian
    OS_VERSION=$(cat /etc/debian_version)
  elif [ -f /etc/centos-release ]; then
    # Older Red Hat, CentOS, etc.
    PLATFORM=CentOS
    OS_VERSION=$(sed 's/.* \([0-9]\).*/\1/' < /etc/centos-release)
  else
    # Fall back to uname, e.g. "Linux <version>", also works for BSD, Darwin, etc.
    PLATFORM=$(uname -s)
    OS_VERSION=$(uname -r)
  fi
  echo "$PLATFORM-$OS_VERSION"
}

# src/lib/install_grape.sh
install_grape() {
  workdir=$1
  install_prefix=$2
  jobs=${3:-4} # $3:default=4

  if [[ -f "${install_prefix}/include/grape/grape.h" ]]; then
    log "libgrape-lite already installed, skip."
    return 0
  fi
  directory="libgrape-lite"
  branch="master"
  file="${directory}-${branch}.tar.gz"
  url="https://github.com/alibaba/libgrape-lite.git"
  url=$(maybe_set_to_cn_url ${url})
  log "Building and installing ${directory}."
  pushd "${workdir}" || exit
  if [[ ${url} == *.git ]]; then
    clone_if_not_exists ${directory} ${file} "${url}" ${branch}
  else
    download_tar_and_untar_if_not_exists ${directory} ${file} "${url}"
  fi
  pushd ${directory} || exit

  cmake . -DCMAKE_INSTALL_PREFIX="${install_prefix}" \
          -DCMAKE_PREFIX_PATH="${install_prefix}"
  make -j${jobs}
  make install
  strip "${install_prefix}/bin/run_app"
  popd || exit
  popd || exit
  cleanup_files "${workdir}/${directory}" "${workdir}/${file}"
}

# src/lib/install_thirdparty_dependencies.sh
install_cmake() {
  workdir=$1
  install_prefix=$2

  if [[ -f "${install_prefix}/bin/cmake" ]]; then
    log "cmake already installed, skip."
    return 0
  fi

  ARCH=$(uname -m)
  file="cmake-3.24.3-linux-${ARCH}.sh"
  log "Building and installing ${file}."
  pushd "${workdir}" || exit

  url="https://github.com/Kitware/CMake/releases/download/v3.24.3"
  url=$(maybe_set_to_cn_url ${url})
  [ ! -f "${file}" ] &&
    fetch_source "${file}" "${url}"
  bash "${file}" --prefix="${install_prefix}" --skip-license
  popd || exit
  cleanup_files "${workdir}/${file}"
}

install_open_mpi() {
  workdir=$1
  install_prefix=$2
  MPI_PREFIX="/opt/openmpi"  # fixed, related to coordinator/setup.py

  if [[ -f "${install_prefix}/include/mpi.h" ]]; then
    log "openmpi already installed, skip."
    return 0
  fi

  directory="openmpi-4.0.5"
  file="openmpi-4.0.5.tar.gz"
  url="https://download.open-mpi.org/release/open-mpi/v4.0"
  url=$(maybe_set_to_cn_url ${url})
  log "Building and installing ${directory}."
  pushd "${workdir}" || exit
  download_tar_and_untar_if_not_exists ${directory} ${file} "${url}"
  pushd ${directory} || exit

  ./configure --enable-mpi-cxx --disable-dlopen --prefix=${MPI_PREFIX}
  make -j$(nproc)
  make install
  popd || exit
  popd || exit
  cp -rs ${MPI_PREFIX}/* "${install_prefix}"
  cleanup_files "${workdir}/${directory}" "${workdir}/${file}"
}

install_gflags() {
  workdir=$1
  install_prefix=$2

  if [[ -f "${install_prefix}/include/gflags/gflags.h" ]]; then
    log "gflags already installed, skip."
    return 0
  fi

  directory="gflags-2.2.2"
  file="v2.2.2.tar.gz"
  url="https://github.com/gflags/gflags/archive"
  url=$(maybe_set_to_cn_url ${url})
  log "Building and installing gflags-2.2.2."
  pushd "${workdir}" || exit
  download_tar_and_untar_if_not_exists ${directory} ${file} "${url}"
  pushd ${directory} || exit

  cmake . -DCMAKE_INSTALL_PREFIX="${install_prefix}" \
          -DCMAKE_PREFIX_PATH="${install_prefix}" \
          -DBUILD_SHARED_LIBS=ON
  make -j$(nproc)
  make install
  popd || exit
  popd || exit
  cleanup_files "${workdir}/${directory}" "${workdir}/${file}"
}

install_glog() {
  workdir=$1
  install_prefix=$2

  if [[ -f "${install_prefix}/include/glog/logging.h" ]]; then
    log "glog already installed, skip."
    return 0
  fi

  directory="glog-0.6.0"
  file="v0.6.0.tar.gz"
  url="https://github.com/google/glog/archive"
  url=$(maybe_set_to_cn_url ${url})
  log "Building and installing ${directory}."
  pushd "${workdir}" || exit
  download_tar_and_untar_if_not_exists ${directory} ${file} "${url}"
  pushd ${directory} || exit

  cmake . -DCMAKE_INSTALL_PREFIX="${install_prefix}" \
          -DCMAKE_PREFIX_PATH="${install_prefix}" \
          -DBUILD_SHARED_LIBS=ON
  make -j$(nproc)
  make install
  popd || exit
  popd || exit
  cleanup_files "${workdir}/${directory}" "${workdir}/${file}"
}

install_apache_arrow() {
  workdir=$1
  install_prefix=$2

  if [[ -f "${install_prefix}/include/arrow/api.h" ]]; then
    log "apache-arrow already installed, skip."
    return 0
  fi

  directory="arrow-apache-arrow-10.0.1"
  file="apache-arrow-10.0.1.tar.gz"
  url="https://github.com/apache/arrow/archive"
  url=$(maybe_set_to_cn_url ${url})
  log "Building and installing ${directory}."
  pushd "${workdir}" || exit
  download_tar_and_untar_if_not_exists ${directory} ${file} "${url}"
  pushd ${directory} || exit

  cmake ./cpp \
    -DCMAKE_PREFIX_PATH="${install_prefix}" \
    -DCMAKE_INSTALL_PREFIX="${install_prefix}" \
    -DARROW_COMPUTE=ON \
    -DARROW_WITH_UTF8PROC=OFF \
    -DARROW_CSV=ON \
    -DARROW_CUDA=OFF \
    -DARROW_DATASET=OFF \
    -DARROW_FILESYSTEM=ON \
    -DARROW_FLIGHT=OFF \
    -DARROW_GANDIVA=OFF \
    -DARROW_GANDIVA_JAVA=OFF \
    -DARROW_HDFS=OFF \
    -DARROW_HIVESERVER2=OFF \
    -DARROW_JSON=OFF \
    -DARROW_ORC=OFF \
    -DARROW_PARQUET=OFF \
    -DARROW_PLASMA=OFF \
    -DARROW_PLASMA_JAVA_CLIENT=OFF \
    -DARROW_PYTHON=OFF \
    -DARROW_S3=OFF \
    -DARROW_WITH_BZ2=OFF \
    -DARROW_WITH_ZLIB=OFF \
    -DARROW_WITH_LZ4=OFF \
    -DARROW_WITH_SNAPPY=OFF \
    -DARROW_WITH_ZSTD=OFF \
    -DARROW_WITH_BROTLI=OFF \
    -DARROW_IPC=ON \
    -DARROW_BUILD_BENCHMARKS=OFF \
    -DARROW_BUILD_EXAMPLES=OFF \
    -DARROW_BUILD_INTEGRATION=OFF \
    -DARROW_BUILD_UTILITIES=OFF \
    -DARROW_BUILD_TESTS=OFF \
    -DARROW_ENABLE_TIMING_TESTS=OFF \
    -DARROW_FUZZING=OFF \
    -DARROW_USE_ASAN=OFF \
    -DARROW_USE_TSAN=OFF \
    -DARROW_USE_UBSAN=OFF \
    -DARROW_JEMALLOC=OFF \
    -DARROW_BUILD_SHARED=ON \
    -DARROW_BUILD_STATIC=OFF
  make -j$(nproc)
  make install
  popd || exit
  popd || exit
  cleanup_files "${workdir}/${directory}" "${workdir}/${file}"
}

install_boost() {
  workdir=$1
  install_prefix=$2

  if [[ -f "${install_prefix}/include/boost/version.hpp" ]]; then
    log "boost already installed, skip."
    return 0
  fi

  directory="boost_1_74_0"
  file="${directory}.tar.gz"
  url="https://boostorg.jfrog.io/artifactory/main/release/1.74.0/source"
  url=$(maybe_set_to_cn_url ${url})
  log "Building and installing ${directory}."
  pushd "${workdir}" || exit
  download_tar_and_untar_if_not_exists ${directory} ${file} "${url}"
  pushd ${directory} || exit

  ./bootstrap.sh --prefix="${install_prefix}" \
    --with-libraries=system,filesystem,context,program_options,regex,thread,random,chrono,atomic,date_time
  ./b2 install link=shared runtime-link=shared variant=release threading=multi
  popd || exit
  popd || exit
  cleanup_files "${workdir}/${directory}" "${workdir}/${file}"
}

install_openssl() {
  workdir=$1
  install_prefix=$2

  if [[ -f "${install_prefix}/include/openssl/ssl.h" ]]; then
    log "openssl already installed, skip."
    return 0
  fi

  directory="openssl-OpenSSL_1_1_1h"
  file="OpenSSL_1_1_1h.tar.gz"
  url="https://github.com/openssl/openssl/archive"
  url=$(maybe_set_to_cn_url ${url})
  log "Building and installing ${directory}."
  pushd "${workdir}" || exit
  download_tar_and_untar_if_not_exists ${directory} ${file} "${url}"
  pushd ${directory} || exit

  ./config --prefix="${install_prefix}" -fPIC -shared
  make -j$(nproc)
  make install
  popd || exit
  popd || exit
  cleanup_files "${workdir}/${directory}" "${workdir}/${file}"
}

install_zlib() {
  workdir=$1
  install_prefix=$2

  if [[ -f "${install_prefix}/include/zlib.h" ]]; then
    log "zlib already installed, skip."
    return 0
  fi

  directory="zlib-1.2.11"
  file="v1.2.11.tar.gz"
  url="https://github.com/madler/zlib/archive"
  url=$(maybe_set_to_cn_url ${url})
  log "Building and installing ${directory}."
  pushd "${workdir}" || exit
  download_tar_and_untar_if_not_exists ${directory} ${file} "${url}"
  pushd ${directory} || exit

  cmake . -DCMAKE_INSTALL_PREFIX="${install_prefix}" \
          -DCMAKE_PREFIX_PATH="${install_prefix}" \
          -DBUILD_SHARED_LIBS=ON
  make -j$(nproc)
  make install
  popd || exit
  popd || exit
  cleanup_files "${workdir}/${directory}" "${workdir}/${file}"
}

install_protobuf() {
  workdir=$1
  install_prefix=$2

  if [[ -f "${install_prefix}/include/google/protobuf/port.h" ]]; then
    log "protobuf already installed, skip."
    return 0
  fi

  directory="protobuf-21.9"
  file="protobuf-all-21.9.tar.gz"
  url="https://github.com/protocolbuffers/protobuf/releases/download/v21.9"
  url=$(maybe_set_to_cn_url ${url})
  log "Building and installing ${directory}."
  pushd "${workdir}" || exit
  download_tar_and_untar_if_not_exists ${directory} ${file} "${url}"
  pushd ${directory} || exit

  ./configure --prefix="${install_prefix}" --enable-shared --disable-static
  make -j$(nproc)
  make install
  ldconfig
  popd || exit
  popd || exit
  cleanup_files "${workdir}/${directory}" "${workdir}/${file}"
}

install_grpc() {
  workdir=$1
  install_prefix=$2

  if [[ -f "${install_prefix}/include/grpcpp/grpcpp.h" ]]; then
    log "grpc already installed, skip."
    return 0
  fi

  directory="grpc"
  branch="v1.49.1"
  file="${directory}-${branch}.tar.gz"
  url="https://github.com/grpc/grpc.git"
  url=$(maybe_set_to_cn_url ${url})
  log "Building and installing ${directory}."
  pushd "${workdir}" || exit
  if [[ ${url} == *.git ]]; then
    clone_if_not_exists ${directory} ${file} "${url}" ${branch}
  else
    download_tar_and_untar_if_not_exists ${directory} ${file} "${url}"
  fi
  pushd ${directory} || exit

  cmake . -DCMAKE_INSTALL_PREFIX="${install_prefix}" \
          -DCMAKE_PREFIX_PATH="${install_prefix}" \
          -DBUILD_SHARED_LIBS=ON \
          -DgRPC_INSTALL=ON \
          -DgRPC_BUILD_TESTS=OFF \
          -DgRPC_BUILD_CSHARP_EXT=OFF \
          -DgRPC_BUILD_GRPC_CSHARP_PLUGIN=OFF \
          -DgRPC_BUILD_GRPC_NODE_PLUGIN=OFF \
          -DgRPC_BUILD_GRPC_OBJECTIVE_C_PLUGIN=OFF \
          -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF \
          -DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF \
          -DgRPC_BUILD_GRPC_RUBY_PLUGIN=OFF \
          -DgRPC_BACKWARDS_COMPATIBILITY_MODE=ON \
          -DgRPC_PROTOBUF_PROVIDER=package \
          -DgRPC_ZLIB_PROVIDER=package \
          -DgRPC_SSL_PROVIDER=package \
          -DOPENSSL_ROOT_DIR="${install_prefix}" \
          -DCMAKE_CXX_FLAGS="-fpermissive" \
          -DPNG_ARM_NEON_OPT=0
  make -j$(nproc)
  make install
  popd || exit
  popd || exit
  cleanup_files "${workdir}/${directory}" "${workdir}/${file}"
}

install_cppkafka() {
  workdir=$1
  install_prefix=$2

  if [[ -f "${install_prefix}/include/cppkafka/cppkafka.h" ]]; then
    log "cppkafka already installed, skip."
    return 0
  fi

  directory="cppkafka-0.4.0"
  file="0.4.0.tar.gz"
  url="https://github.com/mfontanini/cppkafka/archive/refs/tags"
  url=$(maybe_set_to_cn_url ${url})
  log "Building and installing ${directory}."
  pushd "${workdir}" || exit
  download_tar_and_untar_if_not_exists ${directory} ${file} "${url}"
  pushd ${directory} || exit

  # cppkafka may not find the lib64 directory
  export LIBRARY_PATH=${LIBRARY_PATH}:${install_prefix}/lib:${install_prefix}/lib64

  cmake . -DCMAKE_INSTALL_PREFIX="${install_prefix}" \
          -DCMAKE_PREFIX_PATH="${install_prefix}" \
          -DCPPKAFKA_DISABLE_TESTS=ON  \
          -DCPPKAFKA_DISABLE_EXAMPLES=ON
  make -j4
  make install
  popd || exit
  popd || exit
  cleanup_files "${workdir}/${directory}" "${workdir}/${file}"
}

install_maven() {
  workdir=$1
  install_prefix=$2

  if [[ -f "${install_prefix}/bin/mvn" ]]; then
    log "maven already installed, skip."
    return 0
  fi

  directory="apache-maven-3.8.6"
  file="apache-maven-3.8.6-bin.tar.gz"
  url="https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries"
  url=$(maybe_set_to_cn_url ${url})
  log "Building and installing ${directory}."
  pushd "${workdir}" || exit
  download_tar_and_untar_if_not_exists ${directory} ${file} "${url}"
  cp -r ${directory} "${install_prefix}"/

  mkdir -p "${install_prefix}"/bin
  ln -s "${install_prefix}/${directory}/bin/mvn" "${install_prefix}/bin/mvn"
  popd || exit
  cleanup_files "${workdir}/${directory}" "${workdir}/${file}"
}

# src/lib/install_vineyard.sh
install_vineyard() {
  workdir=$1
  install_prefix=$2
  v6d_version=$3
  jobs=${4:-4} # $4:default=4
  V6D_PREFIX="/opt/vineyard"  # fixed, related to coordinator/setup.py

  if command -v vineyardd &> /dev/null && \
     [[ $(vineyardd --version 2>&1 | awk '{print "v"$3}') == "${v6d_version}" ]]; then
    log "vineyard ${v6d_version} already installed, skip."
    return 0
  fi

  directory="v6d"
  branch=${v6d_version}
  file="${directory}-${branch}.tar.gz"
  url="https://github.com/v6d-io/v6d.git"
  url=$(maybe_set_to_cn_url ${url})
  log "Building and installing ${directory}."
  pushd "${workdir}" || exit
  if [[ ${url} == *.git ]]; then
    clone_if_not_exists ${directory} "${file}" "${url}" "${branch}"
  else
    download_tar_and_untar_if_not_exists ${directory} "${file}" "${url}"
  fi
  pushd ${directory} || exit

  cmake . -DCMAKE_PREFIX_PATH="${install_prefix}" \
        -DCMAKE_INSTALL_PREFIX="${V6D_PREFIX}" \
        -DBUILD_VINEYARD_TESTS=OFF \
        -DBUILD_SHARED_LIBS=ON \
        -DBUILD_VINEYARD_PYTHON_BINDINGS=ON
  make -j${jobs}
  make install
  strip "${V6D_PREFIX}"/bin/vineyard* "${V6D_PREFIX}"/lib/libvineyard*
  python3 setup.py bdist_wheel
  python3 setup_io.py bdist_wheel
  pip3 install dist/*
  cp -rs "${V6D_PREFIX}"/* "${install_prefix}"/
  popd || exit
  popd || exit
  cleanup_files "${workdir}/${directory}" "${workdir}/${file}"
}

# src/lib/log.sh
err() {
  echo -e "$(red_bold "[ERROR] $*")" >&2
}

warning() {
  echo -e "$(yellow_bold "[WARNING] $*")" >&1
}

log() {
  echo -e "$(green "$*")" >&1
}

succ() {
  echo -e "$(green_bold "[SUCCESS]: $*")" >&1
}

# src/lib/util.sh
# refer from https://github.com/pypa/manylinux/blob/b4884d90c984cb17f7cb4aabe3509347698d7ee7/docker/build_scripts/build_utils.sh#L26
function fetch_source {
    local file=$1
    local url=$2
    if [ -f "${file}" ]; then
        echo "${file} exists, skipping fetch"
    else
        curl -fsSL -o "${file}" "${url}/${file}"
        # Use sock5s proxy to download files in case download fails in normal cases
        # `host.docker.internal` is the localhost of host machine from a container's perspective.
        # See https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host
        # curl -fsSL -o ${file} ${url}/${file} || curl -x socks5h://host.docker.internal:13659 -fsSL -o ${file} ${url}/${file}
    fi
}

function download_tar_and_untar_if_not_exists {
    local directory=$1
    local file=$2
    local url=$3
    if [ ! -d "${directory}" ]; then
      [ ! -f "${file}" ] &&
        fetch_source "${file}" "${url}"
      tar zxf "${file}"
    fi
}

function clone_if_not_exists {
    local directory=$1
    local file=$2
    local url=$3
    local branch=$4
    if [ ! -d "${directory}" ]; then
      if [ ! -f "${file}" ]; then
        git clone --depth=1 --branch "${branch}" "${url}" "${directory}"
        pushd "${directory}" || exit
        git submodule update --init || true
        popd || exit
      else
        tar zxf "${file}"
      fi
    fi
}

function cleanup_files {
  if [ "${GRAPHSCOPE_NO_INSTALL_CLEANUP}" != "true" ]; then
    log "Cleaning up intermediate files [$*]"
    log "Disable this behaviour by setting GRAPHSCOPE_NO_INSTALL_CLEANUP=true."
    for file in "$@"
    do
        log "Cleaning up ${file}"
        if [ -f "${file}" ]; then
          rm -rf "${file}"
        fi
    done
  fi
}

function maybe_set_to_cn_url {
  local url=$1
  if [ "${GRAPHSCOPE_DOWNLOAD_FROM_CN}" == "true" ]; then
    url="https://graphscope.oss-cn-beijing.aliyuncs.com/dependencies"
  fi
  echo ${url}
}

# :command.command_functions
# :command.function
gs_build_command() {
  # src/build_command.sh
  echo "# this file is located in 'src/build_command.sh'"
  echo "# code for 'gs build' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
gs_build_image_command() {
  # src/build_image_command.sh
  echo "# this file is located in 'src/build_image_command.sh'"
  echo "# code for 'gs build-image' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
  image_name=${args[image]}

  log "image to be built: ${image_name}"
}

# :command.function
gs_dev_command() {
  # src/dev_command.sh
  inspect_args

  local=${args[--local]}
  if [[ -n $local ]]; then
      echo "local=" $local
  else
      echo "No local assigned, use default `pwd` to mount as working directory."
      local=`pwd`
  fi

  #docker pull graphscope/graphscope-dev
  docker run \
      --net=host \
      -it graphscope/graphscope-dev \
      /bin/bash

      # -v $local:/home/graphscope/workspace

}

# :command.function
gs_install_deps_command() {
  # src/install_deps_command.sh
  inspect_args

  type=${args[type]}
  cn=${args[--cn]}
  install_prefix=${args[--install-prefix]}
  deps_prefix=${args[--from-local]}

  only_grape_v6d=${args[--only-grape-v6d]}
  no_grape_v6d=${args[--no-grape-v6d]}

  v6d_version=${args[--v6d-version]}

  jobs=${args[--jobs]}

  if [[ $(id -u) -ne 0 ]]; then
    warning "Not running as root."
  else
    warning "Please note that I am running as root."
  fi

  readonly OS=$(get_os_version)
  readonly OS_PLATFORM=${OS%-*}
  readonly OS_VERSION=${OS#*-}

  readonly OUTPUT_ENV_FILE="${HOME}/.graphscope_env"

  BASIC_PACKAGES_TO_INSTALL=

  log "Installing ${type} dependencies for GraphScope on ${OS}..."

  if [[ -n ${cn} ]]; then
    log "Set to speed up downloading for CN locations."
    # export some mirror locations for CN, e.g., brew/docker...
    export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"
    export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"
    export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"
    export GRAPHSCOPE_DOWNLOAD_FROM_CN="true"
  fi

  if [[ -n ${only_grape_v6d} ]]; then
    log "Only install libgrape-lite and vineyard."
    if [[ "${OS_PLATFORM}" == *"Darwin"* ]]; then
      install_grape_vineyard_macos
    else
      install_grape_vineyard_linux
    fi
    exit 0
  fi

  check_os_compatibility() {
    if [[ "${OS_PLATFORM}" != *"Ubuntu"* && "${OS_PLATFORM}" != *"CentOS"* && "${OS_PLATFORM}" != *"Darwin"* ]]; then
      err "The script is only support platforms of Ubuntu/CentOS/macOS"
      exit 1
    fi

    if [[ "${OS_PLATFORM}" == *"Ubuntu"* && "${OS_VERSION:0:2}" -lt "20" ]]; then
      err "The version of Ubuntu is ${OS_VERSION}. This script requires Ubuntu 20 or greater."
      exit 1
    fi

    if [[ "${OS_PLATFORM}" == *"CentOS"* && "${OS_VERSION}" -lt "7" ]]; then
      err "The version of CentOS is ${OS_VERSION}. This script requires CentOS 8 or greater."
      exit 1
    fi

    log "Running on ${OS_PLATFORM} ${OS_VERSION}"
  }

  init_basic_packages() {
    if [[ "${OS_PLATFORM}" == *"Ubuntu"* ]]; then
      BASIC_PACKAGES_TO_INSTALL=(
        curl
        wget
        git
        cmake
        build-essential
        lsb-release
        libopenmpi-dev
        libgflags-dev
        libgoogle-glog-dev
        libboost-all-dev
        libprotobuf-dev
        libgrpc++-dev
        protobuf-compiler-grpc
        python3-pip
        libunwind-dev
        rapidjson-dev
        libmsgpack-dev
        librdkafka-dev
        llvm-11-dev
        lld-11
        clang-11
      )
    elif [[ "${OS_PLATFORM}" == *"CentOS"* ]]; then
      BASIC_PACKAGES_TO_INSTALL=(
        epel-release
        perl
        which
        sudo
        curl
        wget
        git
        libunwind-devel
        librdkafka-devel
      )
      if [[ "${OS_VERSION}" -eq "8" ]]; then
        ADDITIONAL_PACKAGES=(
          gcc-c++
          python38-devel
          rapidjson-devel
          msgpack-devel
          openssl-devel
          boost-devel
          gflags-devel
          glog-devel
          llvm
          lld
          clang
        )
      elif [[ "${OS_VERSION}" -eq "7" ]]; then
        BASIC_PACKAGES_TO_INSTALL+=(centos-release-scl-rh)
        ADDITIONAL_PACKAGES=(
          devtoolset-10-gcc-c++
          rh-python38-python-pip
          rh-python38-python-devel
          rapidjson-devel
          msgpack-devel
          llvm
          clang
        )
      fi
    else # darwin
      BASIC_PACKAGES_TO_INSTALL=(
        boost
        gflags
        glog
        open-mpi
        openssl@1.1
        protobuf
        grpc
        rapidjson
        msgpack-cxx
        librdkafka
      )
    fi
    readonly BASIC_PACKAGES_TO_INSTALL
  }

  install_grape_vineyard_linux() {
    log "Installing python packages for vineyard codegen."
    pip3 --no-cache-dir install pip -U --user
    pip3 --no-cache-dir install libclang wheel --user
    install_grape "${deps_prefix}" "${install_prefix}" "${jobs}"
    install_vineyard "${deps_prefix}" "${install_prefix}" "${v6d_version}" "${jobs}"
  }

  install_grape_vineyard_macos() {
    brew install libgrape-lite vineyard
  }

  install_cppkafka_universal() {
    log "Building and installing cppkafka."

    if [[ "${OS_PLATFORM}" == *"Darwin"* ]]; then
      homebrew_prefix=$(brew --prefix)
      export LDFLAGS="-L${homebrew_prefix}/opt/openssl@1.1/lib"
      export CPPFLAGS="-I${homebrew_prefix}/opt/openssl@1.1/include"
      export PKG_CONFIG_PATH="${homebrew_prefix}/opt/openssl@1.1/lib/pkgconfig"
    fi

    install_cppkafka "${deps_prefix}" "${install_prefix}"
  }

  install_rust_universal() {
    if ! command -v rustup &>/dev/null; then
      log "Installing rust."
      curl -sf -L https://static.rust-lang.org/rustup.sh | sh -s -- -y --profile minimal
    fi
  }

  install_java_maven_ubuntu() {
    if ! command -v javac &>/dev/null; then
      log "Installing default-jdk"
      sudo apt-get install default-jdk -y
    fi
    if ! command -v mvn &>/dev/null; then
      log "Installing maven"
      sudo apt-get install maven -y
    fi
  }

  install_java_maven_centos() {
    if ! command -v javac &>/dev/null; then
      log "Installing java-1.8.0-openjdk-devel"
      sudo yum install java-1.8.0-openjdk-devel -y
    fi
    if ! command -v mvn &>/dev/null; then
      log "Installing maven"
      install_maven  "${deps_prefix}" "${install_prefix}"
    fi
  }

  install_java_maven_macos() {
    if ! command -v javac &>/dev/null; then
      log "Installing openjdk@11"
      # we need arm64-base jvm, install from brew.
      brew install --ignore-dependencies openjdk@11
    fi
    if ! command -v mvn &>/dev/null; then
      log "Installing maven"
      brew install --ignore-dependencies maven
    fi
  }

  install_apache_arrow_ubuntu() {
    log "Installing apache-arrow."
    # shellcheck disable=SC2046,SC2019,SC2018
    wget -c https://apache.jfrog.io/artifactory/arrow/"$(lsb_release --id --short | tr 'A-Z' 'a-z')"/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb \
      -P /tmp/
    sudo apt-get install -y -V /tmp/apache-arrow-apt-source-latest-"$(lsb_release --codename --short)".deb
    sudo apt-get update -y && sudo apt-get install -y libarrow-dev
    rm /tmp/apache-arrow-apt-source-latest-*.deb
  }

  install_deps_ubuntu() {
    log "Installing packages ${BASIC_PACKAGES_TO_INSTALL[*]}"
    # shellcheck disable=SC2086
    sudo apt-get update -y
    DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC sudo apt-get install -y ${BASIC_PACKAGES_TO_INSTALL[*]}

    install_apache_arrow_ubuntu
    install_java_maven_ubuntu
  }

  install_deps_centos_pre() {
      log "Installing packages ${BASIC_PACKAGES_TO_INSTALL[*]}"
      # shellcheck disable=SC2086
      sudo yum install -y ${BASIC_PACKAGES_TO_INSTALL[*]}
      log "Installing packages ${BASIC_PACKAGES_TO_INSTALL[*]}"
      # shellcheck disable=SC2086
      sudo yum install -y ${ADDITIONAL_PACKAGES[*]}
      install_cmake  "${deps_prefix}" "${install_prefix}"
  }

  install_deps_centos_after() {
    install_apache_arrow "${deps_prefix}" "${install_prefix}"
    install_open_mpi "${deps_prefix}" "${install_prefix}"
    install_protobuf "${deps_prefix}" "${install_prefix}"
    install_zlib "${deps_prefix}" "${install_prefix}"
    install_grpc "${deps_prefix}" "${install_prefix}"

    install_java_maven_centos
  }
  install_deps_centos7() {
    install_deps_centos_pre

    source /opt/rh/devtoolset-10/enable
    source /opt/rh/rh-python38/enable
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${install_prefix}/lib:${install_prefix}/lib64

    install_gflags "${deps_prefix}" "${install_prefix}"
    install_glog "${deps_prefix}" "${install_prefix}"
    install_boost "${deps_prefix}" "${install_prefix}"
    install_openssl "${deps_prefix}" "${install_prefix}"

    install_deps_centos_after
  }

  install_deps_centos8() {
    sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
    sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
    sudo yum install -y 'dnf-command(config-manager)'
    sudo dnf install -y epel-release
    sudo dnf config-manager --set-enabled epel
    sudo dnf config-manager --set-enabled powertools

    install_deps_centos_pre
    install_deps_centos_after
  }

  install_deps_macos() {
    log "Installing packages ${BASIC_PACKAGES_TO_INSTALL[*]}"
    export HOMEBREW_NO_INSTALL_CLEANUP=1
    export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
    # shellcheck disable=SC2086
    brew install ${BASIC_PACKAGES_TO_INSTALL[*]}

    brew install llvm || true  # prevent the `brew link` failure

    install_java_maven_macos

    homebrew_prefix=$(brew --prefix)
    export OPENSSL_ROOT_DIR=${homebrew_prefix}/opt/openssl
    export OPENSSL_LIBRARIES=${homebrew_prefix}/opt/openssl/lib
    export OPENSSL_SSL_LIBRARY=${homebrew_prefix}/opt/openssl/lib/libssl.dylib
    export CC=${homebrew_prefix}/opt/llvm/bin/clang
    export CXX=${homebrew_prefix}/opt/llvm/bin/clang++
    export CARGO_TARGET_X86_64_APPLE_DARWIN_LINKER=${CC}
    export CPPFLAGS=-I${homebrew_prefix}/opt/llvm/include
  }

  install_dependencies() {
    # install dependencies for specific platforms.
    if [[ "${OS_PLATFORM}" == *"Darwin"* ]]; then
      install_deps_macos
      if [[ -z ${no_grape_v6d} ]]; then
        install_grape_vineyard_macos
      fi
    else
      if [[ "${OS_PLATFORM}" == *"Ubuntu"* ]]; then
        install_deps_ubuntu
      elif [[ "${OS_PLATFORM}" == *"CentOS"* ]]; then
        if [[ "${OS_VERSION}" -eq "8" ]]; then
          install_deps_centos8
        elif [[ "${OS_VERSION}" -eq "7" ]]; then
          install_deps_centos7
        fi
      fi
      if [[ -z ${no_grape_v6d} ]]; then
        install_grape_vineyard_linux
      fi
    fi

    install_rust_universal
    install_cppkafka_universal

    log "Output environments config file ${OUTPUT_ENV_FILE}"
    write_env_config
  }

  write_env_config() {
    if [ -f "${OUTPUT_ENV_FILE}" ]; then
      warning "Found ${OUTPUT_ENV_FILE} exists, remove the environment config file and generate a new one."
      rm -f "${OUTPUT_ENV_FILE}"
    fi

    if [[ "${OS_PLATFORM}" == *"Darwin"* ]]; then
      homebrew_prefix=$(brew --prefix)
      {
        echo "export CC=${homebrew_prefix}/opt/llvm/bin/clang"
        echo "export CXX=${homebrew_prefix}/opt/llvm/bin/clang++"
        echo "export CARGO_TARGET_X86_64_APPLE_DARWIN_LINKER=${CC}"
        if [ -z "${JAVA_HOME}" ]; then
          echo "export JAVA_HOME=\$(/usr/libexec/java_home -v11)"
        fi
        echo "export PATH=${install_prefix}/bin:\$HOME/.cargo/bin:\${JAVA_HOME}/bin:\$PATH"
        echo "export OPENSSL_ROOT_DIR=${homebrew_prefix}/opt/openssl"
        echo "export OPENSSL_LIBRARIES=${homebrew_prefix}/opt/openssl/lib"
        echo "export OPENSSL_SSL_LIBRARY=${homebrew_prefix}/opt/openssl/lib/libssl.dylib"
        echo "export LDFLAGS=\"-L${homebrew_prefix}/opt/llvm/lib\""
        echo "export CPPFLAGS=\"-I${homebrew_prefix}/opt/llvm/include\""
      } >>"${OUTPUT_ENV_FILE}"

    elif [[ "${OS_PLATFORM}" == *"Ubuntu"* ]]; then
      {
        echo "export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}"
        if [ -z "${JAVA_HOME}" ]; then
          echo "export JAVA_HOME=/usr/lib/jvm/default-java"
        fi
        echo "export PATH=${install_prefix}/bin:\${JAVA_HOME}/bin:\$HOME/.cargo/bin:\$PATH"
      } >>"${OUTPUT_ENV_FILE}"
    else
      {
        if [[ "${OS_VERSION}" -eq "7" ]]; then
          echo "source /opt/rh/devtoolset-10/enable"
          echo "source /opt/rh/rh-python38/enable"
        fi
        echo "export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}"
        if [ -z "${JAVA_HOME}" ]; then
          echo "export JAVA_HOME=/usr/lib/jvm/java"
        fi
        echo "export PATH=${install_prefix}/bin:\${JAVA_HOME}/bin:\$HOME/.cargo/bin:\$PATH"
      } >>"${OUTPUT_ENV_FILE}"
    fi
  }

  init_workspace_and_env() {
    mkdir -p "${install_prefix}"
    mkdir -p "${deps_prefix}"
    export PATH=${install_prefix}/bin:${PATH}
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${install_prefix}/lib:${install_prefix}/lib64
  }

  install_deps_for_dev() {
    # install_deps for development on local
    check_os_compatibility

    init_basic_packages

    init_workspace_and_env

    install_dependencies

    succ "The script has installed all dependencies for building GraphScope, use commands:\n
    $ source ${OUTPUT_ENV_FILE}
    $ make install\n
    to build and develop GraphScope."
  }

  install_deps_for_client() {
    # install python..
    # TODO: refine
    pip3 --no-cache-dir install -U pip --user
    pip3 --no-cache-dir install auditwheel==5.0.0 daemons etcd-distro gremlinpython \
            hdfs3 fsspec oss2 s3fs ipython kubernetes libclang networkx==2.4 numpy pandas parsec pycryptodome \
            pyorc pytest scipy scikit_learn wheel --user
    pip3 --no-cache-dir install Cython --pre -U --user
  }

  # run subcommand with the type
  install_deps_for_"${type}"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        gs_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export GRAPHSCOPE_ENV="${GRAPHSCOPE_ENV:-dev}"

  if [[ -z "${GRAPHSCOPE_HOME:-}" ]]; then
    printf "missing required environment variable: GRAPHSCOPE_HOME\n" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    build | b)
      action="build"
      shift
      gs_build_parse_requirements "$@"
      shift $#
      ;;

    build-image | bi)
      action="build-image"
      shift
      gs_build_image_parse_requirements "$@"
      shift $#
      ;;

    dev | d)
      action="dev"
      shift
      gs_dev_parse_requirements "$@"
      shift $#
      ;;

    install-deps | i)
      action="install-deps"
      shift
      gs_install_deps_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      gs_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
gs_build_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        gs_build_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="build"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['component']+x} ]]; then

          args['component']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.whitelist_filter
  if [[ ! ${args['component']} =~ ^(all|analytical|interactive|learning|client|coordinator)$ ]]; then
    printf "%s\n" "component must be one of: all, analytical, interactive, learning, client, coordinator" >&2
    exit 1
  fi

}

# :command.parse_requirements
gs_build_image_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        gs_build_image_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v docker >/dev/null 2>&1; then
    printf "missing dependency: docker\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="build-image"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --cn)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--cn']="$2"
          shift
          shift
        else
          printf "%s\n" "--cn requires an argument: --cn CN" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['image']+x} ]]; then

          args['image']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['image']+x} ]]; then
    printf "missing required argument: IMAGE\nusage: gs build-image IMAGE [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ ! ${args['image']} =~ ^(graphscope-dev-base|graphscope-dev|coordinator|analytical|analytical-java|interactive|interactive-frontend|interactive-executor|learning|vineyard-dev|vineyard-runtime)$ ]]; then
    printf "%s\n" "image must be one of: graphscope-dev-base, graphscope-dev, coordinator, analytical, analytical-java, interactive, interactive-frontend, interactive-executor, learning, vineyard-dev, vineyard-runtime" >&2
    exit 1
  fi

}

# :command.parse_requirements
gs_dev_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        gs_dev_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v docker >/dev/null 2>&1; then
    printf "missing dependency: docker\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="dev"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --local | -l)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--local']="$2"
          shift
          shift
        else
          printf "%s\n" "--local requires an argument: --local, -l LOCAL" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
gs_install_deps_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        gs_install_deps_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install-deps"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --cn)

        # :flag.case_no_arg
        args['--cn']=1
        shift
        ;;

      # :flag.case
      --from-local | -l)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--from-local']="$2"
          shift
          shift
        else
          printf "%s\n" "--from-local requires an argument: --from-local, -l DIRECTORY" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --install-prefix)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--install-prefix']="$2"
          shift
          shift
        else
          printf "%s\n" "--install-prefix requires an argument: --install-prefix PREFIX" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --no-grape-v6d | -n)
        # :flag.conflicts
        if [[ -n "${args['--only-grape-v6d']:-}" ]]; then
          printf "conflicting options: %s cannot be used with %s\n" "$key" "--only-grape-v6d" >&2
          exit 1
        fi

        # :flag.case_no_arg
        args['--no-grape-v6d']=1
        shift
        ;;

      # :flag.case
      --only-grape-v6d | -o)
        # :flag.conflicts
        if [[ -n "${args['--no-grape-v6d']:-}" ]]; then
          printf "conflicting options: %s cannot be used with %s\n" "$key" "--no-grape-v6d" >&2
          exit 1
        fi

        # :flag.case_no_arg
        args['--only-grape-v6d']=1
        shift
        ;;

      # :flag.case
      --v6d-version)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--v6d-version']="$2"
          shift
          shift
        else
          printf "%s\n" "--v6d-version requires an argument: --v6d-version V6D-VERSION" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --jobs | -j)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--jobs']="$2"
          shift
          shift
        else
          printf "%s\n" "--jobs requires an argument: --jobs, -j JOBS" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['type']+x} ]]; then

          args['type']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['type']+x} ]]; then
    printf "missing required argument: TYPE\nusage: gs install-deps TYPE [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--from-local']:-} ]] || args['--from-local']="/tmp/gs-local-deps"
  [[ -n ${args['--install-prefix']:-} ]] || args['--install-prefix']="/opt/graphscope"
  [[ -n ${args['--v6d-version']:-} ]] || args['--v6d-version']="main"

  # :command.whitelist_filter
  if [[ ! ${args['type']} =~ ^(dev|client)$ ]]; then
    printf "%s\n" "type must be one of: dev, client" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export GRAPHSCOPE_ENV="${GRAPHSCOPE_ENV:-dev}"

  # src/initialize.sh

  bash_source_dir="$(dirname -- "$(readlink -f "${BASH_SOURCE}")")"

  if [ "${GRAPHSCOPE_ENV:-dev}" == "dev" ]; then
      warning "GRAPHSCOPE_ENV=dev, setting the environment for development. "
      echo
      warning "GRAPHSCOPE_HOME will set to source root ($bash_source_dir) for development."
      warning "To use you assigned GRAPHSCOPE_HOME, export GRAPHSCOPE_ENV=prod."
      echo
      export GRAPHSCOPE_HOME="$bash_source_dir"
  elif [ "${GRAPHSCOPE_ENV:-dev}" == "prod" ]; then
      log "read the env: GRAPHSCOPE_ENV=prod"
  else
      err "Invalid GRAPHSCOPE_ENV. (should be dev or prod)"
      exit 1
  fi
}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "build")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        gs_build_usage
      else
        gs_build_command
      fi
      ;;

    "build-image")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        gs_build_image_usage
      else
        gs_build_image_command
      fi
      ;;

    "dev")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        gs_dev_usage
      else
        gs_dev_command
      fi
      ;;

    "install-deps")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        gs_install_deps_usage
      else
        gs_install_deps_command
      fi
      ;;

  esac
}

initialize
run "$@"
